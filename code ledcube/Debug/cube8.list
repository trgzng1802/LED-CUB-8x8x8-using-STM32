
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004574  08004574  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004574  08004574  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800457c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  080045ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080045ec  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005adb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001434  00000000  00000000  00025b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00026fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00027628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185f3  00000000  00000000  00027bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080cd  00000000  00000000  000401e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881c7  00000000  00000000  000482b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fec  00000000  00000000  000d04c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004388 	.word	0x08004388

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004388 	.word	0x08004388

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	801a      	strh	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800029c:	2390      	movs	r3, #144	; 0x90
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2102      	movs	r1, #2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fecc 	bl	8002040 <HAL_GPIO_ReadPin>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d10c      	bne.n	80002c6 <HAL_GPIO_EXTI_Callback+0x36>
  {
	  if (currentEffect < 10) currentEffect++;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b09      	cmp	r3, #9
 80002b2:	dc05      	bgt.n	80002c0 <HAL_GPIO_EXTI_Callback+0x30>
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	1c5a      	adds	r2, r3, #1
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	e002      	b.n	80002c6 <HAL_GPIO_EXTI_Callback+0x36>
	  else currentEffect = 0;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
  }
  HAL_Delay(200);
 80002c6:	20c8      	movs	r0, #200	; 0xc8
 80002c8:	f001 fc50 	bl	8001b6c <HAL_Delay>
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000108 	.word	0x20000108

080002d8 <TransmitData>:

void TransmitData(uint8_t* data) //ok
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80002e0:	2390      	movs	r3, #144	; 0x90
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2200      	movs	r2, #0
 80002e6:	2140      	movs	r1, #64	; 0x40
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fec6 	bl	800207a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data, 9, 10);
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <TransmitData+0x38>)
 80002f2:	230a      	movs	r3, #10
 80002f4:	2209      	movs	r2, #9
 80002f6:	f002 fc91 	bl	8002c1c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 80002fa:	2390      	movs	r3, #144	; 0x90
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	0018      	movs	r0, r3
 8000304:	f001 feb9 	bl	800207a <HAL_GPIO_WritePin>
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000008c 	.word	0x2000008c

08000314 <mergeData>:

void mergeData(uint8_t column_data[], uint8_t layer_data) //ok
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	000a      	movs	r2, r1
 800031e:	1cfb      	adds	r3, r7, #3
 8000320:	701a      	strb	r2, [r3, #0]
	dataOut[0] = layer_data;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <mergeData+0x48>)
 8000324:	1cfa      	adds	r2, r7, #3
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 800032a:	2301      	movs	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e00c      	b.n	800034a <mergeData+0x36>
	{
		dataOut[i] = column_data[i-1];
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b01      	subs	r3, #1
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	18d3      	adds	r3, r2, r3
 8000338:	7819      	ldrb	r1, [r3, #0]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <mergeData+0x48>)
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	1c0a      	adds	r2, r1, #0
 8000342:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3301      	adds	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	2b08      	cmp	r3, #8
 800034e:	ddef      	ble.n	8000330 <mergeData+0x1c>
	}
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b004      	add	sp, #16
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	200000fc 	.word	0x200000fc

08000360 <lightCube>:

void lightCube() //ok
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
	for (int i = 0;  i < 8; i++)
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	e022      	b.n	80003b2 <lightCube+0x52>
	{
		for (int j = 0; j < 8; j++)
 800036c:	2300      	movs	r3, #0
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	e007      	b.n	8000382 <lightCube+0x22>
		{
			column[i] = 0xff;
 8000372:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <lightCube+0x64>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	18d3      	adds	r3, r2, r3
 8000378:	22ff      	movs	r2, #255	; 0xff
 800037a:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	3301      	adds	r3, #1
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	2b07      	cmp	r3, #7
 8000386:	ddf4      	ble.n	8000372 <lightCube+0x12>
		}
		layer = 0x80 >> i;
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	411a      	asrs	r2, r3
 800038e:	0013      	movs	r3, r2
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <lightCube+0x68>)
 8000394:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <lightCube+0x68>)
 8000398:	781a      	ldrb	r2, [r3, #0]
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <lightCube+0x64>)
 800039c:	0011      	movs	r1, r2
 800039e:	0018      	movs	r0, r3
 80003a0:	f7ff ffb8 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <lightCube+0x6c>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f7ff ff96 	bl	80002d8 <TransmitData>
	for (int i = 0;  i < 8; i++)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b07      	cmp	r3, #7
 80003b6:	ddd9      	ble.n	800036c <lightCube+0xc>
	}
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	200000f4 	.word	0x200000f4
 80003c8:	200000f0 	.word	0x200000f0
 80003cc:	200000fc 	.word	0x200000fc

080003d0 <clearCube>:

void clearCube() //ok
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	layer = 0x00;
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <clearCube+0x48>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003dc:	2300      	movs	r3, #0
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	e007      	b.n	80003f2 <clearCube+0x22>
	{
		column[i] = 0x00;
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <clearCube+0x4c>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	18d3      	adds	r3, r2, r3
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3301      	adds	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b07      	cmp	r3, #7
 80003f6:	ddf4      	ble.n	80003e2 <clearCube+0x12>
	}
	mergeData(column, layer);
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <clearCube+0x48>)
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <clearCube+0x4c>)
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f7ff ff87 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <clearCube+0x50>)
 8000408:	0018      	movs	r0, r3
 800040a:	f7ff ff65 	bl	80002d8 <TransmitData>
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	200000f0 	.word	0x200000f0
 800041c:	200000f4 	.word	0x200000f4
 8000420:	200000fc 	.word	0x200000fc

08000424 <upperCube>:

void upperCube() //ok
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	e007      	b.n	8000440 <upperCube+0x1c>
	{
		column[i] = 0xff;
 8000430:	4a17      	ldr	r2, [pc, #92]	; (8000490 <upperCube+0x6c>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	18d3      	adds	r3, r2, r3
 8000436:	22ff      	movs	r2, #255	; 0xff
 8000438:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3301      	adds	r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2b07      	cmp	r3, #7
 8000444:	ddf4      	ble.n	8000430 <upperCube+0xc>
	}
	for (int i = 0; i < 8; i++)
 8000446:	2300      	movs	r3, #0
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	e019      	b.n	8000480 <upperCube+0x5c>
	{
		layer = 0x01 << i;
 800044c:	2201      	movs	r2, #1
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	409a      	lsls	r2, r3
 8000452:	0013      	movs	r3, r2
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <upperCube+0x70>)
 8000458:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <upperCube+0x70>)
 800045c:	781a      	ldrb	r2, [r3, #0]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <upperCube+0x6c>)
 8000460:	0011      	movs	r1, r2
 8000462:	0018      	movs	r0, r3
 8000464:	f7ff ff56 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <upperCube+0x74>)
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ff34 	bl	80002d8 <TransmitData>
		HAL_Delay(delay);
 8000470:	23fa      	movs	r3, #250	; 0xfa
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fb79 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	2b07      	cmp	r3, #7
 8000484:	dde2      	ble.n	800044c <upperCube+0x28>
	}
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000f4 	.word	0x200000f4
 8000494:	200000f0 	.word	0x200000f0
 8000498:	200000fc 	.word	0x200000fc

0800049c <diagonalCube>:

void diagonalCube() //ok
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
	layer = 0x18;
 80004a2:	4b44      	ldr	r3, [pc, #272]	; (80005b4 <diagonalCube+0x118>)
 80004a4:	2218      	movs	r2, #24
 80004a6:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 80004a8:	2303      	movs	r3, #3
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e007      	b.n	80004be <diagonalCube+0x22>
	{
		column[i] = 0x18;
 80004ae:	4a42      	ldr	r2, [pc, #264]	; (80005b8 <diagonalCube+0x11c>)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	18d3      	adds	r3, r2, r3
 80004b4:	2218      	movs	r2, #24
 80004b6:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	ddf4      	ble.n	80004ae <diagonalCube+0x12>
	}
	mergeData(column, layer);
 80004c4:	4b3b      	ldr	r3, [pc, #236]	; (80005b4 <diagonalCube+0x118>)
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <diagonalCube+0x11c>)
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ff21 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80004d2:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <diagonalCube+0x120>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff feff 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 80004da:	20fa      	movs	r0, #250	; 0xfa
 80004dc:	f001 fb46 	bl	8001b6c <HAL_Delay>
	clearCube();
 80004e0:	f7ff ff76 	bl	80003d0 <clearCube>

	layer = 0x24;
 80004e4:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <diagonalCube+0x118>)
 80004e6:	2224      	movs	r2, #36	; 0x24
 80004e8:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 80004ea:	2302      	movs	r3, #2
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	e007      	b.n	8000500 <diagonalCube+0x64>
	{
		column[i] = 0x3c;
 80004f0:	4a31      	ldr	r2, [pc, #196]	; (80005b8 <diagonalCube+0x11c>)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	18d3      	adds	r3, r2, r3
 80004f6:	223c      	movs	r2, #60	; 0x3c
 80004f8:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	3301      	adds	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b05      	cmp	r3, #5
 8000504:	ddf4      	ble.n	80004f0 <diagonalCube+0x54>
	}
	mergeData(column, layer);
 8000506:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <diagonalCube+0x118>)
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <diagonalCube+0x11c>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff ff00 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <diagonalCube+0x120>)
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff fede 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 800051c:	20fa      	movs	r0, #250	; 0xfa
 800051e:	f001 fb25 	bl	8001b6c <HAL_Delay>
	clearCube();
 8000522:	f7ff ff55 	bl	80003d0 <clearCube>

	layer = 0x42;
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <diagonalCube+0x118>)
 8000528:	2242      	movs	r2, #66	; 0x42
 800052a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 800052c:	2301      	movs	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	e007      	b.n	8000542 <diagonalCube+0xa6>
	{
		column[i] = 0x7e;
 8000532:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <diagonalCube+0x11c>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	227e      	movs	r2, #126	; 0x7e
 800053a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3301      	adds	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b06      	cmp	r3, #6
 8000546:	ddf4      	ble.n	8000532 <diagonalCube+0x96>
	}
	mergeData(column, layer);
 8000548:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <diagonalCube+0x118>)
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <diagonalCube+0x11c>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff fedf 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <diagonalCube+0x120>)
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff febd 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 800055e:	20fa      	movs	r0, #250	; 0xfa
 8000560:	f001 fb04 	bl	8001b6c <HAL_Delay>
	clearCube();
 8000564:	f7ff ff34 	bl	80003d0 <clearCube>

	layer = 0x81;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <diagonalCube+0x118>)
 800056a:	2281      	movs	r2, #129	; 0x81
 800056c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	e007      	b.n	8000584 <diagonalCube+0xe8>
	{
		column[i]=  0xff;
 8000574:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <diagonalCube+0x11c>)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	18d3      	adds	r3, r2, r3
 800057a:	22ff      	movs	r2, #255	; 0xff
 800057c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b07      	cmp	r3, #7
 8000588:	ddf4      	ble.n	8000574 <diagonalCube+0xd8>
	}
	mergeData(column, layer);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <diagonalCube+0x118>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <diagonalCube+0x11c>)
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff febe 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <diagonalCube+0x120>)
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff fe9c 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 80005a0:	20fa      	movs	r0, #250	; 0xfa
 80005a2:	f001 fae3 	bl	8001b6c <HAL_Delay>
	clearCube();
 80005a6:	f7ff ff13 	bl	80003d0 <clearCube>
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b004      	add	sp, #16
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	200000f0 	.word	0x200000f0
 80005b8:	200000f4 	.word	0x200000f4
 80005bc:	200000fc 	.word	0x200000fc

080005c0 <sliderCube>:

void sliderCube() //ok
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	layer = 0xff;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <sliderCube+0x70>)
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	e025      	b.n	800061e <sliderCube+0x5e>
	{
		for (int j = 0; j < 8; j++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	e00c      	b.n	80005f2 <sliderCube+0x32>
		{
			column[j] = 0x01 << i;
 80005d8:	2201      	movs	r2, #1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	409a      	lsls	r2, r3
 80005de:	0013      	movs	r3, r2
 80005e0:	b2d9      	uxtb	r1, r3
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <sliderCube+0x74>)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	18d3      	adds	r3, r2, r3
 80005e8:	1c0a      	adds	r2, r1, #0
 80005ea:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	ddef      	ble.n	80005d8 <sliderCube+0x18>
		}
		mergeData(column, layer);
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <sliderCube+0x70>)
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <sliderCube+0x74>)
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff fe87 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <sliderCube+0x78>)
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff fe65 	bl	80002d8 <TransmitData>
		HAL_Delay(delay);
 800060e:	23fa      	movs	r3, #250	; 0xfa
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	0018      	movs	r0, r3
 8000614:	f001 faaa 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b07      	cmp	r3, #7
 8000622:	ddd6      	ble.n	80005d2 <sliderCube+0x12>
	}
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	200000f0 	.word	0x200000f0
 8000634:	200000f4 	.word	0x200000f4
 8000638:	200000fc 	.word	0x200000fc

0800063c <randomRainCube>:

void randomRainCube() //ok
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0

	srand(HAL_GetTick());
 8000642:	f001 fa89 	bl	8001b58 <HAL_GetTick>
 8000646:	0003      	movs	r3, r0
 8000648:	0018      	movs	r0, r3
 800064a:	f002 fde7 	bl	800321c <srand>
	int randomColumn[8];

		for(int j = 0; j < 8; j++)
 800064e:	2300      	movs	r3, #0
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000652:	e012      	b.n	800067a <randomRainCube+0x3e>
		{
			randomColumn[j] = rand() % 8;
 8000654:	f002 fe12 	bl	800327c <rand>
 8000658:	0003      	movs	r3, r0
 800065a:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <randomRainCube+0xd4>)
 800065c:	4013      	ands	r3, r2
 800065e:	d504      	bpl.n	800066a <randomRainCube+0x2e>
 8000660:	3b01      	subs	r3, #1
 8000662:	2208      	movs	r2, #8
 8000664:	4252      	negs	r2, r2
 8000666:	4313      	orrs	r3, r2
 8000668:	3301      	adds	r3, #1
 800066a:	0019      	movs	r1, r3
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	50d1      	str	r1, [r2, r3]
		for(int j = 0; j < 8; j++)
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	3301      	adds	r3, #1
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b07      	cmp	r3, #7
 800067e:	dde9      	ble.n	8000654 <randomRainCube+0x18>
		}
		for (int i = 0; i < 8; i++)
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
 8000684:	e03b      	b.n	80006fe <randomRainCube+0xc2>
		{
			column[randomColumn[i]] = 0x01 << rand() % 8;
 8000686:	f002 fdf9 	bl	800327c <rand>
 800068a:	0003      	movs	r3, r0
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <randomRainCube+0xd4>)
 800068e:	4013      	ands	r3, r2
 8000690:	d504      	bpl.n	800069c <randomRainCube+0x60>
 8000692:	3b01      	subs	r3, #1
 8000694:	2208      	movs	r2, #8
 8000696:	4252      	negs	r2, r2
 8000698:	4313      	orrs	r3, r2
 800069a:	3301      	adds	r3, #1
 800069c:	001a      	movs	r2, r3
 800069e:	2301      	movs	r3, #1
 80006a0:	4093      	lsls	r3, r2
 80006a2:	0019      	movs	r1, r3
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	58d3      	ldr	r3, [r2, r3]
 80006ac:	b2c9      	uxtb	r1, r1
 80006ae:	4a19      	ldr	r2, [pc, #100]	; (8000714 <randomRainCube+0xd8>)
 80006b0:	54d1      	strb	r1, [r2, r3]
	    	for (int j = 0; j < 8; j++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
 80006b6:	e017      	b.n	80006e8 <randomRainCube+0xac>
	    	{
			layer = 0x80 >> j;
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	411a      	asrs	r2, r3
 80006be:	0013      	movs	r3, r2
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <randomRainCube+0xdc>)
 80006c4:	701a      	strb	r2, [r3, #0]
	    	mergeData(column, layer);
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <randomRainCube+0xdc>)
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <randomRainCube+0xd8>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff fe20 	bl	8000314 <mergeData>
	    	TransmitData(dataOut);
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <randomRainCube+0xe0>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff fdfe 	bl	80002d8 <TransmitData>
	    	HAL_Delay(35);
 80006dc:	2023      	movs	r0, #35	; 0x23
 80006de:	f001 fa45 	bl	8001b6c <HAL_Delay>
	    	for (int j = 0; j < 8; j++)
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	3301      	adds	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	dde4      	ble.n	80006b8 <randomRainCube+0x7c>
	    	}
	    	HAL_Delay(20);
 80006ee:	2014      	movs	r0, #20
 80006f0:	f001 fa3c 	bl	8001b6c <HAL_Delay>
	    	clearCube();
 80006f4:	f7ff fe6c 	bl	80003d0 <clearCube>
		for (int i = 0; i < 8; i++)
 80006f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fa:	3301      	adds	r3, #1
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80006fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000700:	2b07      	cmp	r3, #7
 8000702:	ddc0      	ble.n	8000686 <randomRainCube+0x4a>
		}
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b00c      	add	sp, #48	; 0x30
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	80000007 	.word	0x80000007
 8000714:	200000f4 	.word	0x200000f4
 8000718:	200000f0 	.word	0x200000f0
 800071c:	200000fc 	.word	0x200000fc

08000720 <growShrinkCube>:

void growShrinkCube() //ok
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	b08d      	sub	sp, #52	; 0x34
 8000724:	af00      	add	r7, sp, #0

	uint8_t data1[9] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 8000726:	2124      	movs	r1, #36	; 0x24
 8000728:	187b      	adds	r3, r7, r1
 800072a:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <growShrinkCube+0xa8>)
 800072c:	ca11      	ldmia	r2!, {r0, r4}
 800072e:	c311      	stmia	r3!, {r0, r4}
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	701a      	strb	r2, [r3, #0]
	uint8_t data2[9] = {0x7e,0x00,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x00};
 8000734:	2518      	movs	r5, #24
 8000736:	197b      	adds	r3, r7, r5
 8000738:	4a24      	ldr	r2, [pc, #144]	; (80007cc <growShrinkCube+0xac>)
 800073a:	ca11      	ldmia	r2!, {r0, r4}
 800073c:	c311      	stmia	r3!, {r0, r4}
 800073e:	7812      	ldrb	r2, [r2, #0]
 8000740:	701a      	strb	r2, [r3, #0]
	uint8_t data3[9] = {0x3c,0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00};
 8000742:	260c      	movs	r6, #12
 8000744:	19bb      	adds	r3, r7, r6
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <growShrinkCube+0xb0>)
 8000748:	ca11      	ldmia	r2!, {r0, r4}
 800074a:	c311      	stmia	r3!, {r0, r4}
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	701a      	strb	r2, [r3, #0]
	uint8_t data4[9] = {0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00};
 8000750:	003b      	movs	r3, r7
 8000752:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <growShrinkCube+0xb4>)
 8000754:	ca11      	ldmia	r2!, {r0, r4}
 8000756:	c311      	stmia	r3!, {r0, r4}
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	701a      	strb	r2, [r3, #0]
	TransmitData(data1);
 800075c:	000c      	movs	r4, r1
 800075e:	187b      	adds	r3, r7, r1
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fdb9 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 8000766:	2096      	movs	r0, #150	; 0x96
 8000768:	f001 fa00 	bl	8001b6c <HAL_Delay>
	TransmitData(data2);
 800076c:	197b      	adds	r3, r7, r5
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fdb2 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 8000774:	2096      	movs	r0, #150	; 0x96
 8000776:	f001 f9f9 	bl	8001b6c <HAL_Delay>
	TransmitData(data3);
 800077a:	19bb      	adds	r3, r7, r6
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff fdab 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 8000782:	2096      	movs	r0, #150	; 0x96
 8000784:	f001 f9f2 	bl	8001b6c <HAL_Delay>
	TransmitData(data4);
 8000788:	003b      	movs	r3, r7
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff fda4 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 8000790:	2096      	movs	r0, #150	; 0x96
 8000792:	f001 f9eb 	bl	8001b6c <HAL_Delay>
	TransmitData(data3);
 8000796:	19bb      	adds	r3, r7, r6
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fd9d 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 800079e:	2096      	movs	r0, #150	; 0x96
 80007a0:	f001 f9e4 	bl	8001b6c <HAL_Delay>
	TransmitData(data2);
 80007a4:	197b      	adds	r3, r7, r5
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fd96 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 80007ac:	2096      	movs	r0, #150	; 0x96
 80007ae:	f001 f9dd 	bl	8001b6c <HAL_Delay>
	TransmitData(data1);
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fd8f 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 80007ba:	2096      	movs	r0, #150	; 0x96
 80007bc:	f001 f9d6 	bl	8001b6c <HAL_Delay>
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b00d      	add	sp, #52	; 0x34
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	080043a0 	.word	0x080043a0
 80007cc:	080043ac 	.word	0x080043ac
 80007d0:	080043b8 	.word	0x080043b8
 80007d4:	080043c4 	.word	0x080043c4

080007d8 <aroundEdgeCube>:

void aroundEdgeCube() //ok
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
		//layer 1
		layer = 0x81;
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <aroundEdgeCube+0xa8>)
 80007e0:	2281      	movs	r2, #129	; 0x81
 80007e2:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0xff;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <aroundEdgeCube+0xac>)
 80007e6:	22ff      	movs	r2, #255	; 0xff
 80007e8:	71da      	strb	r2, [r3, #7]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <aroundEdgeCube+0xac>)
 80007ec:	79da      	ldrb	r2, [r3, #7]
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <aroundEdgeCube+0xac>)
 80007f0:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 80007f2:	2301      	movs	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	e007      	b.n	8000808 <aroundEdgeCube+0x30>
		{
			column[i] = 0x81;
 80007f8:	4a22      	ldr	r2, [pc, #136]	; (8000884 <aroundEdgeCube+0xac>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	2281      	movs	r2, #129	; 0x81
 8000800:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3301      	adds	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b06      	cmp	r3, #6
 800080c:	ddf4      	ble.n	80007f8 <aroundEdgeCube+0x20>
		}
		mergeData(column, layer);
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <aroundEdgeCube+0xa8>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <aroundEdgeCube+0xac>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff fd7c 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <aroundEdgeCube+0xb0>)
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fd5a 	bl	80002d8 <TransmitData>
		HAL_Delay(0);
 8000824:	2000      	movs	r0, #0
 8000826:	f001 f9a1 	bl	8001b6c <HAL_Delay>
		//layer 2- 7
		layer = 0x7e;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <aroundEdgeCube+0xa8>)
 800082c:	227e      	movs	r2, #126	; 0x7e
 800082e:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0x81;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <aroundEdgeCube+0xac>)
 8000832:	2281      	movs	r2, #129	; 0x81
 8000834:	71da      	strb	r2, [r3, #7]
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <aroundEdgeCube+0xac>)
 8000838:	79da      	ldrb	r2, [r3, #7]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <aroundEdgeCube+0xac>)
 800083c:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 800083e:	2301      	movs	r3, #1
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	e007      	b.n	8000854 <aroundEdgeCube+0x7c>
		{
			column[i] = 0x00;
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <aroundEdgeCube+0xac>)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b06      	cmp	r3, #6
 8000858:	ddf4      	ble.n	8000844 <aroundEdgeCube+0x6c>
		}
		mergeData(column, layer);
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <aroundEdgeCube+0xa8>)
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <aroundEdgeCube+0xac>)
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff fd56 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <aroundEdgeCube+0xb0>)
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff fd34 	bl	80002d8 <TransmitData>
		HAL_Delay(0);
 8000870:	2000      	movs	r0, #0
 8000872:	f001 f97b 	bl	8001b6c <HAL_Delay>
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	200000f0 	.word	0x200000f0
 8000884:	200000f4 	.word	0x200000f4
 8000888:	200000fc 	.word	0x200000fc

0800088c <diaedgeCube>:

void diaedgeCube() //ok
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
	int hold = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	607b      	str	r3, [r7, #4]
	//layer 1-8
	layer = 0x81;
 8000896:	4b5f      	ldr	r3, [pc, #380]	; (8000a14 <diaedgeCube+0x188>)
 8000898:	2281      	movs	r2, #129	; 0x81
 800089a:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0xff;
 800089c:	4b5e      	ldr	r3, [pc, #376]	; (8000a18 <diaedgeCube+0x18c>)
 800089e:	22ff      	movs	r2, #255	; 0xff
 80008a0:	71da      	strb	r2, [r3, #7]
 80008a2:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <diaedgeCube+0x18c>)
 80008a4:	79da      	ldrb	r2, [r3, #7]
 80008a6:	4b5c      	ldr	r3, [pc, #368]	; (8000a18 <diaedgeCube+0x18c>)
 80008a8:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 80008aa:	2301      	movs	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	e007      	b.n	80008c0 <diaedgeCube+0x34>
		column[i] = 0x81;
 80008b0:	4a59      	ldr	r2, [pc, #356]	; (8000a18 <diaedgeCube+0x18c>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	2281      	movs	r2, #129	; 0x81
 80008b8:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	ddf4      	ble.n	80008b0 <diaedgeCube+0x24>
	}
	mergeData(column, layer);
 80008c6:	4b53      	ldr	r3, [pc, #332]	; (8000a14 <diaedgeCube+0x188>)
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <diaedgeCube+0x18c>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff fd20 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80008d4:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <diaedgeCube+0x190>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fcfe 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 f944 	bl	8001b6c <HAL_Delay>
	clearCube();
 80008e4:	f7ff fd74 	bl	80003d0 <clearCube>

	//layer 2-7
	layer = 0x42;
 80008e8:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <diaedgeCube+0x188>)
 80008ea:	2242      	movs	r2, #66	; 0x42
 80008ec:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 80008ee:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <diaedgeCube+0x18c>)
 80008f0:	2281      	movs	r2, #129	; 0x81
 80008f2:	71da      	strb	r2, [r3, #7]
 80008f4:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <diaedgeCube+0x18c>)
 80008f6:	79da      	ldrb	r2, [r3, #7]
 80008f8:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <diaedgeCube+0x18c>)
 80008fa:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = 0x42;
 80008fc:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <diaedgeCube+0x18c>)
 80008fe:	2242      	movs	r2, #66	; 0x42
 8000900:	719a      	strb	r2, [r3, #6]
 8000902:	4b45      	ldr	r3, [pc, #276]	; (8000a18 <diaedgeCube+0x18c>)
 8000904:	799a      	ldrb	r2, [r3, #6]
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <diaedgeCube+0x18c>)
 8000908:	705a      	strb	r2, [r3, #1]
	for (int i = 2; i < 6; i++) {
 800090a:	2302      	movs	r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	e007      	b.n	8000920 <diaedgeCube+0x94>
		column[i] = 0x00;
 8000910:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <diaedgeCube+0x18c>)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++) {
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	2b05      	cmp	r3, #5
 8000924:	ddf4      	ble.n	8000910 <diaedgeCube+0x84>
	}
	mergeData(column, layer);
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <diaedgeCube+0x188>)
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b3b      	ldr	r3, [pc, #236]	; (8000a18 <diaedgeCube+0x18c>)
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff fcf0 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <diaedgeCube+0x190>)
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fcce 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	0018      	movs	r0, r3
 8000940:	f001 f914 	bl	8001b6c <HAL_Delay>
	clearCube();
 8000944:	f7ff fd44 	bl	80003d0 <clearCube>

	//layer 3-6
	layer = 0x24;
 8000948:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <diaedgeCube+0x188>)
 800094a:	2224      	movs	r2, #36	; 0x24
 800094c:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <diaedgeCube+0x18c>)
 8000950:	2281      	movs	r2, #129	; 0x81
 8000952:	71da      	strb	r2, [r3, #7]
 8000954:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <diaedgeCube+0x18c>)
 8000956:	79da      	ldrb	r2, [r3, #7]
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <diaedgeCube+0x18c>)
 800095a:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = column[3] = column[4] = 0x00;
 800095c:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <diaedgeCube+0x18c>)
 800095e:	2200      	movs	r2, #0
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <diaedgeCube+0x18c>)
 8000964:	791a      	ldrb	r2, [r3, #4]
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <diaedgeCube+0x18c>)
 8000968:	70da      	strb	r2, [r3, #3]
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <diaedgeCube+0x18c>)
 800096c:	78da      	ldrb	r2, [r3, #3]
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <diaedgeCube+0x18c>)
 8000970:	719a      	strb	r2, [r3, #6]
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <diaedgeCube+0x18c>)
 8000974:	799a      	ldrb	r2, [r3, #6]
 8000976:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <diaedgeCube+0x18c>)
 8000978:	705a      	strb	r2, [r3, #1]
	column[2] = column[5] = 0x24;
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <diaedgeCube+0x18c>)
 800097c:	2224      	movs	r2, #36	; 0x24
 800097e:	715a      	strb	r2, [r3, #5]
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <diaedgeCube+0x18c>)
 8000982:	795a      	ldrb	r2, [r3, #5]
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <diaedgeCube+0x18c>)
 8000986:	709a      	strb	r2, [r3, #2]
	mergeData(column, layer);
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <diaedgeCube+0x188>)
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <diaedgeCube+0x18c>)
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fcbf 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <diaedgeCube+0x190>)
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fc9d 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 f8e3 	bl	8001b6c <HAL_Delay>
	clearCube();
 80009a6:	f7ff fd13 	bl	80003d0 <clearCube>

	//layer 4-5
	layer = 0x18;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <diaedgeCube+0x188>)
 80009ac:	2218      	movs	r2, #24
 80009ae:	701a      	strb	r2, [r3, #0]
	column[3] =column[4] = 0x18;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <diaedgeCube+0x18c>)
 80009b2:	2218      	movs	r2, #24
 80009b4:	711a      	strb	r2, [r3, #4]
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <diaedgeCube+0x18c>)
 80009b8:	791a      	ldrb	r2, [r3, #4]
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <diaedgeCube+0x18c>)
 80009bc:	70da      	strb	r2, [r3, #3]
	column[0] = column[7] = 0x81;
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <diaedgeCube+0x18c>)
 80009c0:	2281      	movs	r2, #129	; 0x81
 80009c2:	71da      	strb	r2, [r3, #7]
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <diaedgeCube+0x18c>)
 80009c6:	79da      	ldrb	r2, [r3, #7]
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <diaedgeCube+0x18c>)
 80009ca:	701a      	strb	r2, [r3, #0]
	column[1] = column[2] = column[5] = column[6] = 0x00;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <diaedgeCube+0x18c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	719a      	strb	r2, [r3, #6]
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <diaedgeCube+0x18c>)
 80009d4:	799a      	ldrb	r2, [r3, #6]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <diaedgeCube+0x18c>)
 80009d8:	715a      	strb	r2, [r3, #5]
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <diaedgeCube+0x18c>)
 80009dc:	795a      	ldrb	r2, [r3, #5]
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <diaedgeCube+0x18c>)
 80009e0:	709a      	strb	r2, [r3, #2]
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <diaedgeCube+0x18c>)
 80009e4:	789a      	ldrb	r2, [r3, #2]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <diaedgeCube+0x18c>)
 80009e8:	705a      	strb	r2, [r3, #1]
	mergeData(column, layer);
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <diaedgeCube+0x188>)
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <diaedgeCube+0x18c>)
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff fc8e 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <diaedgeCube+0x190>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fc6c 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f8b2 	bl	8001b6c <HAL_Delay>
	clearCube();
 8000a08:	f7ff fce2 	bl	80003d0 <clearCube>
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b004      	add	sp, #16
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000f0 	.word	0x200000f0
 8000a18:	200000f4 	.word	0x200000f4
 8000a1c:	200000fc 	.word	0x200000fc

08000a20 <numberingCube>:

void numberingCube() //ok
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	; 0x38
 8000a24:	af00      	add	r7, sp, #0
	int x = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
	int y = 40;
 8000a2a:	2328      	movs	r3, #40	; 0x28
 8000a2c:	603b      	str	r3, [r7, #0]
	clearCube();
 8000a2e:	f7ff fccf 	bl	80003d0 <clearCube>
	//digit 0
	for (int i = 0; i < 8; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
 8000a36:	e04d      	b.n	8000ad4 <numberingCube+0xb4>
	{
		column[i] = 0x3c;
 8000a38:	4ae0      	ldr	r2, [pc, #896]	; (8000dbc <numberingCube+0x39c>)
 8000a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3c:	18d3      	adds	r3, r2, r3
 8000a3e:	223c      	movs	r2, #60	; 0x3c
 8000a40:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000a42:	4bdf      	ldr	r3, [pc, #892]	; (8000dc0 <numberingCube+0x3a0>)
 8000a44:	2281      	movs	r2, #129	; 0x81
 8000a46:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000a48:	4bdd      	ldr	r3, [pc, #884]	; (8000dc0 <numberingCube+0x3a0>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4bdb      	ldr	r3, [pc, #876]	; (8000dbc <numberingCube+0x39c>)
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fc5f 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000a56:	4bdb      	ldr	r3, [pc, #876]	; (8000dc4 <numberingCube+0x3a4>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fc3d 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 f883 	bl	8001b6c <HAL_Delay>

		column[i] = 0x66;
 8000a66:	4ad5      	ldr	r2, [pc, #852]	; (8000dbc <numberingCube+0x39c>)
 8000a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6a:	18d3      	adds	r3, r2, r3
 8000a6c:	2266      	movs	r2, #102	; 0x66
 8000a6e:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000a70:	4bd3      	ldr	r3, [pc, #844]	; (8000dc0 <numberingCube+0x3a0>)
 8000a72:	2242      	movs	r2, #66	; 0x42
 8000a74:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000a76:	4bd2      	ldr	r3, [pc, #840]	; (8000dc0 <numberingCube+0x3a0>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4bd0      	ldr	r3, [pc, #832]	; (8000dbc <numberingCube+0x39c>)
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fc48 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000a84:	4bcf      	ldr	r3, [pc, #828]	; (8000dc4 <numberingCube+0x3a4>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fc26 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 f86c 	bl	8001b6c <HAL_Delay>

		column[i] = 0xc3;
 8000a94:	4ac9      	ldr	r2, [pc, #804]	; (8000dbc <numberingCube+0x39c>)
 8000a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a98:	18d3      	adds	r3, r2, r3
 8000a9a:	22c3      	movs	r2, #195	; 0xc3
 8000a9c:	701a      	strb	r2, [r3, #0]
		layer = 0x3c;
 8000a9e:	4bc8      	ldr	r3, [pc, #800]	; (8000dc0 <numberingCube+0x3a0>)
 8000aa0:	223c      	movs	r2, #60	; 0x3c
 8000aa2:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000aa4:	4bc6      	ldr	r3, [pc, #792]	; (8000dc0 <numberingCube+0x3a0>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	4bc4      	ldr	r3, [pc, #784]	; (8000dbc <numberingCube+0x39c>)
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fc31 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000ab2:	4bc4      	ldr	r3, [pc, #784]	; (8000dc4 <numberingCube+0x3a4>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fc0f 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 f855 	bl	8001b6c <HAL_Delay>
		clearCube();
 8000ac2:	f7ff fc85 	bl	80003d0 <clearCube>
		HAL_Delay(y);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 f84f 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad6:	2b07      	cmp	r3, #7
 8000ad8:	ddae      	ble.n	8000a38 <numberingCube+0x18>
	}
	HAL_Delay(delay);
 8000ada:	23fa      	movs	r3, #250	; 0xfa
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f844 	bl	8001b6c <HAL_Delay>
	//digit 1
	for (int i = 0; i < 8; i++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ae8:	e092      	b.n	8000c10 <numberingCube+0x1f0>
	{
		column[i] = 0xff;
 8000aea:	4ab4      	ldr	r2, [pc, #720]	; (8000dbc <numberingCube+0x39c>)
 8000aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aee:	18d3      	adds	r3, r2, r3
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000af4:	4bb2      	ldr	r3, [pc, #712]	; (8000dc0 <numberingCube+0x3a0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000afa:	4bb1      	ldr	r3, [pc, #708]	; (8000dc0 <numberingCube+0x3a0>)
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	4baf      	ldr	r3, [pc, #700]	; (8000dbc <numberingCube+0x39c>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fc06 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000b08:	4bae      	ldr	r3, [pc, #696]	; (8000dc4 <numberingCube+0x3a4>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fbe4 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 f82a 	bl	8001b6c <HAL_Delay>

		column[i] = 0x98;
 8000b18:	4aa8      	ldr	r2, [pc, #672]	; (8000dbc <numberingCube+0x39c>)
 8000b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	2298      	movs	r2, #152	; 0x98
 8000b20:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000b22:	4ba7      	ldr	r3, [pc, #668]	; (8000dc0 <numberingCube+0x3a0>)
 8000b24:	2208      	movs	r2, #8
 8000b26:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b28:	4ba5      	ldr	r3, [pc, #660]	; (8000dc0 <numberingCube+0x3a0>)
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	4ba3      	ldr	r3, [pc, #652]	; (8000dbc <numberingCube+0x39c>)
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fbef 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000b36:	4ba3      	ldr	r3, [pc, #652]	; (8000dc4 <numberingCube+0x3a4>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fbcd 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 f813 	bl	8001b6c <HAL_Delay>

		column[i] = 0xd8;
 8000b46:	4a9d      	ldr	r2, [pc, #628]	; (8000dbc <numberingCube+0x39c>)
 8000b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4a:	18d3      	adds	r3, r2, r3
 8000b4c:	22d8      	movs	r2, #216	; 0xd8
 8000b4e:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000b50:	4b9b      	ldr	r3, [pc, #620]	; (8000dc0 <numberingCube+0x3a0>)
 8000b52:	2210      	movs	r2, #16
 8000b54:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b56:	4b9a      	ldr	r3, [pc, #616]	; (8000dc0 <numberingCube+0x3a0>)
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b98      	ldr	r3, [pc, #608]	; (8000dbc <numberingCube+0x39c>)
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fbd8 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000b64:	4b97      	ldr	r3, [pc, #604]	; (8000dc4 <numberingCube+0x3a4>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff fbb6 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 fffc 	bl	8001b6c <HAL_Delay>

		column[i] = 0x78;
 8000b74:	4a91      	ldr	r2, [pc, #580]	; (8000dbc <numberingCube+0x39c>)
 8000b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	2278      	movs	r2, #120	; 0x78
 8000b7c:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000b7e:	4b90      	ldr	r3, [pc, #576]	; (8000dc0 <numberingCube+0x3a0>)
 8000b80:	2220      	movs	r2, #32
 8000b82:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b84:	4b8e      	ldr	r3, [pc, #568]	; (8000dc0 <numberingCube+0x3a0>)
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	4b8c      	ldr	r3, [pc, #560]	; (8000dbc <numberingCube+0x39c>)
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff fbc1 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000b92:	4b8c      	ldr	r3, [pc, #560]	; (8000dc4 <numberingCube+0x3a4>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fb9f 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 ffe5 	bl	8001b6c <HAL_Delay>

		column[i] = 0x38;
 8000ba2:	4a86      	ldr	r2, [pc, #536]	; (8000dbc <numberingCube+0x39c>)
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	18d3      	adds	r3, r2, r3
 8000ba8:	2238      	movs	r2, #56	; 0x38
 8000baa:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000bac:	4b84      	ldr	r3, [pc, #528]	; (8000dc0 <numberingCube+0x3a0>)
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000bb2:	4b83      	ldr	r3, [pc, #524]	; (8000dc0 <numberingCube+0x3a0>)
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b81      	ldr	r3, [pc, #516]	; (8000dbc <numberingCube+0x39c>)
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff fbaa 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000bc0:	4b80      	ldr	r3, [pc, #512]	; (8000dc4 <numberingCube+0x3a4>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fb88 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 ffce 	bl	8001b6c <HAL_Delay>

		column[i] = 0x18;
 8000bd0:	4a7a      	ldr	r2, [pc, #488]	; (8000dbc <numberingCube+0x39c>)
 8000bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	2218      	movs	r2, #24
 8000bd8:	701a      	strb	r2, [r3, #0]
		layer = 0x86;
 8000bda:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <numberingCube+0x3a0>)
 8000bdc:	2286      	movs	r2, #134	; 0x86
 8000bde:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000be0:	4b77      	ldr	r3, [pc, #476]	; (8000dc0 <numberingCube+0x3a0>)
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	4b75      	ldr	r3, [pc, #468]	; (8000dbc <numberingCube+0x39c>)
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fb93 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000bee:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <numberingCube+0x3a4>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fb71 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 ffb7 	bl	8001b6c <HAL_Delay>
		clearCube();
 8000bfe:	f7ff fbe7 	bl	80003d0 <clearCube>

		HAL_Delay(y);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 ffb1 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	dc00      	bgt.n	8000c18 <numberingCube+0x1f8>
 8000c16:	e768      	b.n	8000aea <numberingCube+0xca>
	}
	HAL_Delay(delay);
 8000c18:	23fa      	movs	r3, #250	; 0xfa
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 ffa5 	bl	8001b6c <HAL_Delay>
	//digit 2
	for (int i = 0; i < 8; i++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c26:	e0bc      	b.n	8000da2 <numberingCube+0x382>
	{
		column[i] = 0x3c;
 8000c28:	4a64      	ldr	r2, [pc, #400]	; (8000dbc <numberingCube+0x39c>)
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	18d3      	adds	r3, r2, r3
 8000c2e:	223c      	movs	r2, #60	; 0x3c
 8000c30:	701a      	strb	r2, [r3, #0]
		layer = 0x80;
 8000c32:	4b63      	ldr	r3, [pc, #396]	; (8000dc0 <numberingCube+0x3a0>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c38:	4b61      	ldr	r3, [pc, #388]	; (8000dc0 <numberingCube+0x3a0>)
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	4b5f      	ldr	r3, [pc, #380]	; (8000dbc <numberingCube+0x39c>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fb67 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000c46:	4b5f      	ldr	r3, [pc, #380]	; (8000dc4 <numberingCube+0x3a4>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fb45 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 ff8b 	bl	8001b6c <HAL_Delay>

		column[i] = 0x66;
 8000c56:	4a59      	ldr	r2, [pc, #356]	; (8000dbc <numberingCube+0x39c>)
 8000c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	2266      	movs	r2, #102	; 0x66
 8000c5e:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <numberingCube+0x3a0>)
 8000c62:	2240      	movs	r2, #64	; 0x40
 8000c64:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c66:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <numberingCube+0x3a0>)
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <numberingCube+0x39c>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fb50 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000c74:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <numberingCube+0x3a4>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fb2e 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 ff74 	bl	8001b6c <HAL_Delay>

		column[i] = 0xc6;
 8000c84:	4a4d      	ldr	r2, [pc, #308]	; (8000dbc <numberingCube+0x39c>)
 8000c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c88:	18d3      	adds	r3, r2, r3
 8000c8a:	22c6      	movs	r2, #198	; 0xc6
 8000c8c:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <numberingCube+0x3a0>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c94:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <numberingCube+0x3a0>)
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <numberingCube+0x39c>)
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fb39 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000ca2:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <numberingCube+0x3a4>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fb17 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 ff5d 	bl	8001b6c <HAL_Delay>

		column[i] = 0x06;
 8000cb2:	4a42      	ldr	r2, [pc, #264]	; (8000dbc <numberingCube+0x39c>)
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	2206      	movs	r2, #6
 8000cba:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <numberingCube+0x3a0>)
 8000cbe:	2210      	movs	r2, #16
 8000cc0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <numberingCube+0x3a0>)
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <numberingCube+0x39c>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fb22 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000cd0:	4b3c      	ldr	r3, [pc, #240]	; (8000dc4 <numberingCube+0x3a4>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fb00 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 ff46 	bl	8001b6c <HAL_Delay>

		column[i] = 0x0c;
 8000ce0:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <numberingCube+0x39c>)
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <numberingCube+0x3a0>)
 8000cec:	2208      	movs	r2, #8
 8000cee:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <numberingCube+0x3a0>)
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <numberingCube+0x39c>)
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff fb0b 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <numberingCube+0x3a4>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fae9 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 ff2f 	bl	8001b6c <HAL_Delay>

		column[i] = 0x18;
 8000d0e:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <numberingCube+0x39c>)
 8000d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	2218      	movs	r2, #24
 8000d16:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <numberingCube+0x3a0>)
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <numberingCube+0x3a0>)
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <numberingCube+0x39c>)
 8000d24:	0011      	movs	r1, r2
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff faf4 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <numberingCube+0x3a4>)
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fad2 	bl	80002d8 <TransmitData>

		column[i] = 0x70;
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <numberingCube+0x39c>)
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	2270      	movs	r2, #112	; 0x70
 8000d3c:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <numberingCube+0x3a0>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <numberingCube+0x3a0>)
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <numberingCube+0x39c>)
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fae1 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <numberingCube+0x3a4>)
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fabf 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 ff05 	bl	8001b6c <HAL_Delay>

		column[i] = 0xff;
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <numberingCube+0x39c>)
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d66:	18d3      	adds	r3, r2, r3
 8000d68:	22ff      	movs	r2, #255	; 0xff
 8000d6a:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <numberingCube+0x3a0>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <numberingCube+0x3a0>)
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <numberingCube+0x39c>)
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff faca 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <numberingCube+0x3a4>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff faa8 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 feee 	bl	8001b6c <HAL_Delay>
		clearCube();
 8000d90:	f7ff fb1e 	bl	80003d0 <clearCube>

		HAL_Delay(y);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fee8 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9e:	3301      	adds	r3, #1
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	2b07      	cmp	r3, #7
 8000da6:	dc00      	bgt.n	8000daa <numberingCube+0x38a>
 8000da8:	e73e      	b.n	8000c28 <numberingCube+0x208>
	}
	HAL_Delay(delay);
 8000daa:	23fa      	movs	r3, #250	; 0xfa
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fedc 	bl	8001b6c <HAL_Delay>
	//digit 3
	for (int i = 0; i < 8; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db8:	e06b      	b.n	8000e92 <numberingCube+0x472>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	200000f4 	.word	0x200000f4
 8000dc0:	200000f0 	.word	0x200000f0
 8000dc4:	200000fc 	.word	0x200000fc
	{
		column[i] = 0x7e;
 8000dc8:	4af4      	ldr	r2, [pc, #976]	; (800119c <numberingCube+0x77c>)
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	227e      	movs	r2, #126	; 0x7e
 8000dd0:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000dd2:	4bf3      	ldr	r3, [pc, #972]	; (80011a0 <numberingCube+0x780>)
 8000dd4:	2281      	movs	r2, #129	; 0x81
 8000dd6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000dd8:	4bf1      	ldr	r3, [pc, #964]	; (80011a0 <numberingCube+0x780>)
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	4bef      	ldr	r3, [pc, #956]	; (800119c <numberingCube+0x77c>)
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fa97 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000de6:	4bef      	ldr	r3, [pc, #956]	; (80011a4 <numberingCube+0x784>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff fa75 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 febb 	bl	8001b6c <HAL_Delay>

		column[i] = 0xe7;
 8000df6:	4ae9      	ldr	r2, [pc, #932]	; (800119c <numberingCube+0x77c>)
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	18d3      	adds	r3, r2, r3
 8000dfc:	22e7      	movs	r2, #231	; 0xe7
 8000dfe:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000e00:	4be7      	ldr	r3, [pc, #924]	; (80011a0 <numberingCube+0x780>)
 8000e02:	2242      	movs	r2, #66	; 0x42
 8000e04:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e06:	4be6      	ldr	r3, [pc, #920]	; (80011a0 <numberingCube+0x780>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	4be4      	ldr	r3, [pc, #912]	; (800119c <numberingCube+0x77c>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fa80 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000e14:	4be3      	ldr	r3, [pc, #908]	; (80011a4 <numberingCube+0x784>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff fa5e 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 fea4 	bl	8001b6c <HAL_Delay>

		column[i] = 0xc3;
 8000e24:	4add      	ldr	r2, [pc, #884]	; (800119c <numberingCube+0x77c>)
 8000e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	22c3      	movs	r2, #195	; 0xc3
 8000e2c:	701a      	strb	r2, [r3, #0]
		layer = 0x24;
 8000e2e:	4bdc      	ldr	r3, [pc, #880]	; (80011a0 <numberingCube+0x780>)
 8000e30:	2224      	movs	r2, #36	; 0x24
 8000e32:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e34:	4bda      	ldr	r3, [pc, #872]	; (80011a0 <numberingCube+0x780>)
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	4bd8      	ldr	r3, [pc, #864]	; (800119c <numberingCube+0x77c>)
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fa69 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000e42:	4bd8      	ldr	r3, [pc, #864]	; (80011a4 <numberingCube+0x784>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff fa47 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 fe8d 	bl	8001b6c <HAL_Delay>

		column[i] = 0x06;
 8000e52:	4ad2      	ldr	r2, [pc, #840]	; (800119c <numberingCube+0x77c>)
 8000e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e56:	18d3      	adds	r3, r2, r3
 8000e58:	2206      	movs	r2, #6
 8000e5a:	701a      	strb	r2, [r3, #0]
		layer = 0x18;
 8000e5c:	4bd0      	ldr	r3, [pc, #832]	; (80011a0 <numberingCube+0x780>)
 8000e5e:	2218      	movs	r2, #24
 8000e60:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e62:	4bcf      	ldr	r3, [pc, #828]	; (80011a0 <numberingCube+0x780>)
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	4bcd      	ldr	r3, [pc, #820]	; (800119c <numberingCube+0x77c>)
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fa52 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000e70:	4bcc      	ldr	r3, [pc, #816]	; (80011a4 <numberingCube+0x784>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff fa30 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 fe76 	bl	8001b6c <HAL_Delay>
		clearCube();
 8000e80:	f7ff faa6 	bl	80003d0 <clearCube>

		HAL_Delay(y);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 fe70 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8e:	3301      	adds	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	dd97      	ble.n	8000dc8 <numberingCube+0x3a8>
	}
	HAL_Delay(delay);
 8000e98:	23fa      	movs	r3, #250	; 0xfa
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 fe65 	bl	8001b6c <HAL_Delay>
	//digit 4
	for (int i = 0; i < 8; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea6:	e05f      	b.n	8000f68 <numberingCube+0x548>
	{
		column[i] = 0x06;
 8000ea8:	4abc      	ldr	r2, [pc, #752]	; (800119c <numberingCube+0x77c>)
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	18d3      	adds	r3, r2, r3
 8000eae:	2206      	movs	r2, #6
 8000eb0:	701a      	strb	r2, [r3, #0]
		layer = 0xf3;
 8000eb2:	4bbb      	ldr	r3, [pc, #748]	; (80011a0 <numberingCube+0x780>)
 8000eb4:	22f3      	movs	r2, #243	; 0xf3
 8000eb6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000eb8:	4bb9      	ldr	r3, [pc, #740]	; (80011a0 <numberingCube+0x780>)
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	4bb7      	ldr	r3, [pc, #732]	; (800119c <numberingCube+0x77c>)
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fa27 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000ec6:	4bb7      	ldr	r3, [pc, #732]	; (80011a4 <numberingCube+0x784>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fa05 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 fe4b 	bl	8001b6c <HAL_Delay>

		column[i] = 0xff;
 8000ed6:	4ab1      	ldr	r2, [pc, #708]	; (800119c <numberingCube+0x77c>)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	18d3      	adds	r3, r2, r3
 8000edc:	22ff      	movs	r2, #255	; 0xff
 8000ede:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 8000ee0:	4baf      	ldr	r3, [pc, #700]	; (80011a0 <numberingCube+0x780>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ee6:	4bae      	ldr	r3, [pc, #696]	; (80011a0 <numberingCube+0x780>)
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	4bac      	ldr	r3, [pc, #688]	; (800119c <numberingCube+0x77c>)
 8000eec:	0011      	movs	r1, r2
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff fa10 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000ef4:	4bab      	ldr	r3, [pc, #684]	; (80011a4 <numberingCube+0x784>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff f9ee 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fe34 	bl	8001b6c <HAL_Delay>

		for (int j = 0; j < 4; j++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	e022      	b.n	8000f50 <numberingCube+0x530>
		{
		column[i] = 0x08 << j;
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	b2d9      	uxtb	r1, r3
 8000f14:	4aa1      	ldr	r2, [pc, #644]	; (800119c <numberingCube+0x77c>)
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	1c0a      	adds	r2, r1, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		layer = 0x80 >> j;
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	411a      	asrs	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b9d      	ldr	r3, [pc, #628]	; (80011a0 <numberingCube+0x780>)
 8000f2a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f2c:	4b9c      	ldr	r3, [pc, #624]	; (80011a0 <numberingCube+0x780>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	4b9a      	ldr	r3, [pc, #616]	; (800119c <numberingCube+0x77c>)
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff f9ed 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000f3a:	4b9a      	ldr	r3, [pc, #616]	; (80011a4 <numberingCube+0x784>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff f9cb 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 fe11 	bl	8001b6c <HAL_Delay>
		for (int j = 0; j < 4; j++)
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	ddd9      	ble.n	8000f0a <numberingCube+0x4ea>
		}
		clearCube();
 8000f56:	f7ff fa3b 	bl	80003d0 <clearCube>
		HAL_Delay(y);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 fe05 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	dd9c      	ble.n	8000ea8 <numberingCube+0x488>
	}
	HAL_Delay(delay);
 8000f6e:	23fa      	movs	r3, #250	; 0xfa
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fdfa 	bl	8001b6c <HAL_Delay>
	//digit 5
	for (int i = 0; i < 8; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	e092      	b.n	80010a4 <numberingCube+0x684>
	{
		column[i] = 0xff;
 8000f7e:	4a87      	ldr	r2, [pc, #540]	; (800119c <numberingCube+0x77c>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 8000f88:	4b85      	ldr	r3, [pc, #532]	; (80011a0 <numberingCube+0x780>)
 8000f8a:	22c0      	movs	r2, #192	; 0xc0
 8000f8c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f8e:	4b84      	ldr	r3, [pc, #528]	; (80011a0 <numberingCube+0x780>)
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4b82      	ldr	r3, [pc, #520]	; (800119c <numberingCube+0x77c>)
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff f9bc 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000f9c:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <numberingCube+0x784>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff f99a 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fde0 	bl	8001b6c <HAL_Delay>

		column[i] = 0xc0;
 8000fac:	4a7b      	ldr	r2, [pc, #492]	; (800119c <numberingCube+0x77c>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	18d3      	adds	r3, r2, r3
 8000fb2:	22c0      	movs	r2, #192	; 0xc0
 8000fb4:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000fb6:	4b7a      	ldr	r3, [pc, #488]	; (80011a0 <numberingCube+0x780>)
 8000fb8:	2220      	movs	r2, #32
 8000fba:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000fbc:	4b78      	ldr	r3, [pc, #480]	; (80011a0 <numberingCube+0x780>)
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4b76      	ldr	r3, [pc, #472]	; (800119c <numberingCube+0x77c>)
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff f9a5 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000fca:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <numberingCube+0x784>)
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff f983 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fdc9 	bl	8001b6c <HAL_Delay>

		column[i] = 0xfe;
 8000fda:	4a70      	ldr	r2, [pc, #448]	; (800119c <numberingCube+0x77c>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	18d3      	adds	r3, r2, r3
 8000fe0:	22fe      	movs	r2, #254	; 0xfe
 8000fe2:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000fe4:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <numberingCube+0x780>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000fea:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <numberingCube+0x780>)
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	4b6b      	ldr	r3, [pc, #428]	; (800119c <numberingCube+0x77c>)
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff f98e 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000ff8:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <numberingCube+0x784>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff f96c 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	0018      	movs	r0, r3
 8001004:	f000 fdb2 	bl	8001b6c <HAL_Delay>

		column[i] = 0x03;
 8001008:	4a64      	ldr	r2, [pc, #400]	; (800119c <numberingCube+0x77c>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	2203      	movs	r2, #3
 8001010:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <numberingCube+0x780>)
 8001014:	220c      	movs	r2, #12
 8001016:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001018:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <numberingCube+0x780>)
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	4b5f      	ldr	r3, [pc, #380]	; (800119c <numberingCube+0x77c>)
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff f977 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <numberingCube+0x784>)
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff f955 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fd9b 	bl	8001b6c <HAL_Delay>

		column[i] = 0x83;
 8001036:	4a59      	ldr	r2, [pc, #356]	; (800119c <numberingCube+0x77c>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	2283      	movs	r2, #131	; 0x83
 800103e:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 8001040:	4b57      	ldr	r3, [pc, #348]	; (80011a0 <numberingCube+0x780>)
 8001042:	2202      	movs	r2, #2
 8001044:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <numberingCube+0x780>)
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	4b54      	ldr	r3, [pc, #336]	; (800119c <numberingCube+0x77c>)
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff f960 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001054:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <numberingCube+0x784>)
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff f93e 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fd84 	bl	8001b6c <HAL_Delay>

		column[i] = 0x7e;
 8001064:	4a4d      	ldr	r2, [pc, #308]	; (800119c <numberingCube+0x77c>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	227e      	movs	r2, #126	; 0x7e
 800106c:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 800106e:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <numberingCube+0x780>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001074:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <numberingCube+0x780>)
 8001076:	781a      	ldrb	r2, [r3, #0]
 8001078:	4b48      	ldr	r3, [pc, #288]	; (800119c <numberingCube+0x77c>)
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff f949 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001082:	4b48      	ldr	r3, [pc, #288]	; (80011a4 <numberingCube+0x784>)
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff f927 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0018      	movs	r0, r3
 800108e:	f000 fd6d 	bl	8001b6c <HAL_Delay>
		clearCube();
 8001092:	f7ff f99d 	bl	80003d0 <clearCube>
		HAL_Delay(y);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fd67 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	dc00      	bgt.n	80010ac <numberingCube+0x68c>
 80010aa:	e768      	b.n	8000f7e <numberingCube+0x55e>
	}
	HAL_Delay(delay);
 80010ac:	23fa      	movs	r3, #250	; 0xfa
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 fd5b 	bl	8001b6c <HAL_Delay>
	//digit 6
	for (int i = 0; i < 8; i++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	e064      	b.n	8001186 <numberingCube+0x766>
	{
		column[i] = 0x7e;
 80010bc:	4a37      	ldr	r2, [pc, #220]	; (800119c <numberingCube+0x77c>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	18d3      	adds	r3, r2, r3
 80010c2:	227e      	movs	r2, #126	; 0x7e
 80010c4:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <numberingCube+0x780>)
 80010c8:	2281      	movs	r2, #129	; 0x81
 80010ca:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80010cc:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <numberingCube+0x780>)
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	4b32      	ldr	r3, [pc, #200]	; (800119c <numberingCube+0x77c>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff f91d 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <numberingCube+0x784>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff f8fb 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f000 fd41 	bl	8001b6c <HAL_Delay>

		column[i] = 0xc3;
 80010ea:	4a2c      	ldr	r2, [pc, #176]	; (800119c <numberingCube+0x77c>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	22c3      	movs	r2, #195	; 0xc3
 80010f2:	701a      	strb	r2, [r3, #0]
		layer = 0x4e;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <numberingCube+0x780>)
 80010f6:	224e      	movs	r2, #78	; 0x4e
 80010f8:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <numberingCube+0x780>)
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <numberingCube+0x77c>)
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff f906 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <numberingCube+0x784>)
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff f8e4 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fd2a 	bl	8001b6c <HAL_Delay>

		column[i] = 0xc0;
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <numberingCube+0x77c>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	22c0      	movs	r2, #192	; 0xc0
 8001120:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <numberingCube+0x780>)
 8001124:	2220      	movs	r2, #32
 8001126:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <numberingCube+0x780>)
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <numberingCube+0x77c>)
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff f8ef 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <numberingCube+0x784>)
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff f8cd 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f000 fd13 	bl	8001b6c <HAL_Delay>

		column[i] = 0xfe;
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <numberingCube+0x77c>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	18d3      	adds	r3, r2, r3
 800114c:	22fe      	movs	r2, #254	; 0xfe
 800114e:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <numberingCube+0x780>)
 8001152:	2210      	movs	r2, #16
 8001154:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <numberingCube+0x780>)
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <numberingCube+0x77c>)
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff f8d8 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <numberingCube+0x784>)
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff f8b6 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0018      	movs	r0, r3
 8001170:	f000 fcfc 	bl	8001b6c <HAL_Delay>
		clearCube();
 8001174:	f7ff f92c 	bl	80003d0 <clearCube>
		HAL_Delay(y);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fcf6 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3301      	adds	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b07      	cmp	r3, #7
 800118a:	dd97      	ble.n	80010bc <numberingCube+0x69c>
	}
	HAL_Delay(delay);
 800118c:	23fa      	movs	r3, #250	; 0xfa
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	0018      	movs	r0, r3
 8001192:	f000 fceb 	bl	8001b6c <HAL_Delay>
	//digit 7
	for (int i = 0; i < 8; i++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e04e      	b.n	800123a <numberingCube+0x81a>
 800119c:	200000f4 	.word	0x200000f4
 80011a0:	200000f0 	.word	0x200000f0
 80011a4:	200000fc 	.word	0x200000fc
	{
		column[i] = 0x7f;
 80011a8:	4a9a      	ldr	r2, [pc, #616]	; (8001414 <numberingCube+0x9f4>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	227f      	movs	r2, #127	; 0x7f
 80011b0:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 80011b2:	4b99      	ldr	r3, [pc, #612]	; (8001418 <numberingCube+0x9f8>)
 80011b4:	22c0      	movs	r2, #192	; 0xc0
 80011b6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011b8:	4b97      	ldr	r3, [pc, #604]	; (8001418 <numberingCube+0x9f8>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b95      	ldr	r3, [pc, #596]	; (8001414 <numberingCube+0x9f4>)
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff f8a7 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80011c6:	4b95      	ldr	r3, [pc, #596]	; (800141c <numberingCube+0x9fc>)
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff f885 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fccb 	bl	8001b6c <HAL_Delay>

		for (int j = 0; j < 6; j++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	e022      	b.n	8001222 <numberingCube+0x802>
		{
			column[i] = 0x03 << j;
 80011dc:	2203      	movs	r2, #3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	b2d9      	uxtb	r1, r3
 80011e6:	4a8b      	ldr	r2, [pc, #556]	; (8001414 <numberingCube+0x9f4>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	18d3      	adds	r3, r2, r3
 80011ec:	1c0a      	adds	r2, r1, #0
 80011ee:	701a      	strb	r2, [r3, #0]
			layer = 0x20 >> j;
 80011f0:	2220      	movs	r2, #32
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	411a      	asrs	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b87      	ldr	r3, [pc, #540]	; (8001418 <numberingCube+0x9f8>)
 80011fc:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 80011fe:	4b86      	ldr	r3, [pc, #536]	; (8001418 <numberingCube+0x9f8>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b84      	ldr	r3, [pc, #528]	; (8001414 <numberingCube+0x9f4>)
 8001204:	0011      	movs	r1, r2
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff f884 	bl	8000314 <mergeData>
			TransmitData(dataOut);
 800120c:	4b83      	ldr	r3, [pc, #524]	; (800141c <numberingCube+0x9fc>)
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff f862 	bl	80002d8 <TransmitData>
			HAL_Delay(x);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fca8 	bl	8001b6c <HAL_Delay>
		for (int j = 0; j < 6; j++)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	3301      	adds	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b05      	cmp	r3, #5
 8001226:	ddd9      	ble.n	80011dc <numberingCube+0x7bc>
		}
		clearCube();
 8001228:	f7ff f8d2 	bl	80003d0 <clearCube>
		HAL_Delay(y);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	f000 fc9c 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b07      	cmp	r3, #7
 800123e:	ddb3      	ble.n	80011a8 <numberingCube+0x788>
	}
	HAL_Delay(delay);
 8001240:	23fa      	movs	r3, #250	; 0xfa
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	0018      	movs	r0, r3
 8001246:	f000 fc91 	bl	8001b6c <HAL_Delay>
	//digit 8
	for (int i = 0; i < 8; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e036      	b.n	80012be <numberingCube+0x89e>
	{
		column[i] = 0xc3;
 8001250:	4a70      	ldr	r2, [pc, #448]	; (8001414 <numberingCube+0x9f4>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	22c3      	movs	r2, #195	; 0xc3
 8001258:	701a      	strb	r2, [r3, #0]
		layer = 0x66;
 800125a:	4b6f      	ldr	r3, [pc, #444]	; (8001418 <numberingCube+0x9f8>)
 800125c:	2266      	movs	r2, #102	; 0x66
 800125e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001260:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <numberingCube+0x9f8>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <numberingCube+0x9f4>)
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff f853 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800126e:	4b6b      	ldr	r3, [pc, #428]	; (800141c <numberingCube+0x9fc>)
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff f831 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	0018      	movs	r0, r3
 800127a:	f000 fc77 	bl	8001b6c <HAL_Delay>

		column[i] = 0x7e;
 800127e:	4a65      	ldr	r2, [pc, #404]	; (8001414 <numberingCube+0x9f4>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	18d3      	adds	r3, r2, r3
 8001284:	227e      	movs	r2, #126	; 0x7e
 8001286:	701a      	strb	r2, [r3, #0]
		layer = 0x99;
 8001288:	4b63      	ldr	r3, [pc, #396]	; (8001418 <numberingCube+0x9f8>)
 800128a:	2299      	movs	r2, #153	; 0x99
 800128c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800128e:	4b62      	ldr	r3, [pc, #392]	; (8001418 <numberingCube+0x9f8>)
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <numberingCube+0x9f4>)
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff f83c 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800129c:	4b5f      	ldr	r3, [pc, #380]	; (800141c <numberingCube+0x9fc>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff f81a 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 fc60 	bl	8001b6c <HAL_Delay>
		clearCube();
 80012ac:	f7ff f890 	bl	80003d0 <clearCube>
		HAL_Delay(y);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 fc5a 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	ddc5      	ble.n	8001250 <numberingCube+0x830>
	}
	HAL_Delay(delay);
 80012c4:	23fa      	movs	r3, #250	; 0xfa
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 fc4f 	bl	8001b6c <HAL_Delay>
	//digit 9
	for (int i = 0; i < 8; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	e092      	b.n	80013fa <numberingCube+0x9da>
	{
		column[i] = 0x7e;
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <numberingCube+0x9f4>)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	18d3      	adds	r3, r2, r3
 80012da:	227e      	movs	r2, #126	; 0x7e
 80012dc:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 80012de:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <numberingCube+0x9f8>)
 80012e0:	2281      	movs	r2, #129	; 0x81
 80012e2:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <numberingCube+0x9f8>)
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <numberingCube+0x9f4>)
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff f811 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80012f2:	4b4a      	ldr	r3, [pc, #296]	; (800141c <numberingCube+0x9fc>)
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7fe ffef 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f000 fc35 	bl	8001b6c <HAL_Delay>

		column[i] = 0xc3;
 8001302:	4a44      	ldr	r2, [pc, #272]	; (8001414 <numberingCube+0x9f4>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	18d3      	adds	r3, r2, r3
 8001308:	22c3      	movs	r2, #195	; 0xc3
 800130a:	701a      	strb	r2, [r3, #0]
		layer = 0x60;
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <numberingCube+0x9f8>)
 800130e:	2260      	movs	r2, #96	; 0x60
 8001310:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <numberingCube+0x9f8>)
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <numberingCube+0x9f4>)
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f7fe fffa 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001320:	4b3e      	ldr	r3, [pc, #248]	; (800141c <numberingCube+0x9fc>)
 8001322:	0018      	movs	r0, r3
 8001324:	f7fe ffd8 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fc1e 	bl	8001b6c <HAL_Delay>

		column[i] = 0xff;
 8001330:	4a38      	ldr	r2, [pc, #224]	; (8001414 <numberingCube+0x9f4>)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	22ff      	movs	r2, #255	; 0xff
 8001338:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <numberingCube+0x9f8>)
 800133c:	2210      	movs	r2, #16
 800133e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <numberingCube+0x9f8>)
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <numberingCube+0x9f4>)
 8001346:	0011      	movs	r1, r2
 8001348:	0018      	movs	r0, r3
 800134a:	f7fe ffe3 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <numberingCube+0x9fc>)
 8001350:	0018      	movs	r0, r3
 8001352:	f7fe ffc1 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0018      	movs	r0, r3
 800135a:	f000 fc07 	bl	8001b6c <HAL_Delay>

		column[i] = 0x7f;
 800135e:	4a2d      	ldr	r2, [pc, #180]	; (8001414 <numberingCube+0x9f4>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	18d3      	adds	r3, r2, r3
 8001364:	227f      	movs	r2, #127	; 0x7f
 8001366:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <numberingCube+0x9f8>)
 800136a:	2208      	movs	r2, #8
 800136c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <numberingCube+0x9f8>)
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <numberingCube+0x9f4>)
 8001374:	0011      	movs	r1, r2
 8001376:	0018      	movs	r0, r3
 8001378:	f7fe ffcc 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <numberingCube+0x9fc>)
 800137e:	0018      	movs	r0, r3
 8001380:	f7fe ffaa 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0018      	movs	r0, r3
 8001388:	f000 fbf0 	bl	8001b6c <HAL_Delay>

		column[i] = 0x03;
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <numberingCube+0x9f4>)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	2203      	movs	r2, #3
 8001394:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <numberingCube+0x9f8>)
 8001398:	2204      	movs	r2, #4
 800139a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <numberingCube+0x9f8>)
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <numberingCube+0x9f4>)
 80013a2:	0011      	movs	r1, r2
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7fe ffb5 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <numberingCube+0x9fc>)
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7fe ff93 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 fbd9 	bl	8001b6c <HAL_Delay>

		column[i] = 0x83;
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <numberingCube+0x9f4>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	18d3      	adds	r3, r2, r3
 80013c0:	2283      	movs	r2, #131	; 0x83
 80013c2:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <numberingCube+0x9f8>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <numberingCube+0x9f8>)
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <numberingCube+0x9f4>)
 80013d0:	0011      	movs	r1, r2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7fe ff9e 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <numberingCube+0x9fc>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f7fe ff7c 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 fbc2 	bl	8001b6c <HAL_Delay>
		clearCube();
 80013e8:	f7fe fff2 	bl	80003d0 <clearCube>
		HAL_Delay(y);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 fbbc 	bl	8001b6c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	dc00      	bgt.n	8001402 <numberingCube+0x9e2>
 8001400:	e768      	b.n	80012d4 <numberingCube+0x8b4>
	}
	HAL_Delay(delay);
 8001402:	23fa      	movs	r3, #250	; 0xfa
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fbb0 	bl	8001b6c <HAL_Delay>
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b00e      	add	sp, #56	; 0x38
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000f4 	.word	0x200000f4
 8001418:	200000f0 	.word	0x200000f0
 800141c:	200000fc 	.word	0x200000fc

08001420 <torusCube>:

void torusCube() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	clearCube();
 8001426:	f7fe ffd3 	bl	80003d0 <clearCube>
	for (int i = -7; i < 7; i++) {
 800142a:	2307      	movs	r3, #7
 800142c:	425b      	negs	r3, r3
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	e06d      	b.n	800150e <torusCube+0xee>
		if (i >= 0) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db31      	blt.n	800149c <torusCube+0x7c>
			layer = 0xc0 >> i;
 8001438:	22c0      	movs	r2, #192	; 0xc0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	411a      	asrs	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <torusCube+0x100>)
 8001444:	701a      	strb	r2, [r3, #0]
			column[0] = column[7] = 0x7e;
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <torusCube+0x104>)
 8001448:	227e      	movs	r2, #126	; 0x7e
 800144a:	71da      	strb	r2, [r3, #7]
 800144c:	4b35      	ldr	r3, [pc, #212]	; (8001524 <torusCube+0x104>)
 800144e:	79da      	ldrb	r2, [r3, #7]
 8001450:	4b34      	ldr	r3, [pc, #208]	; (8001524 <torusCube+0x104>)
 8001452:	701a      	strb	r2, [r3, #0]
			column[1] = column[6] = 0xff;
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <torusCube+0x104>)
 8001456:	22ff      	movs	r2, #255	; 0xff
 8001458:	719a      	strb	r2, [r3, #6]
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <torusCube+0x104>)
 800145c:	799a      	ldrb	r2, [r3, #6]
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <torusCube+0x104>)
 8001460:	705a      	strb	r2, [r3, #1]
			column[2] = column[5] = 0xe7;
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <torusCube+0x104>)
 8001464:	22e7      	movs	r2, #231	; 0xe7
 8001466:	715a      	strb	r2, [r3, #5]
 8001468:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <torusCube+0x104>)
 800146a:	795a      	ldrb	r2, [r3, #5]
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <torusCube+0x104>)
 800146e:	709a      	strb	r2, [r3, #2]
			column[3] = column[4] = 0xc3;
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <torusCube+0x104>)
 8001472:	22c3      	movs	r2, #195	; 0xc3
 8001474:	711a      	strb	r2, [r3, #4]
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <torusCube+0x104>)
 8001478:	791a      	ldrb	r2, [r3, #4]
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <torusCube+0x104>)
 800147c:	70da      	strb	r2, [r3, #3]
			mergeData(column, layer);
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <torusCube+0x100>)
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <torusCube+0x104>)
 8001484:	0011      	movs	r1, r2
 8001486:	0018      	movs	r0, r3
 8001488:	f7fe ff44 	bl	8000314 <mergeData>
			TransmitData(dataOut);
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <torusCube+0x108>)
 800148e:	0018      	movs	r0, r3
 8001490:	f7fe ff22 	bl	80002d8 <TransmitData>
			HAL_Delay(100);
 8001494:	2064      	movs	r0, #100	; 0x64
 8001496:	f000 fb69 	bl	8001b6c <HAL_Delay>
 800149a:	e035      	b.n	8001508 <torusCube+0xe8>
		} else {
			layer = 0x03 << (7 - abs(i));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	17da      	asrs	r2, r3, #31
 80014a0:	189b      	adds	r3, r3, r2
 80014a2:	4053      	eors	r3, r2
 80014a4:	2207      	movs	r2, #7
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2203      	movs	r2, #3
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <torusCube+0x100>)
 80014b2:	701a      	strb	r2, [r3, #0]
			column[0] = column[7] = 0x7e;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <torusCube+0x104>)
 80014b6:	227e      	movs	r2, #126	; 0x7e
 80014b8:	71da      	strb	r2, [r3, #7]
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <torusCube+0x104>)
 80014bc:	79da      	ldrb	r2, [r3, #7]
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <torusCube+0x104>)
 80014c0:	701a      	strb	r2, [r3, #0]
			column[1] = column[6] = 0xff;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <torusCube+0x104>)
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	719a      	strb	r2, [r3, #6]
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <torusCube+0x104>)
 80014ca:	799a      	ldrb	r2, [r3, #6]
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <torusCube+0x104>)
 80014ce:	705a      	strb	r2, [r3, #1]
			column[2] = column[5] = 0xe7;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <torusCube+0x104>)
 80014d2:	22e7      	movs	r2, #231	; 0xe7
 80014d4:	715a      	strb	r2, [r3, #5]
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <torusCube+0x104>)
 80014d8:	795a      	ldrb	r2, [r3, #5]
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <torusCube+0x104>)
 80014dc:	709a      	strb	r2, [r3, #2]
			column[3] = column[4] = 0xc3;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <torusCube+0x104>)
 80014e0:	22c3      	movs	r2, #195	; 0xc3
 80014e2:	711a      	strb	r2, [r3, #4]
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <torusCube+0x104>)
 80014e6:	791a      	ldrb	r2, [r3, #4]
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <torusCube+0x104>)
 80014ea:	70da      	strb	r2, [r3, #3]
			mergeData(column, layer);
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <torusCube+0x100>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <torusCube+0x104>)
 80014f2:	0011      	movs	r1, r2
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7fe ff0d 	bl	8000314 <mergeData>
			TransmitData(dataOut);
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <torusCube+0x108>)
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7fe feeb 	bl	80002d8 <TransmitData>
			HAL_Delay(100);
 8001502:	2064      	movs	r0, #100	; 0x64
 8001504:	f000 fb32 	bl	8001b6c <HAL_Delay>
	for (int i = -7; i < 7; i++) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3301      	adds	r3, #1
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b06      	cmp	r3, #6
 8001512:	dd8e      	ble.n	8001432 <torusCube+0x12>
		}
	}
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	200000f0 	.word	0x200000f0
 8001524:	200000f4 	.word	0x200000f4
 8001528:	200000fc 	.word	0x200000fc

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001530:	f000 fab8 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001534:	f000 f834 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001538:	f000 f8b8 	bl	80016ac <MX_GPIO_Init>
  MX_SPI1_Init();
 800153c:	f000 f878 	bl	8001630 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 switch (currentEffect) {
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <main+0x6c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b0a      	cmp	r3, #10
 8001546:	d825      	bhi.n	8001594 <main+0x68>
 8001548:	009a      	lsls	r2, r3, #2
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <main+0x70>)
 800154c:	18d3      	adds	r3, r2, r3
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	469f      	mov	pc, r3
		case 0:
			lightCube();
 8001552:	f7fe ff05 	bl	8000360 <lightCube>
			break;
 8001556:	e01e      	b.n	8001596 <main+0x6a>
		case 1:
			clearCube();
 8001558:	f7fe ff3a 	bl	80003d0 <clearCube>
			break;
 800155c:	e01b      	b.n	8001596 <main+0x6a>
		case 2:
			growShrinkCube();
 800155e:	f7ff f8df 	bl	8000720 <growShrinkCube>
			break;
 8001562:	e018      	b.n	8001596 <main+0x6a>
		case 3:
			upperCube();
 8001564:	f7fe ff5e 	bl	8000424 <upperCube>
			break;
 8001568:	e015      	b.n	8001596 <main+0x6a>
		case 4:
			sliderCube();
 800156a:	f7ff f829 	bl	80005c0 <sliderCube>
			break;
 800156e:	e012      	b.n	8001596 <main+0x6a>
		case 5:
			diagonalCube();
 8001570:	f7fe ff94 	bl	800049c <diagonalCube>
			break;
 8001574:	e00f      	b.n	8001596 <main+0x6a>
		case 6:
			randomRainCube();
 8001576:	f7ff f861 	bl	800063c <randomRainCube>
			break;
 800157a:	e00c      	b.n	8001596 <main+0x6a>
		case 7:
			aroundEdgeCube();
 800157c:	f7ff f92c 	bl	80007d8 <aroundEdgeCube>
			break;
 8001580:	e009      	b.n	8001596 <main+0x6a>
		case 8:
			diaedgeCube();
 8001582:	f7ff f983 	bl	800088c <diaedgeCube>
			break;
 8001586:	e006      	b.n	8001596 <main+0x6a>
		case 9:
			numberingCube();
 8001588:	f7ff fa4a 	bl	8000a20 <numberingCube>
			break;
 800158c:	e003      	b.n	8001596 <main+0x6a>
		case 10:
			torusCube();
 800158e:	f7ff ff47 	bl	8001420 <torusCube>
			break;
 8001592:	e000      	b.n	8001596 <main+0x6a>
		default:
			break;
 8001594:	46c0      	nop			; (mov r8, r8)
	 switch (currentEffect) {
 8001596:	e7d3      	b.n	8001540 <main+0x14>
 8001598:	20000108 	.word	0x20000108
 800159c:	080043f0 	.word	0x080043f0

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b093      	sub	sp, #76	; 0x4c
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	2414      	movs	r4, #20
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	0018      	movs	r0, r3
 80015ac:	2334      	movs	r3, #52	; 0x34
 80015ae:	001a      	movs	r2, r3
 80015b0:	2100      	movs	r1, #0
 80015b2:	f001 fe2b 	bl	800320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	0018      	movs	r0, r3
 80015ba:	2310      	movs	r3, #16
 80015bc:	001a      	movs	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	f001 fe24 	bl	800320c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c4:	0021      	movs	r1, r4
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2201      	movs	r2, #1
 80015d0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2202      	movs	r2, #2
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	0252      	lsls	r2, r2, #9
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0352      	lsls	r2, r2, #13
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 fd7b 	bl	80020ec <HAL_RCC_OscConfig>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80015fa:	f000 f8b9 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2202      	movs	r2, #2
 8001608:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2101      	movs	r1, #1
 800161a:	0018      	movs	r0, r3
 800161c:	f001 f8ec 	bl	80027f8 <HAL_RCC_ClockConfig>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001624:	f000 f8a4 	bl	8001770 <Error_Handler>
  }
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b013      	add	sp, #76	; 0x4c
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <MX_SPI1_Init+0x78>)
 8001638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_SPI1_Init+0x74>)
 800163c:	2282      	movs	r2, #130	; 0x82
 800163e:	0052      	lsls	r2, r2, #1
 8001640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_SPI1_Init+0x74>)
 800164a:	22e0      	movs	r2, #224	; 0xe0
 800164c:	00d2      	lsls	r2, r2, #3
 800164e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI1_Init+0x74>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001666:	2220      	movs	r2, #32
 8001668:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_SPI1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_SPI1_Init+0x74>)
 800167e:	2207      	movs	r2, #7
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001690:	0018      	movs	r0, r3
 8001692:	f001 fa0b 	bl	8002aac <HAL_SPI_Init>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800169a:	f000 f869 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000008c 	.word	0x2000008c
 80016a8:	40013000 	.word	0x40013000

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	240c      	movs	r4, #12
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	0018      	movs	r0, r3
 80016b8:	2314      	movs	r3, #20
 80016ba:	001a      	movs	r2, r3
 80016bc:	2100      	movs	r1, #0
 80016be:	f001 fda5 	bl	800320c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_GPIO_Init+0xc0>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_GPIO_Init+0xc0>)
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	03c9      	lsls	r1, r1, #15
 80016cc:	430a      	orrs	r2, r1
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_GPIO_Init+0xc0>)
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	03db      	lsls	r3, r3, #15
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_GPIO_Init+0xc0>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <MX_GPIO_Init+0xc0>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0289      	lsls	r1, r1, #10
 80016e8:	430a      	orrs	r2, r1
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_GPIO_Init+0xc0>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	4013      	ands	r3, r2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80016fa:	2390      	movs	r3, #144	; 0x90
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	2200      	movs	r2, #0
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	0018      	movs	r0, r3
 8001704:	f000 fcb9 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001708:	193b      	adds	r3, r7, r4
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	2284      	movs	r2, #132	; 0x84
 8001712:	0392      	lsls	r2, r2, #14
 8001714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	2201      	movs	r2, #1
 800171a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	193a      	adds	r2, r7, r4
 800171e:	2390      	movs	r3, #144	; 0x90
 8001720:	05db      	lsls	r3, r3, #23
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f000 fb23 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 800172a:	0021      	movs	r1, r4
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2201      	movs	r2, #1
 8001736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2203      	movs	r2, #3
 8001742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 8001744:	187a      	adds	r2, r7, r1
 8001746:	2390      	movs	r3, #144	; 0x90
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f000 fb0f 	bl	8001d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2102      	movs	r1, #2
 8001756:	2005      	movs	r0, #5
 8001758:	f000 fad8 	bl	8001d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800175c:	2005      	movs	r0, #5
 800175e:	f000 faea 	bl	8001d36 <HAL_NVIC_EnableIRQ>

}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b009      	add	sp, #36	; 0x24
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_MspInit+0x44>)
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_MspInit+0x44>)
 8001788:	2101      	movs	r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	619a      	str	r2, [r3, #24]
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_MspInit+0x44>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_MspInit+0x44>)
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_MspInit+0x44>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	0549      	lsls	r1, r1, #21
 80017a4:	430a      	orrs	r2, r1
 80017a6:	61da      	str	r2, [r3, #28]
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_MspInit+0x44>)
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4013      	ands	r3, r2
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	2414      	movs	r4, #20
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	0018      	movs	r0, r3
 80017d2:	2314      	movs	r3, #20
 80017d4:	001a      	movs	r2, r3
 80017d6:	2100      	movs	r1, #0
 80017d8:	f001 fd18 	bl	800320c <memset>
  if(hspi->Instance==SPI1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_SPI_MspInit+0x90>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d132      	bne.n	800184c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_SPI_MspInit+0x94>)
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_SPI_MspInit+0x94>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0149      	lsls	r1, r1, #5
 80017f0:	430a      	orrs	r2, r1
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_SPI_MspInit+0x94>)
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_SPI_MspInit+0x94>)
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_SPI_MspInit+0x94>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0289      	lsls	r1, r1, #10
 800180c:	430a      	orrs	r2, r1
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_SPI_MspInit+0x94>)
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800181e:	0021      	movs	r1, r4
 8001820:	187b      	adds	r3, r7, r1
 8001822:	22a0      	movs	r2, #160	; 0xa0
 8001824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2202      	movs	r2, #2
 800182a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2203      	movs	r2, #3
 8001836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	187a      	adds	r2, r7, r1
 8001840:	2390      	movs	r3, #144	; 0x90
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f000 fa92 	bl	8001d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b00b      	add	sp, #44	; 0x2c
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	40013000 	.word	0x40013000
 8001858:	40021000 	.word	0x40021000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler+0x4>

08001862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <HardFault_Handler+0x4>

08001868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f958 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800188e:	2002      	movs	r0, #2
 8001890:	f000 fc10 	bl	80020b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
	return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_kill>:

int _kill(int pid, int sig)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018b0:	f001 fc82 	bl	80031b8 <__errno>
 80018b4:	0003      	movs	r3, r0
 80018b6:	2216      	movs	r2, #22
 80018b8:	601a      	str	r2, [r3, #0]
	return -1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	425b      	negs	r3, r3
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_exit>:

void _exit (int status)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ce:	2301      	movs	r3, #1
 80018d0:	425a      	negs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff ffe5 	bl	80018a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018dc:	e7fe      	b.n	80018dc <_exit+0x16>

080018de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e00a      	b.n	8001906 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018f0:	e000      	b.n	80018f4 <_read+0x16>
 80018f2:	bf00      	nop
 80018f4:	0001      	movs	r1, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbf0      	blt.n	80018f0 <_read+0x12>
	}

return len;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b006      	add	sp, #24
 8001916:	bd80      	pop	{r7, pc}

08001918 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e009      	b.n	800193e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	60ba      	str	r2, [r7, #8]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	0018      	movs	r0, r3
 8001934:	e000      	b.n	8001938 <_write+0x20>
 8001936:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	dbf1      	blt.n	800192a <_write+0x12>
	}
	return len;
 8001946:	687b      	ldr	r3, [r7, #4]
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b006      	add	sp, #24
 800194e:	bd80      	pop	{r7, pc}

08001950 <_close>:

int _close(int file)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	return -1;
 8001958:	2301      	movs	r3, #1
 800195a:	425b      	negs	r3, r3
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0192      	lsls	r2, r2, #6
 8001974:	605a      	str	r2, [r3, #4]
	return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}

08001980 <_isatty>:

int _isatty(int file)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}

08001992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
	return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	18d3      	adds	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f001 fbee 	bl	80031b8 <__errno>
 80019dc:	0003      	movs	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	425b      	negs	r3, r3
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	18d2      	adds	r2, r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b006      	add	sp, #24
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20001800 	.word	0x20001800
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	2000010c 	.word	0x2000010c
 8001a10:	20000128 	.word	0x20000128

08001a14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a20:	4813      	ldr	r0, [pc, #76]	; (8001a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a22:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <LoopForever+0x6>)
    LDR R1, [R0]
 8001a26:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001a28:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <LoopForever+0xa>)
    CMP R1, R2
 8001a2c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001a2e:	d105      	bne.n	8001a3c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001a30:	4812      	ldr	r0, [pc, #72]	; (8001a7c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001a32:	4913      	ldr	r1, [pc, #76]	; (8001a80 <LoopForever+0x12>)
    STR R1, [R0]
 8001a34:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001a36:	4813      	ldr	r0, [pc, #76]	; (8001a84 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001a38:	4913      	ldr	r1, [pc, #76]	; (8001a88 <LoopForever+0x1a>)
    STR R1, [R0]
 8001a3a:	6001      	str	r1, [r0, #0]

08001a3c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001a3e:	4914      	ldr	r1, [pc, #80]	; (8001a90 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <LoopForever+0x26>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001a54:	4c11      	ldr	r4, [pc, #68]	; (8001a9c <LoopForever+0x2e>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a62:	f7ff ffd7 	bl	8001a14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a66:	f001 fbad 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6a:	f7ff fd5f 	bl	800152c <main>

08001a6e <LoopForever>:

LoopForever:
    b LoopForever
 8001a6e:	e7fe      	b.n	8001a6e <LoopForever>
  ldr   r0, =_estack
 8001a70:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001a74:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001a78:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001a7c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001a80:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001a84:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001a88:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a94:	0800457c 	.word	0x0800457c
  ldr r2, =_sbss
 8001a98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a9c:	20000124 	.word	0x20000124

08001aa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC1_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_Init+0x24>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_Init+0x24>)
 8001aae:	2110      	movs	r1, #16
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f000 f809 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aba:	f7ff fe5f 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_InitTick+0x5c>)
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_InitTick+0x60>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	0019      	movs	r1, r3
 8001ade:	23fa      	movs	r3, #250	; 0xfa
 8001ae0:	0098      	lsls	r0, r3, #2
 8001ae2:	f7fe fb1b 	bl	800011c <__udivsi3>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	0019      	movs	r1, r3
 8001aea:	0020      	movs	r0, r4
 8001aec:	f7fe fb16 	bl	800011c <__udivsi3>
 8001af0:	0003      	movs	r3, r0
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 f92f 	bl	8001d56 <HAL_SYSTICK_Config>
 8001af8:	1e03      	subs	r3, r0, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e00f      	b.n	8001b20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d80b      	bhi.n	8001b1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	425b      	negs	r3, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 f8fc 	bl	8001d0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_InitTick+0x64>)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b003      	add	sp, #12
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_IncTick+0x1c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x20>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	18d2      	adds	r2, r2, r3
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_IncTick+0x20>)
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000110 	.word	0x20000110

08001b58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <HAL_GetTick+0x10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	20000110 	.word	0x20000110

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3301      	adds	r3, #1
 8001b84:	d005      	beq.n	8001b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_Delay+0x44>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	189b      	adds	r3, r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	f7ff ffe0 	bl	8001b58 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8f7      	bhi.n	8001b94 <HAL_Delay+0x28>
  {
  }
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	0002      	movs	r2, r0
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8001bc6:	d809      	bhi.n	8001bdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	001a      	movs	r2, r3
 8001bce:	231f      	movs	r3, #31
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_EnableIRQ+0x30>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4091      	lsls	r1, r2
 8001bd8:	000a      	movs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
  }
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	0002      	movs	r2, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001bfc:	d828      	bhi.n	8001c50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bfe:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <__NVIC_SetPriority+0xd4>)
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	33c0      	adds	r3, #192	; 0xc0
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	589b      	ldr	r3, [r3, r2]
 8001c0e:	1dfa      	adds	r2, r7, #7
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	0011      	movs	r1, r2
 8001c14:	2203      	movs	r2, #3
 8001c16:	400a      	ands	r2, r1
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	21ff      	movs	r1, #255	; 0xff
 8001c1c:	4091      	lsls	r1, r2
 8001c1e:	000a      	movs	r2, r1
 8001c20:	43d2      	mvns	r2, r2
 8001c22:	401a      	ands	r2, r3
 8001c24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	019b      	lsls	r3, r3, #6
 8001c2a:	22ff      	movs	r2, #255	; 0xff
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	0018      	movs	r0, r3
 8001c34:	2303      	movs	r3, #3
 8001c36:	4003      	ands	r3, r0
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c3c:	481f      	ldr	r0, [pc, #124]	; (8001cbc <__NVIC_SetPriority+0xd4>)
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	430a      	orrs	r2, r1
 8001c48:	33c0      	adds	r3, #192	; 0xc0
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c4e:	e031      	b.n	8001cb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <__NVIC_SetPriority+0xd8>)
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	0019      	movs	r1, r3
 8001c58:	230f      	movs	r3, #15
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	3b08      	subs	r3, #8
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3306      	adds	r3, #6
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	18d3      	adds	r3, r2, r3
 8001c66:	3304      	adds	r3, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1dfa      	adds	r2, r7, #7
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	0011      	movs	r1, r2
 8001c70:	2203      	movs	r2, #3
 8001c72:	400a      	ands	r2, r1
 8001c74:	00d2      	lsls	r2, r2, #3
 8001c76:	21ff      	movs	r1, #255	; 0xff
 8001c78:	4091      	lsls	r1, r2
 8001c7a:	000a      	movs	r2, r1
 8001c7c:	43d2      	mvns	r2, r2
 8001c7e:	401a      	ands	r2, r3
 8001c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	22ff      	movs	r2, #255	; 0xff
 8001c88:	401a      	ands	r2, r3
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2303      	movs	r3, #3
 8001c92:	4003      	ands	r3, r0
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <__NVIC_SetPriority+0xd8>)
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	001c      	movs	r4, r3
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	4023      	ands	r3, r4
 8001ca4:	3b08      	subs	r3, #8
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	3306      	adds	r3, #6
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	18c3      	adds	r3, r0, r3
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b003      	add	sp, #12
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1e5a      	subs	r2, r3, #1
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	045b      	lsls	r3, r3, #17
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d301      	bcc.n	8001cdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e010      	b.n	8001cfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <SysTick_Config+0x44>)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	3a01      	subs	r2, #1
 8001ce2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	2103      	movs	r1, #3
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff ff7c 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x44>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x44>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	210f      	movs	r1, #15
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	1c02      	adds	r2, r0, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b25b      	sxtb	r3, r3
 8001d26:	0011      	movs	r1, r2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff ff5d 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b004      	add	sp, #16
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff ff33 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff ffaf 	bl	8001cc4 <SysTick_Config>
 8001d66:	0003      	movs	r3, r0
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	e149      	b.n	8002014 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4091      	lsls	r1, r2
 8001d8a:	000a      	movs	r2, r1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d100      	bne.n	8001d98 <HAL_GPIO_Init+0x28>
 8001d96:	e13a      	b.n	800200e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d005      	beq.n	8001db0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d130      	bne.n	8001e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de6:	2201      	movs	r2, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	43da      	mvns	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	091b      	lsrs	r3, r3, #4
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2203      	movs	r2, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d017      	beq.n	8001e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2203      	movs	r2, #3
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d123      	bne.n	8001ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	58d3      	ldr	r3, [r2, r3]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	43da      	mvns	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2107      	movs	r1, #7
 8001e86:	400b      	ands	r3, r1
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	6939      	ldr	r1, [r7, #16]
 8001ea0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	0013      	movs	r3, r2
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d100      	bne.n	8001ee4 <HAL_GPIO_Init+0x174>
 8001ee2:	e094      	b.n	800200e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee4:	4b51      	ldr	r3, [pc, #324]	; (800202c <HAL_GPIO_Init+0x2bc>)
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_GPIO_Init+0x2bc>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	430a      	orrs	r2, r1
 8001eee:	619a      	str	r2, [r3, #24]
 8001ef0:	4b4e      	ldr	r3, [pc, #312]	; (800202c <HAL_GPIO_Init+0x2bc>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001efc:	4a4c      	ldr	r2, [pc, #304]	; (8002030 <HAL_GPIO_Init+0x2c0>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	589b      	ldr	r3, [r3, r2]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	409a      	lsls	r2, r3
 8001f16:	0013      	movs	r3, r2
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	2390      	movs	r3, #144	; 0x90
 8001f24:	05db      	lsls	r3, r3, #23
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x1d6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a41      	ldr	r2, [pc, #260]	; (8002034 <HAL_GPIO_Init+0x2c4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x1d2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a40      	ldr	r2, [pc, #256]	; (8002038 <HAL_GPIO_Init+0x2c8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x1ce>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x1d8>
 8001f3e:	2305      	movs	r3, #5
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x1d8>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x1d8>
 8001f46:	2300      	movs	r3, #0
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	; (8002030 <HAL_GPIO_Init+0x2c0>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f66:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	025b      	lsls	r3, r3, #9
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	035b      	lsls	r3, r3, #13
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	039b      	lsls	r3, r3, #14
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_GPIO_Init+0x2cc>)
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	40da      	lsrs	r2, r3
 800201c:	1e13      	subs	r3, r2, #0
 800201e:	d000      	beq.n	8002022 <HAL_GPIO_Init+0x2b2>
 8002020:	e6ae      	b.n	8001d80 <HAL_GPIO_Init+0x10>
  } 
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b006      	add	sp, #24
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000
 8002034:	48000400 	.word	0x48000400
 8002038:	48000800 	.word	0x48000800
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	000a      	movs	r2, r1
 800204a:	1cbb      	adds	r3, r7, #2
 800204c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	1cba      	adds	r2, r7, #2
 8002054:	8812      	ldrh	r2, [r2, #0]
 8002056:	4013      	ands	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800205a:	230f      	movs	r3, #15
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e003      	b.n	800206c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002064:	230f      	movs	r3, #15
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800206c:	230f      	movs	r3, #15
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	781b      	ldrb	r3, [r3, #0]
  }
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b004      	add	sp, #16
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	0008      	movs	r0, r1
 8002084:	0011      	movs	r1, r2
 8002086:	1cbb      	adds	r3, r7, #2
 8002088:	1c02      	adds	r2, r0, #0
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	1c7b      	adds	r3, r7, #1
 800208e:	1c0a      	adds	r2, r1, #0
 8002090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002092:	1c7b      	adds	r3, r7, #1
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800209a:	1cbb      	adds	r3, r7, #2
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a2:	e003      	b.n	80020ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a4:	1cbb      	adds	r3, r7, #2
 80020a6:	881a      	ldrh	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	0002      	movs	r2, r0
 80020bc:	1dbb      	adds	r3, r7, #6
 80020be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	1dba      	adds	r2, r7, #6
 80020c6:	8812      	ldrh	r2, [r2, #0]
 80020c8:	4013      	ands	r3, r2
 80020ca:	d008      	beq.n	80020de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020ce:	1dba      	adds	r2, r7, #6
 80020d0:	8812      	ldrh	r2, [r2, #0]
 80020d2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d4:	1dbb      	adds	r3, r7, #6
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	0018      	movs	r0, r3
 80020da:	f7fe f8d9 	bl	8000290 <HAL_GPIO_EXTI_Callback>
  }
}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f000 fb76 	bl	80027ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	4013      	ands	r3, r2
 8002108:	d100      	bne.n	800210c <HAL_RCC_OscConfig+0x20>
 800210a:	e08e      	b.n	800222a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800210c:	4bc5      	ldr	r3, [pc, #788]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	220c      	movs	r2, #12
 8002112:	4013      	ands	r3, r2
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00e      	beq.n	8002136 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4bc2      	ldr	r3, [pc, #776]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
 8002120:	2b08      	cmp	r3, #8
 8002122:	d117      	bne.n	8002154 <HAL_RCC_OscConfig+0x68>
 8002124:	4bbf      	ldr	r3, [pc, #764]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	23c0      	movs	r3, #192	; 0xc0
 800212a:	025b      	lsls	r3, r3, #9
 800212c:	401a      	ands	r2, r3
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	429a      	cmp	r2, r3
 8002134:	d10e      	bne.n	8002154 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	4bbb      	ldr	r3, [pc, #748]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	4013      	ands	r3, r2
 8002140:	d100      	bne.n	8002144 <HAL_RCC_OscConfig+0x58>
 8002142:	e071      	b.n	8002228 <HAL_RCC_OscConfig+0x13c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d000      	beq.n	800214e <HAL_RCC_OscConfig+0x62>
 800214c:	e06c      	b.n	8002228 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f000 fb4c 	bl	80027ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x80>
 800215c:	4bb1      	ldr	r3, [pc, #708]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4bb0      	ldr	r3, [pc, #704]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	0249      	lsls	r1, r1, #9
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e02f      	b.n	80021cc <HAL_RCC_OscConfig+0xe0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0xa2>
 8002174:	4bab      	ldr	r3, [pc, #684]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4baa      	ldr	r3, [pc, #680]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800217a:	49ab      	ldr	r1, [pc, #684]	; (8002428 <HAL_RCC_OscConfig+0x33c>)
 800217c:	400a      	ands	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4ba8      	ldr	r3, [pc, #672]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4ba7      	ldr	r3, [pc, #668]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002186:	49a9      	ldr	r1, [pc, #676]	; (800242c <HAL_RCC_OscConfig+0x340>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e01e      	b.n	80021cc <HAL_RCC_OscConfig+0xe0>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b05      	cmp	r3, #5
 8002194:	d10e      	bne.n	80021b4 <HAL_RCC_OscConfig+0xc8>
 8002196:	4ba3      	ldr	r3, [pc, #652]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4ba2      	ldr	r3, [pc, #648]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	02c9      	lsls	r1, r1, #11
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	4b9f      	ldr	r3, [pc, #636]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b9e      	ldr	r3, [pc, #632]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	0249      	lsls	r1, r1, #9
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xe0>
 80021b4:	4b9b      	ldr	r3, [pc, #620]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b9a      	ldr	r3, [pc, #616]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80021ba:	499b      	ldr	r1, [pc, #620]	; (8002428 <HAL_RCC_OscConfig+0x33c>)
 80021bc:	400a      	ands	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	4b98      	ldr	r3, [pc, #608]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b97      	ldr	r3, [pc, #604]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80021c6:	4999      	ldr	r1, [pc, #612]	; (800242c <HAL_RCC_OscConfig+0x340>)
 80021c8:	400a      	ands	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d014      	beq.n	80021fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fcc0 	bl	8001b58 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021de:	f7ff fcbb 	bl	8001b58 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b64      	cmp	r3, #100	; 0x64
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e2fd      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	029b      	lsls	r3, r3, #10
 80021f8:	4013      	ands	r3, r2
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0xf2>
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fcab 	bl	8001b58 <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff fca6 	bl	8001b58 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e2e8      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	4013      	ands	r3, r2
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x11c>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2202      	movs	r2, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d100      	bne.n	8002236 <HAL_RCC_OscConfig+0x14a>
 8002234:	e06c      	b.n	8002310 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	220c      	movs	r2, #12
 800223c:	4013      	ands	r3, r2
 800223e:	d00e      	beq.n	800225e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002240:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	220c      	movs	r2, #12
 8002246:	4013      	ands	r3, r2
 8002248:	2b08      	cmp	r3, #8
 800224a:	d11f      	bne.n	800228c <HAL_RCC_OscConfig+0x1a0>
 800224c:	4b75      	ldr	r3, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	23c0      	movs	r3, #192	; 0xc0
 8002252:	025b      	lsls	r3, r3, #9
 8002254:	401a      	ands	r2, r3
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	429a      	cmp	r2, r3
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b71      	ldr	r3, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d005      	beq.n	8002274 <HAL_RCC_OscConfig+0x188>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e2bb      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	22f8      	movs	r2, #248	; 0xf8
 800227a:	4393      	bics	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00da      	lsls	r2, r3, #3
 8002284:	4b67      	ldr	r3, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e041      	b.n	8002310 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d024      	beq.n	80022de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b63      	ldr	r3, [pc, #396]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800229a:	2101      	movs	r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fc5a 	bl	8001b58 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7ff fc55 	bl	8001b58 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e297      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2202      	movs	r2, #2
 80022c2:	4013      	ands	r3, r2
 80022c4:	d0f1      	beq.n	80022aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b57      	ldr	r3, [pc, #348]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	22f8      	movs	r2, #248	; 0xf8
 80022cc:	4393      	bics	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00da      	lsls	r2, r3, #3
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e018      	b.n	8002310 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b51      	ldr	r3, [pc, #324]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	438a      	bics	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fc35 	bl	8001b58 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff fc30 	bl	8001b58 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e272      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2202      	movs	r2, #2
 800230c:	4013      	ands	r3, r2
 800230e:	d1f1      	bne.n	80022f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2208      	movs	r2, #8
 8002316:	4013      	ands	r3, r2
 8002318:	d036      	beq.n	8002388 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d019      	beq.n	8002356 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002326:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002328:	2101      	movs	r1, #1
 800232a:	430a      	orrs	r2, r1
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff fc13 	bl	8001b58 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fc0e 	bl	8001b58 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e250      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	2202      	movs	r2, #2
 8002350:	4013      	ands	r3, r2
 8002352:	d0f1      	beq.n	8002338 <HAL_RCC_OscConfig+0x24c>
 8002354:	e018      	b.n	8002388 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002356:	4b33      	ldr	r3, [pc, #204]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235a:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800235c:	2101      	movs	r1, #1
 800235e:	438a      	bics	r2, r1
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7ff fbf9 	bl	8001b58 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff fbf4 	bl	8001b58 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e236      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d1f1      	bne.n	800236c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2204      	movs	r2, #4
 800238e:	4013      	ands	r3, r2
 8002390:	d100      	bne.n	8002394 <HAL_RCC_OscConfig+0x2a8>
 8002392:	e0b5      	b.n	8002500 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002394:	201f      	movs	r0, #31
 8002396:	183b      	adds	r3, r7, r0
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	4013      	ands	r3, r2
 80023a6:	d110      	bne.n	80023ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	0549      	lsls	r1, r1, #21
 80023b2:	430a      	orrs	r2, r1
 80023b4:	61da      	str	r2, [r3, #28]
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	055b      	lsls	r3, r3, #21
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023c4:	183b      	adds	r3, r7, r0
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_OscConfig+0x344>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d11a      	bne.n	800240c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_RCC_OscConfig+0x344>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_RCC_OscConfig+0x344>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0049      	lsls	r1, r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e4:	f7ff fbb8 	bl	8001b58 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ee:	f7ff fbb3 	bl	8001b58 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b64      	cmp	r3, #100	; 0x64
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1f5      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_OscConfig+0x344>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4013      	ands	r3, r2
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10f      	bne.n	8002434 <HAL_RCC_OscConfig+0x348>
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	4b02      	ldr	r3, [pc, #8]	; (8002424 <HAL_RCC_OscConfig+0x338>)
 800241a:	2101      	movs	r1, #1
 800241c:	430a      	orrs	r2, r1
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	e036      	b.n	8002490 <HAL_RCC_OscConfig+0x3a4>
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	40021000 	.word	0x40021000
 8002428:	fffeffff 	.word	0xfffeffff
 800242c:	fffbffff 	.word	0xfffbffff
 8002430:	40007000 	.word	0x40007000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x36a>
 800243c:	4bca      	ldr	r3, [pc, #808]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	4bc9      	ldr	r3, [pc, #804]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002442:	2101      	movs	r1, #1
 8002444:	438a      	bics	r2, r1
 8002446:	621a      	str	r2, [r3, #32]
 8002448:	4bc7      	ldr	r3, [pc, #796]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	4bc6      	ldr	r3, [pc, #792]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800244e:	2104      	movs	r1, #4
 8002450:	438a      	bics	r2, r1
 8002452:	621a      	str	r2, [r3, #32]
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x3a4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x38c>
 800245e:	4bc2      	ldr	r3, [pc, #776]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	4bc1      	ldr	r3, [pc, #772]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002464:	2104      	movs	r1, #4
 8002466:	430a      	orrs	r2, r1
 8002468:	621a      	str	r2, [r3, #32]
 800246a:	4bbf      	ldr	r3, [pc, #764]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	4bbe      	ldr	r3, [pc, #760]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002470:	2101      	movs	r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	621a      	str	r2, [r3, #32]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x3a4>
 8002478:	4bbb      	ldr	r3, [pc, #748]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	4bba      	ldr	r3, [pc, #744]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800247e:	2101      	movs	r1, #1
 8002480:	438a      	bics	r2, r1
 8002482:	621a      	str	r2, [r3, #32]
 8002484:	4bb8      	ldr	r3, [pc, #736]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	4bb7      	ldr	r3, [pc, #732]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d014      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7ff fb5e 	bl	8001b58 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7ff fb59 	bl	8001b58 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4aaf      	ldr	r2, [pc, #700]	; (800276c <HAL_RCC_OscConfig+0x680>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e19a      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	4bac      	ldr	r3, [pc, #688]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3b6>
 80024c0:	e013      	b.n	80024ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7ff fb49 	bl	8001b58 <HAL_GetTick>
 80024c6:	0003      	movs	r3, r0
 80024c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ca:	e009      	b.n	80024e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7ff fb44 	bl	8001b58 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	4aa5      	ldr	r2, [pc, #660]	; (800276c <HAL_RCC_OscConfig+0x680>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e185      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4ba1      	ldr	r3, [pc, #644]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ea:	231f      	movs	r3, #31
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b9c      	ldr	r3, [pc, #624]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80024fa:	499d      	ldr	r1, [pc, #628]	; (8002770 <HAL_RCC_OscConfig+0x684>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2210      	movs	r2, #16
 8002506:	4013      	ands	r3, r2
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12a      	bne.n	8002568 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002512:	4b95      	ldr	r3, [pc, #596]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002516:	4b94      	ldr	r3, [pc, #592]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002518:	2104      	movs	r1, #4
 800251a:	430a      	orrs	r2, r1
 800251c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800251e:	4b92      	ldr	r3, [pc, #584]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002522:	4b91      	ldr	r3, [pc, #580]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002524:	2101      	movs	r1, #1
 8002526:	430a      	orrs	r2, r1
 8002528:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7ff fb15 	bl	8001b58 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002534:	f7ff fb10 	bl	8001b58 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e152      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002546:	4b88      	ldr	r3, [pc, #544]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d0f1      	beq.n	8002534 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002550:	4b85      	ldr	r3, [pc, #532]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	22f8      	movs	r2, #248	; 0xf8
 8002556:	4393      	bics	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	00da      	lsls	r2, r3, #3
 8002560:	4b81      	ldr	r3, [pc, #516]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
 8002566:	e034      	b.n	80025d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	3305      	adds	r3, #5
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002570:	4b7d      	ldr	r3, [pc, #500]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002574:	4b7c      	ldr	r3, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002576:	2104      	movs	r1, #4
 8002578:	438a      	bics	r2, r1
 800257a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800257c:	4b7a      	ldr	r3, [pc, #488]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	22f8      	movs	r2, #248	; 0xf8
 8002582:	4393      	bics	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	00da      	lsls	r2, r3, #3
 800258c:	4b76      	ldr	r3, [pc, #472]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800258e:	430a      	orrs	r2, r1
 8002590:	635a      	str	r2, [r3, #52]	; 0x34
 8002592:	e01e      	b.n	80025d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002594:	4b74      	ldr	r3, [pc, #464]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002598:	4b73      	ldr	r3, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800259a:	2104      	movs	r1, #4
 800259c:	430a      	orrs	r2, r1
 800259e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80025a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a4:	4b70      	ldr	r3, [pc, #448]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	438a      	bics	r2, r1
 80025aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7ff fad4 	bl	8001b58 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025b6:	f7ff facf 	bl	8001b58 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e111      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025c8:	4b67      	ldr	r3, [pc, #412]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	2202      	movs	r2, #2
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f1      	bne.n	80025b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d05c      	beq.n	8002696 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025dc:	4b62      	ldr	r3, [pc, #392]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	220c      	movs	r2, #12
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	d00e      	beq.n	8002606 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025e8:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	220c      	movs	r2, #12
 80025ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d114      	bne.n	800261e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025f4:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	23c0      	movs	r3, #192	; 0xc0
 80025fa:	025b      	lsls	r3, r3, #9
 80025fc:	401a      	ands	r2, r3
 80025fe:	23c0      	movs	r3, #192	; 0xc0
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	429a      	cmp	r2, r3
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002606:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	4013      	ands	r3, r2
 8002610:	d040      	beq.n	8002694 <HAL_RCC_OscConfig+0x5a8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d03c      	beq.n	8002694 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0e6      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01b      	beq.n	800265e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002626:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262a:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0249      	lsls	r1, r1, #9
 8002630:	430a      	orrs	r2, r1
 8002632:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff fa90 	bl	8001b58 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800263e:	f7ff fa8b 	bl	8001b58 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0cd      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002650:	4b45      	ldr	r3, [pc, #276]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	025b      	lsls	r3, r3, #9
 8002658:	4013      	ands	r3, r2
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x552>
 800265c:	e01b      	b.n	8002696 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002664:	4943      	ldr	r1, [pc, #268]	; (8002774 <HAL_RCC_OscConfig+0x688>)
 8002666:	400a      	ands	r2, r1
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7ff fa75 	bl	8001b58 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002674:	f7ff fa70 	bl	8001b58 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0b2      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	025b      	lsls	r3, r3, #9
 800268e:	4013      	ands	r3, r2
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x588>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002694:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d100      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5b4>
 800269e:	e0a4      	b.n	80027ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	220c      	movs	r2, #12
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d100      	bne.n	80026ae <HAL_RCC_OscConfig+0x5c2>
 80026ac:	e078      	b.n	80027a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d14c      	bne.n	8002750 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80026bc:	492e      	ldr	r1, [pc, #184]	; (8002778 <HAL_RCC_OscConfig+0x68c>)
 80026be:	400a      	ands	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7ff fa49 	bl	8001b58 <HAL_GetTick>
 80026c6:	0003      	movs	r3, r0
 80026c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff fa44 	bl	8001b58 <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e086      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	049b      	lsls	r3, r3, #18
 80026e6:	4013      	ands	r3, r2
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	220f      	movs	r2, #15
 80026f0:	4393      	bics	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_RCC_OscConfig+0x690>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	431a      	orrs	r2, r3
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	0449      	lsls	r1, r1, #17
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff fa17 	bl	8001b58 <HAL_GetTick>
 800272a:	0003      	movs	r3, r0
 800272c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff fa12 	bl	8001b58 <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e054      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	049b      	lsls	r3, r3, #18
 800274a:	4013      	ands	r3, r2
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x644>
 800274e:	e04c      	b.n	80027ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_OscConfig+0x67c>)
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <HAL_RCC_OscConfig+0x68c>)
 8002758:	400a      	ands	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff f9fc 	bl	8001b58 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x6a6>
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	40021000 	.word	0x40021000
 800276c:	00001388 	.word	0x00001388
 8002770:	efffffff 	.word	0xefffffff
 8002774:	fffeffff 	.word	0xfffeffff
 8002778:	feffffff 	.word	0xfeffffff
 800277c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff f9ea 	bl	8001b58 <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e02c      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_RCC_OscConfig+0x708>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	049b      	lsls	r3, r3, #18
 800279a:	4013      	ands	r3, r2
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x694>
 800279e:	e024      	b.n	80027ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e01f      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_RCC_OscConfig+0x708>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_RCC_OscConfig+0x708>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	025b      	lsls	r3, r3, #9
 80027be:	401a      	ands	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d10e      	bne.n	80027e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	220f      	movs	r2, #15
 80027cc:	401a      	ands	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	23f0      	movs	r3, #240	; 0xf0
 80027da:	039b      	lsls	r3, r3, #14
 80027dc:	401a      	ands	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b008      	add	sp, #32
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0bf      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b61      	ldr	r3, [pc, #388]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d911      	bls.n	800283e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	4393      	bics	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0a6      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2202      	movs	r2, #2
 8002844:	4013      	ands	r3, r2
 8002846:	d015      	beq.n	8002874 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	d006      	beq.n	8002860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002852:	4b51      	ldr	r3, [pc, #324]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002858:	21e0      	movs	r1, #224	; 0xe0
 800285a:	00c9      	lsls	r1, r1, #3
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	22f0      	movs	r2, #240	; 0xf0
 8002866:	4393      	bics	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2201      	movs	r2, #1
 800287a:	4013      	ands	r3, r2
 800287c:	d04c      	beq.n	8002918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b44      	ldr	r3, [pc, #272]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	029b      	lsls	r3, r3, #10
 800288e:	4013      	ands	r3, r2
 8002890:	d120      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07a      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	049b      	lsls	r3, r3, #18
 80028a6:	4013      	ands	r3, r2
 80028a8:	d114      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06e      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	025b      	lsls	r3, r3, #9
 80028be:	4013      	ands	r3, r2
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e062      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2202      	movs	r2, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e05b      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2203      	movs	r2, #3
 80028da:	4393      	bics	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e8:	f7ff f936 	bl	8001b58 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f0:	e009      	b.n	8002906 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7ff f931 	bl	8001b58 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <HAL_RCC_ClockConfig+0x1a4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e042      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	220c      	movs	r2, #12
 800290c:	401a      	ands	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1ec      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d211      	bcs.n	800294a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	4393      	bics	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_RCC_ClockConfig+0x19c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e020      	b.n	800298c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d009      	beq.n	8002968 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_RCC_ClockConfig+0x1a8>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002968:	f000 f820 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296c:	0001      	movs	r1, r0
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_RCC_ClockConfig+0x1a0>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	220f      	movs	r2, #15
 8002976:	4013      	ands	r3, r2
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1ac>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	000a      	movs	r2, r1
 800297e:	40da      	lsrs	r2, r3
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002982:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002984:	2001      	movs	r0, #1
 8002986:	f7ff f8a1 	bl	8001acc <HAL_InitTick>
  
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40022000 	.word	0x40022000
 8002998:	40021000 	.word	0x40021000
 800299c:	00001388 	.word	0x00001388
 80029a0:	fffff8ff 	.word	0xfffff8ff
 80029a4:	0800441c 	.word	0x0800441c
 80029a8:	20000000 	.word	0x20000000

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08f      	sub	sp, #60	; 0x3c
 80029b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80029b2:	2314      	movs	r3, #20
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xec>)
 80029b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029ba:	c313      	stmia	r3!, {r0, r1, r4}
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4a36      	ldr	r2, [pc, #216]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xf0>)
 80029c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029c6:	c313      	stmia	r3!, {r0, r1, r4}
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d4:	2300      	movs	r3, #0
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80029e0:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	220c      	movs	r2, #12
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d047      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0xd4>
 80029f0:	d849      	bhi.n	8002a86 <HAL_RCC_GetSysClockFreq+0xda>
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x50>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x56>
 80029fa:	e044      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a00:	e044      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	0c9b      	lsrs	r3, r3, #18
 8002a06:	220f      	movs	r2, #15
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2214      	movs	r2, #20
 8002a0c:	18ba      	adds	r2, r7, r2
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	220f      	movs	r2, #15
 8002a18:	4013      	ands	r3, r2
 8002a1a:	1d3a      	adds	r2, r7, #4
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a22:	23c0      	movs	r3, #192	; 0xc0
 8002a24:	025b      	lsls	r3, r3, #9
 8002a26:	401a      	ands	r2, r3
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	025b      	lsls	r3, r3, #9
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a32:	481c      	ldr	r0, [pc, #112]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a34:	f7fd fb72 	bl	800011c <__udivsi3>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	4353      	muls	r3, r2
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
 8002a42:	e01a      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a46:	23c0      	movs	r3, #192	; 0xc0
 8002a48:	025b      	lsls	r3, r3, #9
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	23c0      	movs	r3, #192	; 0xc0
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d109      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a56:	4814      	ldr	r0, [pc, #80]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a58:	f7fd fb60 	bl	800011c <__udivsi3>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	001a      	movs	r2, r3
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	4353      	muls	r3, r2
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a6a:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6c:	f7fd fb56 	bl	800011c <__udivsi3>
 8002a70:	0003      	movs	r3, r0
 8002a72:	001a      	movs	r2, r3
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	4353      	muls	r3, r2
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a7e:	e005      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a84:	e002      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b00f      	add	sp, #60	; 0x3c
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	080043d0 	.word	0x080043d0
 8002a9c:	080043e0 	.word	0x080043e0
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	02dc6c00 	.word	0x02dc6c00

08002aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0a8      	b.n	8002c10 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	2382      	movs	r3, #130	; 0x82
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d009      	beq.n	8002ae6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	61da      	str	r2, [r3, #28]
 8002ad8:	e005      	b.n	8002ae6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	225d      	movs	r2, #93	; 0x5d
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	225c      	movs	r2, #92	; 0x5c
 8002afc:	2100      	movs	r1, #0
 8002afe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7fe fe5e 	bl	80017c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	225d      	movs	r2, #93	; 0x5d
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	438a      	bics	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	23e0      	movs	r3, #224	; 0xe0
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d902      	bls.n	8002b32 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e002      	b.n	8002b38 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	015b      	lsls	r3, r3, #5
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	23f0      	movs	r3, #240	; 0xf0
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d008      	beq.n	8002b56 <HAL_SPI_Init+0xaa>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	23e0      	movs	r3, #224	; 0xe0
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d002      	beq.n	8002b56 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	2382      	movs	r3, #130	; 0x82
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	2384      	movs	r3, #132	; 0x84
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	400b      	ands	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2102      	movs	r1, #2
 8002b72:	400b      	ands	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6999      	ldr	r1, [r3, #24]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	400b      	ands	r3, r1
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2138      	movs	r1, #56	; 0x38
 8002b92:	400b      	ands	r3, r1
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	0011      	movs	r1, r2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	2204      	movs	r2, #4
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	2108      	movs	r1, #8
 8002bce:	400b      	ands	r3, r1
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68d9      	ldr	r1, [r3, #12]
 8002bd6:	23f0      	movs	r3, #240	; 0xf0
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	400b      	ands	r3, r1
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	0011      	movs	r1, r2
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	015b      	lsls	r3, r3, #5
 8002be6:	401a      	ands	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4907      	ldr	r1, [pc, #28]	; (8002c18 <HAL_SPI_Init+0x16c>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	225d      	movs	r2, #93	; 0x5d
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	fffff7ff 	.word	0xfffff7ff

08002c1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	1dbb      	adds	r3, r7, #6
 8002c2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c2c:	231f      	movs	r3, #31
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	225c      	movs	r2, #92	; 0x5c
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_SPI_Transmit+0x26>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e140      	b.n	8002ec4 <HAL_SPI_Transmit+0x2a8>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	225c      	movs	r2, #92	; 0x5c
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c4a:	f7fe ff85 	bl	8001b58 <HAL_GetTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c52:	2316      	movs	r3, #22
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	1dba      	adds	r2, r7, #6
 8002c58:	8812      	ldrh	r2, [r2, #0]
 8002c5a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	225d      	movs	r2, #93	; 0x5d
 8002c60:	5c9b      	ldrb	r3, [r3, r2]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d004      	beq.n	8002c72 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002c68:	231f      	movs	r3, #31
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c70:	e11d      	b.n	8002eae <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_SPI_Transmit+0x64>
 8002c78:	1dbb      	adds	r3, r7, #6
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002c80:	231f      	movs	r3, #31
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c88:	e111      	b.n	8002eae <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	225d      	movs	r2, #93	; 0x5d
 8002c8e:	2103      	movs	r1, #3
 8002c90:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1dba      	adds	r2, r7, #6
 8002ca2:	8812      	ldrh	r2, [r2, #0]
 8002ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1dba      	adds	r2, r7, #6
 8002caa:	8812      	ldrh	r2, [r2, #0]
 8002cac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2244      	movs	r2, #68	; 0x44
 8002cb8:	2100      	movs	r1, #0
 8002cba:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2246      	movs	r2, #70	; 0x46
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d110      	bne.n	8002cfe <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2140      	movs	r1, #64	; 0x40
 8002ce8:	438a      	bics	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	01c9      	lsls	r1, r1, #7
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2240      	movs	r2, #64	; 0x40
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b40      	cmp	r3, #64	; 0x40
 8002d0a:	d007      	beq.n	8002d1c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2140      	movs	r1, #64	; 0x40
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	23e0      	movs	r3, #224	; 0xe0
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d94e      	bls.n	8002dc6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_SPI_Transmit+0x11e>
 8002d30:	2316      	movs	r3, #22
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d13f      	bne.n	8002dba <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	881a      	ldrh	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	1c9a      	adds	r2, r3, #2
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d5e:	e02c      	b.n	8002dba <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2202      	movs	r2, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d112      	bne.n	8002d94 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	1c9a      	adds	r2, r3, #2
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d92:	e012      	b.n	8002dba <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d94:	f7fe fee0 	bl	8001b58 <HAL_GetTick>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d802      	bhi.n	8002daa <HAL_SPI_Transmit+0x18e>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HAL_SPI_Transmit+0x194>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002db0:	231f      	movs	r3, #31
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	2203      	movs	r2, #3
 8002db6:	701a      	strb	r2, [r3, #0]
          goto error;
 8002db8:	e079      	b.n	8002eae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1cd      	bne.n	8002d60 <HAL_SPI_Transmit+0x144>
 8002dc4:	e04f      	b.n	8002e66 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <HAL_SPI_Transmit+0x1bc>
 8002dce:	2316      	movs	r3, #22
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d141      	bne.n	8002e5c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	7812      	ldrb	r2, [r2, #0]
 8002de4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002dfe:	e02d      	b.n	8002e5c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2202      	movs	r2, #2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d113      	bne.n	8002e36 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e34:	e012      	b.n	8002e5c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e36:	f7fe fe8f 	bl	8001b58 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d802      	bhi.n	8002e4c <HAL_SPI_Transmit+0x230>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	d102      	bne.n	8002e52 <HAL_SPI_Transmit+0x236>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002e52:	231f      	movs	r3, #31
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2203      	movs	r2, #3
 8002e58:	701a      	strb	r2, [r3, #0]
          goto error;
 8002e5a:	e028      	b.n	8002eae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1cc      	bne.n	8002e00 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	6839      	ldr	r1, [r7, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 f95d 	bl	800312c <SPI_EndRxTxTransaction>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002ea2:	231f      	movs	r3, #31
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e000      	b.n	8002eae <HAL_SPI_Transmit+0x292>
  }

error:
 8002eac:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	225d      	movs	r2, #93	; 0x5d
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	225c      	movs	r2, #92	; 0x5c
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ebe:	231f      	movs	r3, #31
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	781b      	ldrb	r3, [r3, #0]
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b008      	add	sp, #32
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002edc:	f7fe fe3c 	bl	8001b58 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	18d3      	adds	r3, r2, r3
 8002eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eec:	f7fe fe34 	bl	8001b58 <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	015b      	lsls	r3, r3, #5
 8002efa:	0d1b      	lsrs	r3, r3, #20
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	4353      	muls	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f02:	e058      	b.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	d055      	beq.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f0a:	f7fe fe25 	bl	8001b58 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d902      	bls.n	8002f20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d142      	bne.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	21e0      	movs	r1, #224	; 0xe0
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	2382      	movs	r3, #130	; 0x82
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d113      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d005      	beq.n	8002f54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d107      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	438a      	bics	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	019b      	lsls	r3, r3, #6
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d110      	bne.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	491a      	ldr	r1, [pc, #104]	; (8002fe4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	0189      	lsls	r1, r1, #6
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	225d      	movs	r2, #93	; 0x5d
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	225c      	movs	r2, #92	; 0x5c
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e017      	b.n	8002fd6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	425a      	negs	r2, r3
 8002fc6:	4153      	adcs	r3, r2
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	001a      	movs	r2, r3
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d197      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b008      	add	sp, #32
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	ffffdfff 	.word	0xffffdfff

08002fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ff6:	2317      	movs	r3, #23
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ffe:	f7fe fdab 	bl	8001b58 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	18d3      	adds	r3, r2, r3
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800300e:	f7fe fda3 	bl	8001b58 <HAL_GetTick>
 8003012:	0003      	movs	r3, r0
 8003014:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	0013      	movs	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	189b      	adds	r3, r3, r2
 8003028:	00da      	lsls	r2, r3, #3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	0d1b      	lsrs	r3, r3, #20
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	4353      	muls	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003034:	e068      	b.n	8003108 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	23c0      	movs	r3, #192	; 0xc0
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	429a      	cmp	r2, r3
 800303e:	d10a      	bne.n	8003056 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	2117      	movs	r1, #23
 800304e:	187b      	adds	r3, r7, r1
 8003050:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003052:	187b      	adds	r3, r7, r1
 8003054:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	d055      	beq.n	8003108 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800305c:	f7fe fd7c 	bl	8001b58 <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	429a      	cmp	r2, r3
 800306a:	d902      	bls.n	8003072 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d142      	bne.n	80030f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	21e0      	movs	r1, #224	; 0xe0
 800307e:	438a      	bics	r2, r1
 8003080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	2382      	movs	r3, #130	; 0x82
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	429a      	cmp	r2, r3
 800308c:	d113      	bne.n	80030b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	429a      	cmp	r2, r3
 8003098:	d005      	beq.n	80030a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d107      	bne.n	80030b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	438a      	bics	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	429a      	cmp	r2, r3
 80030c0:	d110      	bne.n	80030e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0189      	lsls	r1, r1, #6
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	225d      	movs	r2, #93	; 0x5d
 80030e8:	2101      	movs	r1, #1
 80030ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	225c      	movs	r2, #92	; 0x5c
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e010      	b.n	800311a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	3b01      	subs	r3, #1
 8003106:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d18e      	bne.n	8003036 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b00a      	add	sp, #40	; 0x28
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000000 	.word	0x20000000
 8003128:	ffffdfff 	.word	0xffffdfff

0800312c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	23c0      	movs	r3, #192	; 0xc0
 800313c:	0159      	lsls	r1, r3, #5
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	0013      	movs	r3, r2
 8003146:	2200      	movs	r2, #0
 8003148:	f7ff ff4e 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d007      	beq.n	8003160 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003154:	2220      	movs	r2, #32
 8003156:	431a      	orrs	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e027      	b.n	80031b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	0013      	movs	r3, r2
 800316a:	2200      	movs	r2, #0
 800316c:	2180      	movs	r1, #128	; 0x80
 800316e:	f7ff fead 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d007      	beq.n	8003186 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317a:	2220      	movs	r2, #32
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e014      	b.n	80031b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	23c0      	movs	r3, #192	; 0xc0
 800318a:	00d9      	lsls	r1, r3, #3
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	0013      	movs	r3, r2
 8003194:	2200      	movs	r2, #0
 8003196:	f7ff ff27 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d007      	beq.n	80031ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	2220      	movs	r2, #32
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e000      	b.n	80031b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <__errno>:
 80031b8:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <__errno+0x8>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4770      	bx	lr
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	2600      	movs	r6, #0
 80031c8:	4d0c      	ldr	r5, [pc, #48]	; (80031fc <__libc_init_array+0x38>)
 80031ca:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031cc:	1b64      	subs	r4, r4, r5
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	2600      	movs	r6, #0
 80031d6:	f001 f8d7 	bl	8004388 <_init>
 80031da:	4d0a      	ldr	r5, [pc, #40]	; (8003204 <__libc_init_array+0x40>)
 80031dc:	4c0a      	ldr	r4, [pc, #40]	; (8003208 <__libc_init_array+0x44>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	00b3      	lsls	r3, r6, #2
 80031ea:	58eb      	ldr	r3, [r5, r3]
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	00b3      	lsls	r3, r6, #2
 80031f4:	58eb      	ldr	r3, [r5, r3]
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08004574 	.word	0x08004574
 8003200:	08004574 	.word	0x08004574
 8003204:	08004574 	.word	0x08004574
 8003208:	08004578 	.word	0x08004578

0800320c <memset>:
 800320c:	0003      	movs	r3, r0
 800320e:	1882      	adds	r2, r0, r2
 8003210:	4293      	cmp	r3, r2
 8003212:	d100      	bne.n	8003216 <memset+0xa>
 8003214:	4770      	bx	lr
 8003216:	7019      	strb	r1, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	e7f9      	b.n	8003210 <memset+0x4>

0800321c <srand>:
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <srand+0x48>)
 800321e:	b570      	push	{r4, r5, r6, lr}
 8003220:	681d      	ldr	r5, [r3, #0]
 8003222:	0004      	movs	r4, r0
 8003224:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <srand+0x3c>
 800322a:	2018      	movs	r0, #24
 800322c:	f000 f892 	bl	8003354 <malloc>
 8003230:	1e02      	subs	r2, r0, #0
 8003232:	63a8      	str	r0, [r5, #56]	; 0x38
 8003234:	d104      	bne.n	8003240 <srand+0x24>
 8003236:	2142      	movs	r1, #66	; 0x42
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <srand+0x4c>)
 800323a:	480c      	ldr	r0, [pc, #48]	; (800326c <srand+0x50>)
 800323c:	f000 f85c 	bl	80032f8 <__assert_func>
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <srand+0x54>)
 8003242:	2100      	movs	r1, #0
 8003244:	6003      	str	r3, [r0, #0]
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <srand+0x58>)
 8003248:	6043      	str	r3, [r0, #4]
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <srand+0x5c>)
 800324c:	6083      	str	r3, [r0, #8]
 800324e:	230b      	movs	r3, #11
 8003250:	8183      	strh	r3, [r0, #12]
 8003252:	2001      	movs	r0, #1
 8003254:	6110      	str	r0, [r2, #16]
 8003256:	6151      	str	r1, [r2, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800325c:	611c      	str	r4, [r3, #16]
 800325e:	615a      	str	r2, [r3, #20]
 8003260:	bd70      	pop	{r4, r5, r6, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	2000000c 	.word	0x2000000c
 8003268:	08004430 	.word	0x08004430
 800326c:	08004447 	.word	0x08004447
 8003270:	abcd330e 	.word	0xabcd330e
 8003274:	e66d1234 	.word	0xe66d1234
 8003278:	0005deec 	.word	0x0005deec

0800327c <rand>:
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <rand+0x5c>)
 800327e:	b510      	push	{r4, lr}
 8003280:	681c      	ldr	r4, [r3, #0]
 8003282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003284:	2b00      	cmp	r3, #0
 8003286:	d116      	bne.n	80032b6 <rand+0x3a>
 8003288:	2018      	movs	r0, #24
 800328a:	f000 f863 	bl	8003354 <malloc>
 800328e:	1e02      	subs	r2, r0, #0
 8003290:	63a0      	str	r0, [r4, #56]	; 0x38
 8003292:	d104      	bne.n	800329e <rand+0x22>
 8003294:	214e      	movs	r1, #78	; 0x4e
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <rand+0x60>)
 8003298:	4811      	ldr	r0, [pc, #68]	; (80032e0 <rand+0x64>)
 800329a:	f000 f82d 	bl	80032f8 <__assert_func>
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <rand+0x68>)
 80032a0:	2100      	movs	r1, #0
 80032a2:	6003      	str	r3, [r0, #0]
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <rand+0x6c>)
 80032a6:	6043      	str	r3, [r0, #4]
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <rand+0x70>)
 80032aa:	6083      	str	r3, [r0, #8]
 80032ac:	230b      	movs	r3, #11
 80032ae:	8183      	strh	r3, [r0, #12]
 80032b0:	2001      	movs	r0, #1
 80032b2:	6110      	str	r0, [r2, #16]
 80032b4:	6151      	str	r1, [r2, #20]
 80032b6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <rand+0x74>)
 80032ba:	6920      	ldr	r0, [r4, #16]
 80032bc:	6961      	ldr	r1, [r4, #20]
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <rand+0x78>)
 80032c0:	f7fc ffb8 	bl	8000234 <__aeabi_lmul>
 80032c4:	2201      	movs	r2, #1
 80032c6:	2300      	movs	r3, #0
 80032c8:	1880      	adds	r0, r0, r2
 80032ca:	4159      	adcs	r1, r3
 80032cc:	6120      	str	r0, [r4, #16]
 80032ce:	6161      	str	r1, [r4, #20]
 80032d0:	0048      	lsls	r0, r1, #1
 80032d2:	0840      	lsrs	r0, r0, #1
 80032d4:	bd10      	pop	{r4, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	2000000c 	.word	0x2000000c
 80032dc:	08004430 	.word	0x08004430
 80032e0:	08004447 	.word	0x08004447
 80032e4:	abcd330e 	.word	0xabcd330e
 80032e8:	e66d1234 	.word	0xe66d1234
 80032ec:	0005deec 	.word	0x0005deec
 80032f0:	4c957f2d 	.word	0x4c957f2d
 80032f4:	5851f42d 	.word	0x5851f42d

080032f8 <__assert_func>:
 80032f8:	b530      	push	{r4, r5, lr}
 80032fa:	0014      	movs	r4, r2
 80032fc:	001a      	movs	r2, r3
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <__assert_func+0x2c>)
 8003300:	0005      	movs	r5, r0
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b085      	sub	sp, #20
 8003306:	68d8      	ldr	r0, [r3, #12]
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <__assert_func+0x30>)
 800330a:	2c00      	cmp	r4, #0
 800330c:	d101      	bne.n	8003312 <__assert_func+0x1a>
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <__assert_func+0x34>)
 8003310:	001c      	movs	r4, r3
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	9100      	str	r1, [sp, #0]
 8003316:	002b      	movs	r3, r5
 8003318:	4905      	ldr	r1, [pc, #20]	; (8003330 <__assert_func+0x38>)
 800331a:	9402      	str	r4, [sp, #8]
 800331c:	f000 f80a 	bl	8003334 <fiprintf>
 8003320:	f000 fcc8 	bl	8003cb4 <abort>
 8003324:	2000000c 	.word	0x2000000c
 8003328:	080044a2 	.word	0x080044a2
 800332c:	080044dd 	.word	0x080044dd
 8003330:	080044af 	.word	0x080044af

08003334 <fiprintf>:
 8003334:	b40e      	push	{r1, r2, r3}
 8003336:	b503      	push	{r0, r1, lr}
 8003338:	0001      	movs	r1, r0
 800333a:	ab03      	add	r3, sp, #12
 800333c:	4804      	ldr	r0, [pc, #16]	; (8003350 <fiprintf+0x1c>)
 800333e:	cb04      	ldmia	r3!, {r2}
 8003340:	6800      	ldr	r0, [r0, #0]
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	f000 f91a 	bl	800357c <_vfiprintf_r>
 8003348:	b002      	add	sp, #8
 800334a:	bc08      	pop	{r3}
 800334c:	b003      	add	sp, #12
 800334e:	4718      	bx	r3
 8003350:	2000000c 	.word	0x2000000c

08003354 <malloc>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4b03      	ldr	r3, [pc, #12]	; (8003364 <malloc+0x10>)
 8003358:	0001      	movs	r1, r0
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	f000 f870 	bl	8003440 <_malloc_r>
 8003360:	bd10      	pop	{r4, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	2000000c 	.word	0x2000000c

08003368 <_free_r>:
 8003368:	b570      	push	{r4, r5, r6, lr}
 800336a:	0005      	movs	r5, r0
 800336c:	2900      	cmp	r1, #0
 800336e:	d010      	beq.n	8003392 <_free_r+0x2a>
 8003370:	1f0c      	subs	r4, r1, #4
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da00      	bge.n	800337a <_free_r+0x12>
 8003378:	18e4      	adds	r4, r4, r3
 800337a:	0028      	movs	r0, r5
 800337c:	f000 feec 	bl	8004158 <__malloc_lock>
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <_free_r+0x90>)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <_free_r+0x2c>
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	6014      	str	r4, [r2, #0]
 800338c:	0028      	movs	r0, r5
 800338e:	f000 feeb 	bl	8004168 <__malloc_unlock>
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	42a3      	cmp	r3, r4
 8003396:	d908      	bls.n	80033aa <_free_r+0x42>
 8003398:	6821      	ldr	r1, [r4, #0]
 800339a:	1860      	adds	r0, r4, r1
 800339c:	4283      	cmp	r3, r0
 800339e:	d1f3      	bne.n	8003388 <_free_r+0x20>
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	1841      	adds	r1, r0, r1
 80033a6:	6021      	str	r1, [r4, #0]
 80033a8:	e7ee      	b.n	8003388 <_free_r+0x20>
 80033aa:	001a      	movs	r2, r3
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <_free_r+0x4e>
 80033b2:	42a3      	cmp	r3, r4
 80033b4:	d9f9      	bls.n	80033aa <_free_r+0x42>
 80033b6:	6811      	ldr	r1, [r2, #0]
 80033b8:	1850      	adds	r0, r2, r1
 80033ba:	42a0      	cmp	r0, r4
 80033bc:	d10b      	bne.n	80033d6 <_free_r+0x6e>
 80033be:	6820      	ldr	r0, [r4, #0]
 80033c0:	1809      	adds	r1, r1, r0
 80033c2:	1850      	adds	r0, r2, r1
 80033c4:	6011      	str	r1, [r2, #0]
 80033c6:	4283      	cmp	r3, r0
 80033c8:	d1e0      	bne.n	800338c <_free_r+0x24>
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	1841      	adds	r1, r0, r1
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	6053      	str	r3, [r2, #4]
 80033d4:	e7da      	b.n	800338c <_free_r+0x24>
 80033d6:	42a0      	cmp	r0, r4
 80033d8:	d902      	bls.n	80033e0 <_free_r+0x78>
 80033da:	230c      	movs	r3, #12
 80033dc:	602b      	str	r3, [r5, #0]
 80033de:	e7d5      	b.n	800338c <_free_r+0x24>
 80033e0:	6821      	ldr	r1, [r4, #0]
 80033e2:	1860      	adds	r0, r4, r1
 80033e4:	4283      	cmp	r3, r0
 80033e6:	d103      	bne.n	80033f0 <_free_r+0x88>
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	1841      	adds	r1, r0, r1
 80033ee:	6021      	str	r1, [r4, #0]
 80033f0:	6063      	str	r3, [r4, #4]
 80033f2:	6054      	str	r4, [r2, #4]
 80033f4:	e7ca      	b.n	800338c <_free_r+0x24>
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	20000114 	.word	0x20000114

080033fc <sbrk_aligned>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	4e0f      	ldr	r6, [pc, #60]	; (800343c <sbrk_aligned+0x40>)
 8003400:	000d      	movs	r5, r1
 8003402:	6831      	ldr	r1, [r6, #0]
 8003404:	0004      	movs	r4, r0
 8003406:	2900      	cmp	r1, #0
 8003408:	d102      	bne.n	8003410 <sbrk_aligned+0x14>
 800340a:	f000 fb73 	bl	8003af4 <_sbrk_r>
 800340e:	6030      	str	r0, [r6, #0]
 8003410:	0029      	movs	r1, r5
 8003412:	0020      	movs	r0, r4
 8003414:	f000 fb6e 	bl	8003af4 <_sbrk_r>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d00a      	beq.n	8003432 <sbrk_aligned+0x36>
 800341c:	2303      	movs	r3, #3
 800341e:	1cc5      	adds	r5, r0, #3
 8003420:	439d      	bics	r5, r3
 8003422:	42a8      	cmp	r0, r5
 8003424:	d007      	beq.n	8003436 <sbrk_aligned+0x3a>
 8003426:	1a29      	subs	r1, r5, r0
 8003428:	0020      	movs	r0, r4
 800342a:	f000 fb63 	bl	8003af4 <_sbrk_r>
 800342e:	1c43      	adds	r3, r0, #1
 8003430:	d101      	bne.n	8003436 <sbrk_aligned+0x3a>
 8003432:	2501      	movs	r5, #1
 8003434:	426d      	negs	r5, r5
 8003436:	0028      	movs	r0, r5
 8003438:	bd70      	pop	{r4, r5, r6, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	20000118 	.word	0x20000118

08003440 <_malloc_r>:
 8003440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003442:	2203      	movs	r2, #3
 8003444:	1ccb      	adds	r3, r1, #3
 8003446:	4393      	bics	r3, r2
 8003448:	3308      	adds	r3, #8
 800344a:	0006      	movs	r6, r0
 800344c:	001f      	movs	r7, r3
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d232      	bcs.n	80034b8 <_malloc_r+0x78>
 8003452:	270c      	movs	r7, #12
 8003454:	42b9      	cmp	r1, r7
 8003456:	d831      	bhi.n	80034bc <_malloc_r+0x7c>
 8003458:	0030      	movs	r0, r6
 800345a:	f000 fe7d 	bl	8004158 <__malloc_lock>
 800345e:	4d32      	ldr	r5, [pc, #200]	; (8003528 <_malloc_r+0xe8>)
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	001c      	movs	r4, r3
 8003464:	2c00      	cmp	r4, #0
 8003466:	d12e      	bne.n	80034c6 <_malloc_r+0x86>
 8003468:	0039      	movs	r1, r7
 800346a:	0030      	movs	r0, r6
 800346c:	f7ff ffc6 	bl	80033fc <sbrk_aligned>
 8003470:	0004      	movs	r4, r0
 8003472:	1c43      	adds	r3, r0, #1
 8003474:	d11e      	bne.n	80034b4 <_malloc_r+0x74>
 8003476:	682c      	ldr	r4, [r5, #0]
 8003478:	0025      	movs	r5, r4
 800347a:	2d00      	cmp	r5, #0
 800347c:	d14a      	bne.n	8003514 <_malloc_r+0xd4>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	0029      	movs	r1, r5
 8003482:	18e3      	adds	r3, r4, r3
 8003484:	0030      	movs	r0, r6
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	f000 fb34 	bl	8003af4 <_sbrk_r>
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	4283      	cmp	r3, r0
 8003490:	d143      	bne.n	800351a <_malloc_r+0xda>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	3703      	adds	r7, #3
 8003496:	1aff      	subs	r7, r7, r3
 8003498:	2303      	movs	r3, #3
 800349a:	439f      	bics	r7, r3
 800349c:	3708      	adds	r7, #8
 800349e:	2f0c      	cmp	r7, #12
 80034a0:	d200      	bcs.n	80034a4 <_malloc_r+0x64>
 80034a2:	270c      	movs	r7, #12
 80034a4:	0039      	movs	r1, r7
 80034a6:	0030      	movs	r0, r6
 80034a8:	f7ff ffa8 	bl	80033fc <sbrk_aligned>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d034      	beq.n	800351a <_malloc_r+0xda>
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	19df      	adds	r7, r3, r7
 80034b4:	6027      	str	r7, [r4, #0]
 80034b6:	e013      	b.n	80034e0 <_malloc_r+0xa0>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	dacb      	bge.n	8003454 <_malloc_r+0x14>
 80034bc:	230c      	movs	r3, #12
 80034be:	2500      	movs	r5, #0
 80034c0:	6033      	str	r3, [r6, #0]
 80034c2:	0028      	movs	r0, r5
 80034c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	1bd1      	subs	r1, r2, r7
 80034ca:	d420      	bmi.n	800350e <_malloc_r+0xce>
 80034cc:	290b      	cmp	r1, #11
 80034ce:	d917      	bls.n	8003500 <_malloc_r+0xc0>
 80034d0:	19e2      	adds	r2, r4, r7
 80034d2:	6027      	str	r7, [r4, #0]
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	d111      	bne.n	80034fc <_malloc_r+0xbc>
 80034d8:	602a      	str	r2, [r5, #0]
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	6011      	str	r1, [r2, #0]
 80034de:	6053      	str	r3, [r2, #4]
 80034e0:	0030      	movs	r0, r6
 80034e2:	0025      	movs	r5, r4
 80034e4:	f000 fe40 	bl	8004168 <__malloc_unlock>
 80034e8:	2207      	movs	r2, #7
 80034ea:	350b      	adds	r5, #11
 80034ec:	1d23      	adds	r3, r4, #4
 80034ee:	4395      	bics	r5, r2
 80034f0:	1aea      	subs	r2, r5, r3
 80034f2:	429d      	cmp	r5, r3
 80034f4:	d0e5      	beq.n	80034c2 <_malloc_r+0x82>
 80034f6:	1b5b      	subs	r3, r3, r5
 80034f8:	50a3      	str	r3, [r4, r2]
 80034fa:	e7e2      	b.n	80034c2 <_malloc_r+0x82>
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e7ec      	b.n	80034da <_malloc_r+0x9a>
 8003500:	6862      	ldr	r2, [r4, #4]
 8003502:	42a3      	cmp	r3, r4
 8003504:	d101      	bne.n	800350a <_malloc_r+0xca>
 8003506:	602a      	str	r2, [r5, #0]
 8003508:	e7ea      	b.n	80034e0 <_malloc_r+0xa0>
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	e7e8      	b.n	80034e0 <_malloc_r+0xa0>
 800350e:	0023      	movs	r3, r4
 8003510:	6864      	ldr	r4, [r4, #4]
 8003512:	e7a7      	b.n	8003464 <_malloc_r+0x24>
 8003514:	002c      	movs	r4, r5
 8003516:	686d      	ldr	r5, [r5, #4]
 8003518:	e7af      	b.n	800347a <_malloc_r+0x3a>
 800351a:	230c      	movs	r3, #12
 800351c:	0030      	movs	r0, r6
 800351e:	6033      	str	r3, [r6, #0]
 8003520:	f000 fe22 	bl	8004168 <__malloc_unlock>
 8003524:	e7cd      	b.n	80034c2 <_malloc_r+0x82>
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000114 	.word	0x20000114

0800352c <__sfputc_r>:
 800352c:	6893      	ldr	r3, [r2, #8]
 800352e:	b510      	push	{r4, lr}
 8003530:	3b01      	subs	r3, #1
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	da04      	bge.n	8003542 <__sfputc_r+0x16>
 8003538:	6994      	ldr	r4, [r2, #24]
 800353a:	42a3      	cmp	r3, r4
 800353c:	db07      	blt.n	800354e <__sfputc_r+0x22>
 800353e:	290a      	cmp	r1, #10
 8003540:	d005      	beq.n	800354e <__sfputc_r+0x22>
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	1c58      	adds	r0, r3, #1
 8003546:	6010      	str	r0, [r2, #0]
 8003548:	7019      	strb	r1, [r3, #0]
 800354a:	0008      	movs	r0, r1
 800354c:	bd10      	pop	{r4, pc}
 800354e:	f000 fae3 	bl	8003b18 <__swbuf_r>
 8003552:	0001      	movs	r1, r0
 8003554:	e7f9      	b.n	800354a <__sfputc_r+0x1e>

08003556 <__sfputs_r>:
 8003556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003558:	0006      	movs	r6, r0
 800355a:	000f      	movs	r7, r1
 800355c:	0014      	movs	r4, r2
 800355e:	18d5      	adds	r5, r2, r3
 8003560:	42ac      	cmp	r4, r5
 8003562:	d101      	bne.n	8003568 <__sfputs_r+0x12>
 8003564:	2000      	movs	r0, #0
 8003566:	e007      	b.n	8003578 <__sfputs_r+0x22>
 8003568:	7821      	ldrb	r1, [r4, #0]
 800356a:	003a      	movs	r2, r7
 800356c:	0030      	movs	r0, r6
 800356e:	f7ff ffdd 	bl	800352c <__sfputc_r>
 8003572:	3401      	adds	r4, #1
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d1f3      	bne.n	8003560 <__sfputs_r+0xa>
 8003578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800357c <_vfiprintf_r>:
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357e:	b0a1      	sub	sp, #132	; 0x84
 8003580:	0006      	movs	r6, r0
 8003582:	000c      	movs	r4, r1
 8003584:	001f      	movs	r7, r3
 8003586:	9203      	str	r2, [sp, #12]
 8003588:	2800      	cmp	r0, #0
 800358a:	d004      	beq.n	8003596 <_vfiprintf_r+0x1a>
 800358c:	6983      	ldr	r3, [r0, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <_vfiprintf_r+0x1a>
 8003592:	f000 fcc5 	bl	8003f20 <__sinit>
 8003596:	4b8e      	ldr	r3, [pc, #568]	; (80037d0 <_vfiprintf_r+0x254>)
 8003598:	429c      	cmp	r4, r3
 800359a:	d11c      	bne.n	80035d6 <_vfiprintf_r+0x5a>
 800359c:	6874      	ldr	r4, [r6, #4]
 800359e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a0:	07db      	lsls	r3, r3, #31
 80035a2:	d405      	bmi.n	80035b0 <_vfiprintf_r+0x34>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	059b      	lsls	r3, r3, #22
 80035a8:	d402      	bmi.n	80035b0 <_vfiprintf_r+0x34>
 80035aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ac:	f000 fd59 	bl	8004062 <__retarget_lock_acquire_recursive>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	071b      	lsls	r3, r3, #28
 80035b4:	d502      	bpl.n	80035bc <_vfiprintf_r+0x40>
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11d      	bne.n	80035f8 <_vfiprintf_r+0x7c>
 80035bc:	0021      	movs	r1, r4
 80035be:	0030      	movs	r0, r6
 80035c0:	f000 fb00 	bl	8003bc4 <__swsetup_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d017      	beq.n	80035f8 <_vfiprintf_r+0x7c>
 80035c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ca:	07db      	lsls	r3, r3, #31
 80035cc:	d50d      	bpl.n	80035ea <_vfiprintf_r+0x6e>
 80035ce:	2001      	movs	r0, #1
 80035d0:	4240      	negs	r0, r0
 80035d2:	b021      	add	sp, #132	; 0x84
 80035d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d6:	4b7f      	ldr	r3, [pc, #508]	; (80037d4 <_vfiprintf_r+0x258>)
 80035d8:	429c      	cmp	r4, r3
 80035da:	d101      	bne.n	80035e0 <_vfiprintf_r+0x64>
 80035dc:	68b4      	ldr	r4, [r6, #8]
 80035de:	e7de      	b.n	800359e <_vfiprintf_r+0x22>
 80035e0:	4b7d      	ldr	r3, [pc, #500]	; (80037d8 <_vfiprintf_r+0x25c>)
 80035e2:	429c      	cmp	r4, r3
 80035e4:	d1db      	bne.n	800359e <_vfiprintf_r+0x22>
 80035e6:	68f4      	ldr	r4, [r6, #12]
 80035e8:	e7d9      	b.n	800359e <_vfiprintf_r+0x22>
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	059b      	lsls	r3, r3, #22
 80035ee:	d4ee      	bmi.n	80035ce <_vfiprintf_r+0x52>
 80035f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035f2:	f000 fd37 	bl	8004064 <__retarget_lock_release_recursive>
 80035f6:	e7ea      	b.n	80035ce <_vfiprintf_r+0x52>
 80035f8:	2300      	movs	r3, #0
 80035fa:	ad08      	add	r5, sp, #32
 80035fc:	616b      	str	r3, [r5, #20]
 80035fe:	3320      	adds	r3, #32
 8003600:	766b      	strb	r3, [r5, #25]
 8003602:	3310      	adds	r3, #16
 8003604:	76ab      	strb	r3, [r5, #26]
 8003606:	9707      	str	r7, [sp, #28]
 8003608:	9f03      	ldr	r7, [sp, #12]
 800360a:	783b      	ldrb	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <_vfiprintf_r+0x98>
 8003610:	2b25      	cmp	r3, #37	; 0x25
 8003612:	d14e      	bne.n	80036b2 <_vfiprintf_r+0x136>
 8003614:	9b03      	ldr	r3, [sp, #12]
 8003616:	1afb      	subs	r3, r7, r3
 8003618:	9305      	str	r3, [sp, #20]
 800361a:	9b03      	ldr	r3, [sp, #12]
 800361c:	429f      	cmp	r7, r3
 800361e:	d00d      	beq.n	800363c <_vfiprintf_r+0xc0>
 8003620:	9b05      	ldr	r3, [sp, #20]
 8003622:	0021      	movs	r1, r4
 8003624:	0030      	movs	r0, r6
 8003626:	9a03      	ldr	r2, [sp, #12]
 8003628:	f7ff ff95 	bl	8003556 <__sfputs_r>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d100      	bne.n	8003632 <_vfiprintf_r+0xb6>
 8003630:	e0b5      	b.n	800379e <_vfiprintf_r+0x222>
 8003632:	696a      	ldr	r2, [r5, #20]
 8003634:	9b05      	ldr	r3, [sp, #20]
 8003636:	4694      	mov	ip, r2
 8003638:	4463      	add	r3, ip
 800363a:	616b      	str	r3, [r5, #20]
 800363c:	783b      	ldrb	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d100      	bne.n	8003644 <_vfiprintf_r+0xc8>
 8003642:	e0ac      	b.n	800379e <_vfiprintf_r+0x222>
 8003644:	2201      	movs	r2, #1
 8003646:	1c7b      	adds	r3, r7, #1
 8003648:	9303      	str	r3, [sp, #12]
 800364a:	2300      	movs	r3, #0
 800364c:	4252      	negs	r2, r2
 800364e:	606a      	str	r2, [r5, #4]
 8003650:	a904      	add	r1, sp, #16
 8003652:	3254      	adds	r2, #84	; 0x54
 8003654:	1852      	adds	r2, r2, r1
 8003656:	602b      	str	r3, [r5, #0]
 8003658:	60eb      	str	r3, [r5, #12]
 800365a:	60ab      	str	r3, [r5, #8]
 800365c:	7013      	strb	r3, [r2, #0]
 800365e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	2205      	movs	r2, #5
 8003664:	7819      	ldrb	r1, [r3, #0]
 8003666:	485d      	ldr	r0, [pc, #372]	; (80037dc <_vfiprintf_r+0x260>)
 8003668:	f000 fd6a 	bl	8004140 <memchr>
 800366c:	9b03      	ldr	r3, [sp, #12]
 800366e:	1c5f      	adds	r7, r3, #1
 8003670:	2800      	cmp	r0, #0
 8003672:	d120      	bne.n	80036b6 <_vfiprintf_r+0x13a>
 8003674:	682a      	ldr	r2, [r5, #0]
 8003676:	06d3      	lsls	r3, r2, #27
 8003678:	d504      	bpl.n	8003684 <_vfiprintf_r+0x108>
 800367a:	2353      	movs	r3, #83	; 0x53
 800367c:	a904      	add	r1, sp, #16
 800367e:	185b      	adds	r3, r3, r1
 8003680:	2120      	movs	r1, #32
 8003682:	7019      	strb	r1, [r3, #0]
 8003684:	0713      	lsls	r3, r2, #28
 8003686:	d504      	bpl.n	8003692 <_vfiprintf_r+0x116>
 8003688:	2353      	movs	r3, #83	; 0x53
 800368a:	a904      	add	r1, sp, #16
 800368c:	185b      	adds	r3, r3, r1
 800368e:	212b      	movs	r1, #43	; 0x2b
 8003690:	7019      	strb	r1, [r3, #0]
 8003692:	9b03      	ldr	r3, [sp, #12]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d016      	beq.n	80036c8 <_vfiprintf_r+0x14c>
 800369a:	2100      	movs	r1, #0
 800369c:	68eb      	ldr	r3, [r5, #12]
 800369e:	9f03      	ldr	r7, [sp, #12]
 80036a0:	783a      	ldrb	r2, [r7, #0]
 80036a2:	1c78      	adds	r0, r7, #1
 80036a4:	3a30      	subs	r2, #48	; 0x30
 80036a6:	4684      	mov	ip, r0
 80036a8:	2a09      	cmp	r2, #9
 80036aa:	d94f      	bls.n	800374c <_vfiprintf_r+0x1d0>
 80036ac:	2900      	cmp	r1, #0
 80036ae:	d111      	bne.n	80036d4 <_vfiprintf_r+0x158>
 80036b0:	e017      	b.n	80036e2 <_vfiprintf_r+0x166>
 80036b2:	3701      	adds	r7, #1
 80036b4:	e7a9      	b.n	800360a <_vfiprintf_r+0x8e>
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <_vfiprintf_r+0x260>)
 80036b8:	682a      	ldr	r2, [r5, #0]
 80036ba:	1ac0      	subs	r0, r0, r3
 80036bc:	2301      	movs	r3, #1
 80036be:	4083      	lsls	r3, r0
 80036c0:	4313      	orrs	r3, r2
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	9703      	str	r7, [sp, #12]
 80036c6:	e7cb      	b.n	8003660 <_vfiprintf_r+0xe4>
 80036c8:	9b07      	ldr	r3, [sp, #28]
 80036ca:	1d19      	adds	r1, r3, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	9107      	str	r1, [sp, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db01      	blt.n	80036d8 <_vfiprintf_r+0x15c>
 80036d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80036d6:	e004      	b.n	80036e2 <_vfiprintf_r+0x166>
 80036d8:	425b      	negs	r3, r3
 80036da:	60eb      	str	r3, [r5, #12]
 80036dc:	2302      	movs	r3, #2
 80036de:	4313      	orrs	r3, r2
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	783b      	ldrb	r3, [r7, #0]
 80036e4:	2b2e      	cmp	r3, #46	; 0x2e
 80036e6:	d10a      	bne.n	80036fe <_vfiprintf_r+0x182>
 80036e8:	787b      	ldrb	r3, [r7, #1]
 80036ea:	2b2a      	cmp	r3, #42	; 0x2a
 80036ec:	d137      	bne.n	800375e <_vfiprintf_r+0x1e2>
 80036ee:	9b07      	ldr	r3, [sp, #28]
 80036f0:	3702      	adds	r7, #2
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	9207      	str	r2, [sp, #28]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	db2d      	blt.n	8003758 <_vfiprintf_r+0x1dc>
 80036fc:	9309      	str	r3, [sp, #36]	; 0x24
 80036fe:	2203      	movs	r2, #3
 8003700:	7839      	ldrb	r1, [r7, #0]
 8003702:	4837      	ldr	r0, [pc, #220]	; (80037e0 <_vfiprintf_r+0x264>)
 8003704:	f000 fd1c 	bl	8004140 <memchr>
 8003708:	2800      	cmp	r0, #0
 800370a:	d007      	beq.n	800371c <_vfiprintf_r+0x1a0>
 800370c:	4b34      	ldr	r3, [pc, #208]	; (80037e0 <_vfiprintf_r+0x264>)
 800370e:	682a      	ldr	r2, [r5, #0]
 8003710:	1ac0      	subs	r0, r0, r3
 8003712:	2340      	movs	r3, #64	; 0x40
 8003714:	4083      	lsls	r3, r0
 8003716:	4313      	orrs	r3, r2
 8003718:	3701      	adds	r7, #1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	7839      	ldrb	r1, [r7, #0]
 800371e:	1c7b      	adds	r3, r7, #1
 8003720:	2206      	movs	r2, #6
 8003722:	4830      	ldr	r0, [pc, #192]	; (80037e4 <_vfiprintf_r+0x268>)
 8003724:	9303      	str	r3, [sp, #12]
 8003726:	7629      	strb	r1, [r5, #24]
 8003728:	f000 fd0a 	bl	8004140 <memchr>
 800372c:	2800      	cmp	r0, #0
 800372e:	d045      	beq.n	80037bc <_vfiprintf_r+0x240>
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <_vfiprintf_r+0x26c>)
 8003732:	2b00      	cmp	r3, #0
 8003734:	d127      	bne.n	8003786 <_vfiprintf_r+0x20a>
 8003736:	2207      	movs	r2, #7
 8003738:	9b07      	ldr	r3, [sp, #28]
 800373a:	3307      	adds	r3, #7
 800373c:	4393      	bics	r3, r2
 800373e:	3308      	adds	r3, #8
 8003740:	9307      	str	r3, [sp, #28]
 8003742:	696b      	ldr	r3, [r5, #20]
 8003744:	9a04      	ldr	r2, [sp, #16]
 8003746:	189b      	adds	r3, r3, r2
 8003748:	616b      	str	r3, [r5, #20]
 800374a:	e75d      	b.n	8003608 <_vfiprintf_r+0x8c>
 800374c:	210a      	movs	r1, #10
 800374e:	434b      	muls	r3, r1
 8003750:	4667      	mov	r7, ip
 8003752:	189b      	adds	r3, r3, r2
 8003754:	3909      	subs	r1, #9
 8003756:	e7a3      	b.n	80036a0 <_vfiprintf_r+0x124>
 8003758:	2301      	movs	r3, #1
 800375a:	425b      	negs	r3, r3
 800375c:	e7ce      	b.n	80036fc <_vfiprintf_r+0x180>
 800375e:	2300      	movs	r3, #0
 8003760:	001a      	movs	r2, r3
 8003762:	3701      	adds	r7, #1
 8003764:	606b      	str	r3, [r5, #4]
 8003766:	7839      	ldrb	r1, [r7, #0]
 8003768:	1c78      	adds	r0, r7, #1
 800376a:	3930      	subs	r1, #48	; 0x30
 800376c:	4684      	mov	ip, r0
 800376e:	2909      	cmp	r1, #9
 8003770:	d903      	bls.n	800377a <_vfiprintf_r+0x1fe>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0c3      	beq.n	80036fe <_vfiprintf_r+0x182>
 8003776:	9209      	str	r2, [sp, #36]	; 0x24
 8003778:	e7c1      	b.n	80036fe <_vfiprintf_r+0x182>
 800377a:	230a      	movs	r3, #10
 800377c:	435a      	muls	r2, r3
 800377e:	4667      	mov	r7, ip
 8003780:	1852      	adds	r2, r2, r1
 8003782:	3b09      	subs	r3, #9
 8003784:	e7ef      	b.n	8003766 <_vfiprintf_r+0x1ea>
 8003786:	ab07      	add	r3, sp, #28
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	0022      	movs	r2, r4
 800378c:	0029      	movs	r1, r5
 800378e:	0030      	movs	r0, r6
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <_vfiprintf_r+0x270>)
 8003792:	e000      	b.n	8003796 <_vfiprintf_r+0x21a>
 8003794:	bf00      	nop
 8003796:	9004      	str	r0, [sp, #16]
 8003798:	9b04      	ldr	r3, [sp, #16]
 800379a:	3301      	adds	r3, #1
 800379c:	d1d1      	bne.n	8003742 <_vfiprintf_r+0x1c6>
 800379e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037a0:	07db      	lsls	r3, r3, #31
 80037a2:	d405      	bmi.n	80037b0 <_vfiprintf_r+0x234>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	059b      	lsls	r3, r3, #22
 80037a8:	d402      	bmi.n	80037b0 <_vfiprintf_r+0x234>
 80037aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ac:	f000 fc5a 	bl	8004064 <__retarget_lock_release_recursive>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	065b      	lsls	r3, r3, #25
 80037b4:	d500      	bpl.n	80037b8 <_vfiprintf_r+0x23c>
 80037b6:	e70a      	b.n	80035ce <_vfiprintf_r+0x52>
 80037b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80037ba:	e70a      	b.n	80035d2 <_vfiprintf_r+0x56>
 80037bc:	ab07      	add	r3, sp, #28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	0022      	movs	r2, r4
 80037c2:	0029      	movs	r1, r5
 80037c4:	0030      	movs	r0, r6
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <_vfiprintf_r+0x270>)
 80037c8:	f000 f882 	bl	80038d0 <_printf_i>
 80037cc:	e7e3      	b.n	8003796 <_vfiprintf_r+0x21a>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	08004534 	.word	0x08004534
 80037d4:	08004554 	.word	0x08004554
 80037d8:	08004514 	.word	0x08004514
 80037dc:	080044de 	.word	0x080044de
 80037e0:	080044e4 	.word	0x080044e4
 80037e4:	080044e8 	.word	0x080044e8
 80037e8:	00000000 	.word	0x00000000
 80037ec:	08003557 	.word	0x08003557

080037f0 <_printf_common>:
 80037f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037f2:	0015      	movs	r5, r2
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	688a      	ldr	r2, [r1, #8]
 80037f8:	690b      	ldr	r3, [r1, #16]
 80037fa:	000c      	movs	r4, r1
 80037fc:	9000      	str	r0, [sp, #0]
 80037fe:	4293      	cmp	r3, r2
 8003800:	da00      	bge.n	8003804 <_printf_common+0x14>
 8003802:	0013      	movs	r3, r2
 8003804:	0022      	movs	r2, r4
 8003806:	602b      	str	r3, [r5, #0]
 8003808:	3243      	adds	r2, #67	; 0x43
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	2a00      	cmp	r2, #0
 800380e:	d001      	beq.n	8003814 <_printf_common+0x24>
 8003810:	3301      	adds	r3, #1
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	069b      	lsls	r3, r3, #26
 8003818:	d502      	bpl.n	8003820 <_printf_common+0x30>
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	3302      	adds	r3, #2
 800381e:	602b      	str	r3, [r5, #0]
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	2306      	movs	r3, #6
 8003824:	0017      	movs	r7, r2
 8003826:	401f      	ands	r7, r3
 8003828:	421a      	tst	r2, r3
 800382a:	d027      	beq.n	800387c <_printf_common+0x8c>
 800382c:	0023      	movs	r3, r4
 800382e:	3343      	adds	r3, #67	; 0x43
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	4193      	sbcs	r3, r2
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	0692      	lsls	r2, r2, #26
 800383a:	d430      	bmi.n	800389e <_printf_common+0xae>
 800383c:	0022      	movs	r2, r4
 800383e:	9901      	ldr	r1, [sp, #4]
 8003840:	9800      	ldr	r0, [sp, #0]
 8003842:	9e08      	ldr	r6, [sp, #32]
 8003844:	3243      	adds	r2, #67	; 0x43
 8003846:	47b0      	blx	r6
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d025      	beq.n	8003898 <_printf_common+0xa8>
 800384c:	2306      	movs	r3, #6
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	682a      	ldr	r2, [r5, #0]
 8003852:	68e1      	ldr	r1, [r4, #12]
 8003854:	2500      	movs	r5, #0
 8003856:	4003      	ands	r3, r0
 8003858:	2b04      	cmp	r3, #4
 800385a:	d103      	bne.n	8003864 <_printf_common+0x74>
 800385c:	1a8d      	subs	r5, r1, r2
 800385e:	43eb      	mvns	r3, r5
 8003860:	17db      	asrs	r3, r3, #31
 8003862:	401d      	ands	r5, r3
 8003864:	68a3      	ldr	r3, [r4, #8]
 8003866:	6922      	ldr	r2, [r4, #16]
 8003868:	4293      	cmp	r3, r2
 800386a:	dd01      	ble.n	8003870 <_printf_common+0x80>
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	18ed      	adds	r5, r5, r3
 8003870:	2700      	movs	r7, #0
 8003872:	42bd      	cmp	r5, r7
 8003874:	d120      	bne.n	80038b8 <_printf_common+0xc8>
 8003876:	2000      	movs	r0, #0
 8003878:	e010      	b.n	800389c <_printf_common+0xac>
 800387a:	3701      	adds	r7, #1
 800387c:	68e3      	ldr	r3, [r4, #12]
 800387e:	682a      	ldr	r2, [r5, #0]
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	42bb      	cmp	r3, r7
 8003884:	ddd2      	ble.n	800382c <_printf_common+0x3c>
 8003886:	0022      	movs	r2, r4
 8003888:	2301      	movs	r3, #1
 800388a:	9901      	ldr	r1, [sp, #4]
 800388c:	9800      	ldr	r0, [sp, #0]
 800388e:	9e08      	ldr	r6, [sp, #32]
 8003890:	3219      	adds	r2, #25
 8003892:	47b0      	blx	r6
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d1f0      	bne.n	800387a <_printf_common+0x8a>
 8003898:	2001      	movs	r0, #1
 800389a:	4240      	negs	r0, r0
 800389c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800389e:	2030      	movs	r0, #48	; 0x30
 80038a0:	18e1      	adds	r1, r4, r3
 80038a2:	3143      	adds	r1, #67	; 0x43
 80038a4:	7008      	strb	r0, [r1, #0]
 80038a6:	0021      	movs	r1, r4
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	3145      	adds	r1, #69	; 0x45
 80038ac:	7809      	ldrb	r1, [r1, #0]
 80038ae:	18a2      	adds	r2, r4, r2
 80038b0:	3243      	adds	r2, #67	; 0x43
 80038b2:	3302      	adds	r3, #2
 80038b4:	7011      	strb	r1, [r2, #0]
 80038b6:	e7c1      	b.n	800383c <_printf_common+0x4c>
 80038b8:	0022      	movs	r2, r4
 80038ba:	2301      	movs	r3, #1
 80038bc:	9901      	ldr	r1, [sp, #4]
 80038be:	9800      	ldr	r0, [sp, #0]
 80038c0:	9e08      	ldr	r6, [sp, #32]
 80038c2:	321a      	adds	r2, #26
 80038c4:	47b0      	blx	r6
 80038c6:	1c43      	adds	r3, r0, #1
 80038c8:	d0e6      	beq.n	8003898 <_printf_common+0xa8>
 80038ca:	3701      	adds	r7, #1
 80038cc:	e7d1      	b.n	8003872 <_printf_common+0x82>
	...

080038d0 <_printf_i>:
 80038d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d2:	b08b      	sub	sp, #44	; 0x2c
 80038d4:	9206      	str	r2, [sp, #24]
 80038d6:	000a      	movs	r2, r1
 80038d8:	3243      	adds	r2, #67	; 0x43
 80038da:	9307      	str	r3, [sp, #28]
 80038dc:	9005      	str	r0, [sp, #20]
 80038de:	9204      	str	r2, [sp, #16]
 80038e0:	7e0a      	ldrb	r2, [r1, #24]
 80038e2:	000c      	movs	r4, r1
 80038e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038e6:	2a78      	cmp	r2, #120	; 0x78
 80038e8:	d807      	bhi.n	80038fa <_printf_i+0x2a>
 80038ea:	2a62      	cmp	r2, #98	; 0x62
 80038ec:	d809      	bhi.n	8003902 <_printf_i+0x32>
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	d100      	bne.n	80038f4 <_printf_i+0x24>
 80038f2:	e0c1      	b.n	8003a78 <_printf_i+0x1a8>
 80038f4:	2a58      	cmp	r2, #88	; 0x58
 80038f6:	d100      	bne.n	80038fa <_printf_i+0x2a>
 80038f8:	e08c      	b.n	8003a14 <_printf_i+0x144>
 80038fa:	0026      	movs	r6, r4
 80038fc:	3642      	adds	r6, #66	; 0x42
 80038fe:	7032      	strb	r2, [r6, #0]
 8003900:	e022      	b.n	8003948 <_printf_i+0x78>
 8003902:	0010      	movs	r0, r2
 8003904:	3863      	subs	r0, #99	; 0x63
 8003906:	2815      	cmp	r0, #21
 8003908:	d8f7      	bhi.n	80038fa <_printf_i+0x2a>
 800390a:	f7fc fbfd 	bl	8000108 <__gnu_thumb1_case_shi>
 800390e:	0016      	.short	0x0016
 8003910:	fff6001f 	.word	0xfff6001f
 8003914:	fff6fff6 	.word	0xfff6fff6
 8003918:	001ffff6 	.word	0x001ffff6
 800391c:	fff6fff6 	.word	0xfff6fff6
 8003920:	fff6fff6 	.word	0xfff6fff6
 8003924:	003600a8 	.word	0x003600a8
 8003928:	fff6009a 	.word	0xfff6009a
 800392c:	00b9fff6 	.word	0x00b9fff6
 8003930:	0036fff6 	.word	0x0036fff6
 8003934:	fff6fff6 	.word	0xfff6fff6
 8003938:	009e      	.short	0x009e
 800393a:	0026      	movs	r6, r4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	3642      	adds	r6, #66	; 0x42
 8003940:	1d11      	adds	r1, r2, #4
 8003942:	6019      	str	r1, [r3, #0]
 8003944:	6813      	ldr	r3, [r2, #0]
 8003946:	7033      	strb	r3, [r6, #0]
 8003948:	2301      	movs	r3, #1
 800394a:	e0a7      	b.n	8003a9c <_printf_i+0x1cc>
 800394c:	6808      	ldr	r0, [r1, #0]
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	1d0a      	adds	r2, r1, #4
 8003952:	0605      	lsls	r5, r0, #24
 8003954:	d50b      	bpl.n	800396e <_printf_i+0x9e>
 8003956:	680d      	ldr	r5, [r1, #0]
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	2d00      	cmp	r5, #0
 800395c:	da03      	bge.n	8003966 <_printf_i+0x96>
 800395e:	232d      	movs	r3, #45	; 0x2d
 8003960:	9a04      	ldr	r2, [sp, #16]
 8003962:	426d      	negs	r5, r5
 8003964:	7013      	strb	r3, [r2, #0]
 8003966:	4b61      	ldr	r3, [pc, #388]	; (8003aec <_printf_i+0x21c>)
 8003968:	270a      	movs	r7, #10
 800396a:	9303      	str	r3, [sp, #12]
 800396c:	e01b      	b.n	80039a6 <_printf_i+0xd6>
 800396e:	680d      	ldr	r5, [r1, #0]
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	0641      	lsls	r1, r0, #25
 8003974:	d5f1      	bpl.n	800395a <_printf_i+0x8a>
 8003976:	b22d      	sxth	r5, r5
 8003978:	e7ef      	b.n	800395a <_printf_i+0x8a>
 800397a:	680d      	ldr	r5, [r1, #0]
 800397c:	6819      	ldr	r1, [r3, #0]
 800397e:	1d08      	adds	r0, r1, #4
 8003980:	6018      	str	r0, [r3, #0]
 8003982:	062e      	lsls	r6, r5, #24
 8003984:	d501      	bpl.n	800398a <_printf_i+0xba>
 8003986:	680d      	ldr	r5, [r1, #0]
 8003988:	e003      	b.n	8003992 <_printf_i+0xc2>
 800398a:	066d      	lsls	r5, r5, #25
 800398c:	d5fb      	bpl.n	8003986 <_printf_i+0xb6>
 800398e:	680d      	ldr	r5, [r1, #0]
 8003990:	b2ad      	uxth	r5, r5
 8003992:	4b56      	ldr	r3, [pc, #344]	; (8003aec <_printf_i+0x21c>)
 8003994:	2708      	movs	r7, #8
 8003996:	9303      	str	r3, [sp, #12]
 8003998:	2a6f      	cmp	r2, #111	; 0x6f
 800399a:	d000      	beq.n	800399e <_printf_i+0xce>
 800399c:	3702      	adds	r7, #2
 800399e:	0023      	movs	r3, r4
 80039a0:	2200      	movs	r2, #0
 80039a2:	3343      	adds	r3, #67	; 0x43
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	60a3      	str	r3, [r4, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db03      	blt.n	80039b6 <_printf_i+0xe6>
 80039ae:	2204      	movs	r2, #4
 80039b0:	6821      	ldr	r1, [r4, #0]
 80039b2:	4391      	bics	r1, r2
 80039b4:	6021      	str	r1, [r4, #0]
 80039b6:	2d00      	cmp	r5, #0
 80039b8:	d102      	bne.n	80039c0 <_printf_i+0xf0>
 80039ba:	9e04      	ldr	r6, [sp, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <_printf_i+0x10a>
 80039c0:	9e04      	ldr	r6, [sp, #16]
 80039c2:	0028      	movs	r0, r5
 80039c4:	0039      	movs	r1, r7
 80039c6:	f7fc fc2f 	bl	8000228 <__aeabi_uidivmod>
 80039ca:	9b03      	ldr	r3, [sp, #12]
 80039cc:	3e01      	subs	r6, #1
 80039ce:	5c5b      	ldrb	r3, [r3, r1]
 80039d0:	7033      	strb	r3, [r6, #0]
 80039d2:	002b      	movs	r3, r5
 80039d4:	0005      	movs	r5, r0
 80039d6:	429f      	cmp	r7, r3
 80039d8:	d9f3      	bls.n	80039c2 <_printf_i+0xf2>
 80039da:	2f08      	cmp	r7, #8
 80039dc:	d109      	bne.n	80039f2 <_printf_i+0x122>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	07db      	lsls	r3, r3, #31
 80039e2:	d506      	bpl.n	80039f2 <_printf_i+0x122>
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	6922      	ldr	r2, [r4, #16]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	dc02      	bgt.n	80039f2 <_printf_i+0x122>
 80039ec:	2330      	movs	r3, #48	; 0x30
 80039ee:	3e01      	subs	r6, #1
 80039f0:	7033      	strb	r3, [r6, #0]
 80039f2:	9b04      	ldr	r3, [sp, #16]
 80039f4:	1b9b      	subs	r3, r3, r6
 80039f6:	6123      	str	r3, [r4, #16]
 80039f8:	9b07      	ldr	r3, [sp, #28]
 80039fa:	0021      	movs	r1, r4
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	9805      	ldr	r0, [sp, #20]
 8003a00:	9b06      	ldr	r3, [sp, #24]
 8003a02:	aa09      	add	r2, sp, #36	; 0x24
 8003a04:	f7ff fef4 	bl	80037f0 <_printf_common>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d14c      	bne.n	8003aa6 <_printf_i+0x1d6>
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	4240      	negs	r0, r0
 8003a10:	b00b      	add	sp, #44	; 0x2c
 8003a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a14:	3145      	adds	r1, #69	; 0x45
 8003a16:	700a      	strb	r2, [r1, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <_printf_i+0x21c>)
 8003a1a:	9203      	str	r2, [sp, #12]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	6821      	ldr	r1, [r4, #0]
 8003a20:	ca20      	ldmia	r2!, {r5}
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	0608      	lsls	r0, r1, #24
 8003a26:	d516      	bpl.n	8003a56 <_printf_i+0x186>
 8003a28:	07cb      	lsls	r3, r1, #31
 8003a2a:	d502      	bpl.n	8003a32 <_printf_i+0x162>
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	4319      	orrs	r1, r3
 8003a30:	6021      	str	r1, [r4, #0]
 8003a32:	2710      	movs	r7, #16
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	d1b2      	bne.n	800399e <_printf_i+0xce>
 8003a38:	2320      	movs	r3, #32
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	439a      	bics	r2, r3
 8003a3e:	6022      	str	r2, [r4, #0]
 8003a40:	e7ad      	b.n	800399e <_printf_i+0xce>
 8003a42:	2220      	movs	r2, #32
 8003a44:	6809      	ldr	r1, [r1, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	6022      	str	r2, [r4, #0]
 8003a4a:	0022      	movs	r2, r4
 8003a4c:	2178      	movs	r1, #120	; 0x78
 8003a4e:	3245      	adds	r2, #69	; 0x45
 8003a50:	7011      	strb	r1, [r2, #0]
 8003a52:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <_printf_i+0x220>)
 8003a54:	e7e1      	b.n	8003a1a <_printf_i+0x14a>
 8003a56:	0648      	lsls	r0, r1, #25
 8003a58:	d5e6      	bpl.n	8003a28 <_printf_i+0x158>
 8003a5a:	b2ad      	uxth	r5, r5
 8003a5c:	e7e4      	b.n	8003a28 <_printf_i+0x158>
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	680d      	ldr	r5, [r1, #0]
 8003a62:	1d10      	adds	r0, r2, #4
 8003a64:	6949      	ldr	r1, [r1, #20]
 8003a66:	6018      	str	r0, [r3, #0]
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	062e      	lsls	r6, r5, #24
 8003a6c:	d501      	bpl.n	8003a72 <_printf_i+0x1a2>
 8003a6e:	6019      	str	r1, [r3, #0]
 8003a70:	e002      	b.n	8003a78 <_printf_i+0x1a8>
 8003a72:	066d      	lsls	r5, r5, #25
 8003a74:	d5fb      	bpl.n	8003a6e <_printf_i+0x19e>
 8003a76:	8019      	strh	r1, [r3, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9e04      	ldr	r6, [sp, #16]
 8003a7c:	6123      	str	r3, [r4, #16]
 8003a7e:	e7bb      	b.n	80039f8 <_printf_i+0x128>
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	1d11      	adds	r1, r2, #4
 8003a84:	6019      	str	r1, [r3, #0]
 8003a86:	6816      	ldr	r6, [r2, #0]
 8003a88:	2100      	movs	r1, #0
 8003a8a:	0030      	movs	r0, r6
 8003a8c:	6862      	ldr	r2, [r4, #4]
 8003a8e:	f000 fb57 	bl	8004140 <memchr>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d001      	beq.n	8003a9a <_printf_i+0x1ca>
 8003a96:	1b80      	subs	r0, r0, r6
 8003a98:	6060      	str	r0, [r4, #4]
 8003a9a:	6863      	ldr	r3, [r4, #4]
 8003a9c:	6123      	str	r3, [r4, #16]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9a04      	ldr	r2, [sp, #16]
 8003aa2:	7013      	strb	r3, [r2, #0]
 8003aa4:	e7a8      	b.n	80039f8 <_printf_i+0x128>
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	0032      	movs	r2, r6
 8003aaa:	9906      	ldr	r1, [sp, #24]
 8003aac:	9805      	ldr	r0, [sp, #20]
 8003aae:	9d07      	ldr	r5, [sp, #28]
 8003ab0:	47a8      	blx	r5
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	d0aa      	beq.n	8003a0c <_printf_i+0x13c>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	079b      	lsls	r3, r3, #30
 8003aba:	d415      	bmi.n	8003ae8 <_printf_i+0x218>
 8003abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003abe:	68e0      	ldr	r0, [r4, #12]
 8003ac0:	4298      	cmp	r0, r3
 8003ac2:	daa5      	bge.n	8003a10 <_printf_i+0x140>
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	e7a3      	b.n	8003a10 <_printf_i+0x140>
 8003ac8:	0022      	movs	r2, r4
 8003aca:	2301      	movs	r3, #1
 8003acc:	9906      	ldr	r1, [sp, #24]
 8003ace:	9805      	ldr	r0, [sp, #20]
 8003ad0:	9e07      	ldr	r6, [sp, #28]
 8003ad2:	3219      	adds	r2, #25
 8003ad4:	47b0      	blx	r6
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d098      	beq.n	8003a0c <_printf_i+0x13c>
 8003ada:	3501      	adds	r5, #1
 8003adc:	68e3      	ldr	r3, [r4, #12]
 8003ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	42ab      	cmp	r3, r5
 8003ae4:	dcf0      	bgt.n	8003ac8 <_printf_i+0x1f8>
 8003ae6:	e7e9      	b.n	8003abc <_printf_i+0x1ec>
 8003ae8:	2500      	movs	r5, #0
 8003aea:	e7f7      	b.n	8003adc <_printf_i+0x20c>
 8003aec:	080044ef 	.word	0x080044ef
 8003af0:	08004500 	.word	0x08004500

08003af4 <_sbrk_r>:
 8003af4:	2300      	movs	r3, #0
 8003af6:	b570      	push	{r4, r5, r6, lr}
 8003af8:	4d06      	ldr	r5, [pc, #24]	; (8003b14 <_sbrk_r+0x20>)
 8003afa:	0004      	movs	r4, r0
 8003afc:	0008      	movs	r0, r1
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7fd ff52 	bl	80019a8 <_sbrk>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d103      	bne.n	8003b10 <_sbrk_r+0x1c>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d000      	beq.n	8003b10 <_sbrk_r+0x1c>
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	20000120 	.word	0x20000120

08003b18 <__swbuf_r>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	0005      	movs	r5, r0
 8003b1c:	000e      	movs	r6, r1
 8003b1e:	0014      	movs	r4, r2
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d004      	beq.n	8003b2e <__swbuf_r+0x16>
 8003b24:	6983      	ldr	r3, [r0, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <__swbuf_r+0x16>
 8003b2a:	f000 f9f9 	bl	8003f20 <__sinit>
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <__swbuf_r+0xa0>)
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d12e      	bne.n	8003b92 <__swbuf_r+0x7a>
 8003b34:	686c      	ldr	r4, [r5, #4]
 8003b36:	69a3      	ldr	r3, [r4, #24]
 8003b38:	60a3      	str	r3, [r4, #8]
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	071b      	lsls	r3, r3, #28
 8003b3e:	d532      	bpl.n	8003ba6 <__swbuf_r+0x8e>
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02f      	beq.n	8003ba6 <__swbuf_r+0x8e>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	6922      	ldr	r2, [r4, #16]
 8003b4a:	b2f7      	uxtb	r7, r6
 8003b4c:	1a98      	subs	r0, r3, r2
 8003b4e:	6963      	ldr	r3, [r4, #20]
 8003b50:	b2f6      	uxtb	r6, r6
 8003b52:	4283      	cmp	r3, r0
 8003b54:	dc05      	bgt.n	8003b62 <__swbuf_r+0x4a>
 8003b56:	0021      	movs	r1, r4
 8003b58:	0028      	movs	r0, r5
 8003b5a:	f000 f93f 	bl	8003ddc <_fflush_r>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d127      	bne.n	8003bb2 <__swbuf_r+0x9a>
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	3001      	adds	r0, #1
 8003b66:	3b01      	subs	r3, #1
 8003b68:	60a3      	str	r3, [r4, #8]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	6022      	str	r2, [r4, #0]
 8003b70:	701f      	strb	r7, [r3, #0]
 8003b72:	6963      	ldr	r3, [r4, #20]
 8003b74:	4283      	cmp	r3, r0
 8003b76:	d004      	beq.n	8003b82 <__swbuf_r+0x6a>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	07db      	lsls	r3, r3, #31
 8003b7c:	d507      	bpl.n	8003b8e <__swbuf_r+0x76>
 8003b7e:	2e0a      	cmp	r6, #10
 8003b80:	d105      	bne.n	8003b8e <__swbuf_r+0x76>
 8003b82:	0021      	movs	r1, r4
 8003b84:	0028      	movs	r0, r5
 8003b86:	f000 f929 	bl	8003ddc <_fflush_r>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d111      	bne.n	8003bb2 <__swbuf_r+0x9a>
 8003b8e:	0030      	movs	r0, r6
 8003b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <__swbuf_r+0xa4>)
 8003b94:	429c      	cmp	r4, r3
 8003b96:	d101      	bne.n	8003b9c <__swbuf_r+0x84>
 8003b98:	68ac      	ldr	r4, [r5, #8]
 8003b9a:	e7cc      	b.n	8003b36 <__swbuf_r+0x1e>
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <__swbuf_r+0xa8>)
 8003b9e:	429c      	cmp	r4, r3
 8003ba0:	d1c9      	bne.n	8003b36 <__swbuf_r+0x1e>
 8003ba2:	68ec      	ldr	r4, [r5, #12]
 8003ba4:	e7c7      	b.n	8003b36 <__swbuf_r+0x1e>
 8003ba6:	0021      	movs	r1, r4
 8003ba8:	0028      	movs	r0, r5
 8003baa:	f000 f80b 	bl	8003bc4 <__swsetup_r>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0c9      	beq.n	8003b46 <__swbuf_r+0x2e>
 8003bb2:	2601      	movs	r6, #1
 8003bb4:	4276      	negs	r6, r6
 8003bb6:	e7ea      	b.n	8003b8e <__swbuf_r+0x76>
 8003bb8:	08004534 	.word	0x08004534
 8003bbc:	08004554 	.word	0x08004554
 8003bc0:	08004514 	.word	0x08004514

08003bc4 <__swsetup_r>:
 8003bc4:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <__swsetup_r+0xe0>)
 8003bc6:	b570      	push	{r4, r5, r6, lr}
 8003bc8:	681d      	ldr	r5, [r3, #0]
 8003bca:	0006      	movs	r6, r0
 8003bcc:	000c      	movs	r4, r1
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	d005      	beq.n	8003bde <__swsetup_r+0x1a>
 8003bd2:	69ab      	ldr	r3, [r5, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <__swsetup_r+0x1a>
 8003bd8:	0028      	movs	r0, r5
 8003bda:	f000 f9a1 	bl	8003f20 <__sinit>
 8003bde:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <__swsetup_r+0xe4>)
 8003be0:	429c      	cmp	r4, r3
 8003be2:	d10f      	bne.n	8003c04 <__swsetup_r+0x40>
 8003be4:	686c      	ldr	r4, [r5, #4]
 8003be6:	230c      	movs	r3, #12
 8003be8:	5ee2      	ldrsh	r2, [r4, r3]
 8003bea:	b293      	uxth	r3, r2
 8003bec:	0711      	lsls	r1, r2, #28
 8003bee:	d42d      	bmi.n	8003c4c <__swsetup_r+0x88>
 8003bf0:	06d9      	lsls	r1, r3, #27
 8003bf2:	d411      	bmi.n	8003c18 <__swsetup_r+0x54>
 8003bf4:	2309      	movs	r3, #9
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	3337      	adds	r3, #55	; 0x37
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	4240      	negs	r0, r0
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	4b29      	ldr	r3, [pc, #164]	; (8003cac <__swsetup_r+0xe8>)
 8003c06:	429c      	cmp	r4, r3
 8003c08:	d101      	bne.n	8003c0e <__swsetup_r+0x4a>
 8003c0a:	68ac      	ldr	r4, [r5, #8]
 8003c0c:	e7eb      	b.n	8003be6 <__swsetup_r+0x22>
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <__swsetup_r+0xec>)
 8003c10:	429c      	cmp	r4, r3
 8003c12:	d1e8      	bne.n	8003be6 <__swsetup_r+0x22>
 8003c14:	68ec      	ldr	r4, [r5, #12]
 8003c16:	e7e6      	b.n	8003be6 <__swsetup_r+0x22>
 8003c18:	075b      	lsls	r3, r3, #29
 8003c1a:	d513      	bpl.n	8003c44 <__swsetup_r+0x80>
 8003c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d008      	beq.n	8003c34 <__swsetup_r+0x70>
 8003c22:	0023      	movs	r3, r4
 8003c24:	3344      	adds	r3, #68	; 0x44
 8003c26:	4299      	cmp	r1, r3
 8003c28:	d002      	beq.n	8003c30 <__swsetup_r+0x6c>
 8003c2a:	0030      	movs	r0, r6
 8003c2c:	f7ff fb9c 	bl	8003368 <_free_r>
 8003c30:	2300      	movs	r3, #0
 8003c32:	6363      	str	r3, [r4, #52]	; 0x34
 8003c34:	2224      	movs	r2, #36	; 0x24
 8003c36:	89a3      	ldrh	r3, [r4, #12]
 8003c38:	4393      	bics	r3, r2
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6063      	str	r3, [r4, #4]
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	6023      	str	r3, [r4, #0]
 8003c44:	2308      	movs	r3, #8
 8003c46:	89a2      	ldrh	r2, [r4, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	81a3      	strh	r3, [r4, #12]
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <__swsetup_r+0xa6>
 8003c52:	21a0      	movs	r1, #160	; 0xa0
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	0089      	lsls	r1, r1, #2
 8003c5a:	0092      	lsls	r2, r2, #2
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <__swsetup_r+0xa6>
 8003c62:	0021      	movs	r1, r4
 8003c64:	0030      	movs	r0, r6
 8003c66:	f000 fa27 	bl	80040b8 <__smakebuf_r>
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	5ea3      	ldrsh	r3, [r4, r2]
 8003c6e:	2001      	movs	r0, #1
 8003c70:	001a      	movs	r2, r3
 8003c72:	b299      	uxth	r1, r3
 8003c74:	4002      	ands	r2, r0
 8003c76:	4203      	tst	r3, r0
 8003c78:	d00f      	beq.n	8003c9a <__swsetup_r+0xd6>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	60a2      	str	r2, [r4, #8]
 8003c7e:	6962      	ldr	r2, [r4, #20]
 8003c80:	4252      	negs	r2, r2
 8003c82:	61a2      	str	r2, [r4, #24]
 8003c84:	2000      	movs	r0, #0
 8003c86:	6922      	ldr	r2, [r4, #16]
 8003c88:	4282      	cmp	r2, r0
 8003c8a:	d1ba      	bne.n	8003c02 <__swsetup_r+0x3e>
 8003c8c:	060a      	lsls	r2, r1, #24
 8003c8e:	d5b8      	bpl.n	8003c02 <__swsetup_r+0x3e>
 8003c90:	2240      	movs	r2, #64	; 0x40
 8003c92:	4313      	orrs	r3, r2
 8003c94:	81a3      	strh	r3, [r4, #12]
 8003c96:	3801      	subs	r0, #1
 8003c98:	e7b3      	b.n	8003c02 <__swsetup_r+0x3e>
 8003c9a:	0788      	lsls	r0, r1, #30
 8003c9c:	d400      	bmi.n	8003ca0 <__swsetup_r+0xdc>
 8003c9e:	6962      	ldr	r2, [r4, #20]
 8003ca0:	60a2      	str	r2, [r4, #8]
 8003ca2:	e7ef      	b.n	8003c84 <__swsetup_r+0xc0>
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	08004534 	.word	0x08004534
 8003cac:	08004554 	.word	0x08004554
 8003cb0:	08004514 	.word	0x08004514

08003cb4 <abort>:
 8003cb4:	2006      	movs	r0, #6
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	f000 fa88 	bl	80041cc <raise>
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f7fd fe02 	bl	80018c6 <_exit>
	...

08003cc4 <__sflush_r>:
 8003cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc6:	898b      	ldrh	r3, [r1, #12]
 8003cc8:	0005      	movs	r5, r0
 8003cca:	000c      	movs	r4, r1
 8003ccc:	071a      	lsls	r2, r3, #28
 8003cce:	d45f      	bmi.n	8003d90 <__sflush_r+0xcc>
 8003cd0:	684a      	ldr	r2, [r1, #4]
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	dc04      	bgt.n	8003ce0 <__sflush_r+0x1c>
 8003cd6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003cd8:	2a00      	cmp	r2, #0
 8003cda:	dc01      	bgt.n	8003ce0 <__sflush_r+0x1c>
 8003cdc:	2000      	movs	r0, #0
 8003cde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ce0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003ce2:	2f00      	cmp	r7, #0
 8003ce4:	d0fa      	beq.n	8003cdc <__sflush_r+0x18>
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	682e      	ldr	r6, [r5, #0]
 8003cec:	602a      	str	r2, [r5, #0]
 8003cee:	001a      	movs	r2, r3
 8003cf0:	0149      	lsls	r1, r1, #5
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	420b      	tst	r3, r1
 8003cf6:	d034      	beq.n	8003d62 <__sflush_r+0x9e>
 8003cf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	075b      	lsls	r3, r3, #29
 8003cfe:	d506      	bpl.n	8003d0e <__sflush_r+0x4a>
 8003d00:	6863      	ldr	r3, [r4, #4]
 8003d02:	1ac0      	subs	r0, r0, r3
 8003d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <__sflush_r+0x4a>
 8003d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d0c:	1ac0      	subs	r0, r0, r3
 8003d0e:	0002      	movs	r2, r0
 8003d10:	6a21      	ldr	r1, [r4, #32]
 8003d12:	2300      	movs	r3, #0
 8003d14:	0028      	movs	r0, r5
 8003d16:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d18:	47b8      	blx	r7
 8003d1a:	89a1      	ldrh	r1, [r4, #12]
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d106      	bne.n	8003d2e <__sflush_r+0x6a>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	2b1d      	cmp	r3, #29
 8003d24:	d831      	bhi.n	8003d8a <__sflush_r+0xc6>
 8003d26:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <__sflush_r+0x114>)
 8003d28:	40da      	lsrs	r2, r3
 8003d2a:	07d3      	lsls	r3, r2, #31
 8003d2c:	d52d      	bpl.n	8003d8a <__sflush_r+0xc6>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6063      	str	r3, [r4, #4]
 8003d32:	6923      	ldr	r3, [r4, #16]
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	04cb      	lsls	r3, r1, #19
 8003d38:	d505      	bpl.n	8003d46 <__sflush_r+0x82>
 8003d3a:	1c43      	adds	r3, r0, #1
 8003d3c:	d102      	bne.n	8003d44 <__sflush_r+0x80>
 8003d3e:	682b      	ldr	r3, [r5, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d100      	bne.n	8003d46 <__sflush_r+0x82>
 8003d44:	6560      	str	r0, [r4, #84]	; 0x54
 8003d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d48:	602e      	str	r6, [r5, #0]
 8003d4a:	2900      	cmp	r1, #0
 8003d4c:	d0c6      	beq.n	8003cdc <__sflush_r+0x18>
 8003d4e:	0023      	movs	r3, r4
 8003d50:	3344      	adds	r3, #68	; 0x44
 8003d52:	4299      	cmp	r1, r3
 8003d54:	d002      	beq.n	8003d5c <__sflush_r+0x98>
 8003d56:	0028      	movs	r0, r5
 8003d58:	f7ff fb06 	bl	8003368 <_free_r>
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	6360      	str	r0, [r4, #52]	; 0x34
 8003d60:	e7bd      	b.n	8003cde <__sflush_r+0x1a>
 8003d62:	2301      	movs	r3, #1
 8003d64:	0028      	movs	r0, r5
 8003d66:	6a21      	ldr	r1, [r4, #32]
 8003d68:	47b8      	blx	r7
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	d1c5      	bne.n	8003cfa <__sflush_r+0x36>
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0c2      	beq.n	8003cfa <__sflush_r+0x36>
 8003d74:	2b1d      	cmp	r3, #29
 8003d76:	d001      	beq.n	8003d7c <__sflush_r+0xb8>
 8003d78:	2b16      	cmp	r3, #22
 8003d7a:	d101      	bne.n	8003d80 <__sflush_r+0xbc>
 8003d7c:	602e      	str	r6, [r5, #0]
 8003d7e:	e7ad      	b.n	8003cdc <__sflush_r+0x18>
 8003d80:	2340      	movs	r3, #64	; 0x40
 8003d82:	89a2      	ldrh	r2, [r4, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	e7a9      	b.n	8003cde <__sflush_r+0x1a>
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	e7fa      	b.n	8003d86 <__sflush_r+0xc2>
 8003d90:	690f      	ldr	r7, [r1, #16]
 8003d92:	2f00      	cmp	r7, #0
 8003d94:	d0a2      	beq.n	8003cdc <__sflush_r+0x18>
 8003d96:	680a      	ldr	r2, [r1, #0]
 8003d98:	600f      	str	r7, [r1, #0]
 8003d9a:	1bd2      	subs	r2, r2, r7
 8003d9c:	9201      	str	r2, [sp, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	079b      	lsls	r3, r3, #30
 8003da2:	d100      	bne.n	8003da6 <__sflush_r+0xe2>
 8003da4:	694a      	ldr	r2, [r1, #20]
 8003da6:	60a2      	str	r2, [r4, #8]
 8003da8:	9b01      	ldr	r3, [sp, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	dc00      	bgt.n	8003db0 <__sflush_r+0xec>
 8003dae:	e795      	b.n	8003cdc <__sflush_r+0x18>
 8003db0:	003a      	movs	r2, r7
 8003db2:	0028      	movs	r0, r5
 8003db4:	9b01      	ldr	r3, [sp, #4]
 8003db6:	6a21      	ldr	r1, [r4, #32]
 8003db8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003dba:	47b0      	blx	r6
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	dc06      	bgt.n	8003dce <__sflush_r+0x10a>
 8003dc0:	2340      	movs	r3, #64	; 0x40
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	89a2      	ldrh	r2, [r4, #12]
 8003dc6:	4240      	negs	r0, r0
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	e787      	b.n	8003cde <__sflush_r+0x1a>
 8003dce:	9b01      	ldr	r3, [sp, #4]
 8003dd0:	183f      	adds	r7, r7, r0
 8003dd2:	1a1b      	subs	r3, r3, r0
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	e7e7      	b.n	8003da8 <__sflush_r+0xe4>
 8003dd8:	20400001 	.word	0x20400001

08003ddc <_fflush_r>:
 8003ddc:	690b      	ldr	r3, [r1, #16]
 8003dde:	b570      	push	{r4, r5, r6, lr}
 8003de0:	0005      	movs	r5, r0
 8003de2:	000c      	movs	r4, r1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <_fflush_r+0x12>
 8003de8:	2500      	movs	r5, #0
 8003dea:	0028      	movs	r0, r5
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d004      	beq.n	8003dfc <_fflush_r+0x20>
 8003df2:	6983      	ldr	r3, [r0, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <_fflush_r+0x20>
 8003df8:	f000 f892 	bl	8003f20 <__sinit>
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <_fflush_r+0x74>)
 8003dfe:	429c      	cmp	r4, r3
 8003e00:	d11b      	bne.n	8003e3a <_fflush_r+0x5e>
 8003e02:	686c      	ldr	r4, [r5, #4]
 8003e04:	220c      	movs	r2, #12
 8003e06:	5ea3      	ldrsh	r3, [r4, r2]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ed      	beq.n	8003de8 <_fflush_r+0xc>
 8003e0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e0e:	07d2      	lsls	r2, r2, #31
 8003e10:	d404      	bmi.n	8003e1c <_fflush_r+0x40>
 8003e12:	059b      	lsls	r3, r3, #22
 8003e14:	d402      	bmi.n	8003e1c <_fflush_r+0x40>
 8003e16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e18:	f000 f923 	bl	8004062 <__retarget_lock_acquire_recursive>
 8003e1c:	0028      	movs	r0, r5
 8003e1e:	0021      	movs	r1, r4
 8003e20:	f7ff ff50 	bl	8003cc4 <__sflush_r>
 8003e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e26:	0005      	movs	r5, r0
 8003e28:	07db      	lsls	r3, r3, #31
 8003e2a:	d4de      	bmi.n	8003dea <_fflush_r+0xe>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	059b      	lsls	r3, r3, #22
 8003e30:	d4db      	bmi.n	8003dea <_fflush_r+0xe>
 8003e32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e34:	f000 f916 	bl	8004064 <__retarget_lock_release_recursive>
 8003e38:	e7d7      	b.n	8003dea <_fflush_r+0xe>
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <_fflush_r+0x78>)
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	d101      	bne.n	8003e44 <_fflush_r+0x68>
 8003e40:	68ac      	ldr	r4, [r5, #8]
 8003e42:	e7df      	b.n	8003e04 <_fflush_r+0x28>
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <_fflush_r+0x7c>)
 8003e46:	429c      	cmp	r4, r3
 8003e48:	d1dc      	bne.n	8003e04 <_fflush_r+0x28>
 8003e4a:	68ec      	ldr	r4, [r5, #12]
 8003e4c:	e7da      	b.n	8003e04 <_fflush_r+0x28>
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	08004534 	.word	0x08004534
 8003e54:	08004554 	.word	0x08004554
 8003e58:	08004514 	.word	0x08004514

08003e5c <std>:
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	0004      	movs	r4, r0
 8003e62:	6003      	str	r3, [r0, #0]
 8003e64:	6043      	str	r3, [r0, #4]
 8003e66:	6083      	str	r3, [r0, #8]
 8003e68:	8181      	strh	r1, [r0, #12]
 8003e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	81c2      	strh	r2, [r0, #14]
 8003e70:	6103      	str	r3, [r0, #16]
 8003e72:	6143      	str	r3, [r0, #20]
 8003e74:	6183      	str	r3, [r0, #24]
 8003e76:	2208      	movs	r2, #8
 8003e78:	305c      	adds	r0, #92	; 0x5c
 8003e7a:	f7ff f9c7 	bl	800320c <memset>
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <std+0x38>)
 8003e80:	6224      	str	r4, [r4, #32]
 8003e82:	6263      	str	r3, [r4, #36]	; 0x24
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <std+0x3c>)
 8003e86:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <std+0x40>)
 8003e8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <std+0x44>)
 8003e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	0800420d 	.word	0x0800420d
 8003e98:	08004235 	.word	0x08004235
 8003e9c:	0800426d 	.word	0x0800426d
 8003ea0:	08004299 	.word	0x08004299

08003ea4 <_cleanup_r>:
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	4902      	ldr	r1, [pc, #8]	; (8003eb0 <_cleanup_r+0xc>)
 8003ea8:	f000 f8ba 	bl	8004020 <_fwalk_reent>
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	08003ddd 	.word	0x08003ddd

08003eb4 <__sfmoreglue>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	2568      	movs	r5, #104	; 0x68
 8003eb8:	1e4a      	subs	r2, r1, #1
 8003eba:	4355      	muls	r5, r2
 8003ebc:	000e      	movs	r6, r1
 8003ebe:	0029      	movs	r1, r5
 8003ec0:	3174      	adds	r1, #116	; 0x74
 8003ec2:	f7ff fabd 	bl	8003440 <_malloc_r>
 8003ec6:	1e04      	subs	r4, r0, #0
 8003ec8:	d008      	beq.n	8003edc <__sfmoreglue+0x28>
 8003eca:	2100      	movs	r1, #0
 8003ecc:	002a      	movs	r2, r5
 8003ece:	6001      	str	r1, [r0, #0]
 8003ed0:	6046      	str	r6, [r0, #4]
 8003ed2:	300c      	adds	r0, #12
 8003ed4:	60a0      	str	r0, [r4, #8]
 8003ed6:	3268      	adds	r2, #104	; 0x68
 8003ed8:	f7ff f998 	bl	800320c <memset>
 8003edc:	0020      	movs	r0, r4
 8003ede:	bd70      	pop	{r4, r5, r6, pc}

08003ee0 <__sfp_lock_acquire>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	4802      	ldr	r0, [pc, #8]	; (8003eec <__sfp_lock_acquire+0xc>)
 8003ee4:	f000 f8bd 	bl	8004062 <__retarget_lock_acquire_recursive>
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	2000011d 	.word	0x2000011d

08003ef0 <__sfp_lock_release>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	4802      	ldr	r0, [pc, #8]	; (8003efc <__sfp_lock_release+0xc>)
 8003ef4:	f000 f8b6 	bl	8004064 <__retarget_lock_release_recursive>
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	2000011d 	.word	0x2000011d

08003f00 <__sinit_lock_acquire>:
 8003f00:	b510      	push	{r4, lr}
 8003f02:	4802      	ldr	r0, [pc, #8]	; (8003f0c <__sinit_lock_acquire+0xc>)
 8003f04:	f000 f8ad 	bl	8004062 <__retarget_lock_acquire_recursive>
 8003f08:	bd10      	pop	{r4, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	2000011e 	.word	0x2000011e

08003f10 <__sinit_lock_release>:
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4802      	ldr	r0, [pc, #8]	; (8003f1c <__sinit_lock_release+0xc>)
 8003f14:	f000 f8a6 	bl	8004064 <__retarget_lock_release_recursive>
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	2000011e 	.word	0x2000011e

08003f20 <__sinit>:
 8003f20:	b513      	push	{r0, r1, r4, lr}
 8003f22:	0004      	movs	r4, r0
 8003f24:	f7ff ffec 	bl	8003f00 <__sinit_lock_acquire>
 8003f28:	69a3      	ldr	r3, [r4, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <__sinit+0x14>
 8003f2e:	f7ff ffef 	bl	8003f10 <__sinit_lock_release>
 8003f32:	bd13      	pop	{r0, r1, r4, pc}
 8003f34:	64a3      	str	r3, [r4, #72]	; 0x48
 8003f36:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003f38:	6523      	str	r3, [r4, #80]	; 0x50
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <__sinit+0x68>)
 8003f3c:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <__sinit+0x6c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	d101      	bne.n	8003f4c <__sinit+0x2c>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	61a3      	str	r3, [r4, #24]
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f000 f81f 	bl	8003f90 <__sfp>
 8003f52:	6060      	str	r0, [r4, #4]
 8003f54:	0020      	movs	r0, r4
 8003f56:	f000 f81b 	bl	8003f90 <__sfp>
 8003f5a:	60a0      	str	r0, [r4, #8]
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f000 f817 	bl	8003f90 <__sfp>
 8003f62:	2200      	movs	r2, #0
 8003f64:	2104      	movs	r1, #4
 8003f66:	60e0      	str	r0, [r4, #12]
 8003f68:	6860      	ldr	r0, [r4, #4]
 8003f6a:	f7ff ff77 	bl	8003e5c <std>
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2109      	movs	r1, #9
 8003f72:	68a0      	ldr	r0, [r4, #8]
 8003f74:	f7ff ff72 	bl	8003e5c <std>
 8003f78:	2202      	movs	r2, #2
 8003f7a:	2112      	movs	r1, #18
 8003f7c:	68e0      	ldr	r0, [r4, #12]
 8003f7e:	f7ff ff6d 	bl	8003e5c <std>
 8003f82:	2301      	movs	r3, #1
 8003f84:	61a3      	str	r3, [r4, #24]
 8003f86:	e7d2      	b.n	8003f2e <__sinit+0xe>
 8003f88:	0800442c 	.word	0x0800442c
 8003f8c:	08003ea5 	.word	0x08003ea5

08003f90 <__sfp>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	0007      	movs	r7, r0
 8003f94:	f7ff ffa4 	bl	8003ee0 <__sfp_lock_acquire>
 8003f98:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <__sfp+0x88>)
 8003f9a:	681e      	ldr	r6, [r3, #0]
 8003f9c:	69b3      	ldr	r3, [r6, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <__sfp+0x18>
 8003fa2:	0030      	movs	r0, r6
 8003fa4:	f7ff ffbc 	bl	8003f20 <__sinit>
 8003fa8:	3648      	adds	r6, #72	; 0x48
 8003faa:	68b4      	ldr	r4, [r6, #8]
 8003fac:	6873      	ldr	r3, [r6, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	d504      	bpl.n	8003fbc <__sfp+0x2c>
 8003fb2:	6833      	ldr	r3, [r6, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <__sfp+0x6e>
 8003fb8:	6836      	ldr	r6, [r6, #0]
 8003fba:	e7f6      	b.n	8003faa <__sfp+0x1a>
 8003fbc:	220c      	movs	r2, #12
 8003fbe:	5ea5      	ldrsh	r5, [r4, r2]
 8003fc0:	2d00      	cmp	r5, #0
 8003fc2:	d11a      	bne.n	8003ffa <__sfp+0x6a>
 8003fc4:	0020      	movs	r0, r4
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <__sfp+0x8c>)
 8003fc8:	3058      	adds	r0, #88	; 0x58
 8003fca:	60e3      	str	r3, [r4, #12]
 8003fcc:	6665      	str	r5, [r4, #100]	; 0x64
 8003fce:	f000 f847 	bl	8004060 <__retarget_lock_init_recursive>
 8003fd2:	f7ff ff8d 	bl	8003ef0 <__sfp_lock_release>
 8003fd6:	0020      	movs	r0, r4
 8003fd8:	2208      	movs	r2, #8
 8003fda:	0029      	movs	r1, r5
 8003fdc:	6025      	str	r5, [r4, #0]
 8003fde:	60a5      	str	r5, [r4, #8]
 8003fe0:	6065      	str	r5, [r4, #4]
 8003fe2:	6125      	str	r5, [r4, #16]
 8003fe4:	6165      	str	r5, [r4, #20]
 8003fe6:	61a5      	str	r5, [r4, #24]
 8003fe8:	305c      	adds	r0, #92	; 0x5c
 8003fea:	f7ff f90f 	bl	800320c <memset>
 8003fee:	6365      	str	r5, [r4, #52]	; 0x34
 8003ff0:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ff2:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ff4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ffa:	3468      	adds	r4, #104	; 0x68
 8003ffc:	e7d7      	b.n	8003fae <__sfp+0x1e>
 8003ffe:	2104      	movs	r1, #4
 8004000:	0038      	movs	r0, r7
 8004002:	f7ff ff57 	bl	8003eb4 <__sfmoreglue>
 8004006:	1e04      	subs	r4, r0, #0
 8004008:	6030      	str	r0, [r6, #0]
 800400a:	d1d5      	bne.n	8003fb8 <__sfp+0x28>
 800400c:	f7ff ff70 	bl	8003ef0 <__sfp_lock_release>
 8004010:	230c      	movs	r3, #12
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	e7ef      	b.n	8003ff6 <__sfp+0x66>
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	0800442c 	.word	0x0800442c
 800401c:	ffff0001 	.word	0xffff0001

08004020 <_fwalk_reent>:
 8004020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004022:	0004      	movs	r4, r0
 8004024:	0006      	movs	r6, r0
 8004026:	2700      	movs	r7, #0
 8004028:	9101      	str	r1, [sp, #4]
 800402a:	3448      	adds	r4, #72	; 0x48
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	68a5      	ldr	r5, [r4, #8]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	9b00      	ldr	r3, [sp, #0]
 8004034:	3b01      	subs	r3, #1
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	d504      	bpl.n	8004044 <_fwalk_reent+0x24>
 800403a:	6824      	ldr	r4, [r4, #0]
 800403c:	2c00      	cmp	r4, #0
 800403e:	d1f5      	bne.n	800402c <_fwalk_reent+0xc>
 8004040:	0038      	movs	r0, r7
 8004042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004044:	89ab      	ldrh	r3, [r5, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d908      	bls.n	800405c <_fwalk_reent+0x3c>
 800404a:	220e      	movs	r2, #14
 800404c:	5eab      	ldrsh	r3, [r5, r2]
 800404e:	3301      	adds	r3, #1
 8004050:	d004      	beq.n	800405c <_fwalk_reent+0x3c>
 8004052:	0029      	movs	r1, r5
 8004054:	0030      	movs	r0, r6
 8004056:	9b01      	ldr	r3, [sp, #4]
 8004058:	4798      	blx	r3
 800405a:	4307      	orrs	r7, r0
 800405c:	3568      	adds	r5, #104	; 0x68
 800405e:	e7e8      	b.n	8004032 <_fwalk_reent+0x12>

08004060 <__retarget_lock_init_recursive>:
 8004060:	4770      	bx	lr

08004062 <__retarget_lock_acquire_recursive>:
 8004062:	4770      	bx	lr

08004064 <__retarget_lock_release_recursive>:
 8004064:	4770      	bx	lr
	...

08004068 <__swhatbuf_r>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	000e      	movs	r6, r1
 800406c:	001d      	movs	r5, r3
 800406e:	230e      	movs	r3, #14
 8004070:	5ec9      	ldrsh	r1, [r1, r3]
 8004072:	0014      	movs	r4, r2
 8004074:	b096      	sub	sp, #88	; 0x58
 8004076:	2900      	cmp	r1, #0
 8004078:	da08      	bge.n	800408c <__swhatbuf_r+0x24>
 800407a:	220c      	movs	r2, #12
 800407c:	5eb3      	ldrsh	r3, [r6, r2]
 800407e:	2200      	movs	r2, #0
 8004080:	602a      	str	r2, [r5, #0]
 8004082:	061b      	lsls	r3, r3, #24
 8004084:	d411      	bmi.n	80040aa <__swhatbuf_r+0x42>
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	e00f      	b.n	80040ac <__swhatbuf_r+0x44>
 800408c:	466a      	mov	r2, sp
 800408e:	f000 f92f 	bl	80042f0 <_fstat_r>
 8004092:	2800      	cmp	r0, #0
 8004094:	dbf1      	blt.n	800407a <__swhatbuf_r+0x12>
 8004096:	23f0      	movs	r3, #240	; 0xf0
 8004098:	9901      	ldr	r1, [sp, #4]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	4019      	ands	r1, r3
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <__swhatbuf_r+0x4c>)
 80040a0:	18c9      	adds	r1, r1, r3
 80040a2:	424b      	negs	r3, r1
 80040a4:	4159      	adcs	r1, r3
 80040a6:	6029      	str	r1, [r5, #0]
 80040a8:	e7ed      	b.n	8004086 <__swhatbuf_r+0x1e>
 80040aa:	2340      	movs	r3, #64	; 0x40
 80040ac:	2000      	movs	r0, #0
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	b016      	add	sp, #88	; 0x58
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	ffffe000 	.word	0xffffe000

080040b8 <__smakebuf_r>:
 80040b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ba:	2602      	movs	r6, #2
 80040bc:	898b      	ldrh	r3, [r1, #12]
 80040be:	0005      	movs	r5, r0
 80040c0:	000c      	movs	r4, r1
 80040c2:	4233      	tst	r3, r6
 80040c4:	d006      	beq.n	80040d4 <__smakebuf_r+0x1c>
 80040c6:	0023      	movs	r3, r4
 80040c8:	3347      	adds	r3, #71	; 0x47
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	6123      	str	r3, [r4, #16]
 80040ce:	2301      	movs	r3, #1
 80040d0:	6163      	str	r3, [r4, #20]
 80040d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80040d4:	466a      	mov	r2, sp
 80040d6:	ab01      	add	r3, sp, #4
 80040d8:	f7ff ffc6 	bl	8004068 <__swhatbuf_r>
 80040dc:	9900      	ldr	r1, [sp, #0]
 80040de:	0007      	movs	r7, r0
 80040e0:	0028      	movs	r0, r5
 80040e2:	f7ff f9ad 	bl	8003440 <_malloc_r>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d108      	bne.n	80040fc <__smakebuf_r+0x44>
 80040ea:	220c      	movs	r2, #12
 80040ec:	5ea3      	ldrsh	r3, [r4, r2]
 80040ee:	059a      	lsls	r2, r3, #22
 80040f0:	d4ef      	bmi.n	80040d2 <__smakebuf_r+0x1a>
 80040f2:	2203      	movs	r2, #3
 80040f4:	4393      	bics	r3, r2
 80040f6:	431e      	orrs	r6, r3
 80040f8:	81a6      	strh	r6, [r4, #12]
 80040fa:	e7e4      	b.n	80040c6 <__smakebuf_r+0xe>
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <__smakebuf_r+0x84>)
 80040fe:	62ab      	str	r3, [r5, #40]	; 0x28
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	89a2      	ldrh	r2, [r4, #12]
 8004104:	6020      	str	r0, [r4, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	81a3      	strh	r3, [r4, #12]
 800410a:	9b00      	ldr	r3, [sp, #0]
 800410c:	6120      	str	r0, [r4, #16]
 800410e:	6163      	str	r3, [r4, #20]
 8004110:	9b01      	ldr	r3, [sp, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <__smakebuf_r+0x7a>
 8004116:	0028      	movs	r0, r5
 8004118:	230e      	movs	r3, #14
 800411a:	5ee1      	ldrsh	r1, [r4, r3]
 800411c:	f000 f8fa 	bl	8004314 <_isatty_r>
 8004120:	2800      	cmp	r0, #0
 8004122:	d006      	beq.n	8004132 <__smakebuf_r+0x7a>
 8004124:	2203      	movs	r2, #3
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	4393      	bics	r3, r2
 800412a:	001a      	movs	r2, r3
 800412c:	2301      	movs	r3, #1
 800412e:	4313      	orrs	r3, r2
 8004130:	81a3      	strh	r3, [r4, #12]
 8004132:	89a0      	ldrh	r0, [r4, #12]
 8004134:	4307      	orrs	r7, r0
 8004136:	81a7      	strh	r7, [r4, #12]
 8004138:	e7cb      	b.n	80040d2 <__smakebuf_r+0x1a>
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	08003ea5 	.word	0x08003ea5

08004140 <memchr>:
 8004140:	b2c9      	uxtb	r1, r1
 8004142:	1882      	adds	r2, r0, r2
 8004144:	4290      	cmp	r0, r2
 8004146:	d101      	bne.n	800414c <memchr+0xc>
 8004148:	2000      	movs	r0, #0
 800414a:	4770      	bx	lr
 800414c:	7803      	ldrb	r3, [r0, #0]
 800414e:	428b      	cmp	r3, r1
 8004150:	d0fb      	beq.n	800414a <memchr+0xa>
 8004152:	3001      	adds	r0, #1
 8004154:	e7f6      	b.n	8004144 <memchr+0x4>
	...

08004158 <__malloc_lock>:
 8004158:	b510      	push	{r4, lr}
 800415a:	4802      	ldr	r0, [pc, #8]	; (8004164 <__malloc_lock+0xc>)
 800415c:	f7ff ff81 	bl	8004062 <__retarget_lock_acquire_recursive>
 8004160:	bd10      	pop	{r4, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	2000011c 	.word	0x2000011c

08004168 <__malloc_unlock>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4802      	ldr	r0, [pc, #8]	; (8004174 <__malloc_unlock+0xc>)
 800416c:	f7ff ff7a 	bl	8004064 <__retarget_lock_release_recursive>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	2000011c 	.word	0x2000011c

08004178 <_raise_r>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	0004      	movs	r4, r0
 800417c:	000d      	movs	r5, r1
 800417e:	291f      	cmp	r1, #31
 8004180:	d904      	bls.n	800418c <_raise_r+0x14>
 8004182:	2316      	movs	r3, #22
 8004184:	6003      	str	r3, [r0, #0]
 8004186:	2001      	movs	r0, #1
 8004188:	4240      	negs	r0, r0
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <_raise_r+0x24>
 8004192:	008a      	lsls	r2, r1, #2
 8004194:	189b      	adds	r3, r3, r2
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2a00      	cmp	r2, #0
 800419a:	d108      	bne.n	80041ae <_raise_r+0x36>
 800419c:	0020      	movs	r0, r4
 800419e:	f000 f831 	bl	8004204 <_getpid_r>
 80041a2:	002a      	movs	r2, r5
 80041a4:	0001      	movs	r1, r0
 80041a6:	0020      	movs	r0, r4
 80041a8:	f000 f81a 	bl	80041e0 <_kill_r>
 80041ac:	e7ed      	b.n	800418a <_raise_r+0x12>
 80041ae:	2000      	movs	r0, #0
 80041b0:	2a01      	cmp	r2, #1
 80041b2:	d0ea      	beq.n	800418a <_raise_r+0x12>
 80041b4:	1c51      	adds	r1, r2, #1
 80041b6:	d103      	bne.n	80041c0 <_raise_r+0x48>
 80041b8:	2316      	movs	r3, #22
 80041ba:	3001      	adds	r0, #1
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	e7e4      	b.n	800418a <_raise_r+0x12>
 80041c0:	2400      	movs	r4, #0
 80041c2:	0028      	movs	r0, r5
 80041c4:	601c      	str	r4, [r3, #0]
 80041c6:	4790      	blx	r2
 80041c8:	0020      	movs	r0, r4
 80041ca:	e7de      	b.n	800418a <_raise_r+0x12>

080041cc <raise>:
 80041cc:	b510      	push	{r4, lr}
 80041ce:	4b03      	ldr	r3, [pc, #12]	; (80041dc <raise+0x10>)
 80041d0:	0001      	movs	r1, r0
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	f7ff ffd0 	bl	8004178 <_raise_r>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	2000000c 	.word	0x2000000c

080041e0 <_kill_r>:
 80041e0:	2300      	movs	r3, #0
 80041e2:	b570      	push	{r4, r5, r6, lr}
 80041e4:	4d06      	ldr	r5, [pc, #24]	; (8004200 <_kill_r+0x20>)
 80041e6:	0004      	movs	r4, r0
 80041e8:	0008      	movs	r0, r1
 80041ea:	0011      	movs	r1, r2
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	f7fd fb5a 	bl	80018a6 <_kill>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	d103      	bne.n	80041fe <_kill_r+0x1e>
 80041f6:	682b      	ldr	r3, [r5, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d000      	beq.n	80041fe <_kill_r+0x1e>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	20000120 	.word	0x20000120

08004204 <_getpid_r>:
 8004204:	b510      	push	{r4, lr}
 8004206:	f7fd fb48 	bl	800189a <_getpid>
 800420a:	bd10      	pop	{r4, pc}

0800420c <__sread>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	000c      	movs	r4, r1
 8004210:	250e      	movs	r5, #14
 8004212:	5f49      	ldrsh	r1, [r1, r5]
 8004214:	f000 f8a4 	bl	8004360 <_read_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	db03      	blt.n	8004224 <__sread+0x18>
 800421c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800421e:	181b      	adds	r3, r3, r0
 8004220:	6563      	str	r3, [r4, #84]	; 0x54
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	4a02      	ldr	r2, [pc, #8]	; (8004230 <__sread+0x24>)
 8004228:	4013      	ands	r3, r2
 800422a:	81a3      	strh	r3, [r4, #12]
 800422c:	e7f9      	b.n	8004222 <__sread+0x16>
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	ffffefff 	.word	0xffffefff

08004234 <__swrite>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	001f      	movs	r7, r3
 8004238:	898b      	ldrh	r3, [r1, #12]
 800423a:	0005      	movs	r5, r0
 800423c:	000c      	movs	r4, r1
 800423e:	0016      	movs	r6, r2
 8004240:	05db      	lsls	r3, r3, #23
 8004242:	d505      	bpl.n	8004250 <__swrite+0x1c>
 8004244:	230e      	movs	r3, #14
 8004246:	5ec9      	ldrsh	r1, [r1, r3]
 8004248:	2200      	movs	r2, #0
 800424a:	2302      	movs	r3, #2
 800424c:	f000 f874 	bl	8004338 <_lseek_r>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <__swrite+0x34>)
 8004254:	0028      	movs	r0, r5
 8004256:	4013      	ands	r3, r2
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	0032      	movs	r2, r6
 800425c:	230e      	movs	r3, #14
 800425e:	5ee1      	ldrsh	r1, [r4, r3]
 8004260:	003b      	movs	r3, r7
 8004262:	f000 f81f 	bl	80042a4 <_write_r>
 8004266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004268:	ffffefff 	.word	0xffffefff

0800426c <__sseek>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	000c      	movs	r4, r1
 8004270:	250e      	movs	r5, #14
 8004272:	5f49      	ldrsh	r1, [r1, r5]
 8004274:	f000 f860 	bl	8004338 <_lseek_r>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	1c42      	adds	r2, r0, #1
 800427c:	d103      	bne.n	8004286 <__sseek+0x1a>
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <__sseek+0x28>)
 8004280:	4013      	ands	r3, r2
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	bd70      	pop	{r4, r5, r6, pc}
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	0152      	lsls	r2, r2, #5
 800428a:	4313      	orrs	r3, r2
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	6560      	str	r0, [r4, #84]	; 0x54
 8004290:	e7f8      	b.n	8004284 <__sseek+0x18>
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	ffffefff 	.word	0xffffefff

08004298 <__sclose>:
 8004298:	b510      	push	{r4, lr}
 800429a:	230e      	movs	r3, #14
 800429c:	5ec9      	ldrsh	r1, [r1, r3]
 800429e:	f000 f815 	bl	80042cc <_close_r>
 80042a2:	bd10      	pop	{r4, pc}

080042a4 <_write_r>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	0004      	movs	r4, r0
 80042a8:	0008      	movs	r0, r1
 80042aa:	0011      	movs	r1, r2
 80042ac:	001a      	movs	r2, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	4d05      	ldr	r5, [pc, #20]	; (80042c8 <_write_r+0x24>)
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	f7fd fb30 	bl	8001918 <_write>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d103      	bne.n	80042c4 <_write_r+0x20>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d000      	beq.n	80042c4 <_write_r+0x20>
 80042c2:	6023      	str	r3, [r4, #0]
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	20000120 	.word	0x20000120

080042cc <_close_r>:
 80042cc:	2300      	movs	r3, #0
 80042ce:	b570      	push	{r4, r5, r6, lr}
 80042d0:	4d06      	ldr	r5, [pc, #24]	; (80042ec <_close_r+0x20>)
 80042d2:	0004      	movs	r4, r0
 80042d4:	0008      	movs	r0, r1
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	f7fd fb3a 	bl	8001950 <_close>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d103      	bne.n	80042e8 <_close_r+0x1c>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d000      	beq.n	80042e8 <_close_r+0x1c>
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	20000120 	.word	0x20000120

080042f0 <_fstat_r>:
 80042f0:	2300      	movs	r3, #0
 80042f2:	b570      	push	{r4, r5, r6, lr}
 80042f4:	4d06      	ldr	r5, [pc, #24]	; (8004310 <_fstat_r+0x20>)
 80042f6:	0004      	movs	r4, r0
 80042f8:	0008      	movs	r0, r1
 80042fa:	0011      	movs	r1, r2
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	f7fd fb31 	bl	8001964 <_fstat>
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	d103      	bne.n	800430e <_fstat_r+0x1e>
 8004306:	682b      	ldr	r3, [r5, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d000      	beq.n	800430e <_fstat_r+0x1e>
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	20000120 	.word	0x20000120

08004314 <_isatty_r>:
 8004314:	2300      	movs	r3, #0
 8004316:	b570      	push	{r4, r5, r6, lr}
 8004318:	4d06      	ldr	r5, [pc, #24]	; (8004334 <_isatty_r+0x20>)
 800431a:	0004      	movs	r4, r0
 800431c:	0008      	movs	r0, r1
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	f7fd fb2e 	bl	8001980 <_isatty>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d103      	bne.n	8004330 <_isatty_r+0x1c>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d000      	beq.n	8004330 <_isatty_r+0x1c>
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	20000120 	.word	0x20000120

08004338 <_lseek_r>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	0004      	movs	r4, r0
 800433c:	0008      	movs	r0, r1
 800433e:	0011      	movs	r1, r2
 8004340:	001a      	movs	r2, r3
 8004342:	2300      	movs	r3, #0
 8004344:	4d05      	ldr	r5, [pc, #20]	; (800435c <_lseek_r+0x24>)
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	f7fd fb23 	bl	8001992 <_lseek>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d103      	bne.n	8004358 <_lseek_r+0x20>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d000      	beq.n	8004358 <_lseek_r+0x20>
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	bd70      	pop	{r4, r5, r6, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	20000120 	.word	0x20000120

08004360 <_read_r>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	0004      	movs	r4, r0
 8004364:	0008      	movs	r0, r1
 8004366:	0011      	movs	r1, r2
 8004368:	001a      	movs	r2, r3
 800436a:	2300      	movs	r3, #0
 800436c:	4d05      	ldr	r5, [pc, #20]	; (8004384 <_read_r+0x24>)
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	f7fd fab5 	bl	80018de <_read>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d103      	bne.n	8004380 <_read_r+0x20>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d000      	beq.n	8004380 <_read_r+0x20>
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	bd70      	pop	{r4, r5, r6, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	20000120 	.word	0x20000120

08004388 <_init>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr

08004394 <_fini>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr
