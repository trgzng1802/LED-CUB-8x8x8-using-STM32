
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da4  08005da4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005da4  08005da4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da4  08005da4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08005e1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08005e1c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c10d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e34  00000000  00000000  0002c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002ea20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193cb  00000000  00000000  0002f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d38d  00000000  00000000  00048763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf8f  00000000  00000000  00055af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d9c  00000000  00000000  000e2ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b5c 	.word	0x08005b5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005b5c 	.word	0x08005b5c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (huart -> Instance == huart1.Instance){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <HAL_UART_RxCpltCallback+0x3c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d10f      	bne.n	80002c4 <HAL_UART_RxCpltCallback+0x34>
	  if (rxData < 55) currentEffect = rxData - 48;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <HAL_UART_RxCpltCallback+0x40>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b36      	cmp	r3, #54	; 0x36
 80002aa:	d805      	bhi.n	80002b8 <HAL_UART_RxCpltCallback+0x28>
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <HAL_UART_RxCpltCallback+0x40>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	3b30      	subs	r3, #48	; 0x30
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <HAL_UART_RxCpltCallback+0x44>)
 80002b6:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1,&rxData, 1);
 80002b8:	4905      	ldr	r1, [pc, #20]	; (80002d0 <HAL_UART_RxCpltCallback+0x40>)
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_UART_RxCpltCallback+0x3c>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0018      	movs	r0, r3
 80002c0:	f003 fa4a 	bl	8003758 <HAL_UART_Receive_IT>
  }
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b002      	add	sp, #8
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	200000f0 	.word	0x200000f0
 80002d0:	20000190 	.word	0x20000190
 80002d4:	2000018c 	.word	0x2000018c

080002d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	0002      	movs	r2, r0
 80002e0:	1dbb      	adds	r3, r7, #6
 80002e2:	801a      	strh	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 80002e4:	2390      	movs	r3, #144	; 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2102      	movs	r1, #2
 80002ea:	0018      	movs	r0, r3
 80002ec:	f002 f816 	bl	800231c <HAL_GPIO_ReadPin>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d10c      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0x36>
  {
	  if (currentEffect < 7) currentEffect++;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	dc05      	bgt.n	8000308 <HAL_GPIO_EXTI_Callback+0x30>
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1c5a      	adds	r2, r3, #1
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	e002      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x36>
	  else currentEffect = 0;
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
  }
  HAL_Delay(200);
 800030e:	20c8      	movs	r0, #200	; 0xc8
 8000310:	f001 fd1c 	bl	8001d4c <HAL_Delay>
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b002      	add	sp, #8
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000018c 	.word	0x2000018c

08000320 <TransmitData>:

void TransmitData(uint8_t* data) //ok
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2200      	movs	r2, #0
 800032e:	2140      	movs	r1, #64	; 0x40
 8000330:	0018      	movs	r0, r3
 8000332:	f002 f810 	bl	8002356 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data, 9, 100);
 8000336:	6879      	ldr	r1, [r7, #4]
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <TransmitData+0x38>)
 800033a:	2364      	movs	r3, #100	; 0x64
 800033c:	2209      	movs	r2, #9
 800033e:	f002 fee9 	bl	8003114 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	2201      	movs	r2, #1
 8000348:	2140      	movs	r1, #64	; 0x40
 800034a:	0018      	movs	r0, r3
 800034c:	f002 f803 	bl	8002356 <HAL_GPIO_WritePin>
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b002      	add	sp, #8
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000008c 	.word	0x2000008c

0800035c <mergeData>:

void mergeData(uint8_t column_data[], uint8_t layer_data) //ok
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	000a      	movs	r2, r1
 8000366:	1cfb      	adds	r3, r7, #3
 8000368:	701a      	strb	r2, [r3, #0]
	dataOut[0] = layer_data;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <mergeData+0x48>)
 800036c:	1cfa      	adds	r2, r7, #3
 800036e:	7812      	ldrb	r2, [r2, #0]
 8000370:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8000372:	2301      	movs	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e00c      	b.n	8000392 <mergeData+0x36>
	{
		dataOut[i] = column_data[i-1];
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	3b01      	subs	r3, #1
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	18d3      	adds	r3, r2, r3
 8000380:	7819      	ldrb	r1, [r3, #0]
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <mergeData+0x48>)
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	18d3      	adds	r3, r2, r3
 8000388:	1c0a      	adds	r2, r1, #0
 800038a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2b08      	cmp	r3, #8
 8000396:	ddef      	ble.n	8000378 <mergeData+0x1c>
	}
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b004      	add	sp, #16
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	20000180 	.word	0x20000180

080003a8 <clearCube>:
		TransmitData(dataOut);
	}
}

void clearCube() //ok
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	layer = 0x00;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <clearCube+0x48>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	e007      	b.n	80003ca <clearCube+0x22>
	{
		column[i] = 0x00;
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <clearCube+0x4c>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	18d3      	adds	r3, r2, r3
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	ddf4      	ble.n	80003ba <clearCube+0x12>
	}
	mergeData(column, layer);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <clearCube+0x48>)
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <clearCube+0x4c>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ffbf 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <clearCube+0x50>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ff9d 	bl	8000320 <TransmitData>
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b002      	add	sp, #8
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	20000174 	.word	0x20000174
 80003f4:	20000178 	.word	0x20000178
 80003f8:	20000180 	.word	0x20000180

080003fc <diagonalCube>:

void diagonalCube() //ok
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
	layer = 0x18;
 8000402:	4b44      	ldr	r3, [pc, #272]	; (8000514 <diagonalCube+0x118>)
 8000404:	2218      	movs	r2, #24
 8000406:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 8000408:	2303      	movs	r3, #3
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e007      	b.n	800041e <diagonalCube+0x22>
	{
		column[i] = 0x18;
 800040e:	4a42      	ldr	r2, [pc, #264]	; (8000518 <diagonalCube+0x11c>)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	18d3      	adds	r3, r2, r3
 8000414:	2218      	movs	r2, #24
 8000416:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	2b04      	cmp	r3, #4
 8000422:	ddf4      	ble.n	800040e <diagonalCube+0x12>
	}
	mergeData(column, layer);
 8000424:	4b3b      	ldr	r3, [pc, #236]	; (8000514 <diagonalCube+0x118>)
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	4b3b      	ldr	r3, [pc, #236]	; (8000518 <diagonalCube+0x11c>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff95 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000432:	4b3a      	ldr	r3, [pc, #232]	; (800051c <diagonalCube+0x120>)
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ff73 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 800043a:	20fa      	movs	r0, #250	; 0xfa
 800043c:	f001 fc86 	bl	8001d4c <HAL_Delay>
	clearCube();
 8000440:	f7ff ffb2 	bl	80003a8 <clearCube>

	layer = 0x24;
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <diagonalCube+0x118>)
 8000446:	2224      	movs	r2, #36	; 0x24
 8000448:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	e007      	b.n	8000460 <diagonalCube+0x64>
	{
		column[i] = 0x3c;
 8000450:	4a31      	ldr	r2, [pc, #196]	; (8000518 <diagonalCube+0x11c>)
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	18d3      	adds	r3, r2, r3
 8000456:	223c      	movs	r2, #60	; 0x3c
 8000458:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	3301      	adds	r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	2b05      	cmp	r3, #5
 8000464:	ddf4      	ble.n	8000450 <diagonalCube+0x54>
	}
	mergeData(column, layer);
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <diagonalCube+0x118>)
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <diagonalCube+0x11c>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f7ff ff74 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <diagonalCube+0x120>)
 8000476:	0018      	movs	r0, r3
 8000478:	f7ff ff52 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 800047c:	20fa      	movs	r0, #250	; 0xfa
 800047e:	f001 fc65 	bl	8001d4c <HAL_Delay>
	clearCube();
 8000482:	f7ff ff91 	bl	80003a8 <clearCube>

	layer = 0x42;
 8000486:	4b23      	ldr	r3, [pc, #140]	; (8000514 <diagonalCube+0x118>)
 8000488:	2242      	movs	r2, #66	; 0x42
 800048a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 800048c:	2301      	movs	r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	e007      	b.n	80004a2 <diagonalCube+0xa6>
	{
		column[i] = 0x7e;
 8000492:	4a21      	ldr	r2, [pc, #132]	; (8000518 <diagonalCube+0x11c>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	18d3      	adds	r3, r2, r3
 8000498:	227e      	movs	r2, #126	; 0x7e
 800049a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3301      	adds	r3, #1
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	ddf4      	ble.n	8000492 <diagonalCube+0x96>
	}
	mergeData(column, layer);
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <diagonalCube+0x118>)
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <diagonalCube+0x11c>)
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff53 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <diagonalCube+0x120>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff ff31 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 80004be:	20fa      	movs	r0, #250	; 0xfa
 80004c0:	f001 fc44 	bl	8001d4c <HAL_Delay>
	clearCube();
 80004c4:	f7ff ff70 	bl	80003a8 <clearCube>

	layer = 0x81;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <diagonalCube+0x118>)
 80004ca:	2281      	movs	r2, #129	; 0x81
 80004cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	e007      	b.n	80004e4 <diagonalCube+0xe8>
	{
		column[i]=  0xff;
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <diagonalCube+0x11c>)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	22ff      	movs	r2, #255	; 0xff
 80004dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	2b07      	cmp	r3, #7
 80004e8:	ddf4      	ble.n	80004d4 <diagonalCube+0xd8>
	}
	mergeData(column, layer);
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <diagonalCube+0x118>)
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <diagonalCube+0x11c>)
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff ff32 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <diagonalCube+0x120>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff ff10 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 8000500:	20fa      	movs	r0, #250	; 0xfa
 8000502:	f001 fc23 	bl	8001d4c <HAL_Delay>
	clearCube();
 8000506:	f7ff ff4f 	bl	80003a8 <clearCube>
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b004      	add	sp, #16
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	20000174 	.word	0x20000174
 8000518:	20000178 	.word	0x20000178
 800051c:	20000180 	.word	0x20000180

08000520 <planeZCube>:

void planeZCube() //ok
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	e007      	b.n	800053c <planeZCube+0x1c>
	{
		column[i] = 0xff;
 800052c:	4a24      	ldr	r2, [pc, #144]	; (80005c0 <planeZCube+0xa0>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	22ff      	movs	r2, #255	; 0xff
 8000534:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3301      	adds	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	ddf4      	ble.n	800052c <planeZCube+0xc>
	}
	for (int i = 8; i > -8; i--)
 8000542:	2308      	movs	r3, #8
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	e031      	b.n	80005ac <planeZCube+0x8c>
	{
		if (i >= 0) {
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db15      	blt.n	800057a <planeZCube+0x5a>
			layer = 0x01 << i;
 800054e:	2201      	movs	r2, #1
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	409a      	lsls	r2, r3
 8000554:	0013      	movs	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <planeZCube+0xa4>)
 800055a:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <planeZCube+0xa4>)
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <planeZCube+0xa0>)
 8000562:	0011      	movs	r1, r2
 8000564:	0018      	movs	r0, r3
 8000566:	f7ff fef9 	bl	800035c <mergeData>
			TransmitData(dataOut);
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <planeZCube+0xa8>)
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff fed7 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 8000572:	207d      	movs	r0, #125	; 0x7d
 8000574:	f001 fbea 	bl	8001d4c <HAL_Delay>
 8000578:	e015      	b.n	80005a6 <planeZCube+0x86>
		} else {
			layer = 0x80 >> (7 + i);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	3307      	adds	r3, #7
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	411a      	asrs	r2, r3
 8000582:	0013      	movs	r3, r2
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <planeZCube+0xa4>)
 8000588:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <planeZCube+0xa4>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <planeZCube+0xa0>)
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff fee2 	bl	800035c <mergeData>
			TransmitData(dataOut);
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <planeZCube+0xa8>)
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff fec0 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 80005a0:	207d      	movs	r0, #125	; 0x7d
 80005a2:	f001 fbd3 	bl	8001d4c <HAL_Delay>
	for (int i = 8; i > -8; i--)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	3307      	adds	r3, #7
 80005b0:	daca      	bge.n	8000548 <planeZCube+0x28>
		}
	}
	clearCube();
 80005b2:	f7ff fef9 	bl	80003a8 <clearCube>
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000178 	.word	0x20000178
 80005c4:	20000174 	.word	0x20000174
 80005c8:	20000180 	.word	0x20000180

080005cc <planeYCube>:

void planeYCube() //ok
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
	layer = 0xff;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <planeYCube+0xb8>)
 80005d4:	22ff      	movs	r2, #255	; 0xff
 80005d6:	701a      	strb	r2, [r3, #0]
	for (int i = 8; i > -8; i--)
 80005d8:	2308      	movs	r3, #8
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e049      	b.n	8000672 <planeYCube+0xa6>
	{
		if (i >= 0) {
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db21      	blt.n	8000628 <planeYCube+0x5c>
			for (int j = 0; j < 8; j++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	e00c      	b.n	8000604 <planeYCube+0x38>
			{
				column[j] = 0x01 << i;
 80005ea:	2201      	movs	r2, #1
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0013      	movs	r3, r2
 80005f2:	b2d9      	uxtb	r1, r3
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <planeYCube+0xbc>)
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	18d3      	adds	r3, r2, r3
 80005fa:	1c0a      	adds	r2, r1, #0
 80005fc:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3301      	adds	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2b07      	cmp	r3, #7
 8000608:	ddef      	ble.n	80005ea <planeYCube+0x1e>
			}
			mergeData(column, layer);
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <planeYCube+0xb8>)
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <planeYCube+0xbc>)
 8000610:	0011      	movs	r1, r2
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff fea2 	bl	800035c <mergeData>
			TransmitData(dataOut);
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <planeYCube+0xc0>)
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff fe80 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 8000620:	207d      	movs	r0, #125	; 0x7d
 8000622:	f001 fb93 	bl	8001d4c <HAL_Delay>
 8000626:	e021      	b.n	800066c <planeYCube+0xa0>
		} else {
			for (int j = 0; j < 8; j++)
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	e00d      	b.n	800064a <planeYCube+0x7e>
			{
				column[j] = 0x80 >> (7 + i);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3307      	adds	r3, #7
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	411a      	asrs	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	b2d9      	uxtb	r1, r3
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <planeYCube+0xbc>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	18d3      	adds	r3, r2, r3
 8000640:	1c0a      	adds	r2, r1, #0
 8000642:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b07      	cmp	r3, #7
 800064e:	ddee      	ble.n	800062e <planeYCube+0x62>
			}
			mergeData(column, layer);
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <planeYCube+0xb8>)
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <planeYCube+0xbc>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fe7f 	bl	800035c <mergeData>
			TransmitData(dataOut);
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <planeYCube+0xc0>)
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff fe5d 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 8000666:	207d      	movs	r0, #125	; 0x7d
 8000668:	f001 fb70 	bl	8001d4c <HAL_Delay>
	for (int i = 8; i > -8; i--)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3b01      	subs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3307      	adds	r3, #7
 8000676:	dab2      	bge.n	80005de <planeYCube+0x12>
		}
	}
	clearCube();
 8000678:	f7ff fe96 	bl	80003a8 <clearCube>
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b004      	add	sp, #16
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000174 	.word	0x20000174
 8000688:	20000178 	.word	0x20000178
 800068c:	20000180 	.word	0x20000180

08000690 <planeXCube>:

void planeXCube() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
		for (int i = -7; i < 8; i++)
 8000696:	2307      	movs	r3, #7
 8000698:	425b      	negs	r3, r3
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	e01c      	b.n	80006d8 <planeXCube+0x48>
		{
			layer = 0xff;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <planeXCube+0x58>)
 80006a0:	22ff      	movs	r2, #255	; 0xff
 80006a2:	701a      	strb	r2, [r3, #0]
			column[abs(i)] = 0xff;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	17da      	asrs	r2, r3, #31
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	4053      	eors	r3, r2
 80006ac:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <planeXCube+0x5c>)
 80006ae:	21ff      	movs	r1, #255	; 0xff
 80006b0:	54d1      	strb	r1, [r2, r3]
			mergeData(column, layer);
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <planeXCube+0x58>)
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <planeXCube+0x5c>)
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fe4e 	bl	800035c <mergeData>
			TransmitData(dataOut);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <planeXCube+0x60>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fe2c 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 80006c8:	207d      	movs	r0, #125	; 0x7d
 80006ca:	f001 fb3f 	bl	8001d4c <HAL_Delay>
			clearCube();
 80006ce:	f7ff fe6b 	bl	80003a8 <clearCube>
		for (int i = -7; i < 8; i++)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	dddf      	ble.n	800069e <planeXCube+0xe>
		}
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000174 	.word	0x20000174
 80006ec:	20000178 	.word	0x20000178
 80006f0:	20000180 	.word	0x20000180

080006f4 <randomRainCube>:

void randomRainCube() //ok
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0

	srand(HAL_GetTick());
 80006fa:	f001 fb1d 	bl	8001d38 <HAL_GetTick>
 80006fe:	0003      	movs	r3, r0
 8000700:	0018      	movs	r0, r3
 8000702:	f004 f975 	bl	80049f0 <srand>
	for (int i = 0; i < 8; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e043      	b.n	8000794 <randomRainCube+0xa0>
		column[rand() % 8] = 0x01 << rand() % 8;
 800070c:	f004 f9a0 	bl	8004a50 <rand>
 8000710:	0003      	movs	r3, r0
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <randomRainCube+0xb0>)
 8000714:	4013      	ands	r3, r2
 8000716:	d504      	bpl.n	8000722 <randomRainCube+0x2e>
 8000718:	3b01      	subs	r3, #1
 800071a:	2208      	movs	r2, #8
 800071c:	4252      	negs	r2, r2
 800071e:	4313      	orrs	r3, r2
 8000720:	3301      	adds	r3, #1
 8000722:	001a      	movs	r2, r3
 8000724:	2301      	movs	r3, #1
 8000726:	4093      	lsls	r3, r2
 8000728:	001c      	movs	r4, r3
 800072a:	f004 f991 	bl	8004a50 <rand>
 800072e:	0003      	movs	r3, r0
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <randomRainCube+0xb0>)
 8000732:	4013      	ands	r3, r2
 8000734:	d504      	bpl.n	8000740 <randomRainCube+0x4c>
 8000736:	3b01      	subs	r3, #1
 8000738:	2208      	movs	r2, #8
 800073a:	4252      	negs	r2, r2
 800073c:	4313      	orrs	r3, r2
 800073e:	3301      	adds	r3, #1
 8000740:	001a      	movs	r2, r3
 8000742:	b2e1      	uxtb	r1, r4
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <randomRainCube+0xb4>)
 8000746:	5499      	strb	r1, [r3, r2]
	    for (int j = 0; j < 8; j++) {
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	e017      	b.n	800077e <randomRainCube+0x8a>
			layer = 0x80 >> j;
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	411a      	asrs	r2, r3
 8000754:	0013      	movs	r3, r2
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <randomRainCube+0xb8>)
 800075a:	701a      	strb	r2, [r3, #0]
	    	mergeData(column, layer);
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <randomRainCube+0xb8>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <randomRainCube+0xb4>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff fdf9 	bl	800035c <mergeData>
	    	TransmitData(dataOut);
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <randomRainCube+0xbc>)
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff fdd7 	bl	8000320 <TransmitData>
	    	HAL_Delay(35);
 8000772:	2023      	movs	r0, #35	; 0x23
 8000774:	f001 faea 	bl	8001d4c <HAL_Delay>
	    for (int j = 0; j < 8; j++) {
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b07      	cmp	r3, #7
 8000782:	dde4      	ble.n	800074e <randomRainCube+0x5a>
	    }
	    clearCube();
 8000784:	f7ff fe10 	bl	80003a8 <clearCube>
	    HAL_Delay(delay*0.2);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f001 fadf 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3301      	adds	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b07      	cmp	r3, #7
 8000798:	ddb8      	ble.n	800070c <randomRainCube+0x18>
	}
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b003      	add	sp, #12
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	80000007 	.word	0x80000007
 80007a8:	20000178 	.word	0x20000178
 80007ac:	20000174 	.word	0x20000174
 80007b0:	20000180 	.word	0x20000180

080007b4 <growShrinkCube>:

void growShrinkCube() //ok
{
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	b08f      	sub	sp, #60	; 0x3c
 80007b8:	af00      	add	r7, sp, #0
	int TIME = 150;
 80007ba:	2396      	movs	r3, #150	; 0x96
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t data1[9] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 80007be:	2128      	movs	r1, #40	; 0x28
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <growShrinkCube+0xbc>)
 80007c4:	ca11      	ldmia	r2!, {r0, r4}
 80007c6:	c311      	stmia	r3!, {r0, r4}
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	701a      	strb	r2, [r3, #0]
	uint8_t data2[9] = {0x7e,0x00,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x00};
 80007cc:	251c      	movs	r5, #28
 80007ce:	197b      	adds	r3, r7, r5
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <growShrinkCube+0xc0>)
 80007d2:	ca11      	ldmia	r2!, {r0, r4}
 80007d4:	c311      	stmia	r3!, {r0, r4}
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	701a      	strb	r2, [r3, #0]
	uint8_t data3[9] = {0x3c,0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00};
 80007da:	2610      	movs	r6, #16
 80007dc:	19bb      	adds	r3, r7, r6
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <growShrinkCube+0xc4>)
 80007e0:	ca11      	ldmia	r2!, {r0, r4}
 80007e2:	c311      	stmia	r3!, {r0, r4}
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	701a      	strb	r2, [r3, #0]
	uint8_t data4[9] = {0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <growShrinkCube+0xc8>)
 80007ec:	ca11      	ldmia	r2!, {r0, r4}
 80007ee:	c311      	stmia	r3!, {r0, r4}
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	701a      	strb	r2, [r3, #0]
	TransmitData(data1);
 80007f4:	000c      	movs	r4, r1
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fd91 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 80007fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000800:	0018      	movs	r0, r3
 8000802:	f001 faa3 	bl	8001d4c <HAL_Delay>
	TransmitData(data2);
 8000806:	197b      	adds	r3, r7, r5
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff fd89 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800080e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fa9b 	bl	8001d4c <HAL_Delay>
	TransmitData(data3);
 8000816:	19bb      	adds	r3, r7, r6
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff fd81 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800081e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fa93 	bl	8001d4c <HAL_Delay>
	TransmitData(data4);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fd79 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fa8b 	bl	8001d4c <HAL_Delay>
	TransmitData(data3);
 8000836:	19bb      	adds	r3, r7, r6
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fd71 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800083e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000840:	0018      	movs	r0, r3
 8000842:	f001 fa83 	bl	8001d4c <HAL_Delay>
	TransmitData(data2);
 8000846:	197b      	adds	r3, r7, r5
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff fd69 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800084e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fa7b 	bl	8001d4c <HAL_Delay>
	TransmitData(data1);
 8000856:	193b      	adds	r3, r7, r4
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fd61 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fa73 	bl	8001d4c <HAL_Delay>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b00f      	add	sp, #60	; 0x3c
 800086c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	08005b74 	.word	0x08005b74
 8000874:	08005b80 	.word	0x08005b80
 8000878:	08005b8c 	.word	0x08005b8c
 800087c:	08005b98 	.word	0x08005b98

08000880 <aroundEdgeCube>:

void aroundEdgeCube() //ok
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
		//layer 1
		layer = 0x81;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <aroundEdgeCube+0xa8>)
 8000888:	2281      	movs	r2, #129	; 0x81
 800088a:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0xff;
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <aroundEdgeCube+0xac>)
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	71da      	strb	r2, [r3, #7]
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <aroundEdgeCube+0xac>)
 8000894:	79da      	ldrb	r2, [r3, #7]
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <aroundEdgeCube+0xac>)
 8000898:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 800089a:	2301      	movs	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	e007      	b.n	80008b0 <aroundEdgeCube+0x30>
		{
			column[i] = 0x81;
 80008a0:	4a22      	ldr	r2, [pc, #136]	; (800092c <aroundEdgeCube+0xac>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	2281      	movs	r2, #129	; 0x81
 80008a8:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	ddf4      	ble.n	80008a0 <aroundEdgeCube+0x20>
		}
		mergeData(column, layer);
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <aroundEdgeCube+0xa8>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <aroundEdgeCube+0xac>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fd4c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <aroundEdgeCube+0xb0>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff fd2a 	bl	8000320 <TransmitData>
		HAL_Delay(0);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f001 fa3d 	bl	8001d4c <HAL_Delay>
		//layer 2- 7
		layer = 0x7e;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <aroundEdgeCube+0xa8>)
 80008d4:	227e      	movs	r2, #126	; 0x7e
 80008d6:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0x81;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <aroundEdgeCube+0xac>)
 80008da:	2281      	movs	r2, #129	; 0x81
 80008dc:	71da      	strb	r2, [r3, #7]
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <aroundEdgeCube+0xac>)
 80008e0:	79da      	ldrb	r2, [r3, #7]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <aroundEdgeCube+0xac>)
 80008e4:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 80008e6:	2301      	movs	r3, #1
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	e007      	b.n	80008fc <aroundEdgeCube+0x7c>
		{
			column[i] = 0x00;
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <aroundEdgeCube+0xac>)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	ddf4      	ble.n	80008ec <aroundEdgeCube+0x6c>
		}
		mergeData(column, layer);
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <aroundEdgeCube+0xa8>)
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <aroundEdgeCube+0xac>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fd26 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <aroundEdgeCube+0xb0>)
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fd04 	bl	8000320 <TransmitData>
		HAL_Delay(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa17 	bl	8001d4c <HAL_Delay>
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	20000174 	.word	0x20000174
 800092c:	20000178 	.word	0x20000178
 8000930:	20000180 	.word	0x20000180

08000934 <diaedgeCube>:

void diaedgeCube() //ok
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
	int hold = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	607b      	str	r3, [r7, #4]
	//layer 1-8
	layer = 0x81;
 800093e:	4b5f      	ldr	r3, [pc, #380]	; (8000abc <diaedgeCube+0x188>)
 8000940:	2281      	movs	r2, #129	; 0x81
 8000942:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0xff;
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <diaedgeCube+0x18c>)
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	71da      	strb	r2, [r3, #7]
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <diaedgeCube+0x18c>)
 800094c:	79da      	ldrb	r2, [r3, #7]
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <diaedgeCube+0x18c>)
 8000950:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e007      	b.n	8000968 <diaedgeCube+0x34>
		column[i] = 0x81;
 8000958:	4a59      	ldr	r2, [pc, #356]	; (8000ac0 <diaedgeCube+0x18c>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	18d3      	adds	r3, r2, r3
 800095e:	2281      	movs	r2, #129	; 0x81
 8000960:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b06      	cmp	r3, #6
 800096c:	ddf4      	ble.n	8000958 <diaedgeCube+0x24>
	}
	mergeData(column, layer);
 800096e:	4b53      	ldr	r3, [pc, #332]	; (8000abc <diaedgeCube+0x188>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <diaedgeCube+0x18c>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fcf0 	bl	800035c <mergeData>
	TransmitData(dataOut);
 800097c:	4b51      	ldr	r3, [pc, #324]	; (8000ac4 <diaedgeCube+0x190>)
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fcce 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0018      	movs	r0, r3
 8000988:	f001 f9e0 	bl	8001d4c <HAL_Delay>
	clearCube();
 800098c:	f7ff fd0c 	bl	80003a8 <clearCube>

	//layer 2-7
	layer = 0x42;
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <diaedgeCube+0x188>)
 8000992:	2242      	movs	r2, #66	; 0x42
 8000994:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 8000996:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <diaedgeCube+0x18c>)
 8000998:	2281      	movs	r2, #129	; 0x81
 800099a:	71da      	strb	r2, [r3, #7]
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <diaedgeCube+0x18c>)
 800099e:	79da      	ldrb	r2, [r3, #7]
 80009a0:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <diaedgeCube+0x18c>)
 80009a2:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = 0x42;
 80009a4:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <diaedgeCube+0x18c>)
 80009a6:	2242      	movs	r2, #66	; 0x42
 80009a8:	719a      	strb	r2, [r3, #6]
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <diaedgeCube+0x18c>)
 80009ac:	799a      	ldrb	r2, [r3, #6]
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <diaedgeCube+0x18c>)
 80009b0:	705a      	strb	r2, [r3, #1]
	for (int i = 2; i < 6; i++) {
 80009b2:	2302      	movs	r3, #2
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	e007      	b.n	80009c8 <diaedgeCube+0x94>
		column[i] = 0x00;
 80009b8:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <diaedgeCube+0x18c>)
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++) {
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	ddf4      	ble.n	80009b8 <diaedgeCube+0x84>
	}
	mergeData(column, layer);
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <diaedgeCube+0x188>)
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <diaedgeCube+0x18c>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fcc0 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80009dc:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <diaedgeCube+0x190>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fc9e 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 f9b0 	bl	8001d4c <HAL_Delay>
	clearCube();
 80009ec:	f7ff fcdc 	bl	80003a8 <clearCube>

	//layer 3-6
	layer = 0x24;
 80009f0:	4b32      	ldr	r3, [pc, #200]	; (8000abc <diaedgeCube+0x188>)
 80009f2:	2224      	movs	r2, #36	; 0x24
 80009f4:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <diaedgeCube+0x18c>)
 80009f8:	2281      	movs	r2, #129	; 0x81
 80009fa:	71da      	strb	r2, [r3, #7]
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <diaedgeCube+0x18c>)
 80009fe:	79da      	ldrb	r2, [r3, #7]
 8000a00:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a02:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = column[3] = column[4] = 0x00;
 8000a04:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	711a      	strb	r2, [r3, #4]
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a0c:	791a      	ldrb	r2, [r3, #4]
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a10:	70da      	strb	r2, [r3, #3]
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a14:	78da      	ldrb	r2, [r3, #3]
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a18:	719a      	strb	r2, [r3, #6]
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a1c:	799a      	ldrb	r2, [r3, #6]
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a20:	705a      	strb	r2, [r3, #1]
	column[2] = column[5] = 0x24;
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a24:	2224      	movs	r2, #36	; 0x24
 8000a26:	715a      	strb	r2, [r3, #5]
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a2a:	795a      	ldrb	r2, [r3, #5]
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a2e:	709a      	strb	r2, [r3, #2]
	mergeData(column, layer);
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <diaedgeCube+0x188>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fc8f 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <diaedgeCube+0x190>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fc6d 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 f97f 	bl	8001d4c <HAL_Delay>
	clearCube();
 8000a4e:	f7ff fcab 	bl	80003a8 <clearCube>

	//layer 4-5
	layer = 0x18;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <diaedgeCube+0x188>)
 8000a54:	2218      	movs	r2, #24
 8000a56:	701a      	strb	r2, [r3, #0]
	column[3] =column[4] = 0x18;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	711a      	strb	r2, [r3, #4]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a60:	791a      	ldrb	r2, [r3, #4]
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a64:	70da      	strb	r2, [r3, #3]
	column[0] = column[7] = 0x81;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a68:	2281      	movs	r2, #129	; 0x81
 8000a6a:	71da      	strb	r2, [r3, #7]
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a6e:	79da      	ldrb	r2, [r3, #7]
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a72:	701a      	strb	r2, [r3, #0]
	column[1] = column[2] = column[5] = column[6] = 0x00;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	719a      	strb	r2, [r3, #6]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a7c:	799a      	ldrb	r2, [r3, #6]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a80:	715a      	strb	r2, [r3, #5]
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a84:	795a      	ldrb	r2, [r3, #5]
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a88:	709a      	strb	r2, [r3, #2]
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a8c:	789a      	ldrb	r2, [r3, #2]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a90:	705a      	strb	r2, [r3, #1]
	mergeData(column, layer);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <diaedgeCube+0x188>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fc5e 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <diaedgeCube+0x190>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fc3c 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 f94e 	bl	8001d4c <HAL_Delay>
	clearCube();
 8000ab0:	f7ff fc7a 	bl	80003a8 <clearCube>
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b004      	add	sp, #16
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000174 	.word	0x20000174
 8000ac0:	20000178 	.word	0x20000178
 8000ac4:	20000180 	.word	0x20000180

08000ac8 <numberingCube>:

void numberingCube() //ok
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af00      	add	r7, sp, #0
	int x = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
	int y = 40;
 8000ad2:	2328      	movs	r3, #40	; 0x28
 8000ad4:	603b      	str	r3, [r7, #0]
	clearCube();
 8000ad6:	f7ff fc67 	bl	80003a8 <clearCube>
	//digit 0
	for (int i = 0; i < 8; i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ade:	e04d      	b.n	8000b7c <numberingCube+0xb4>
	{
		column[i] = 0x3c;
 8000ae0:	4ae0      	ldr	r2, [pc, #896]	; (8000e64 <numberingCube+0x39c>)
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae4:	18d3      	adds	r3, r2, r3
 8000ae6:	223c      	movs	r2, #60	; 0x3c
 8000ae8:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000aea:	4bdf      	ldr	r3, [pc, #892]	; (8000e68 <numberingCube+0x3a0>)
 8000aec:	2281      	movs	r2, #129	; 0x81
 8000aee:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000af0:	4bdd      	ldr	r3, [pc, #884]	; (8000e68 <numberingCube+0x3a0>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	4bdb      	ldr	r3, [pc, #876]	; (8000e64 <numberingCube+0x39c>)
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fc2f 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000afe:	4bdb      	ldr	r3, [pc, #876]	; (8000e6c <numberingCube+0x3a4>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fc0d 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 f91f 	bl	8001d4c <HAL_Delay>

		column[i] = 0x66;
 8000b0e:	4ad5      	ldr	r2, [pc, #852]	; (8000e64 <numberingCube+0x39c>)
 8000b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	2266      	movs	r2, #102	; 0x66
 8000b16:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000b18:	4bd3      	ldr	r3, [pc, #844]	; (8000e68 <numberingCube+0x3a0>)
 8000b1a:	2242      	movs	r2, #66	; 0x42
 8000b1c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b1e:	4bd2      	ldr	r3, [pc, #840]	; (8000e68 <numberingCube+0x3a0>)
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	4bd0      	ldr	r3, [pc, #832]	; (8000e64 <numberingCube+0x39c>)
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fc18 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000b2c:	4bcf      	ldr	r3, [pc, #828]	; (8000e6c <numberingCube+0x3a4>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fbf6 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 f908 	bl	8001d4c <HAL_Delay>

		column[i] = 0xc3;
 8000b3c:	4ac9      	ldr	r2, [pc, #804]	; (8000e64 <numberingCube+0x39c>)
 8000b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	22c3      	movs	r2, #195	; 0xc3
 8000b44:	701a      	strb	r2, [r3, #0]
		layer = 0x3c;
 8000b46:	4bc8      	ldr	r3, [pc, #800]	; (8000e68 <numberingCube+0x3a0>)
 8000b48:	223c      	movs	r2, #60	; 0x3c
 8000b4a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b4c:	4bc6      	ldr	r3, [pc, #792]	; (8000e68 <numberingCube+0x3a0>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	4bc4      	ldr	r3, [pc, #784]	; (8000e64 <numberingCube+0x39c>)
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fc01 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000b5a:	4bc4      	ldr	r3, [pc, #784]	; (8000e6c <numberingCube+0x3a4>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff fbdf 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 f8f1 	bl	8001d4c <HAL_Delay>
		clearCube();
 8000b6a:	f7ff fc1d 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 f8eb 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b78:	3301      	adds	r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	ddae      	ble.n	8000ae0 <numberingCube+0x18>
	}
	HAL_Delay(delay);
 8000b82:	23fa      	movs	r3, #250	; 0xfa
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 f8e0 	bl	8001d4c <HAL_Delay>
	//digit 1
	for (int i = 0; i < 8; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b90:	e092      	b.n	8000cb8 <numberingCube+0x1f0>
	{
		column[i] = 0xff;
 8000b92:	4ab4      	ldr	r2, [pc, #720]	; (8000e64 <numberingCube+0x39c>)
 8000b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b96:	18d3      	adds	r3, r2, r3
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000b9c:	4bb2      	ldr	r3, [pc, #712]	; (8000e68 <numberingCube+0x3a0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ba2:	4bb1      	ldr	r3, [pc, #708]	; (8000e68 <numberingCube+0x3a0>)
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	4baf      	ldr	r3, [pc, #700]	; (8000e64 <numberingCube+0x39c>)
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fbd6 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000bb0:	4bae      	ldr	r3, [pc, #696]	; (8000e6c <numberingCube+0x3a4>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff fbb4 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 f8c6 	bl	8001d4c <HAL_Delay>

		column[i] = 0x98;
 8000bc0:	4aa8      	ldr	r2, [pc, #672]	; (8000e64 <numberingCube+0x39c>)
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	2298      	movs	r2, #152	; 0x98
 8000bc8:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000bca:	4ba7      	ldr	r3, [pc, #668]	; (8000e68 <numberingCube+0x3a0>)
 8000bcc:	2208      	movs	r2, #8
 8000bce:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000bd0:	4ba5      	ldr	r3, [pc, #660]	; (8000e68 <numberingCube+0x3a0>)
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	4ba3      	ldr	r3, [pc, #652]	; (8000e64 <numberingCube+0x39c>)
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbbf 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000bde:	4ba3      	ldr	r3, [pc, #652]	; (8000e6c <numberingCube+0x3a4>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fb9d 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 f8af 	bl	8001d4c <HAL_Delay>

		column[i] = 0xd8;
 8000bee:	4a9d      	ldr	r2, [pc, #628]	; (8000e64 <numberingCube+0x39c>)
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf2:	18d3      	adds	r3, r2, r3
 8000bf4:	22d8      	movs	r2, #216	; 0xd8
 8000bf6:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000bf8:	4b9b      	ldr	r3, [pc, #620]	; (8000e68 <numberingCube+0x3a0>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000bfe:	4b9a      	ldr	r3, [pc, #616]	; (8000e68 <numberingCube+0x3a0>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	4b98      	ldr	r3, [pc, #608]	; (8000e64 <numberingCube+0x39c>)
 8000c04:	0011      	movs	r1, r2
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fba8 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c0c:	4b97      	ldr	r3, [pc, #604]	; (8000e6c <numberingCube+0x3a4>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fb86 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 f898 	bl	8001d4c <HAL_Delay>

		column[i] = 0x78;
 8000c1c:	4a91      	ldr	r2, [pc, #580]	; (8000e64 <numberingCube+0x39c>)
 8000c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	2278      	movs	r2, #120	; 0x78
 8000c24:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000c26:	4b90      	ldr	r3, [pc, #576]	; (8000e68 <numberingCube+0x3a0>)
 8000c28:	2220      	movs	r2, #32
 8000c2a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c2c:	4b8e      	ldr	r3, [pc, #568]	; (8000e68 <numberingCube+0x3a0>)
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	4b8c      	ldr	r3, [pc, #560]	; (8000e64 <numberingCube+0x39c>)
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fb91 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c3a:	4b8c      	ldr	r3, [pc, #560]	; (8000e6c <numberingCube+0x3a4>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fb6f 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 f881 	bl	8001d4c <HAL_Delay>

		column[i] = 0x38;
 8000c4a:	4a86      	ldr	r2, [pc, #536]	; (8000e64 <numberingCube+0x39c>)
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	18d3      	adds	r3, r2, r3
 8000c50:	2238      	movs	r2, #56	; 0x38
 8000c52:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000c54:	4b84      	ldr	r3, [pc, #528]	; (8000e68 <numberingCube+0x3a0>)
 8000c56:	2240      	movs	r2, #64	; 0x40
 8000c58:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c5a:	4b83      	ldr	r3, [pc, #524]	; (8000e68 <numberingCube+0x3a0>)
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	4b81      	ldr	r3, [pc, #516]	; (8000e64 <numberingCube+0x39c>)
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fb7a 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c68:	4b80      	ldr	r3, [pc, #512]	; (8000e6c <numberingCube+0x3a4>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fb58 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 f86a 	bl	8001d4c <HAL_Delay>

		column[i] = 0x18;
 8000c78:	4a7a      	ldr	r2, [pc, #488]	; (8000e64 <numberingCube+0x39c>)
 8000c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	2218      	movs	r2, #24
 8000c80:	701a      	strb	r2, [r3, #0]
		layer = 0x86;
 8000c82:	4b79      	ldr	r3, [pc, #484]	; (8000e68 <numberingCube+0x3a0>)
 8000c84:	2286      	movs	r2, #134	; 0x86
 8000c86:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c88:	4b77      	ldr	r3, [pc, #476]	; (8000e68 <numberingCube+0x3a0>)
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <numberingCube+0x39c>)
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fb63 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c96:	4b75      	ldr	r3, [pc, #468]	; (8000e6c <numberingCube+0x3a4>)
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fb41 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 f853 	bl	8001d4c <HAL_Delay>
		clearCube();
 8000ca6:	f7ff fb7f 	bl	80003a8 <clearCube>

		HAL_Delay(y);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f001 f84d 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	dc00      	bgt.n	8000cc0 <numberingCube+0x1f8>
 8000cbe:	e768      	b.n	8000b92 <numberingCube+0xca>
	}
	HAL_Delay(delay);
 8000cc0:	23fa      	movs	r3, #250	; 0xfa
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 f841 	bl	8001d4c <HAL_Delay>
	//digit 2
	for (int i = 0; i < 8; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cce:	e0bc      	b.n	8000e4a <numberingCube+0x382>
	{
		column[i] = 0x3c;
 8000cd0:	4a64      	ldr	r2, [pc, #400]	; (8000e64 <numberingCube+0x39c>)
 8000cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	223c      	movs	r2, #60	; 0x3c
 8000cd8:	701a      	strb	r2, [r3, #0]
		layer = 0x80;
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <numberingCube+0x3a0>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ce0:	4b61      	ldr	r3, [pc, #388]	; (8000e68 <numberingCube+0x3a0>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b5f      	ldr	r3, [pc, #380]	; (8000e64 <numberingCube+0x39c>)
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fb37 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000cee:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <numberingCube+0x3a4>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fb15 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f001 f827 	bl	8001d4c <HAL_Delay>

		column[i] = 0x66;
 8000cfe:	4a59      	ldr	r2, [pc, #356]	; (8000e64 <numberingCube+0x39c>)
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	2266      	movs	r2, #102	; 0x66
 8000d06:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000d08:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <numberingCube+0x3a0>)
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d0e:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <numberingCube+0x3a0>)
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <numberingCube+0x39c>)
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fb20 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000d1c:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <numberingCube+0x3a4>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fafe 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 f810 	bl	8001d4c <HAL_Delay>

		column[i] = 0xc6;
 8000d2c:	4a4d      	ldr	r2, [pc, #308]	; (8000e64 <numberingCube+0x39c>)
 8000d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d30:	18d3      	adds	r3, r2, r3
 8000d32:	22c6      	movs	r2, #198	; 0xc6
 8000d34:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000d36:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <numberingCube+0x3a0>)
 8000d38:	2220      	movs	r2, #32
 8000d3a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <numberingCube+0x3a0>)
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <numberingCube+0x39c>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fb09 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000d4a:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <numberingCube+0x3a4>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fae7 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fff9 	bl	8001d4c <HAL_Delay>

		column[i] = 0x06;
 8000d5a:	4a42      	ldr	r2, [pc, #264]	; (8000e64 <numberingCube+0x39c>)
 8000d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5e:	18d3      	adds	r3, r2, r3
 8000d60:	2206      	movs	r2, #6
 8000d62:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000d64:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <numberingCube+0x3a0>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <numberingCube+0x3a0>)
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <numberingCube+0x39c>)
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff faf2 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <numberingCube+0x3a4>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fad0 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 ffe2 	bl	8001d4c <HAL_Delay>

		column[i] = 0x0c;
 8000d88:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <numberingCube+0x39c>)
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	220c      	movs	r2, #12
 8000d90:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <numberingCube+0x3a0>)
 8000d94:	2208      	movs	r2, #8
 8000d96:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <numberingCube+0x3a0>)
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <numberingCube+0x39c>)
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fadb 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <numberingCube+0x3a4>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fab9 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 ffcb 	bl	8001d4c <HAL_Delay>

		column[i] = 0x18;
 8000db6:	4a2b      	ldr	r2, [pc, #172]	; (8000e64 <numberingCube+0x39c>)
 8000db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	2218      	movs	r2, #24
 8000dbe:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <numberingCube+0x3a0>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <numberingCube+0x3a0>)
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <numberingCube+0x39c>)
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fac4 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <numberingCube+0x3a4>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff faa2 	bl	8000320 <TransmitData>

		column[i] = 0x70;
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <numberingCube+0x39c>)
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	18d3      	adds	r3, r2, r3
 8000de2:	2270      	movs	r2, #112	; 0x70
 8000de4:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <numberingCube+0x3a0>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <numberingCube+0x3a0>)
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <numberingCube+0x39c>)
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fab1 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <numberingCube+0x3a4>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fa8f 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 ffa1 	bl	8001d4c <HAL_Delay>

		column[i] = 0xff;
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <numberingCube+0x39c>)
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <numberingCube+0x3a0>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <numberingCube+0x3a0>)
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <numberingCube+0x39c>)
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fa9a 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <numberingCube+0x3a4>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fa78 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 ff8a 	bl	8001d4c <HAL_Delay>
		clearCube();
 8000e38:	f7ff fab6 	bl	80003a8 <clearCube>

		HAL_Delay(y);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 ff84 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	3301      	adds	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	dc00      	bgt.n	8000e52 <numberingCube+0x38a>
 8000e50:	e73e      	b.n	8000cd0 <numberingCube+0x208>
	}
	HAL_Delay(delay);
 8000e52:	23fa      	movs	r3, #250	; 0xfa
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 ff78 	bl	8001d4c <HAL_Delay>
	//digit 3
	for (int i = 0; i < 8; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e60:	e06b      	b.n	8000f3a <numberingCube+0x472>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000178 	.word	0x20000178
 8000e68:	20000174 	.word	0x20000174
 8000e6c:	20000180 	.word	0x20000180
	{
		column[i] = 0x7e;
 8000e70:	4af4      	ldr	r2, [pc, #976]	; (8001244 <numberingCube+0x77c>)
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	18d3      	adds	r3, r2, r3
 8000e76:	227e      	movs	r2, #126	; 0x7e
 8000e78:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000e7a:	4bf3      	ldr	r3, [pc, #972]	; (8001248 <numberingCube+0x780>)
 8000e7c:	2281      	movs	r2, #129	; 0x81
 8000e7e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e80:	4bf1      	ldr	r3, [pc, #964]	; (8001248 <numberingCube+0x780>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	4bef      	ldr	r3, [pc, #956]	; (8001244 <numberingCube+0x77c>)
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fa67 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000e8e:	4bef      	ldr	r3, [pc, #956]	; (800124c <numberingCube+0x784>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff fa45 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 ff57 	bl	8001d4c <HAL_Delay>

		column[i] = 0xe7;
 8000e9e:	4ae9      	ldr	r2, [pc, #932]	; (8001244 <numberingCube+0x77c>)
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	22e7      	movs	r2, #231	; 0xe7
 8000ea6:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000ea8:	4be7      	ldr	r3, [pc, #924]	; (8001248 <numberingCube+0x780>)
 8000eaa:	2242      	movs	r2, #66	; 0x42
 8000eac:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000eae:	4be6      	ldr	r3, [pc, #920]	; (8001248 <numberingCube+0x780>)
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	4be4      	ldr	r3, [pc, #912]	; (8001244 <numberingCube+0x77c>)
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fa50 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000ebc:	4be3      	ldr	r3, [pc, #908]	; (800124c <numberingCube+0x784>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fa2e 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 ff40 	bl	8001d4c <HAL_Delay>

		column[i] = 0xc3;
 8000ecc:	4add      	ldr	r2, [pc, #884]	; (8001244 <numberingCube+0x77c>)
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	22c3      	movs	r2, #195	; 0xc3
 8000ed4:	701a      	strb	r2, [r3, #0]
		layer = 0x24;
 8000ed6:	4bdc      	ldr	r3, [pc, #880]	; (8001248 <numberingCube+0x780>)
 8000ed8:	2224      	movs	r2, #36	; 0x24
 8000eda:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000edc:	4bda      	ldr	r3, [pc, #872]	; (8001248 <numberingCube+0x780>)
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	4bd8      	ldr	r3, [pc, #864]	; (8001244 <numberingCube+0x77c>)
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fa39 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000eea:	4bd8      	ldr	r3, [pc, #864]	; (800124c <numberingCube+0x784>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fa17 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 ff29 	bl	8001d4c <HAL_Delay>

		column[i] = 0x06;
 8000efa:	4ad2      	ldr	r2, [pc, #840]	; (8001244 <numberingCube+0x77c>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	18d3      	adds	r3, r2, r3
 8000f00:	2206      	movs	r2, #6
 8000f02:	701a      	strb	r2, [r3, #0]
		layer = 0x18;
 8000f04:	4bd0      	ldr	r3, [pc, #832]	; (8001248 <numberingCube+0x780>)
 8000f06:	2218      	movs	r2, #24
 8000f08:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f0a:	4bcf      	ldr	r3, [pc, #828]	; (8001248 <numberingCube+0x780>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	4bcd      	ldr	r3, [pc, #820]	; (8001244 <numberingCube+0x77c>)
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fa22 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000f18:	4bcc      	ldr	r3, [pc, #816]	; (800124c <numberingCube+0x784>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff fa00 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 ff12 	bl	8001d4c <HAL_Delay>
		clearCube();
 8000f28:	f7ff fa3e 	bl	80003a8 <clearCube>

		HAL_Delay(y);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 ff0c 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	3301      	adds	r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	dd97      	ble.n	8000e70 <numberingCube+0x3a8>
	}
	HAL_Delay(delay);
 8000f40:	23fa      	movs	r3, #250	; 0xfa
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 ff01 	bl	8001d4c <HAL_Delay>
	//digit 4
	for (int i = 0; i < 8; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4e:	e05f      	b.n	8001010 <numberingCube+0x548>
	{
		column[i] = 0x06;
 8000f50:	4abc      	ldr	r2, [pc, #752]	; (8001244 <numberingCube+0x77c>)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	2206      	movs	r2, #6
 8000f58:	701a      	strb	r2, [r3, #0]
		layer = 0xf3;
 8000f5a:	4bbb      	ldr	r3, [pc, #748]	; (8001248 <numberingCube+0x780>)
 8000f5c:	22f3      	movs	r2, #243	; 0xf3
 8000f5e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f60:	4bb9      	ldr	r3, [pc, #740]	; (8001248 <numberingCube+0x780>)
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4bb7      	ldr	r3, [pc, #732]	; (8001244 <numberingCube+0x77c>)
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff f9f7 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000f6e:	4bb7      	ldr	r3, [pc, #732]	; (800124c <numberingCube+0x784>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff f9d5 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fee7 	bl	8001d4c <HAL_Delay>

		column[i] = 0xff;
 8000f7e:	4ab1      	ldr	r2, [pc, #708]	; (8001244 <numberingCube+0x77c>)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 8000f88:	4baf      	ldr	r3, [pc, #700]	; (8001248 <numberingCube+0x780>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f8e:	4bae      	ldr	r3, [pc, #696]	; (8001248 <numberingCube+0x780>)
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4bac      	ldr	r3, [pc, #688]	; (8001244 <numberingCube+0x77c>)
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff f9e0 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000f9c:	4bab      	ldr	r3, [pc, #684]	; (800124c <numberingCube+0x784>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff f9be 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fed0 	bl	8001d4c <HAL_Delay>

		for (int j = 0; j < 4; j++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	e022      	b.n	8000ff8 <numberingCube+0x530>
		{
		column[i] = 0x08 << j;
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	4aa1      	ldr	r2, [pc, #644]	; (8001244 <numberingCube+0x77c>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	1c0a      	adds	r2, r1, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
		layer = 0x80 >> j;
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	411a      	asrs	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b9d      	ldr	r3, [pc, #628]	; (8001248 <numberingCube+0x780>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000fd4:	4b9c      	ldr	r3, [pc, #624]	; (8001248 <numberingCube+0x780>)
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	4b9a      	ldr	r3, [pc, #616]	; (8001244 <numberingCube+0x77c>)
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff f9bd 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000fe2:	4b9a      	ldr	r3, [pc, #616]	; (800124c <numberingCube+0x784>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f99b 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fead 	bl	8001d4c <HAL_Delay>
		for (int j = 0; j < 4; j++)
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	ddd9      	ble.n	8000fb2 <numberingCube+0x4ea>
		}
		clearCube();
 8000ffe:	f7ff f9d3 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	f000 fea1 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	2b07      	cmp	r3, #7
 8001014:	dd9c      	ble.n	8000f50 <numberingCube+0x488>
	}
	HAL_Delay(delay);
 8001016:	23fa      	movs	r3, #250	; 0xfa
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	0018      	movs	r0, r3
 800101c:	f000 fe96 	bl	8001d4c <HAL_Delay>
	//digit 5
	for (int i = 0; i < 8; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	e092      	b.n	800114c <numberingCube+0x684>
	{
		column[i] = 0xff;
 8001026:	4a87      	ldr	r2, [pc, #540]	; (8001244 <numberingCube+0x77c>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	18d3      	adds	r3, r2, r3
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 8001030:	4b85      	ldr	r3, [pc, #532]	; (8001248 <numberingCube+0x780>)
 8001032:	22c0      	movs	r2, #192	; 0xc0
 8001034:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001036:	4b84      	ldr	r3, [pc, #528]	; (8001248 <numberingCube+0x780>)
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	4b82      	ldr	r3, [pc, #520]	; (8001244 <numberingCube+0x77c>)
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff f98c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001044:	4b81      	ldr	r3, [pc, #516]	; (800124c <numberingCube+0x784>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff f96a 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fe7c 	bl	8001d4c <HAL_Delay>

		column[i] = 0xc0;
 8001054:	4a7b      	ldr	r2, [pc, #492]	; (8001244 <numberingCube+0x77c>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	22c0      	movs	r2, #192	; 0xc0
 800105c:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 800105e:	4b7a      	ldr	r3, [pc, #488]	; (8001248 <numberingCube+0x780>)
 8001060:	2220      	movs	r2, #32
 8001062:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <numberingCube+0x780>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b76      	ldr	r3, [pc, #472]	; (8001244 <numberingCube+0x77c>)
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff f975 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <numberingCube+0x784>)
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff f953 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f000 fe65 	bl	8001d4c <HAL_Delay>

		column[i] = 0xfe;
 8001082:	4a70      	ldr	r2, [pc, #448]	; (8001244 <numberingCube+0x77c>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	18d3      	adds	r3, r2, r3
 8001088:	22fe      	movs	r2, #254	; 0xfe
 800108a:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 800108c:	4b6e      	ldr	r3, [pc, #440]	; (8001248 <numberingCube+0x780>)
 800108e:	2210      	movs	r2, #16
 8001090:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <numberingCube+0x780>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <numberingCube+0x77c>)
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff f95e 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80010a0:	4b6a      	ldr	r3, [pc, #424]	; (800124c <numberingCube+0x784>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff f93c 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fe4e 	bl	8001d4c <HAL_Delay>

		column[i] = 0x03;
 80010b0:	4a64      	ldr	r2, [pc, #400]	; (8001244 <numberingCube+0x77c>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	2203      	movs	r2, #3
 80010b8:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <numberingCube+0x780>)
 80010bc:	220c      	movs	r2, #12
 80010be:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80010c0:	4b61      	ldr	r3, [pc, #388]	; (8001248 <numberingCube+0x780>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <numberingCube+0x77c>)
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff f947 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <numberingCube+0x784>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff f925 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 fe37 	bl	8001d4c <HAL_Delay>

		column[i] = 0x83;
 80010de:	4a59      	ldr	r2, [pc, #356]	; (8001244 <numberingCube+0x77c>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	2283      	movs	r2, #131	; 0x83
 80010e6:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 80010e8:	4b57      	ldr	r3, [pc, #348]	; (8001248 <numberingCube+0x780>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <numberingCube+0x780>)
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <numberingCube+0x77c>)
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff f930 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <numberingCube+0x784>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff f90e 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	0018      	movs	r0, r3
 8001108:	f000 fe20 	bl	8001d4c <HAL_Delay>

		column[i] = 0x7e;
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <numberingCube+0x77c>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	227e      	movs	r2, #126	; 0x7e
 8001114:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <numberingCube+0x780>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <numberingCube+0x780>)
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	4b48      	ldr	r3, [pc, #288]	; (8001244 <numberingCube+0x77c>)
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff f919 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800112a:	4b48      	ldr	r3, [pc, #288]	; (800124c <numberingCube+0x784>)
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff f8f7 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fe09 	bl	8001d4c <HAL_Delay>
		clearCube();
 800113a:	f7ff f935 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f000 fe03 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b07      	cmp	r3, #7
 8001150:	dc00      	bgt.n	8001154 <numberingCube+0x68c>
 8001152:	e768      	b.n	8001026 <numberingCube+0x55e>
	}
	HAL_Delay(delay);
 8001154:	23fa      	movs	r3, #250	; 0xfa
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fdf7 	bl	8001d4c <HAL_Delay>
	//digit 6
	for (int i = 0; i < 8; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	e064      	b.n	800122e <numberingCube+0x766>
	{
		column[i] = 0x7e;
 8001164:	4a37      	ldr	r2, [pc, #220]	; (8001244 <numberingCube+0x77c>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	227e      	movs	r2, #126	; 0x7e
 800116c:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <numberingCube+0x780>)
 8001170:	2281      	movs	r2, #129	; 0x81
 8001172:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001174:	4b34      	ldr	r3, [pc, #208]	; (8001248 <numberingCube+0x780>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <numberingCube+0x77c>)
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff f8ed 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <numberingCube+0x784>)
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff f8cb 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 fddd 	bl	8001d4c <HAL_Delay>

		column[i] = 0xc3;
 8001192:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <numberingCube+0x77c>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	22c3      	movs	r2, #195	; 0xc3
 800119a:	701a      	strb	r2, [r3, #0]
		layer = 0x4e;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <numberingCube+0x780>)
 800119e:	224e      	movs	r2, #78	; 0x4e
 80011a0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <numberingCube+0x780>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <numberingCube+0x77c>)
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff f8d6 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <numberingCube+0x784>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff f8b4 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 fdc6 	bl	8001d4c <HAL_Delay>

		column[i] = 0xc0;
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <numberingCube+0x77c>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	22c0      	movs	r2, #192	; 0xc0
 80011c8:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <numberingCube+0x780>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <numberingCube+0x780>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <numberingCube+0x77c>)
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff f8bf 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <numberingCube+0x784>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff f89d 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 fdaf 	bl	8001d4c <HAL_Delay>

		column[i] = 0xfe;
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <numberingCube+0x77c>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	22fe      	movs	r2, #254	; 0xfe
 80011f6:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <numberingCube+0x780>)
 80011fa:	2210      	movs	r2, #16
 80011fc:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <numberingCube+0x780>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <numberingCube+0x77c>)
 8001204:	0011      	movs	r1, r2
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff f8a8 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <numberingCube+0x784>)
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff f886 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fd98 	bl	8001d4c <HAL_Delay>
		clearCube();
 800121c:	f7ff f8c4 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	0018      	movs	r0, r3
 8001224:	f000 fd92 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	3301      	adds	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b07      	cmp	r3, #7
 8001232:	dd97      	ble.n	8001164 <numberingCube+0x69c>
	}
	HAL_Delay(delay);
 8001234:	23fa      	movs	r3, #250	; 0xfa
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	0018      	movs	r0, r3
 800123a:	f000 fd87 	bl	8001d4c <HAL_Delay>
	//digit 7
	for (int i = 0; i < 8; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e04e      	b.n	80012e2 <numberingCube+0x81a>
 8001244:	20000178 	.word	0x20000178
 8001248:	20000174 	.word	0x20000174
 800124c:	20000180 	.word	0x20000180
	{
		column[i] = 0x7f;
 8001250:	4a9a      	ldr	r2, [pc, #616]	; (80014bc <numberingCube+0x9f4>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	227f      	movs	r2, #127	; 0x7f
 8001258:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 800125a:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <numberingCube+0x9f8>)
 800125c:	22c0      	movs	r2, #192	; 0xc0
 800125e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001260:	4b97      	ldr	r3, [pc, #604]	; (80014c0 <numberingCube+0x9f8>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b95      	ldr	r3, [pc, #596]	; (80014bc <numberingCube+0x9f4>)
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff f877 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800126e:	4b95      	ldr	r3, [pc, #596]	; (80014c4 <numberingCube+0x9fc>)
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff f855 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	0018      	movs	r0, r3
 800127a:	f000 fd67 	bl	8001d4c <HAL_Delay>

		for (int j = 0; j < 6; j++)
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e022      	b.n	80012ca <numberingCube+0x802>
		{
			column[i] = 0x03 << j;
 8001284:	2203      	movs	r2, #3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	b2d9      	uxtb	r1, r3
 800128e:	4a8b      	ldr	r2, [pc, #556]	; (80014bc <numberingCube+0x9f4>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	18d3      	adds	r3, r2, r3
 8001294:	1c0a      	adds	r2, r1, #0
 8001296:	701a      	strb	r2, [r3, #0]
			layer = 0x20 >> j;
 8001298:	2220      	movs	r2, #32
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	411a      	asrs	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b87      	ldr	r3, [pc, #540]	; (80014c0 <numberingCube+0x9f8>)
 80012a4:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 80012a6:	4b86      	ldr	r3, [pc, #536]	; (80014c0 <numberingCube+0x9f8>)
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b84      	ldr	r3, [pc, #528]	; (80014bc <numberingCube+0x9f4>)
 80012ac:	0011      	movs	r1, r2
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff f854 	bl	800035c <mergeData>
			TransmitData(dataOut);
 80012b4:	4b83      	ldr	r3, [pc, #524]	; (80014c4 <numberingCube+0x9fc>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff f832 	bl	8000320 <TransmitData>
			HAL_Delay(x);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 fd44 	bl	8001d4c <HAL_Delay>
		for (int j = 0; j < 6; j++)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	3301      	adds	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	ddd9      	ble.n	8001284 <numberingCube+0x7bc>
		}
		clearCube();
 80012d0:	f7ff f86a 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 fd38 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	ddb3      	ble.n	8001250 <numberingCube+0x788>
	}
	HAL_Delay(delay);
 80012e8:	23fa      	movs	r3, #250	; 0xfa
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 fd2d 	bl	8001d4c <HAL_Delay>
	//digit 8
	for (int i = 0; i < 8; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e036      	b.n	8001366 <numberingCube+0x89e>
	{
		column[i] = 0xc3;
 80012f8:	4a70      	ldr	r2, [pc, #448]	; (80014bc <numberingCube+0x9f4>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	22c3      	movs	r2, #195	; 0xc3
 8001300:	701a      	strb	r2, [r3, #0]
		layer = 0x66;
 8001302:	4b6f      	ldr	r3, [pc, #444]	; (80014c0 <numberingCube+0x9f8>)
 8001304:	2266      	movs	r2, #102	; 0x66
 8001306:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001308:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <numberingCube+0x9f8>)
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	4b6b      	ldr	r3, [pc, #428]	; (80014bc <numberingCube+0x9f4>)
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff f823 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001316:	4b6b      	ldr	r3, [pc, #428]	; (80014c4 <numberingCube+0x9fc>)
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff f801 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f000 fd13 	bl	8001d4c <HAL_Delay>

		column[i] = 0x7e;
 8001326:	4a65      	ldr	r2, [pc, #404]	; (80014bc <numberingCube+0x9f4>)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	18d3      	adds	r3, r2, r3
 800132c:	227e      	movs	r2, #126	; 0x7e
 800132e:	701a      	strb	r2, [r3, #0]
		layer = 0x99;
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <numberingCube+0x9f8>)
 8001332:	2299      	movs	r2, #153	; 0x99
 8001334:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <numberingCube+0x9f8>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b60      	ldr	r3, [pc, #384]	; (80014bc <numberingCube+0x9f4>)
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff f80c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001344:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <numberingCube+0x9fc>)
 8001346:	0018      	movs	r0, r3
 8001348:	f7fe ffea 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0018      	movs	r0, r3
 8001350:	f000 fcfc 	bl	8001d4c <HAL_Delay>
		clearCube();
 8001354:	f7ff f828 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fcf6 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b07      	cmp	r3, #7
 800136a:	ddc5      	ble.n	80012f8 <numberingCube+0x830>
	}
	HAL_Delay(delay);
 800136c:	23fa      	movs	r3, #250	; 0xfa
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	0018      	movs	r0, r3
 8001372:	f000 fceb 	bl	8001d4c <HAL_Delay>
	//digit 9
	for (int i = 0; i < 8; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	e092      	b.n	80014a2 <numberingCube+0x9da>
	{
		column[i] = 0x7e;
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <numberingCube+0x9f4>)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	18d3      	adds	r3, r2, r3
 8001382:	227e      	movs	r2, #126	; 0x7e
 8001384:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <numberingCube+0x9f8>)
 8001388:	2281      	movs	r2, #129	; 0x81
 800138a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800138c:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <numberingCube+0x9f8>)
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	4b4a      	ldr	r3, [pc, #296]	; (80014bc <numberingCube+0x9f4>)
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7fe ffe1 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <numberingCube+0x9fc>)
 800139c:	0018      	movs	r0, r3
 800139e:	f7fe ffbf 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 fcd1 	bl	8001d4c <HAL_Delay>

		column[i] = 0xc3;
 80013aa:	4a44      	ldr	r2, [pc, #272]	; (80014bc <numberingCube+0x9f4>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	18d3      	adds	r3, r2, r3
 80013b0:	22c3      	movs	r2, #195	; 0xc3
 80013b2:	701a      	strb	r2, [r3, #0]
		layer = 0x60;
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <numberingCube+0x9f8>)
 80013b6:	2260      	movs	r2, #96	; 0x60
 80013b8:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <numberingCube+0x9f8>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <numberingCube+0x9f4>)
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7fe ffca 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <numberingCube+0x9fc>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7fe ffa8 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 fcba 	bl	8001d4c <HAL_Delay>

		column[i] = 0xff;
 80013d8:	4a38      	ldr	r2, [pc, #224]	; (80014bc <numberingCube+0x9f4>)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	18d3      	adds	r3, r2, r3
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 80013e2:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <numberingCube+0x9f8>)
 80013e4:	2210      	movs	r2, #16
 80013e6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <numberingCube+0x9f8>)
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	4b33      	ldr	r3, [pc, #204]	; (80014bc <numberingCube+0x9f4>)
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7fe ffb3 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <numberingCube+0x9fc>)
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7fe ff91 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f000 fca3 	bl	8001d4c <HAL_Delay>

		column[i] = 0x7f;
 8001406:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <numberingCube+0x9f4>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	18d3      	adds	r3, r2, r3
 800140c:	227f      	movs	r2, #127	; 0x7f
 800140e:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <numberingCube+0x9f8>)
 8001412:	2208      	movs	r2, #8
 8001414:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <numberingCube+0x9f8>)
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <numberingCube+0x9f4>)
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f7fe ff9c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <numberingCube+0x9fc>)
 8001426:	0018      	movs	r0, r3
 8001428:	f7fe ff7a 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fc8c 	bl	8001d4c <HAL_Delay>

		column[i] = 0x03;
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <numberingCube+0x9f4>)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	18d3      	adds	r3, r2, r3
 800143a:	2203      	movs	r2, #3
 800143c:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <numberingCube+0x9f8>)
 8001440:	2204      	movs	r2, #4
 8001442:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <numberingCube+0x9f8>)
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <numberingCube+0x9f4>)
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f7fe ff85 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <numberingCube+0x9fc>)
 8001454:	0018      	movs	r0, r3
 8001456:	f7fe ff63 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fc75 	bl	8001d4c <HAL_Delay>

		column[i] = 0x83;
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <numberingCube+0x9f4>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	18d3      	adds	r3, r2, r3
 8001468:	2283      	movs	r2, #131	; 0x83
 800146a:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <numberingCube+0x9f8>)
 800146e:	2202      	movs	r2, #2
 8001470:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <numberingCube+0x9f8>)
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <numberingCube+0x9f4>)
 8001478:	0011      	movs	r1, r2
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe ff6e 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <numberingCube+0x9fc>)
 8001482:	0018      	movs	r0, r3
 8001484:	f7fe ff4c 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0018      	movs	r0, r3
 800148c:	f000 fc5e 	bl	8001d4c <HAL_Delay>
		clearCube();
 8001490:	f7fe ff8a 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	f000 fc58 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < 8; i++)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3301      	adds	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	dc00      	bgt.n	80014aa <numberingCube+0x9e2>
 80014a8:	e768      	b.n	800137c <numberingCube+0x8b4>
	}
	HAL_Delay(delay);
 80014aa:	23fa      	movs	r3, #250	; 0xfa
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fc4c 	bl	8001d4c <HAL_Delay>
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b00e      	add	sp, #56	; 0x38
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000178 	.word	0x20000178
 80014c0:	20000174 	.word	0x20000174
 80014c4:	20000180 	.word	0x20000180

080014c8 <matlabIconCube>:

void matlabIconCube() {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b099      	sub	sp, #100	; 0x64
 80014cc:	af00      	add	r7, sp, #0
	//layer 1
	uint8_t data_layer1[9] = {0x01,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80014ce:	2154      	movs	r1, #84	; 0x54
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <matlabIconCube+0xbc>)
 80014d4:	ca11      	ldmia	r2!, {r0, r4}
 80014d6:	c311      	stmia	r3!, {r0, r4}
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer1);
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	0018      	movs	r0, r3
 80014e0:	f7fe ff1e 	bl	8000320 <TransmitData>
	//layer 2
	uint8_t data_layer2[9] = {0x02,0x42,0x81,0x00,0x00,0x00,0x00,0x00,0x00};
 80014e4:	2148      	movs	r1, #72	; 0x48
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <matlabIconCube+0xc0>)
 80014ea:	ca11      	ldmia	r2!, {r0, r4}
 80014ec:	c311      	stmia	r3!, {r0, r4}
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer2);
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7fe ff13 	bl	8000320 <TransmitData>
	//layer 3
	uint8_t data_layer3[9] = {0x04,0x24,0x42,0x81,0x00,0x00,0xE0,0xE0,0xE3};
 80014fa:	213c      	movs	r1, #60	; 0x3c
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <matlabIconCube+0xc4>)
 8001500:	ca11      	ldmia	r2!, {r0, r4}
 8001502:	c311      	stmia	r3!, {r0, r4}
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer3);
 8001508:	187b      	adds	r3, r7, r1
 800150a:	0018      	movs	r0, r3
 800150c:	f7fe ff08 	bl	8000320 <TransmitData>
	//layer 4
	uint8_t data_layer4[9] = {0x08,0x18,0x24,0x42,0x81,0xF0,0x10,0x17,0x14};
 8001510:	2130      	movs	r1, #48	; 0x30
 8001512:	187b      	adds	r3, r7, r1
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <matlabIconCube+0xc8>)
 8001516:	ca11      	ldmia	r2!, {r0, r4}
 8001518:	c311      	stmia	r3!, {r0, r4}
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer4);
 800151e:	187b      	adds	r3, r7, r1
 8001520:	0018      	movs	r0, r3
 8001522:	f7fe fefd 	bl	8000320 <TransmitData>
	//layer 5
	uint8_t data_layer5[9] = {0x10,0x00,0x18,0x24,0x7A,0x09,0x07,0x08,0x08};
 8001526:	2124      	movs	r1, #36	; 0x24
 8001528:	187b      	adds	r3, r7, r1
 800152a:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <matlabIconCube+0xcc>)
 800152c:	ca11      	ldmia	r2!, {r0, r4}
 800152e:	c311      	stmia	r3!, {r0, r4}
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer5);
 8001534:	187b      	adds	r3, r7, r1
 8001536:	0018      	movs	r0, r3
 8001538:	f7fe fef2 	bl	8000320 <TransmitData>
	//layer 6
	uint8_t data_layer6[9] = {0x20,0x00,0x00,0x18,0x24,0x06,0x08,0x00,0x00};
 800153c:	2118      	movs	r1, #24
 800153e:	187b      	adds	r3, r7, r1
 8001540:	4a15      	ldr	r2, [pc, #84]	; (8001598 <matlabIconCube+0xd0>)
 8001542:	ca11      	ldmia	r2!, {r0, r4}
 8001544:	c311      	stmia	r3!, {r0, r4}
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer6);
 800154a:	187b      	adds	r3, r7, r1
 800154c:	0018      	movs	r0, r3
 800154e:	f7fe fee7 	bl	8000320 <TransmitData>
	//layer 7
	uint8_t data_layer7[9] = {0x40,0x00,0x00,0x00,0x18,0x08,0x00,0x00,0x00};
 8001552:	210c      	movs	r1, #12
 8001554:	187b      	adds	r3, r7, r1
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <matlabIconCube+0xd4>)
 8001558:	ca11      	ldmia	r2!, {r0, r4}
 800155a:	c311      	stmia	r3!, {r0, r4}
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer7);
 8001560:	187b      	adds	r3, r7, r1
 8001562:	0018      	movs	r0, r3
 8001564:	f7fe fedc 	bl	8000320 <TransmitData>
	//layer 8
	uint8_t data_layer8[9] = {0x80,0x00,0x00,0x00,0x18,0x08,0x00,0x00,0x00};
 8001568:	003b      	movs	r3, r7
 800156a:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <matlabIconCube+0xd8>)
 800156c:	ca03      	ldmia	r2!, {r0, r1}
 800156e:	c303      	stmia	r3!, {r0, r1}
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	701a      	strb	r2, [r3, #0]
	TransmitData(data_layer8);
 8001574:	003b      	movs	r3, r7
 8001576:	0018      	movs	r0, r3
 8001578:	f7fe fed2 	bl	8000320 <TransmitData>
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b019      	add	sp, #100	; 0x64
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	08005ba4 	.word	0x08005ba4
 8001588:	08005bb0 	.word	0x08005bb0
 800158c:	08005bbc 	.word	0x08005bbc
 8001590:	08005bc8 	.word	0x08005bc8
 8001594:	08005bd4 	.word	0x08005bd4
 8001598:	08005be0 	.word	0x08005be0
 800159c:	08005bec 	.word	0x08005bec
 80015a0:	08005bf8 	.word	0x08005bf8

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f000 fb6c 	bl	8001c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f83c 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f000 f908 	bl	80017c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015b4:	f000 f898 	bl	80016e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015b8:	f000 f8d4 	bl	8001764 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <main+0x74>)
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <main+0x78>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	0018      	movs	r0, r3
 80015c4:	f002 f8c8 	bl	8003758 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 switch (currentEffect) {
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <main+0x7c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d820      	bhi.n	8001612 <main+0x6e>
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <main+0x80>)
 80015d4:	18d3      	adds	r3, r2, r3
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	469f      	mov	pc, r3
		case 0:
			growShrinkCube();
 80015da:	f7ff f8eb 	bl	80007b4 <growShrinkCube>
			break;
 80015de:	e019      	b.n	8001614 <main+0x70>
		case 1:
			planeXCube();
 80015e0:	f7ff f856 	bl	8000690 <planeXCube>
			planeYCube();
 80015e4:	f7fe fff2 	bl	80005cc <planeYCube>
			planeZCube();
 80015e8:	f7fe ff9a 	bl	8000520 <planeZCube>
			break;
 80015ec:	e012      	b.n	8001614 <main+0x70>
		case 2:
			diagonalCube();
 80015ee:	f7fe ff05 	bl	80003fc <diagonalCube>
			break;
 80015f2:	e00f      	b.n	8001614 <main+0x70>
		case 3:
			randomRainCube();
 80015f4:	f7ff f87e 	bl	80006f4 <randomRainCube>
			break;
 80015f8:	e00c      	b.n	8001614 <main+0x70>
		case 4:
			aroundEdgeCube();
 80015fa:	f7ff f941 	bl	8000880 <aroundEdgeCube>
			break;
 80015fe:	e009      	b.n	8001614 <main+0x70>
		case 5:
			diaedgeCube();
 8001600:	f7ff f998 	bl	8000934 <diaedgeCube>
			break;
 8001604:	e006      	b.n	8001614 <main+0x70>
		case 6:
			numberingCube();
 8001606:	f7ff fa5f 	bl	8000ac8 <numberingCube>
			break;
 800160a:	e003      	b.n	8001614 <main+0x70>
		case 7:
			matlabIconCube();
 800160c:	f7ff ff5c 	bl	80014c8 <matlabIconCube>
			break;
 8001610:	e000      	b.n	8001614 <main+0x70>
		default:
			break;
 8001612:	46c0      	nop			; (mov r8, r8)
	 switch (currentEffect) {
 8001614:	e7d8      	b.n	80015c8 <main+0x24>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	20000190 	.word	0x20000190
 800161c:	200000f0 	.word	0x200000f0
 8001620:	2000018c 	.word	0x2000018c
 8001624:	08005c24 	.word	0x08005c24

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b099      	sub	sp, #100	; 0x64
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	242c      	movs	r4, #44	; 0x2c
 8001630:	193b      	adds	r3, r7, r4
 8001632:	0018      	movs	r0, r3
 8001634:	2334      	movs	r3, #52	; 0x34
 8001636:	001a      	movs	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	f003 f9d1 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163e:	231c      	movs	r3, #28
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	0018      	movs	r0, r3
 8001644:	2310      	movs	r3, #16
 8001646:	001a      	movs	r2, r3
 8001648:	2100      	movs	r1, #0
 800164a:	f003 f9c9 	bl	80049e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	0018      	movs	r0, r3
 8001652:	2318      	movs	r3, #24
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f003 f9c2 	bl	80049e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800165c:	0021      	movs	r1, r4
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2201      	movs	r2, #1
 8001668:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2202      	movs	r2, #2
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	0252      	lsls	r2, r2, #9
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	0352      	lsls	r2, r2, #13
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2200      	movs	r2, #0
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001686:	187b      	adds	r3, r7, r1
 8001688:	0018      	movs	r0, r3
 800168a:	f000 fe9d 	bl	80023c8 <HAL_RCC_OscConfig>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001692:	f000 f8f9 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001696:	211c      	movs	r1, #28
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2207      	movs	r2, #7
 800169c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2202      	movs	r2, #2
 80016a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2101      	movs	r1, #1
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 fa0d 	bl	8002ad4 <HAL_RCC_ClockConfig>
 80016ba:	1e03      	subs	r3, r0, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016be:	f000 f8e3 	bl	8001888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	0018      	movs	r0, r3
 80016d2:	f001 fb79 	bl	8002dc8 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80016da:	f000 f8d5 	bl	8001888 <Error_Handler>
  }
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b019      	add	sp, #100	; 0x64
 80016e4:	bd90      	pop	{r4, r7, pc}
	...

080016e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_SPI1_Init+0x74>)
 80016ee:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <MX_SPI1_Init+0x78>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_SPI1_Init+0x74>)
 80016f4:	2282      	movs	r2, #130	; 0x82
 80016f6:	0052      	lsls	r2, r2, #1
 80016f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_SPI1_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI1_Init+0x74>)
 8001702:	22e0      	movs	r2, #224	; 0xe0
 8001704:	00d2      	lsls	r2, r2, #3
 8001706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI1_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI1_Init+0x74>)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI1_Init+0x74>)
 800171e:	2220      	movs	r2, #32
 8001720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI1_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_SPI1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI1_Init+0x74>)
 8001736:	2207      	movs	r2, #7
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_SPI1_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <MX_SPI1_Init+0x74>)
 8001748:	0018      	movs	r0, r3
 800174a:	f001 fc2b 	bl	8002fa4 <HAL_SPI_Init>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d001      	beq.n	8001756 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001752:	f000 f899 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000008c 	.word	0x2000008c
 8001760:	40013000 	.word	0x40013000

08001764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART1_UART_Init+0x58>)
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <MX_USART1_UART_Init+0x5c>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART1_UART_Init+0x58>)
 8001770:	2296      	movs	r2, #150	; 0x96
 8001772:	0192      	lsls	r2, r2, #6
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_USART1_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART1_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART1_UART_Init+0x58>)
 800178a:	2204      	movs	r2, #4
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART1_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART1_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART1_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART1_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <MX_USART1_UART_Init+0x58>)
 80017a8:	0018      	movs	r0, r3
 80017aa:	f001 ff81 	bl	80036b0 <HAL_UART_Init>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017b2:	f000 f869 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200000f0 	.word	0x200000f0
 80017c0:	40013800 	.word	0x40013800

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	240c      	movs	r4, #12
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	0018      	movs	r0, r3
 80017d0:	2314      	movs	r3, #20
 80017d2:	001a      	movs	r2, r3
 80017d4:	2100      	movs	r1, #0
 80017d6:	f003 f903 	bl	80049e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_GPIO_Init+0xc0>)
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <MX_GPIO_Init+0xc0>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	03c9      	lsls	r1, r1, #15
 80017e4:	430a      	orrs	r2, r1
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <MX_GPIO_Init+0xc0>)
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	03db      	lsls	r3, r3, #15
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_GPIO_Init+0xc0>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_GPIO_Init+0xc0>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0289      	lsls	r1, r1, #10
 8001800:	430a      	orrs	r2, r1
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_GPIO_Init+0xc0>)
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8001812:	2390      	movs	r3, #144	; 0x90
 8001814:	05db      	lsls	r3, r3, #23
 8001816:	2200      	movs	r2, #0
 8001818:	2140      	movs	r1, #64	; 0x40
 800181a:	0018      	movs	r0, r3
 800181c:	f000 fd9b 	bl	8002356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	2202      	movs	r2, #2
 8001824:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2284      	movs	r2, #132	; 0x84
 800182a:	0392      	lsls	r2, r2, #14
 800182c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2201      	movs	r2, #1
 8001832:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	193a      	adds	r2, r7, r4
 8001836:	2390      	movs	r3, #144	; 0x90
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f000 fc05 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 8001842:	0021      	movs	r1, r4
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2201      	movs	r2, #1
 800184e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2203      	movs	r2, #3
 800185a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 800185c:	187a      	adds	r2, r7, r1
 800185e:	2390      	movs	r3, #144	; 0x90
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f000 fbf1 	bl	800204c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2102      	movs	r1, #2
 800186e:	2005      	movs	r0, #5
 8001870:	f000 fb3c 	bl	8001eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001874:	2005      	movs	r0, #5
 8001876:	f000 fb4e 	bl	8001f16 <HAL_NVIC_EnableIRQ>

}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b009      	add	sp, #36	; 0x24
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40021000 	.word	0x40021000

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>
	...

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_MspInit+0x44>)
 800189c:	699a      	ldr	r2, [r3, #24]
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_MspInit+0x44>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	619a      	str	r2, [r3, #24]
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x44>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x44>)
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_MspInit+0x44>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0549      	lsls	r1, r1, #21
 80018bc:	430a      	orrs	r2, r1
 80018be:	61da      	str	r2, [r3, #28]
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_MspInit+0x44>)
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	055b      	lsls	r3, r3, #21
 80018c8:	4013      	ands	r3, r2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b08b      	sub	sp, #44	; 0x2c
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	2414      	movs	r4, #20
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	0018      	movs	r0, r3
 80018ea:	2314      	movs	r3, #20
 80018ec:	001a      	movs	r2, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	f003 f876 	bl	80049e0 <memset>
  if(hspi->Instance==SPI1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_SPI_MspInit+0x90>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d132      	bne.n	8001964 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_SPI_MspInit+0x94>)
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_SPI_MspInit+0x94>)
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	0149      	lsls	r1, r1, #5
 8001908:	430a      	orrs	r2, r1
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_SPI_MspInit+0x94>)
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	015b      	lsls	r3, r3, #5
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_SPI_MspInit+0x94>)
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_SPI_MspInit+0x94>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0289      	lsls	r1, r1, #10
 8001924:	430a      	orrs	r2, r1
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_SPI_MspInit+0x94>)
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	029b      	lsls	r3, r3, #10
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001936:	0021      	movs	r1, r4
 8001938:	187b      	adds	r3, r7, r1
 800193a:	22a0      	movs	r2, #160	; 0xa0
 800193c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2202      	movs	r2, #2
 8001942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2203      	movs	r2, #3
 800194e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	187a      	adds	r2, r7, r1
 8001958:	2390      	movs	r3, #144	; 0x90
 800195a:	05db      	lsls	r3, r3, #23
 800195c:	0011      	movs	r1, r2
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fb74 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b00b      	add	sp, #44	; 0x2c
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	40013000 	.word	0x40013000
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b08b      	sub	sp, #44	; 0x2c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	2414      	movs	r4, #20
 800197e:	193b      	adds	r3, r7, r4
 8001980:	0018      	movs	r0, r3
 8001982:	2314      	movs	r3, #20
 8001984:	001a      	movs	r2, r3
 8001986:	2100      	movs	r1, #0
 8001988:	f003 f82a 	bl	80049e0 <memset>
  if(huart->Instance==USART1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_UART_MspInit+0xa4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d13b      	bne.n	8001a0e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_UART_MspInit+0xa8>)
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_UART_MspInit+0xa8>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	01c9      	lsls	r1, r1, #7
 80019a0:	430a      	orrs	r2, r1
 80019a2:	619a      	str	r2, [r3, #24]
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_UART_MspInit+0xa8>)
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	01db      	lsls	r3, r3, #7
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_UART_MspInit+0xa8>)
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_UART_MspInit+0xa8>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	0289      	lsls	r1, r1, #10
 80019bc:	430a      	orrs	r2, r1
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_UART_MspInit+0xa8>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ce:	193b      	adds	r3, r7, r4
 80019d0:	22c0      	movs	r2, #192	; 0xc0
 80019d2:	00d2      	lsls	r2, r2, #3
 80019d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	0021      	movs	r1, r4
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2202      	movs	r2, #2
 80019dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	2203      	movs	r2, #3
 80019e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2201      	movs	r2, #1
 80019ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	187a      	adds	r2, r7, r1
 80019f2:	2390      	movs	r3, #144	; 0x90
 80019f4:	05db      	lsls	r3, r3, #23
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 fb27 	bl	800204c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	201b      	movs	r0, #27
 8001a04:	f000 fa72 	bl	8001eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a08:	201b      	movs	r0, #27
 8001a0a:	f000 fa84 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b00b      	add	sp, #44	; 0x2c
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f966 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a52:	2002      	movs	r0, #2
 8001a54:	f000 fc9c 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <USART1_IRQHandler+0x14>)
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 fed8 	bl	800381c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	200000f0 	.word	0x200000f0

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_kill>:

int _kill(int pid, int sig)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a8e:	f002 ff7d 	bl	800498c <__errno>
 8001a92:	0003      	movs	r3, r0
 8001a94:	2216      	movs	r2, #22
 8001a96:	601a      	str	r2, [r3, #0]
	return -1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	425b      	negs	r3, r3
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_exit>:

void _exit (int status)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aac:	2301      	movs	r3, #1
 8001aae:	425a      	negs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff ffe5 	bl	8001a84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aba:	e7fe      	b.n	8001aba <_exit+0x16>

08001abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ace:	e000      	b.n	8001ad2 <_read+0x16>
 8001ad0:	bf00      	nop
 8001ad2:	0001      	movs	r1, r0
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf0      	blt.n	8001ace <_read+0x12>
	}

return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b006      	add	sp, #24
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e009      	b.n	8001b1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	60ba      	str	r2, [r7, #8]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	0018      	movs	r0, r3
 8001b12:	e000      	b.n	8001b16 <_write+0x20>
 8001b14:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dbf1      	blt.n	8001b08 <_write+0x12>
	}
	return len;
 8001b24:	687b      	ldr	r3, [r7, #4]
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b006      	add	sp, #24
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_close>:

int _close(int file)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	return -1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	425b      	negs	r3, r3
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	0192      	lsls	r2, r2, #6
 8001b52:	605a      	str	r2, [r3, #4]
	return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b002      	add	sp, #8
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_isatty>:

int _isatty(int file)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	return 1;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b004      	add	sp, #16
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f002 fee8 	bl	800498c <__errno>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	18d2      	adds	r2, r2, r3
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <_sbrk+0x64>)
 8001bd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b006      	add	sp, #24
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20001800 	.word	0x20001800
 8001be8:	00000400 	.word	0x00000400
 8001bec:	20000194 	.word	0x20000194
 8001bf0:	200001b0 	.word	0x200001b0

08001bf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c00:	4813      	ldr	r0, [pc, #76]	; (8001c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c02:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001c04:	4813      	ldr	r0, [pc, #76]	; (8001c54 <LoopForever+0x6>)
    LDR R1, [R0]
 8001c06:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001c08:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <LoopForever+0xa>)
    CMP R1, R2
 8001c0c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001c0e:	d105      	bne.n	8001c1c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001c10:	4812      	ldr	r0, [pc, #72]	; (8001c5c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001c12:	4913      	ldr	r1, [pc, #76]	; (8001c60 <LoopForever+0x12>)
    STR R1, [R0]
 8001c14:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001c16:	4813      	ldr	r0, [pc, #76]	; (8001c64 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001c18:	4913      	ldr	r1, [pc, #76]	; (8001c68 <LoopForever+0x1a>)
    STR R1, [R0]
 8001c1a:	6001      	str	r1, [r0, #0]

08001c1c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c1c:	4813      	ldr	r0, [pc, #76]	; (8001c6c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001c1e:	4914      	ldr	r1, [pc, #80]	; (8001c70 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <LoopForever+0x26>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001c34:	4c11      	ldr	r4, [pc, #68]	; (8001c7c <LoopForever+0x2e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c42:	f7ff ffd7 	bl	8001bf4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001c46:	f002 fea7 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c4a:	f7ff fcab 	bl	80015a4 <main>

08001c4e <LoopForever>:

LoopForever:
    b LoopForever
 8001c4e:	e7fe      	b.n	8001c4e <LoopForever>
  ldr   r0, =_estack
 8001c50:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001c54:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001c58:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001c5c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001c60:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001c64:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001c68:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c74:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 8001c78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c7c:	200001ac 	.word	0x200001ac

08001c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC1_IRQHandler>
	...

08001c84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_Init+0x24>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_Init+0x24>)
 8001c8e:	2110      	movs	r1, #16
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 f809 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9a:	f7ff fdfb 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	40022000 	.word	0x40022000

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cb6:	681c      	ldr	r4, [r3, #0]
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_InitTick+0x60>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	23fa      	movs	r3, #250	; 0xfa
 8001cc0:	0098      	lsls	r0, r3, #2
 8001cc2:	f7fe fa2b 	bl	800011c <__udivsi3>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	0019      	movs	r1, r3
 8001cca:	0020      	movs	r0, r4
 8001ccc:	f7fe fa26 	bl	800011c <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 f92f 	bl	8001f36 <HAL_SYSTICK_Config>
 8001cd8:	1e03      	subs	r3, r0, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e00f      	b.n	8001d00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d80b      	bhi.n	8001cfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	425b      	negs	r3, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 f8fc 	bl	8001eec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_InitTick+0x64>)
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b003      	add	sp, #12
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_IncTick+0x1c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_IncTick+0x20>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	18d2      	adds	r2, r2, r3
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_IncTick+0x20>)
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000198 	.word	0x20000198

08001d38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <HAL_GetTick+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	20000198 	.word	0x20000198

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3301      	adds	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	f7ff ffe0 	bl	8001d38 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000008 	.word	0x20000008

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b7f      	cmp	r3, #127	; 0x7f
 8001da6:	d809      	bhi.n	8001dbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	231f      	movs	r3, #31
 8001db0:	401a      	ands	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_EnableIRQ+0x30>)
 8001db4:	2101      	movs	r1, #1
 8001db6:	4091      	lsls	r1, r2
 8001db8:	000a      	movs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
  }
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	0002      	movs	r2, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b7f      	cmp	r3, #127	; 0x7f
 8001ddc:	d828      	bhi.n	8001e30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dde:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <__NVIC_SetPriority+0xd4>)
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	33c0      	adds	r3, #192	; 0xc0
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	589b      	ldr	r3, [r3, r2]
 8001dee:	1dfa      	adds	r2, r7, #7
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	0011      	movs	r1, r2
 8001df4:	2203      	movs	r2, #3
 8001df6:	400a      	ands	r2, r1
 8001df8:	00d2      	lsls	r2, r2, #3
 8001dfa:	21ff      	movs	r1, #255	; 0xff
 8001dfc:	4091      	lsls	r1, r2
 8001dfe:	000a      	movs	r2, r1
 8001e00:	43d2      	mvns	r2, r2
 8001e02:	401a      	ands	r2, r3
 8001e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	22ff      	movs	r2, #255	; 0xff
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	0018      	movs	r0, r3
 8001e14:	2303      	movs	r3, #3
 8001e16:	4003      	ands	r3, r0
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1c:	481f      	ldr	r0, [pc, #124]	; (8001e9c <__NVIC_SetPriority+0xd4>)
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	430a      	orrs	r2, r1
 8001e28:	33c0      	adds	r3, #192	; 0xc0
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e2e:	e031      	b.n	8001e94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <__NVIC_SetPriority+0xd8>)
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	0019      	movs	r1, r3
 8001e38:	230f      	movs	r3, #15
 8001e3a:	400b      	ands	r3, r1
 8001e3c:	3b08      	subs	r3, #8
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3306      	adds	r3, #6
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	3304      	adds	r3, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	1dfa      	adds	r2, r7, #7
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	0011      	movs	r1, r2
 8001e50:	2203      	movs	r2, #3
 8001e52:	400a      	ands	r2, r1
 8001e54:	00d2      	lsls	r2, r2, #3
 8001e56:	21ff      	movs	r1, #255	; 0xff
 8001e58:	4091      	lsls	r1, r2
 8001e5a:	000a      	movs	r2, r1
 8001e5c:	43d2      	mvns	r2, r2
 8001e5e:	401a      	ands	r2, r3
 8001e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	401a      	ands	r2, r3
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	2303      	movs	r3, #3
 8001e72:	4003      	ands	r3, r0
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e78:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <__NVIC_SetPriority+0xd8>)
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	001c      	movs	r4, r3
 8001e80:	230f      	movs	r3, #15
 8001e82:	4023      	ands	r3, r4
 8001e84:	3b08      	subs	r3, #8
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	3306      	adds	r3, #6
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	18c3      	adds	r3, r0, r3
 8001e90:	3304      	adds	r3, #4
 8001e92:	601a      	str	r2, [r3, #0]
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b003      	add	sp, #12
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	045b      	lsls	r3, r3, #17
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d301      	bcc.n	8001ebc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e010      	b.n	8001ede <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <SysTick_Config+0x44>)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	3a01      	subs	r2, #1
 8001ec2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	2103      	movs	r1, #3
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff ff7c 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x44>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x44>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b002      	add	sp, #8
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	1c02      	adds	r2, r0, #0
 8001efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff ff5d 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff ff33 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b002      	add	sp, #8
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff ffaf 	bl	8001ea4 <SysTick_Config>
 8001f46:	0003      	movs	r3, r0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2221      	movs	r2, #33	; 0x21
 8001f5c:	5c9b      	ldrb	r3, [r3, r2]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2204      	movs	r2, #4
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	2100      	movs	r1, #0
 8001f70:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e020      	b.n	8001fb8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	210e      	movs	r1, #14
 8001f82:	438a      	bics	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	438a      	bics	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4091      	lsls	r1, r2
 8001fa2:	000a      	movs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2221      	movs	r2, #33	; 0x21
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	210f      	movs	r1, #15
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2221      	movs	r2, #33	; 0x21
 8001fd4:	5c9b      	ldrb	r3, [r3, r2]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d006      	beq.n	8001fea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e028      	b.n	800203c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	210e      	movs	r1, #14
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	438a      	bics	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	2101      	movs	r1, #1
 8002014:	4091      	lsls	r1, r2
 8002016:	000a      	movs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2221      	movs	r2, #33	; 0x21
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	0010      	movs	r0, r2
 800203a:	4798      	blx	r3
    } 
  }
  return status;
 800203c:	230f      	movs	r3, #15
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781b      	ldrb	r3, [r3, #0]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205a:	e149      	b.n	80022f0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4091      	lsls	r1, r2
 8002066:	000a      	movs	r2, r1
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d100      	bne.n	8002074 <HAL_GPIO_Init+0x28>
 8002072:	e13a      	b.n	80022ea <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	2b01      	cmp	r3, #1
 800207e:	d005      	beq.n	800208c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002088:	2b02      	cmp	r3, #2
 800208a:	d130      	bne.n	80020ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	409a      	lsls	r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	43da      	mvns	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c2:	2201      	movs	r2, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	43da      	mvns	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	2201      	movs	r2, #1
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d017      	beq.n	800212a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	409a      	lsls	r2, r3
 8002108:	0013      	movs	r3, r2
 800210a:	43da      	mvns	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	4013      	ands	r3, r2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d123      	bne.n	800217e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	58d3      	ldr	r3, [r2, r3]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2207      	movs	r2, #7
 8002148:	4013      	ands	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2107      	movs	r1, #7
 8002162:	400b      	ands	r3, r1
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	409a      	lsls	r2, r3
 8002168:	0013      	movs	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	6939      	ldr	r1, [r7, #16]
 800217c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	409a      	lsls	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	43da      	mvns	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	401a      	ands	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	0013      	movs	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	4013      	ands	r3, r2
 80021bc:	d100      	bne.n	80021c0 <HAL_GPIO_Init+0x174>
 80021be:	e094      	b.n	80022ea <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c0:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]
 80021cc:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x2c0>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	589b      	ldr	r3, [r3, r2]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	43da      	mvns	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	2390      	movs	r3, #144	; 0x90
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	429a      	cmp	r2, r3
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1d6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a41      	ldr	r2, [pc, #260]	; (8002310 <HAL_GPIO_Init+0x2c4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1d2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a40      	ldr	r2, [pc, #256]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1ce>
 8002216:	2302      	movs	r3, #2
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x1d8>
 800221a:	2305      	movs	r3, #5
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x1d8>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x1d8>
 8002222:	2300      	movs	r3, #0
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	2103      	movs	r1, #3
 8002228:	400a      	ands	r2, r1
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002234:	4935      	ldr	r1, [pc, #212]	; (800230c <HAL_GPIO_Init+0x2c0>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43da      	mvns	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	4013      	ands	r3, r2
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43da      	mvns	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43da      	mvns	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	035b      	lsls	r3, r3, #13
 80022ae:	4013      	ands	r3, r2
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	039b      	lsls	r3, r3, #14
 80022d8:	4013      	ands	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	40da      	lsrs	r2, r3
 80022f8:	1e13      	subs	r3, r2, #0
 80022fa:	d000      	beq.n	80022fe <HAL_GPIO_Init+0x2b2>
 80022fc:	e6ae      	b.n	800205c <HAL_GPIO_Init+0x10>
  } 
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b006      	add	sp, #24
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	48000400 	.word	0x48000400
 8002314:	48000800 	.word	0x48000800
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	000a      	movs	r2, r1
 8002326:	1cbb      	adds	r3, r7, #2
 8002328:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	1cba      	adds	r2, r7, #2
 8002330:	8812      	ldrh	r2, [r2, #0]
 8002332:	4013      	ands	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002336:	230f      	movs	r3, #15
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e003      	b.n	8002348 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002340:	230f      	movs	r3, #15
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002348:	230f      	movs	r3, #15
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
  }
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b004      	add	sp, #16
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	0008      	movs	r0, r1
 8002360:	0011      	movs	r1, r2
 8002362:	1cbb      	adds	r3, r7, #2
 8002364:	1c02      	adds	r2, r0, #0
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	1c7b      	adds	r3, r7, #1
 800236a:	1c0a      	adds	r2, r1, #0
 800236c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236e:	1c7b      	adds	r3, r7, #1
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002376:	1cbb      	adds	r3, r7, #2
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800237e:	e003      	b.n	8002388 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002380:	1cbb      	adds	r3, r7, #2
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	0002      	movs	r2, r0
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	1dba      	adds	r2, r7, #6
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	4013      	ands	r3, r2
 80023a6:	d008      	beq.n	80023ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80023aa:	1dba      	adds	r2, r7, #6
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b0:	1dbb      	adds	r3, r7, #6
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fd ff8f 	bl	80002d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f000 fb76 	bl	8002ac8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d100      	bne.n	80023e8 <HAL_RCC_OscConfig+0x20>
 80023e6:	e08e      	b.n	8002506 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023e8:	4bc5      	ldr	r3, [pc, #788]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	220c      	movs	r2, #12
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d00e      	beq.n	8002412 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f4:	4bc2      	ldr	r3, [pc, #776]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	220c      	movs	r2, #12
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d117      	bne.n	8002430 <HAL_RCC_OscConfig+0x68>
 8002400:	4bbf      	ldr	r3, [pc, #764]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	23c0      	movs	r3, #192	; 0xc0
 8002406:	025b      	lsls	r3, r3, #9
 8002408:	401a      	ands	r2, r3
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	025b      	lsls	r3, r3, #9
 800240e:	429a      	cmp	r2, r3
 8002410:	d10e      	bne.n	8002430 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4bbb      	ldr	r3, [pc, #748]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	029b      	lsls	r3, r3, #10
 800241a:	4013      	ands	r3, r2
 800241c:	d100      	bne.n	8002420 <HAL_RCC_OscConfig+0x58>
 800241e:	e071      	b.n	8002504 <HAL_RCC_OscConfig+0x13c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d000      	beq.n	800242a <HAL_RCC_OscConfig+0x62>
 8002428:	e06c      	b.n	8002504 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	f000 fb4c 	bl	8002ac8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d107      	bne.n	8002448 <HAL_RCC_OscConfig+0x80>
 8002438:	4bb1      	ldr	r3, [pc, #708]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4bb0      	ldr	r3, [pc, #704]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0249      	lsls	r1, r1, #9
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e02f      	b.n	80024a8 <HAL_RCC_OscConfig+0xe0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0xa2>
 8002450:	4bab      	ldr	r3, [pc, #684]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4baa      	ldr	r3, [pc, #680]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002456:	49ab      	ldr	r1, [pc, #684]	; (8002704 <HAL_RCC_OscConfig+0x33c>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4ba8      	ldr	r3, [pc, #672]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4ba7      	ldr	r3, [pc, #668]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002462:	49a9      	ldr	r1, [pc, #676]	; (8002708 <HAL_RCC_OscConfig+0x340>)
 8002464:	400a      	ands	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e01e      	b.n	80024a8 <HAL_RCC_OscConfig+0xe0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d10e      	bne.n	8002490 <HAL_RCC_OscConfig+0xc8>
 8002472:	4ba3      	ldr	r3, [pc, #652]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4ba2      	ldr	r3, [pc, #648]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	02c9      	lsls	r1, r1, #11
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	4b9f      	ldr	r3, [pc, #636]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b9e      	ldr	r3, [pc, #632]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0249      	lsls	r1, r1, #9
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xe0>
 8002490:	4b9b      	ldr	r3, [pc, #620]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b9a      	ldr	r3, [pc, #616]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002496:	499b      	ldr	r1, [pc, #620]	; (8002704 <HAL_RCC_OscConfig+0x33c>)
 8002498:	400a      	ands	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	4b98      	ldr	r3, [pc, #608]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b97      	ldr	r3, [pc, #604]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80024a2:	4999      	ldr	r1, [pc, #612]	; (8002708 <HAL_RCC_OscConfig+0x340>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d014      	beq.n	80024da <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc42 	bl	8001d38 <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ba:	f7ff fc3d 	bl	8001d38 <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	; 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e2fd      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024cc:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	4013      	ands	r3, r2
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0xf2>
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7ff fc2d 	bl	8001d38 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fc28 	bl	8001d38 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e2e8      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b82      	ldr	r3, [pc, #520]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4013      	ands	r3, r2
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x11c>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d100      	bne.n	8002512 <HAL_RCC_OscConfig+0x14a>
 8002510:	e06c      	b.n	80025ec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	220c      	movs	r2, #12
 8002518:	4013      	ands	r3, r2
 800251a:	d00e      	beq.n	800253a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800251c:	4b78      	ldr	r3, [pc, #480]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	220c      	movs	r2, #12
 8002522:	4013      	ands	r3, r2
 8002524:	2b08      	cmp	r3, #8
 8002526:	d11f      	bne.n	8002568 <HAL_RCC_OscConfig+0x1a0>
 8002528:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	23c0      	movs	r3, #192	; 0xc0
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	401a      	ands	r2, r3
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	429a      	cmp	r2, r3
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b71      	ldr	r3, [pc, #452]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2202      	movs	r2, #2
 8002540:	4013      	ands	r3, r2
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x188>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e2bb      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	22f8      	movs	r2, #248	; 0xf8
 8002556:	4393      	bics	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00da      	lsls	r2, r3, #3
 8002560:	4b67      	ldr	r3, [pc, #412]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e041      	b.n	80025ec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d024      	beq.n	80025ba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b62      	ldr	r3, [pc, #392]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fbdc 	bl	8001d38 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff fbd7 	bl	8001d38 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e297      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b59      	ldr	r3, [pc, #356]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2202      	movs	r2, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	d0f1      	beq.n	8002586 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	22f8      	movs	r2, #248	; 0xf8
 80025a8:	4393      	bics	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00da      	lsls	r2, r3, #3
 80025b2:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e018      	b.n	80025ec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	438a      	bics	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7ff fbb7 	bl	8001d38 <HAL_GetTick>
 80025ca:	0003      	movs	r3, r0
 80025cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d0:	f7ff fbb2 	bl	8001d38 <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e272      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d1f1      	bne.n	80025d0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2208      	movs	r2, #8
 80025f2:	4013      	ands	r3, r2
 80025f4:	d036      	beq.n	8002664 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d019      	beq.n	8002632 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fe:	4b40      	ldr	r3, [pc, #256]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002604:	2101      	movs	r1, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7ff fb95 	bl	8001d38 <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff fb90 	bl	8001d38 <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e250      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2202      	movs	r2, #2
 800262c:	4013      	ands	r3, r2
 800262e:	d0f1      	beq.n	8002614 <HAL_RCC_OscConfig+0x24c>
 8002630:	e018      	b.n	8002664 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002632:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002636:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002638:	2101      	movs	r1, #1
 800263a:	438a      	bics	r2, r1
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7ff fb7b 	bl	8001d38 <HAL_GetTick>
 8002642:	0003      	movs	r3, r0
 8002644:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff fb76 	bl	8001d38 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e236      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2202      	movs	r2, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d1f1      	bne.n	8002648 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2204      	movs	r2, #4
 800266a:	4013      	ands	r3, r2
 800266c:	d100      	bne.n	8002670 <HAL_RCC_OscConfig+0x2a8>
 800266e:	e0b5      	b.n	80027dc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002670:	201f      	movs	r0, #31
 8002672:	183b      	adds	r3, r7, r0
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	055b      	lsls	r3, r3, #21
 8002680:	4013      	ands	r3, r2
 8002682:	d110      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0549      	lsls	r1, r1, #21
 800268e:	430a      	orrs	r2, r1
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	055b      	lsls	r3, r3, #21
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026a0:	183b      	adds	r3, r7, r0
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_OscConfig+0x344>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	d11a      	bne.n	80026e8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_RCC_OscConfig+0x344>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCC_OscConfig+0x344>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0049      	lsls	r1, r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c0:	f7ff fb3a 	bl	8001d38 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7ff fb35 	bl	8001d38 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1f5      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x344>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d10f      	bne.n	8002710 <HAL_RCC_OscConfig+0x348>
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	4b02      	ldr	r3, [pc, #8]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	430a      	orrs	r2, r1
 80026fa:	621a      	str	r2, [r3, #32]
 80026fc:	e036      	b.n	800276c <HAL_RCC_OscConfig+0x3a4>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	40021000 	.word	0x40021000
 8002704:	fffeffff 	.word	0xfffeffff
 8002708:	fffbffff 	.word	0xfffbffff
 800270c:	40007000 	.word	0x40007000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_OscConfig+0x36a>
 8002718:	4bca      	ldr	r3, [pc, #808]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	4bc9      	ldr	r3, [pc, #804]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800271e:	2101      	movs	r1, #1
 8002720:	438a      	bics	r2, r1
 8002722:	621a      	str	r2, [r3, #32]
 8002724:	4bc7      	ldr	r3, [pc, #796]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	4bc6      	ldr	r3, [pc, #792]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800272a:	2104      	movs	r1, #4
 800272c:	438a      	bics	r2, r1
 800272e:	621a      	str	r2, [r3, #32]
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x3a4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x38c>
 800273a:	4bc2      	ldr	r3, [pc, #776]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	4bc1      	ldr	r3, [pc, #772]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002740:	2104      	movs	r1, #4
 8002742:	430a      	orrs	r2, r1
 8002744:	621a      	str	r2, [r3, #32]
 8002746:	4bbf      	ldr	r3, [pc, #764]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	4bbe      	ldr	r3, [pc, #760]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800274c:	2101      	movs	r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	621a      	str	r2, [r3, #32]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x3a4>
 8002754:	4bbb      	ldr	r3, [pc, #748]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	4bba      	ldr	r3, [pc, #744]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	621a      	str	r2, [r3, #32]
 8002760:	4bb8      	ldr	r3, [pc, #736]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	4bb7      	ldr	r3, [pc, #732]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002766:	2104      	movs	r1, #4
 8002768:	438a      	bics	r2, r1
 800276a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d014      	beq.n	800279e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7ff fae0 	bl	8001d38 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e009      	b.n	8002792 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff fadb 	bl	8001d38 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	4aaf      	ldr	r2, [pc, #700]	; (8002a48 <HAL_RCC_OscConfig+0x680>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e19a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4bac      	ldr	r3, [pc, #688]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	2202      	movs	r2, #2
 8002798:	4013      	ands	r3, r2
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x3b6>
 800279c:	e013      	b.n	80027c6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7ff facb 	bl	8001d38 <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e009      	b.n	80027bc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7ff fac6 	bl	8001d38 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	4aa5      	ldr	r2, [pc, #660]	; (8002a48 <HAL_RCC_OscConfig+0x680>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e185      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	4ba1      	ldr	r3, [pc, #644]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027c6:	231f      	movs	r3, #31
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b9c      	ldr	r3, [pc, #624]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	4b9b      	ldr	r3, [pc, #620]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	499d      	ldr	r1, [pc, #628]	; (8002a4c <HAL_RCC_OscConfig+0x684>)
 80027d8:	400a      	ands	r2, r1
 80027da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2210      	movs	r2, #16
 80027e2:	4013      	ands	r3, r2
 80027e4:	d063      	beq.n	80028ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d12a      	bne.n	8002844 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ee:	4b95      	ldr	r3, [pc, #596]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80027f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f2:	4b94      	ldr	r3, [pc, #592]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80027f4:	2104      	movs	r1, #4
 80027f6:	430a      	orrs	r2, r1
 80027f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027fa:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80027fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fe:	4b91      	ldr	r3, [pc, #580]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7ff fa97 	bl	8001d38 <HAL_GetTick>
 800280a:	0003      	movs	r3, r0
 800280c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002810:	f7ff fa92 	bl	8001d38 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e152      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d0f1      	beq.n	8002810 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800282c:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	22f8      	movs	r2, #248	; 0xf8
 8002832:	4393      	bics	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	00da      	lsls	r2, r3, #3
 800283c:	4b81      	ldr	r3, [pc, #516]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800283e:	430a      	orrs	r2, r1
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
 8002842:	e034      	b.n	80028ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	3305      	adds	r3, #5
 800284a:	d111      	bne.n	8002870 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800284c:	4b7d      	ldr	r3, [pc, #500]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800284e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002850:	4b7c      	ldr	r3, [pc, #496]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002852:	2104      	movs	r1, #4
 8002854:	438a      	bics	r2, r1
 8002856:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002858:	4b7a      	ldr	r3, [pc, #488]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	22f8      	movs	r2, #248	; 0xf8
 800285e:	4393      	bics	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	00da      	lsls	r2, r3, #3
 8002868:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
 800286e:	e01e      	b.n	80028ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002870:	4b74      	ldr	r3, [pc, #464]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002876:	2104      	movs	r1, #4
 8002878:	430a      	orrs	r2, r1
 800287a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800287c:	4b71      	ldr	r3, [pc, #452]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800287e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002880:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002882:	2101      	movs	r1, #1
 8002884:	438a      	bics	r2, r1
 8002886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7ff fa56 	bl	8001d38 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002892:	f7ff fa51 	bl	8001d38 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e111      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028a4:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d1f1      	bne.n	8002892 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2220      	movs	r2, #32
 80028b4:	4013      	ands	r3, r2
 80028b6:	d05c      	beq.n	8002972 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028b8:	4b62      	ldr	r3, [pc, #392]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	220c      	movs	r2, #12
 80028be:	4013      	ands	r3, r2
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d00e      	beq.n	80028e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028c4:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	220c      	movs	r2, #12
 80028ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d114      	bne.n	80028fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028d0:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	23c0      	movs	r3, #192	; 0xc0
 80028d6:	025b      	lsls	r3, r3, #9
 80028d8:	401a      	ands	r2, r3
 80028da:	23c0      	movs	r3, #192	; 0xc0
 80028dc:	025b      	lsls	r3, r3, #9
 80028de:	429a      	cmp	r2, r3
 80028e0:	d10b      	bne.n	80028fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028e2:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80028e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	025b      	lsls	r3, r3, #9
 80028ea:	4013      	ands	r3, r2
 80028ec:	d040      	beq.n	8002970 <HAL_RCC_OscConfig+0x5a8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d03c      	beq.n	8002970 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0e6      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01b      	beq.n	800293a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002902:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002906:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	0249      	lsls	r1, r1, #9
 800290c:	430a      	orrs	r2, r1
 800290e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7ff fa12 	bl	8001d38 <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291a:	f7ff fa0d 	bl	8001d38 <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0cd      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800292c:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800292e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	025b      	lsls	r3, r3, #9
 8002934:	4013      	ands	r3, r2
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x552>
 8002938:	e01b      	b.n	8002972 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800293a:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800293c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002940:	4943      	ldr	r1, [pc, #268]	; (8002a50 <HAL_RCC_OscConfig+0x688>)
 8002942:	400a      	ands	r2, r1
 8002944:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7ff f9f7 	bl	8001d38 <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002950:	f7ff f9f2 	bl	8001d38 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0b2      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	025b      	lsls	r3, r3, #9
 800296a:	4013      	ands	r3, r2
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x588>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002970:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d100      	bne.n	800297c <HAL_RCC_OscConfig+0x5b4>
 800297a:	e0a4      	b.n	8002ac6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	220c      	movs	r2, #12
 8002982:	4013      	ands	r3, r2
 8002984:	2b08      	cmp	r3, #8
 8002986:	d100      	bne.n	800298a <HAL_RCC_OscConfig+0x5c2>
 8002988:	e078      	b.n	8002a7c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b02      	cmp	r3, #2
 8002990:	d14c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002998:	492e      	ldr	r1, [pc, #184]	; (8002a54 <HAL_RCC_OscConfig+0x68c>)
 800299a:	400a      	ands	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff f9cb 	bl	8001d38 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f9c6 	bl	8001d38 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e086      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	049b      	lsls	r3, r3, #18
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	220f      	movs	r2, #15
 80029cc:	4393      	bics	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80029d6:	430a      	orrs	r2, r1
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_RCC_OscConfig+0x690>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	431a      	orrs	r2, r3
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0449      	lsls	r1, r1, #17
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7ff f999 	bl	8001d38 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7ff f994 	bl	8001d38 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e054      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	049b      	lsls	r3, r3, #18
 8002a26:	4013      	ands	r3, r2
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x644>
 8002a2a:	e04c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCC_OscConfig+0x67c>)
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <HAL_RCC_OscConfig+0x68c>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff f97e 	bl	8001d38 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x6a6>
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	40021000 	.word	0x40021000
 8002a48:	00001388 	.word	0x00001388
 8002a4c:	efffffff 	.word	0xefffffff
 8002a50:	fffeffff 	.word	0xfffeffff
 8002a54:	feffffff 	.word	0xfeffffff
 8002a58:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7ff f96c 	bl	8001d38 <HAL_GetTick>
 8002a60:	0002      	movs	r2, r0
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e02c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_RCC_OscConfig+0x708>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	049b      	lsls	r3, r3, #18
 8002a76:	4013      	ands	r3, r2
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x694>
 8002a7a:	e024      	b.n	8002ac6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e01f      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_OscConfig+0x708>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x708>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	23c0      	movs	r3, #192	; 0xc0
 8002a98:	025b      	lsls	r3, r3, #9
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	23f0      	movs	r3, #240	; 0xf0
 8002ab6:	039b      	lsls	r3, r3, #14
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b008      	add	sp, #32
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0bf      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d911      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4393      	bics	r3, r2
 8002afe:	0019      	movs	r1, r3
 8002b00:	4b5b      	ldr	r3, [pc, #364]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0a6      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	d015      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d006      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b2e:	4b51      	ldr	r3, [pc, #324]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002b34:	21e0      	movs	r1, #224	; 0xe0
 8002b36:	00c9      	lsls	r1, r1, #3
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	22f0      	movs	r2, #240	; 0xf0
 8002b42:	4393      	bics	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	d04c      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d120      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07a      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	049b      	lsls	r3, r3, #18
 8002b82:	4013      	ands	r3, r2
 8002b84:	d114      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06e      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	025b      	lsls	r3, r3, #9
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e062      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e05b      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb0:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4393      	bics	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc4:	f7ff f8b8 	bl	8001d38 <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bcc:	e009      	b.n	8002be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bce:	f7ff f8b3 	bl	8001d38 <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <HAL_RCC_ClockConfig+0x1a4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e042      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	220c      	movs	r2, #12
 8002be8:	401a      	ands	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d1ec      	bne.n	8002bce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d211      	bcs.n	8002c26 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4393      	bics	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x19c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e020      	b.n	8002c68 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_RCC_ClockConfig+0x1a8>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c44:	f000 f820 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c48:	0001      	movs	r1, r0
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1a0>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	220f      	movs	r2, #15
 8002c52:	4013      	ands	r3, r2
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x1ac>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	000a      	movs	r2, r1
 8002c5a:	40da      	lsrs	r2, r3
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7ff f823 	bl	8001cac <HAL_InitTick>
  
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b004      	add	sp, #16
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021000 	.word	0x40021000
 8002c78:	00001388 	.word	0x00001388
 8002c7c:	fffff8ff 	.word	0xfffff8ff
 8002c80:	08005c44 	.word	0x08005c44
 8002c84:	20000000 	.word	0x20000000

08002c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b08f      	sub	sp, #60	; 0x3c
 8002c8c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c8e:	2314      	movs	r3, #20
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	4a38      	ldr	r2, [pc, #224]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xec>)
 8002c94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c96:	c313      	stmia	r3!, {r0, r1, r4}
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	4a36      	ldr	r2, [pc, #216]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002ca0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ca2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	220c      	movs	r2, #12
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d047      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0xd4>
 8002ccc:	d849      	bhi.n	8002d62 <HAL_RCC_GetSysClockFreq+0xda>
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x50>
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x56>
 8002cd6:	e044      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cdc:	e044      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	0c9b      	lsrs	r3, r3, #18
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2214      	movs	r2, #20
 8002ce8:	18ba      	adds	r2, r7, r2
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	1d3a      	adds	r2, r7, #4
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfe:	23c0      	movs	r3, #192	; 0xc0
 8002d00:	025b      	lsls	r3, r3, #9
 8002d02:	401a      	ands	r2, r3
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	025b      	lsls	r3, r3, #9
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d109      	bne.n	8002d20 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d0e:	481c      	ldr	r0, [pc, #112]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d10:	f7fd fa04 	bl	800011c <__udivsi3>
 8002d14:	0003      	movs	r3, r0
 8002d16:	001a      	movs	r2, r3
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	4353      	muls	r3, r2
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1e:	e01a      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d22:	23c0      	movs	r3, #192	; 0xc0
 8002d24:	025b      	lsls	r3, r3, #9
 8002d26:	401a      	ands	r2, r3
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	025b      	lsls	r3, r3, #9
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d32:	4814      	ldr	r0, [pc, #80]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d34:	f7fd f9f2 	bl	800011c <__udivsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	4353      	muls	r3, r2
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d46:	480e      	ldr	r0, [pc, #56]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d48:	f7fd f9e8 	bl	800011c <__udivsi3>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	001a      	movs	r2, r3
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	4353      	muls	r3, r2
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d5a:	e005      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d60:	e002      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d66:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b00f      	add	sp, #60	; 0x3c
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	08005c04 	.word	0x08005c04
 8002d78:	08005c14 	.word	0x08005c14
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	007a1200 	.word	0x007a1200
 8002d84:	02dc6c00 	.word	0x02dc6c00

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	20000000 	.word	0x20000000

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002da0:	f7ff fff2 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da4:	0001      	movs	r1, r0
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	2207      	movs	r2, #7
 8002dae:	4013      	ands	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db2:	5cd3      	ldrb	r3, [r2, r3]
 8002db4:	40d9      	lsrs	r1, r3
 8002db6:	000b      	movs	r3, r1
}    
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08005c54 	.word	0x08005c54

08002dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	025b      	lsls	r3, r3, #9
 8002de0:	4013      	ands	r3, r2
 8002de2:	d100      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002de4:	e08e      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2017      	movs	r0, #23
 8002de8:	183b      	adds	r3, r7, r0
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	055b      	lsls	r3, r3, #21
 8002df6:	4013      	ands	r3, r2
 8002df8:	d110      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	4b64      	ldr	r3, [pc, #400]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	0549      	lsls	r1, r1, #21
 8002e04:	430a      	orrs	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
 8002e08:	4b60      	ldr	r3, [pc, #384]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	055b      	lsls	r3, r3, #21
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	183b      	adds	r3, r7, r0
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	4b5c      	ldr	r3, [pc, #368]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	d11a      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	0049      	lsls	r1, r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7fe ff7f 	bl	8001d38 <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	e008      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe ff7a 	bl	8001d38 <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e097      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b4f      	ldr	r3, [pc, #316]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5e:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	23c0      	movs	r3, #192	; 0xc0
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d034      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	23c0      	movs	r3, #192	; 0xc0
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d02c      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a43      	ldr	r2, [pc, #268]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e8a:	4b40      	ldr	r3, [pc, #256]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0249      	lsls	r1, r1, #9
 8002e94:	430a      	orrs	r2, r1
 8002e96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e98:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e9e:	493e      	ldr	r1, [pc, #248]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea4:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe ff41 	bl	8001d38 <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	e009      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe ff3c 	bl	8001d38 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	4a35      	ldr	r2, [pc, #212]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e058      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eda:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eee:	2317      	movs	r3, #23
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002efe:	4928      	ldr	r1, [pc, #160]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	2203      	movs	r2, #3
 8002f14:	4393      	bics	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2220      	movs	r2, #32
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	2210      	movs	r2, #16
 8002f32:	4393      	bics	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	029b      	lsls	r3, r3, #10
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	4393      	bics	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	4393      	bics	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b006      	add	sp, #24
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40007000 	.word	0x40007000
 8002f94:	fffffcff 	.word	0xfffffcff
 8002f98:	fffeffff 	.word	0xfffeffff
 8002f9c:	00001388 	.word	0x00001388
 8002fa0:	efffffff 	.word	0xefffffff

08002fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0a8      	b.n	8003108 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	2382      	movs	r3, #130	; 0x82
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d009      	beq.n	8002fde <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	61da      	str	r2, [r3, #28]
 8002fd0:	e005      	b.n	8002fde <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	225d      	movs	r2, #93	; 0x5d
 8002fe8:	5c9b      	ldrb	r3, [r3, r2]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	225c      	movs	r2, #92	; 0x5c
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f7fe fc6e 	bl	80018dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	225d      	movs	r2, #93	; 0x5d
 8003004:	2102      	movs	r1, #2
 8003006:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2140      	movs	r1, #64	; 0x40
 8003014:	438a      	bics	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	23e0      	movs	r3, #224	; 0xe0
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	429a      	cmp	r2, r3
 8003022:	d902      	bls.n	800302a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e002      	b.n	8003030 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	015b      	lsls	r3, r3, #5
 800302e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	23f0      	movs	r3, #240	; 0xf0
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	429a      	cmp	r2, r3
 800303a:	d008      	beq.n	800304e <HAL_SPI_Init+0xaa>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	23e0      	movs	r3, #224	; 0xe0
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	429a      	cmp	r2, r3
 8003046:	d002      	beq.n	800304e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	2382      	movs	r3, #130	; 0x82
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	401a      	ands	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	2384      	movs	r3, #132	; 0x84
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	400b      	ands	r3, r1
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2102      	movs	r1, #2
 800306a:	400b      	ands	r3, r1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2101      	movs	r1, #1
 8003074:	400b      	ands	r3, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6999      	ldr	r1, [r3, #24]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	400b      	ands	r3, r1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2138      	movs	r1, #56	; 0x38
 800308a:	400b      	ands	r3, r1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	400b      	ands	r3, r1
 8003096:	431a      	orrs	r2, r3
 8003098:	0011      	movs	r1, r2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	401a      	ands	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	2204      	movs	r2, #4
 80030b4:	401a      	ands	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2110      	movs	r1, #16
 80030bc:	400b      	ands	r3, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	2108      	movs	r1, #8
 80030c6:	400b      	ands	r3, r1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68d9      	ldr	r1, [r3, #12]
 80030ce:	23f0      	movs	r3, #240	; 0xf0
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	400b      	ands	r3, r1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	0011      	movs	r1, r2
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	401a      	ands	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4907      	ldr	r1, [pc, #28]	; (8003110 <HAL_SPI_Init+0x16c>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	225d      	movs	r2, #93	; 0x5d
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}
 8003110:	fffff7ff 	.word	0xfffff7ff

08003114 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	1dbb      	adds	r3, r7, #6
 8003122:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003124:	231f      	movs	r3, #31
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	225c      	movs	r2, #92	; 0x5c
 8003130:	5c9b      	ldrb	r3, [r3, r2]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_SPI_Transmit+0x26>
 8003136:	2302      	movs	r3, #2
 8003138:	e140      	b.n	80033bc <HAL_SPI_Transmit+0x2a8>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	225c      	movs	r2, #92	; 0x5c
 800313e:	2101      	movs	r1, #1
 8003140:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003142:	f7fe fdf9 	bl	8001d38 <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800314a:	2316      	movs	r3, #22
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	1dba      	adds	r2, r7, #6
 8003150:	8812      	ldrh	r2, [r2, #0]
 8003152:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	225d      	movs	r2, #93	; 0x5d
 8003158:	5c9b      	ldrb	r3, [r3, r2]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d004      	beq.n	800316a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003160:	231f      	movs	r3, #31
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]
    goto error;
 8003168:	e11d      	b.n	80033a6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_SPI_Transmit+0x64>
 8003170:	1dbb      	adds	r3, r7, #6
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003178:	231f      	movs	r3, #31
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003180:	e111      	b.n	80033a6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	225d      	movs	r2, #93	; 0x5d
 8003186:	2103      	movs	r1, #3
 8003188:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1dba      	adds	r2, r7, #6
 800319a:	8812      	ldrh	r2, [r2, #0]
 800319c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1dba      	adds	r2, r7, #6
 80031a2:	8812      	ldrh	r2, [r2, #0]
 80031a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2244      	movs	r2, #68	; 0x44
 80031b0:	2100      	movs	r1, #0
 80031b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2246      	movs	r2, #70	; 0x46
 80031b8:	2100      	movs	r1, #0
 80031ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d110      	bne.n	80031f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2140      	movs	r1, #64	; 0x40
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	01c9      	lsls	r1, r1, #7
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	4013      	ands	r3, r2
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d007      	beq.n	8003214 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	23e0      	movs	r3, #224	; 0xe0
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	429a      	cmp	r2, r3
 800321e:	d94e      	bls.n	80032be <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <HAL_SPI_Transmit+0x11e>
 8003228:	2316      	movs	r3, #22
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d13f      	bne.n	80032b2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003256:	e02c      	b.n	80032b2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2202      	movs	r2, #2
 8003260:	4013      	ands	r3, r2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d112      	bne.n	800328c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	881a      	ldrh	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	1c9a      	adds	r2, r3, #2
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	87da      	strh	r2, [r3, #62]	; 0x3e
 800328a:	e012      	b.n	80032b2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800328c:	f7fe fd54 	bl	8001d38 <HAL_GetTick>
 8003290:	0002      	movs	r2, r0
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d802      	bhi.n	80032a2 <HAL_SPI_Transmit+0x18e>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_Transmit+0x194>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80032a8:	231f      	movs	r3, #31
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2203      	movs	r2, #3
 80032ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80032b0:	e079      	b.n	80033a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1cd      	bne.n	8003258 <HAL_SPI_Transmit+0x144>
 80032bc:	e04f      	b.n	800335e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_SPI_Transmit+0x1bc>
 80032c6:	2316      	movs	r3, #22
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d141      	bne.n	8003354 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80032f6:	e02d      	b.n	8003354 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d113      	bne.n	800332e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800332c:	e012      	b.n	8003354 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800332e:	f7fe fd03 	bl	8001d38 <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d802      	bhi.n	8003344 <HAL_SPI_Transmit+0x230>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_SPI_Transmit+0x236>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800334a:	231f      	movs	r3, #31
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2203      	movs	r2, #3
 8003350:	701a      	strb	r2, [r3, #0]
          goto error;
 8003352:	e028      	b.n	80033a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1cc      	bne.n	80032f8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	6839      	ldr	r1, [r7, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f95d 	bl	8003624 <SPI_EndRxTxTransaction>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d002      	beq.n	8003374 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800339a:	231f      	movs	r3, #31
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e000      	b.n	80033a6 <HAL_SPI_Transmit+0x292>
  }

error:
 80033a4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	225d      	movs	r2, #93	; 0x5d
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	225c      	movs	r2, #92	; 0x5c
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80033b6:	231f      	movs	r3, #31
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	781b      	ldrb	r3, [r3, #0]
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b008      	add	sp, #32
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033d4:	f7fe fcb0 	bl	8001d38 <HAL_GetTick>
 80033d8:	0002      	movs	r2, r0
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033e4:	f7fe fca8 	bl	8001d38 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	015b      	lsls	r3, r3, #5
 80033f2:	0d1b      	lsrs	r3, r3, #20
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4353      	muls	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033fa:	e058      	b.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	d055      	beq.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003402:	f7fe fc99 	bl	8001d38 <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	429a      	cmp	r2, r3
 8003410:	d902      	bls.n	8003418 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d142      	bne.n	800349e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	21e0      	movs	r1, #224	; 0xe0
 8003424:	438a      	bics	r2, r1
 8003426:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	2382      	movs	r3, #130	; 0x82
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	429a      	cmp	r2, r3
 8003432:	d113      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	429a      	cmp	r2, r3
 800343e:	d005      	beq.n	800344c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	429a      	cmp	r2, r3
 800344a:	d107      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	438a      	bics	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	019b      	lsls	r3, r3, #6
 8003464:	429a      	cmp	r2, r3
 8003466:	d110      	bne.n	800348a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	491a      	ldr	r1, [pc, #104]	; (80034dc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003474:	400a      	ands	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2180      	movs	r1, #128	; 0x80
 8003484:	0189      	lsls	r1, r1, #6
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	225d      	movs	r2, #93	; 0x5d
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	225c      	movs	r2, #92	; 0x5c
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e017      	b.n	80034ce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	4013      	ands	r3, r2
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	425a      	negs	r2, r3
 80034be:	4153      	adcs	r3, r2
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	001a      	movs	r2, r3
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d197      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	0018      	movs	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b008      	add	sp, #32
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000000 	.word	0x20000000
 80034dc:	ffffdfff 	.word	0xffffdfff

080034e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034ee:	2317      	movs	r3, #23
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034f6:	f7fe fc1f 	bl	8001d38 <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	18d3      	adds	r3, r2, r3
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003506:	f7fe fc17 	bl	8001d38 <HAL_GetTick>
 800350a:	0003      	movs	r3, r0
 800350c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	0013      	movs	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	189b      	adds	r3, r3, r2
 8003520:	00da      	lsls	r2, r3, #3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	0d1b      	lsrs	r3, r3, #20
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	4353      	muls	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800352c:	e068      	b.n	8003600 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	23c0      	movs	r3, #192	; 0xc0
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	429a      	cmp	r2, r3
 8003536:	d10a      	bne.n	800354e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d107      	bne.n	800354e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	2117      	movs	r1, #23
 8003546:	187b      	adds	r3, r7, r1
 8003548:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800354a:	187b      	adds	r3, r7, r1
 800354c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	d055      	beq.n	8003600 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003554:	f7fe fbf0 	bl	8001d38 <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003560:	429a      	cmp	r2, r3
 8003562:	d902      	bls.n	800356a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d142      	bne.n	80035f0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	21e0      	movs	r1, #224	; 0xe0
 8003576:	438a      	bics	r2, r1
 8003578:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	2382      	movs	r3, #130	; 0x82
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	429a      	cmp	r2, r3
 8003584:	d113      	bne.n	80035ae <SPI_WaitFifoStateUntilTimeout+0xce>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	429a      	cmp	r2, r3
 8003590:	d005      	beq.n	800359e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	429a      	cmp	r2, r3
 800359c:	d107      	bne.n	80035ae <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2140      	movs	r1, #64	; 0x40
 80035aa:	438a      	bics	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d110      	bne.n	80035dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80035c6:	400a      	ands	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	0189      	lsls	r1, r1, #6
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	225d      	movs	r2, #93	; 0x5d
 80035e0:	2101      	movs	r1, #1
 80035e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	225c      	movs	r2, #92	; 0x5c
 80035e8:	2100      	movs	r1, #0
 80035ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e010      	b.n	8003612 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d18e      	bne.n	800352e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b00a      	add	sp, #40	; 0x28
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	20000000 	.word	0x20000000
 8003620:	ffffdfff 	.word	0xffffdfff

08003624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	23c0      	movs	r3, #192	; 0xc0
 8003634:	0159      	lsls	r1, r3, #5
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	0013      	movs	r3, r2
 800363e:	2200      	movs	r2, #0
 8003640:	f7ff ff4e 	bl	80034e0 <SPI_WaitFifoStateUntilTimeout>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d007      	beq.n	8003658 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	2220      	movs	r2, #32
 800364e:	431a      	orrs	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e027      	b.n	80036a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	0013      	movs	r3, r2
 8003662:	2200      	movs	r2, #0
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	f7ff fead 	bl	80033c4 <SPI_WaitFlagStateUntilTimeout>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d007      	beq.n	800367e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	2220      	movs	r2, #32
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e014      	b.n	80036a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	23c0      	movs	r3, #192	; 0xc0
 8003682:	00d9      	lsls	r1, r3, #3
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0013      	movs	r3, r2
 800368c:	2200      	movs	r2, #0
 800368e:	f7ff ff27 	bl	80034e0 <SPI_WaitFifoStateUntilTimeout>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d007      	beq.n	80036a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	2220      	movs	r2, #32
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e000      	b.n	80036a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b004      	add	sp, #16
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e044      	b.n	800374c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2274      	movs	r2, #116	; 0x74
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7fe f94d 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	438a      	bics	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 fb86 	bl	8003e04 <UART_SetConfig>
 80036f8:	0003      	movs	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e024      	b.n	800374c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 fcb9 	bl	8004084 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	490d      	ldr	r1, [pc, #52]	; (8003754 <HAL_UART_Init+0xa4>)
 800371e:	400a      	ands	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	212a      	movs	r1, #42	; 0x2a
 800372e:	438a      	bics	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 fd51 	bl	80041ec <UART_CheckIdleState>
 800374a:	0003      	movs	r3, r0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}
 8003754:	ffffb7ff 	.word	0xffffb7ff

08003758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	1dbb      	adds	r3, r7, #6
 8003764:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376a:	2b20      	cmp	r3, #32
 800376c:	d150      	bne.n	8003810 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_UART_Receive_IT+0x24>
 8003774:	1dbb      	adds	r3, r7, #6
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e048      	b.n	8003812 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	015b      	lsls	r3, r3, #5
 8003788:	429a      	cmp	r2, r3
 800378a:	d109      	bne.n	80037a0 <HAL_UART_Receive_IT+0x48>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d001      	beq.n	80037a0 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e038      	b.n	8003812 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2274      	movs	r2, #116	; 0x74
 80037a4:	5c9b      	ldrb	r3, [r3, r2]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Receive_IT+0x56>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e031      	b.n	8003812 <HAL_UART_Receive_IT+0xba>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2274      	movs	r2, #116	; 0x74
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	4013      	ands	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ca:	f3ef 8310 	mrs	r3, PRIMASK
 80037ce:	613b      	str	r3, [r7, #16]
  return(result);
 80037d0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f383 8810 	msr	PRIMASK, r3
}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	04c9      	lsls	r1, r1, #19
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037fe:	1dbb      	adds	r3, r7, #6
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 fdfc 	bl	8004404 <UART_Start_Receive_IT>
 800380c:	0003      	movs	r3, r0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b008      	add	sp, #32
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b0ab      	sub	sp, #172	; 0xac
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	22a4      	movs	r2, #164	; 0xa4
 800382c:	18b9      	adds	r1, r7, r2
 800382e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	20a0      	movs	r0, #160	; 0xa0
 8003838:	1839      	adds	r1, r7, r0
 800383a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	219c      	movs	r1, #156	; 0x9c
 8003844:	1879      	adds	r1, r7, r1
 8003846:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003848:	0011      	movs	r1, r2
 800384a:	18bb      	adds	r3, r7, r2
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a99      	ldr	r2, [pc, #612]	; (8003ab4 <HAL_UART_IRQHandler+0x298>)
 8003850:	4013      	ands	r3, r2
 8003852:	2298      	movs	r2, #152	; 0x98
 8003854:	18bc      	adds	r4, r7, r2
 8003856:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003858:	18bb      	adds	r3, r7, r2
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d114      	bne.n	800388a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003860:	187b      	adds	r3, r7, r1
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2220      	movs	r2, #32
 8003866:	4013      	ands	r3, r2
 8003868:	d00f      	beq.n	800388a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800386a:	183b      	adds	r3, r7, r0
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2220      	movs	r2, #32
 8003870:	4013      	ands	r3, r2
 8003872:	d00a      	beq.n	800388a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d100      	bne.n	800387e <HAL_UART_IRQHandler+0x62>
 800387c:	e296      	b.n	8003dac <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	0010      	movs	r0, r2
 8003886:	4798      	blx	r3
      }
      return;
 8003888:	e290      	b.n	8003dac <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800388a:	2398      	movs	r3, #152	; 0x98
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d100      	bne.n	8003896 <HAL_UART_IRQHandler+0x7a>
 8003894:	e114      	b.n	8003ac0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003896:	239c      	movs	r3, #156	; 0x9c
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	4013      	ands	r3, r2
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038a2:	23a0      	movs	r3, #160	; 0xa0
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a83      	ldr	r2, [pc, #524]	; (8003ab8 <HAL_UART_IRQHandler+0x29c>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	d100      	bne.n	80038b0 <HAL_UART_IRQHandler+0x94>
 80038ae:	e107      	b.n	8003ac0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038b0:	23a4      	movs	r3, #164	; 0xa4
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2201      	movs	r2, #1
 80038b8:	4013      	ands	r3, r2
 80038ba:	d012      	beq.n	80038e2 <HAL_UART_IRQHandler+0xc6>
 80038bc:	23a0      	movs	r3, #160	; 0xa0
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2201      	movs	r2, #1
 80038d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	589b      	ldr	r3, [r3, r2]
 80038d8:	2201      	movs	r2, #1
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038e2:	23a4      	movs	r3, #164	; 0xa4
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2202      	movs	r2, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d011      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
 80038ee:	239c      	movs	r3, #156	; 0x9c
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00b      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2202      	movs	r2, #2
 8003900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	589b      	ldr	r3, [r3, r2]
 8003908:	2204      	movs	r2, #4
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003912:	23a4      	movs	r3, #164	; 0xa4
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2204      	movs	r2, #4
 800391a:	4013      	ands	r3, r2
 800391c:	d011      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
 800391e:	239c      	movs	r3, #156	; 0x9c
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	d00b      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2204      	movs	r2, #4
 8003930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2280      	movs	r2, #128	; 0x80
 8003936:	589b      	ldr	r3, [r3, r2]
 8003938:	2202      	movs	r2, #2
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003942:	23a4      	movs	r3, #164	; 0xa4
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2208      	movs	r2, #8
 800394a:	4013      	ands	r3, r2
 800394c:	d017      	beq.n	800397e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800394e:	23a0      	movs	r3, #160	; 0xa0
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2220      	movs	r2, #32
 8003956:	4013      	ands	r3, r2
 8003958:	d105      	bne.n	8003966 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800395a:	239c      	movs	r3, #156	; 0x9c
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003964:	d00b      	beq.n	800397e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2208      	movs	r2, #8
 800396c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2280      	movs	r2, #128	; 0x80
 8003972:	589b      	ldr	r3, [r3, r2]
 8003974:	2208      	movs	r2, #8
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800397e:	23a4      	movs	r3, #164	; 0xa4
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4013      	ands	r3, r2
 800398a:	d013      	beq.n	80039b4 <HAL_UART_IRQHandler+0x198>
 800398c:	23a0      	movs	r3, #160	; 0xa0
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	04db      	lsls	r3, r3, #19
 8003996:	4013      	ands	r3, r2
 8003998:	d00c      	beq.n	80039b4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	589b      	ldr	r3, [r3, r2]
 80039aa:	2220      	movs	r2, #32
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	589b      	ldr	r3, [r3, r2]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d100      	bne.n	80039c0 <HAL_UART_IRQHandler+0x1a4>
 80039be:	e1f7      	b.n	8003db0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039c0:	23a4      	movs	r3, #164	; 0xa4
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2220      	movs	r2, #32
 80039c8:	4013      	ands	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039cc:	23a0      	movs	r3, #160	; 0xa0
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2220      	movs	r2, #32
 80039d4:	4013      	ands	r3, r2
 80039d6:	d008      	beq.n	80039ea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	0010      	movs	r0, r2
 80039e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	589b      	ldr	r3, [r3, r2]
 80039f0:	2194      	movs	r1, #148	; 0x94
 80039f2:	187a      	adds	r2, r7, r1
 80039f4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2240      	movs	r2, #64	; 0x40
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d004      	beq.n	8003a0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2228      	movs	r2, #40	; 0x28
 8003a0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a0c:	d047      	beq.n	8003a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fda7 	bl	8004564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d137      	bne.n	8003a94 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a24:	f3ef 8310 	mrs	r3, PRIMASK
 8003a28:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2c:	2090      	movs	r0, #144	; 0x90
 8003a2e:	183a      	adds	r2, r7, r0
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	2301      	movs	r3, #1
 8003a34:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	183b      	adds	r3, r7, r0
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a56:	f383 8810 	msr	PRIMASK, r3
}
 8003a5a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_UART_IRQHandler+0x2a0>)
 8003a6a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7fe faa5 	bl	8001fc0 <HAL_DMA_Abort_IT>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d01a      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	0018      	movs	r0, r3
 8003a86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e012      	b.n	8003ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 f9a5 	bl	8003ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a92:	e00d      	b.n	8003ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f9a0 	bl	8003ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e008      	b.n	8003ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 f99b 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003aae:	e17f      	b.n	8003db0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	46c0      	nop			; (mov r8, r8)
    return;
 8003ab2:	e17d      	b.n	8003db0 <HAL_UART_IRQHandler+0x594>
 8003ab4:	0000080f 	.word	0x0000080f
 8003ab8:	04000120 	.word	0x04000120
 8003abc:	08004629 	.word	0x08004629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d000      	beq.n	8003aca <HAL_UART_IRQHandler+0x2ae>
 8003ac8:	e131      	b.n	8003d2e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aca:	23a4      	movs	r3, #164	; 0xa4
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d100      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x2bc>
 8003ad6:	e12a      	b.n	8003d2e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ad8:	23a0      	movs	r3, #160	; 0xa0
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x2ca>
 8003ae4:	e123      	b.n	8003d2e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2210      	movs	r2, #16
 8003aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2240      	movs	r2, #64	; 0x40
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d000      	beq.n	8003afe <HAL_UART_IRQHandler+0x2e2>
 8003afc:	e09b      	b.n	8003c36 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	217e      	movs	r1, #126	; 0x7e
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d100      	bne.n	8003b16 <HAL_UART_IRQHandler+0x2fa>
 8003b14:	e14e      	b.n	8003db4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2258      	movs	r2, #88	; 0x58
 8003b1a:	5a9b      	ldrh	r3, [r3, r2]
 8003b1c:	187a      	adds	r2, r7, r1
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d300      	bcc.n	8003b26 <HAL_UART_IRQHandler+0x30a>
 8003b24:	e146      	b.n	8003db4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	187a      	adds	r2, r7, r1
 8003b2a:	215a      	movs	r1, #90	; 0x5a
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d06e      	beq.n	8003c18 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b42:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b44:	2301      	movs	r3, #1
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	499a      	ldr	r1, [pc, #616]	; (8003dc4 <HAL_UART_IRQHandler+0x5a8>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	677b      	str	r3, [r7, #116]	; 0x74
 8003b76:	2301      	movs	r3, #1
 8003b78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7c:	f383 8810 	msr	PRIMASK, r3
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	438a      	bics	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ba8:	2301      	movs	r3, #1
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	f383 8810 	msr	PRIMASK, r3
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	438a      	bics	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bca:	f383 8810 	msr	PRIMASK, r3
}
 8003bce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003be0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be6:	2301      	movs	r3, #1
 8003be8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	438a      	bics	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fe f99c 	bl	8001f50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2258      	movs	r2, #88	; 0x58
 8003c1c:	5a9a      	ldrh	r2, [r3, r2]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	215a      	movs	r1, #90	; 0x5a
 8003c22:	5a5b      	ldrh	r3, [r3, r1]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0011      	movs	r1, r2
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 f8dc 	bl	8003dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c34:	e0be      	b.n	8003db4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2258      	movs	r2, #88	; 0x58
 8003c3a:	5a99      	ldrh	r1, [r3, r2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	225a      	movs	r2, #90	; 0x5a
 8003c40:	5a9b      	ldrh	r3, [r3, r2]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	208e      	movs	r0, #142	; 0x8e
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	1a8a      	subs	r2, r1, r2
 8003c4a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	225a      	movs	r2, #90	; 0x5a
 8003c50:	5a9b      	ldrh	r3, [r3, r2]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d100      	bne.n	8003c5a <HAL_UART_IRQHandler+0x43e>
 8003c58:	e0ae      	b.n	8003db8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d100      	bne.n	8003c64 <HAL_UART_IRQHandler+0x448>
 8003c62:	e0a9      	b.n	8003db8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c64:	f3ef 8310 	mrs	r3, PRIMASK
 8003c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6c:	2488      	movs	r4, #136	; 0x88
 8003c6e:	193a      	adds	r2, r7, r4
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	2301      	movs	r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	494f      	ldr	r1, [pc, #316]	; (8003dc8 <HAL_UART_IRQHandler+0x5ac>)
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	193b      	adds	r3, r7, r4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ca2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	2484      	movs	r4, #132	; 0x84
 8003ca6:	193a      	adds	r2, r7, r4
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	2301      	movs	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f383 8810 	msr	PRIMASK, r3
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	438a      	bics	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f383 8810 	msr	PRIMASK, r3
}
 8003cd2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	2480      	movs	r4, #128	; 0x80
 8003cf0:	193a      	adds	r2, r7, r4
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	f383 8810 	msr	PRIMASK, r3
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2110      	movs	r1, #16
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	193b      	adds	r3, r7, r4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d1e:	183b      	adds	r3, r7, r0
 8003d20:	881a      	ldrh	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 f860 	bl	8003dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d2c:	e044      	b.n	8003db8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d2e:	23a4      	movs	r3, #164	; 0xa4
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	035b      	lsls	r3, r3, #13
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d010      	beq.n	8003d5e <HAL_UART_IRQHandler+0x542>
 8003d3c:	239c      	movs	r3, #156	; 0x9c
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	03db      	lsls	r3, r3, #15
 8003d46:	4013      	ands	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	0352      	lsls	r2, r2, #13
 8003d52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 fe10 	bl	800497c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d5c:	e02f      	b.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d5e:	23a4      	movs	r3, #164	; 0xa4
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	4013      	ands	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d6a:	23a0      	movs	r3, #160	; 0xa0
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	4013      	ands	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01e      	beq.n	8003dbc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	0010      	movs	r0, r2
 8003d86:	4798      	blx	r3
    }
    return;
 8003d88:	e018      	b.n	8003dbc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d8a:	23a4      	movs	r3, #164	; 0xa4
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2240      	movs	r2, #64	; 0x40
 8003d92:	4013      	ands	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
 8003d96:	23a0      	movs	r3, #160	; 0xa0
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2240      	movs	r2, #64	; 0x40
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d00d      	beq.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fc56 	bl	8004656 <UART_EndTransmit_IT>
    return;
 8003daa:	e008      	b.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
      return;
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	e006      	b.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
    return;
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	e004      	b.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
      return;
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	e002      	b.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
      return;
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	e000      	b.n	8003dbe <HAL_UART_IRQHandler+0x5a2>
    return;
 8003dbc:	46c0      	nop			; (mov r8, r8)
  }

}
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b02b      	add	sp, #172	; 0xac
 8003dc2:	bd90      	pop	{r4, r7, pc}
 8003dc4:	fffffeff 	.word	0xfffffeff
 8003dc8:	fffffedf 	.word	0xfffffedf

08003dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	000a      	movs	r2, r1
 8003df6:	1cbb      	adds	r3, r7, #2
 8003df8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e0c:	231e      	movs	r3, #30
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a8d      	ldr	r2, [pc, #564]	; (8004068 <UART_SetConfig+0x264>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a88      	ldr	r2, [pc, #544]	; (800406c <UART_SetConfig+0x268>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a7f      	ldr	r2, [pc, #508]	; (8004070 <UART_SetConfig+0x26c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a7b      	ldr	r2, [pc, #492]	; (8004074 <UART_SetConfig+0x270>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d127      	bne.n	8003eda <UART_SetConfig+0xd6>
 8003e8a:	4b7b      	ldr	r3, [pc, #492]	; (8004078 <UART_SetConfig+0x274>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	2203      	movs	r2, #3
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d00d      	beq.n	8003eb2 <UART_SetConfig+0xae>
 8003e96:	d81b      	bhi.n	8003ed0 <UART_SetConfig+0xcc>
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d014      	beq.n	8003ec6 <UART_SetConfig+0xc2>
 8003e9c:	d818      	bhi.n	8003ed0 <UART_SetConfig+0xcc>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <UART_SetConfig+0xa4>
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d00a      	beq.n	8003ebc <UART_SetConfig+0xb8>
 8003ea6:	e013      	b.n	8003ed0 <UART_SetConfig+0xcc>
 8003ea8:	231f      	movs	r3, #31
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e021      	b.n	8003ef6 <UART_SetConfig+0xf2>
 8003eb2:	231f      	movs	r3, #31
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e01c      	b.n	8003ef6 <UART_SetConfig+0xf2>
 8003ebc:	231f      	movs	r3, #31
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e017      	b.n	8003ef6 <UART_SetConfig+0xf2>
 8003ec6:	231f      	movs	r3, #31
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2208      	movs	r2, #8
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e012      	b.n	8003ef6 <UART_SetConfig+0xf2>
 8003ed0:	231f      	movs	r3, #31
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e00d      	b.n	8003ef6 <UART_SetConfig+0xf2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a67      	ldr	r2, [pc, #412]	; (800407c <UART_SetConfig+0x278>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d104      	bne.n	8003eee <UART_SetConfig+0xea>
 8003ee4:	231f      	movs	r3, #31
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e003      	b.n	8003ef6 <UART_SetConfig+0xf2>
 8003eee:	231f      	movs	r3, #31
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d15d      	bne.n	8003fbe <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003f02:	231f      	movs	r3, #31
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d015      	beq.n	8003f38 <UART_SetConfig+0x134>
 8003f0c:	dc18      	bgt.n	8003f40 <UART_SetConfig+0x13c>
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00d      	beq.n	8003f2e <UART_SetConfig+0x12a>
 8003f12:	dc15      	bgt.n	8003f40 <UART_SetConfig+0x13c>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <UART_SetConfig+0x11a>
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d005      	beq.n	8003f28 <UART_SetConfig+0x124>
 8003f1c:	e010      	b.n	8003f40 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1e:	f7fe ff3d 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8003f22:	0003      	movs	r3, r0
 8003f24:	61bb      	str	r3, [r7, #24]
        break;
 8003f26:	e012      	b.n	8003f4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b55      	ldr	r3, [pc, #340]	; (8004080 <UART_SetConfig+0x27c>)
 8003f2a:	61bb      	str	r3, [r7, #24]
        break;
 8003f2c:	e00f      	b.n	8003f4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe feab 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8003f32:	0003      	movs	r3, r0
 8003f34:	61bb      	str	r3, [r7, #24]
        break;
 8003f36:	e00a      	b.n	8003f4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	61bb      	str	r3, [r7, #24]
        break;
 8003f3e:	e006      	b.n	8003f4e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f44:	231e      	movs	r3, #30
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
        break;
 8003f4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d100      	bne.n	8003f56 <UART_SetConfig+0x152>
 8003f54:	e07b      	b.n	800404e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	005a      	lsls	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	18d2      	adds	r2, r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0019      	movs	r1, r3
 8003f68:	0010      	movs	r0, r2
 8003f6a:	f7fc f8d7 	bl	800011c <__udivsi3>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	d91c      	bls.n	8003fb4 <UART_SetConfig+0x1b0>
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	025b      	lsls	r3, r3, #9
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d217      	bcs.n	8003fb4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	200e      	movs	r0, #14
 8003f8a:	183b      	adds	r3, r7, r0
 8003f8c:	210f      	movs	r1, #15
 8003f8e:	438a      	bics	r2, r1
 8003f90:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2207      	movs	r2, #7
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	b299      	uxth	r1, r3
 8003f9e:	183b      	adds	r3, r7, r0
 8003fa0:	183a      	adds	r2, r7, r0
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	183a      	adds	r2, r7, r0
 8003fae:	8812      	ldrh	r2, [r2, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	e04c      	b.n	800404e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb4:	231e      	movs	r3, #30
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e047      	b.n	800404e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fbe:	231f      	movs	r3, #31
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d015      	beq.n	8003ff4 <UART_SetConfig+0x1f0>
 8003fc8:	dc18      	bgt.n	8003ffc <UART_SetConfig+0x1f8>
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d00d      	beq.n	8003fea <UART_SetConfig+0x1e6>
 8003fce:	dc15      	bgt.n	8003ffc <UART_SetConfig+0x1f8>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <UART_SetConfig+0x1d6>
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d005      	beq.n	8003fe4 <UART_SetConfig+0x1e0>
 8003fd8:	e010      	b.n	8003ffc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fda:	f7fe fedf 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	61bb      	str	r3, [r7, #24]
        break;
 8003fe2:	e012      	b.n	800400a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b26      	ldr	r3, [pc, #152]	; (8004080 <UART_SetConfig+0x27c>)
 8003fe6:	61bb      	str	r3, [r7, #24]
        break;
 8003fe8:	e00f      	b.n	800400a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe fe4d 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	61bb      	str	r3, [r7, #24]
        break;
 8003ff2:	e00a      	b.n	800400a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	61bb      	str	r3, [r7, #24]
        break;
 8003ffa:	e006      	b.n	800400a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004000:	231e      	movs	r3, #30
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
        break;
 8004008:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01e      	beq.n	800404e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	085a      	lsrs	r2, r3, #1
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	18d2      	adds	r2, r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	0019      	movs	r1, r3
 8004020:	0010      	movs	r0, r2
 8004022:	f7fc f87b 	bl	800011c <__udivsi3>
 8004026:	0003      	movs	r3, r0
 8004028:	b29b      	uxth	r3, r3
 800402a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d909      	bls.n	8004046 <UART_SetConfig+0x242>
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	025b      	lsls	r3, r3, #9
 8004038:	429a      	cmp	r2, r3
 800403a:	d204      	bcs.n	8004046 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	e003      	b.n	800404e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004046:	231e      	movs	r3, #30
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800405a:	231e      	movs	r3, #30
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	781b      	ldrb	r3, [r3, #0]
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b008      	add	sp, #32
 8004066:	bd80      	pop	{r7, pc}
 8004068:	efff69f3 	.word	0xefff69f3
 800406c:	ffffcfff 	.word	0xffffcfff
 8004070:	fffff4ff 	.word	0xfffff4ff
 8004074:	40013800 	.word	0x40013800
 8004078:	40021000 	.word	0x40021000
 800407c:	40004400 	.word	0x40004400
 8004080:	007a1200 	.word	0x007a1200

08004084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2201      	movs	r2, #1
 8004092:	4013      	ands	r3, r2
 8004094:	d00b      	beq.n	80040ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a4a      	ldr	r2, [pc, #296]	; (80041c8 <UART_AdvFeatureConfig+0x144>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4a43      	ldr	r2, [pc, #268]	; (80041cc <UART_AdvFeatureConfig+0x148>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	0019      	movs	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2204      	movs	r2, #4
 80040d6:	4013      	ands	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a3b      	ldr	r2, [pc, #236]	; (80041d0 <UART_AdvFeatureConfig+0x14c>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2208      	movs	r2, #8
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00b      	beq.n	8004114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <UART_AdvFeatureConfig+0x150>)
 8004104:	4013      	ands	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2210      	movs	r2, #16
 800411a:	4013      	ands	r3, r2
 800411c:	d00b      	beq.n	8004136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a2c      	ldr	r2, [pc, #176]	; (80041d8 <UART_AdvFeatureConfig+0x154>)
 8004126:	4013      	ands	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2220      	movs	r2, #32
 800413c:	4013      	ands	r3, r2
 800413e:	d00b      	beq.n	8004158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	4a25      	ldr	r2, [pc, #148]	; (80041dc <UART_AdvFeatureConfig+0x158>)
 8004148:	4013      	ands	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2240      	movs	r2, #64	; 0x40
 800415e:	4013      	ands	r3, r2
 8004160:	d01d      	beq.n	800419e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <UART_AdvFeatureConfig+0x15c>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	035b      	lsls	r3, r3, #13
 8004182:	429a      	cmp	r2, r3
 8004184:	d10b      	bne.n	800419e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <UART_AdvFeatureConfig+0x160>)
 800418e:	4013      	ands	r3, r2
 8004190:	0019      	movs	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	4013      	ands	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <UART_AdvFeatureConfig+0x164>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	0019      	movs	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	fffdffff 	.word	0xfffdffff
 80041cc:	fffeffff 	.word	0xfffeffff
 80041d0:	fffbffff 	.word	0xfffbffff
 80041d4:	ffff7fff 	.word	0xffff7fff
 80041d8:	ffffefff 	.word	0xffffefff
 80041dc:	ffffdfff 	.word	0xffffdfff
 80041e0:	ffefffff 	.word	0xffefffff
 80041e4:	ff9fffff 	.word	0xff9fffff
 80041e8:	fff7ffff 	.word	0xfff7ffff

080041ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	2100      	movs	r1, #0
 80041fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041fc:	f7fd fd9c 	bl	8001d38 <HAL_GetTick>
 8004200:	0003      	movs	r3, r0
 8004202:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2208      	movs	r2, #8
 800420c:	4013      	ands	r3, r2
 800420e:	2b08      	cmp	r3, #8
 8004210:	d10c      	bne.n	800422c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2280      	movs	r2, #128	; 0x80
 8004216:	0391      	lsls	r1, r2, #14
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <UART_CheckIdleState+0x8c>)
 800421c:	9200      	str	r2, [sp, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	f000 f82c 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d001      	beq.n	800422c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e021      	b.n	8004270 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2204      	movs	r2, #4
 8004234:	4013      	ands	r3, r2
 8004236:	2b04      	cmp	r3, #4
 8004238:	d10c      	bne.n	8004254 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	03d1      	lsls	r1, r2, #15
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <UART_CheckIdleState+0x8c>)
 8004244:	9200      	str	r2, [sp, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	f000 f818 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 800424c:	1e03      	subs	r3, r0, #0
 800424e:	d001      	beq.n	8004254 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e00d      	b.n	8004270 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2274      	movs	r2, #116	; 0x74
 800426a:	2100      	movs	r1, #0
 800426c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b004      	add	sp, #16
 8004276:	bd80      	pop	{r7, pc}
 8004278:	01ffffff 	.word	0x01ffffff

0800427c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b094      	sub	sp, #80	; 0x50
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428c:	e0a3      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004290:	3301      	adds	r3, #1
 8004292:	d100      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004294:	e09f      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fd fd4f 	bl	8001d38 <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <UART_WaitOnFlagUntilTimeout+0x30>
 80042a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d13d      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ac:	f3ef 8310 	mrs	r3, PRIMASK
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
 80042b6:	2301      	movs	r3, #1
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	494c      	ldr	r1, [pc, #304]	; (8004400 <UART_WaitOnFlagUntilTimeout+0x184>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	f383 8810 	msr	PRIMASK, r3
}
 80042dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042de:	f3ef 8310 	mrs	r3, PRIMASK
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40
 80042e8:	2301      	movs	r3, #1
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	f383 8810 	msr	PRIMASK, r3
}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2101      	movs	r1, #1
 8004300:	438a      	bics	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2274      	movs	r2, #116	; 0x74
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e067      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2204      	movs	r2, #4
 8004330:	4013      	ands	r3, r2
 8004332:	d050      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	401a      	ands	r2, r3
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	429a      	cmp	r2, r3
 8004346:	d146      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2280      	movs	r2, #128	; 0x80
 800434e:	0112      	lsls	r2, r2, #4
 8004350:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	613b      	str	r3, [r7, #16]
  return(result);
 8004358:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4923      	ldr	r1, [pc, #140]	; (8004400 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004384:	f3ef 8310 	mrs	r3, PRIMASK
 8004388:	61fb      	str	r3, [r7, #28]
  return(result);
 800438a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
 800438e:	2301      	movs	r3, #1
 8004390:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f383 8810 	msr	PRIMASK, r3
}
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	438a      	bics	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2280      	movs	r2, #128	; 0x80
 80043c6:	2120      	movs	r1, #32
 80043c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2274      	movs	r2, #116	; 0x74
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e010      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	425a      	negs	r2, r3
 80043e6:	4153      	adcs	r3, r2
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	001a      	movs	r2, r3
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d100      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80043f4:	e74b      	b.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b014      	add	sp, #80	; 0x50
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	fffffe5f 	.word	0xfffffe5f

08004404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	; 0x30
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	1dbb      	adds	r3, r7, #6
 8004410:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1dba      	adds	r2, r7, #6
 800441c:	2158      	movs	r1, #88	; 0x58
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1dba      	adds	r2, r7, #6
 8004426:	215a      	movs	r1, #90	; 0x5a
 8004428:	8812      	ldrh	r2, [r2, #0]
 800442a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	015b      	lsls	r3, r3, #5
 800443a:	429a      	cmp	r2, r3
 800443c:	d10d      	bne.n	800445a <UART_Start_Receive_IT+0x56>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <UART_Start_Receive_IT+0x4c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	225c      	movs	r2, #92	; 0x5c
 800444a:	4943      	ldr	r1, [pc, #268]	; (8004558 <UART_Start_Receive_IT+0x154>)
 800444c:	5299      	strh	r1, [r3, r2]
 800444e:	e02e      	b.n	80044ae <UART_Start_Receive_IT+0xaa>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	225c      	movs	r2, #92	; 0x5c
 8004454:	21ff      	movs	r1, #255	; 0xff
 8004456:	5299      	strh	r1, [r3, r2]
 8004458:	e029      	b.n	80044ae <UART_Start_Receive_IT+0xaa>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <UART_Start_Receive_IT+0x7a>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <UART_Start_Receive_IT+0x70>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	225c      	movs	r2, #92	; 0x5c
 800446e:	21ff      	movs	r1, #255	; 0xff
 8004470:	5299      	strh	r1, [r3, r2]
 8004472:	e01c      	b.n	80044ae <UART_Start_Receive_IT+0xaa>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	225c      	movs	r2, #92	; 0x5c
 8004478:	217f      	movs	r1, #127	; 0x7f
 800447a:	5299      	strh	r1, [r3, r2]
 800447c:	e017      	b.n	80044ae <UART_Start_Receive_IT+0xaa>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	055b      	lsls	r3, r3, #21
 8004486:	429a      	cmp	r2, r3
 8004488:	d10d      	bne.n	80044a6 <UART_Start_Receive_IT+0xa2>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <UART_Start_Receive_IT+0x98>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	225c      	movs	r2, #92	; 0x5c
 8004496:	217f      	movs	r1, #127	; 0x7f
 8004498:	5299      	strh	r1, [r3, r2]
 800449a:	e008      	b.n	80044ae <UART_Start_Receive_IT+0xaa>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	225c      	movs	r2, #92	; 0x5c
 80044a0:	213f      	movs	r1, #63	; 0x3f
 80044a2:	5299      	strh	r1, [r3, r2]
 80044a4:	e003      	b.n	80044ae <UART_Start_Receive_IT+0xaa>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	225c      	movs	r2, #92	; 0x5c
 80044aa:	2100      	movs	r1, #0
 80044ac:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2280      	movs	r2, #128	; 0x80
 80044b2:	2100      	movs	r1, #0
 80044b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2222      	movs	r2, #34	; 0x22
 80044ba:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044bc:	f3ef 8310 	mrs	r3, PRIMASK
 80044c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80044c2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c6:	2301      	movs	r3, #1
 80044c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	015b      	lsls	r3, r3, #5
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d107      	bne.n	800450a <UART_Start_Receive_IT+0x106>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <UART_Start_Receive_IT+0x158>)
 8004506:	665a      	str	r2, [r3, #100]	; 0x64
 8004508:	e002      	b.n	8004510 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <UART_Start_Receive_IT+0x15c>)
 800450e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2274      	movs	r2, #116	; 0x74
 8004514:	2100      	movs	r1, #0
 8004516:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004518:	f3ef 8310 	mrs	r3, PRIMASK
 800451c:	613b      	str	r3, [r7, #16]
  return(result);
 800451e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f383 8810 	msr	PRIMASK, r3
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2190      	movs	r1, #144	; 0x90
 800453a:	0049      	lsls	r1, r1, #1
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b00c      	add	sp, #48	; 0x30
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	000001ff 	.word	0x000001ff
 800455c:	08004815 	.word	0x08004815
 8004560:	080046ad 	.word	0x080046ad

08004564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08e      	sub	sp, #56	; 0x38
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456c:	f3ef 8310 	mrs	r3, PRIMASK
 8004570:	617b      	str	r3, [r7, #20]
  return(result);
 8004572:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	2301      	movs	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f383 8810 	msr	PRIMASK, r3
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4925      	ldr	r1, [pc, #148]	; (8004624 <UART_EndRxTransfer+0xc0>)
 800458e:	400a      	ands	r2, r1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459e:	f3ef 8310 	mrs	r3, PRIMASK
 80045a2:	623b      	str	r3, [r7, #32]
  return(result);
 80045a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
 80045a8:	2301      	movs	r3, #1
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f383 8810 	msr	PRIMASK, r3
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2101      	movs	r1, #1
 80045c0:	438a      	bics	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d118      	bne.n	800460a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d8:	f3ef 8310 	mrs	r3, PRIMASK
 80045dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80045de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e2:	2301      	movs	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2110      	movs	r1, #16
 80045fa:	438a      	bics	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f383 8810 	msr	PRIMASK, r3
}
 8004608:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b00e      	add	sp, #56	; 0x38
 8004622:	bd80      	pop	{r7, pc}
 8004624:	fffffedf 	.word	0xfffffedf

08004628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	225a      	movs	r2, #90	; 0x5a
 800463a:	2100      	movs	r1, #0
 800463c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2252      	movs	r2, #82	; 0x52
 8004642:	2100      	movs	r1, #0
 8004644:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	0018      	movs	r0, r3
 800464a:	f7ff fbc7 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b004      	add	sp, #16
 8004654:	bd80      	pop	{r7, pc}

08004656 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465e:	f3ef 8310 	mrs	r3, PRIMASK
 8004662:	60bb      	str	r3, [r7, #8]
  return(result);
 8004664:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	2301      	movs	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2140      	movs	r1, #64	; 0x40
 8004680:	438a      	bics	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff fb94 	bl	8003dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b006      	add	sp, #24
 80046aa:	bd80      	pop	{r7, pc}

080046ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b090      	sub	sp, #64	; 0x40
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046b4:	203e      	movs	r0, #62	; 0x3e
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	215c      	movs	r1, #92	; 0x5c
 80046bc:	5a52      	ldrh	r2, [r2, r1]
 80046be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c4:	2b22      	cmp	r3, #34	; 0x22
 80046c6:	d000      	beq.n	80046ca <UART_RxISR_8BIT+0x1e>
 80046c8:	e095      	b.n	80047f6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	213c      	movs	r1, #60	; 0x3c
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80046d4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b2d9      	uxtb	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	400a      	ands	r2, r1
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	225a      	movs	r2, #90	; 0x5a
 80046fa:	5a9b      	ldrh	r3, [r3, r2]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b299      	uxth	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	225a      	movs	r2, #90	; 0x5a
 8004706:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	225a      	movs	r2, #90	; 0x5a
 800470c:	5a9b      	ldrh	r3, [r3, r2]
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d178      	bne.n	8004806 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004714:	f3ef 8310 	mrs	r3, PRIMASK
 8004718:	61bb      	str	r3, [r7, #24]
  return(result);
 800471a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471c:	63bb      	str	r3, [r7, #56]	; 0x38
 800471e:	2301      	movs	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4936      	ldr	r1, [pc, #216]	; (8004810 <UART_RxISR_8BIT+0x164>)
 8004736:	400a      	ands	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f383 8810 	msr	PRIMASK, r3
}
 8004744:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004746:	f3ef 8310 	mrs	r3, PRIMASK
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
 8004750:	2301      	movs	r3, #1
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	f383 8810 	msr	PRIMASK, r3
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2101      	movs	r1, #1
 8004768:	438a      	bics	r2, r1
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	f383 8810 	msr	PRIMASK, r3
}
 8004776:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004788:	2b01      	cmp	r3, #1
 800478a:	d12f      	bne.n	80047ec <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004792:	f3ef 8310 	mrs	r3, PRIMASK
 8004796:	60fb      	str	r3, [r7, #12]
  return(result);
 8004798:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
 800479c:	2301      	movs	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2110      	movs	r1, #16
 80047b4:	438a      	bics	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	2210      	movs	r2, #16
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d103      	bne.n	80047da <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2210      	movs	r2, #16
 80047d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2258      	movs	r2, #88	; 0x58
 80047de:	5a9a      	ldrh	r2, [r3, r2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0011      	movs	r1, r2
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7ff fb01 	bl	8003dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047ea:	e00c      	b.n	8004806 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7fb fd4e 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 80047f4:	e007      	b.n	8004806 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2108      	movs	r1, #8
 8004802:	430a      	orrs	r2, r1
 8004804:	619a      	str	r2, [r3, #24]
}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	46bd      	mov	sp, r7
 800480a:	b010      	add	sp, #64	; 0x40
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	fffffedf 	.word	0xfffffedf

08004814 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b090      	sub	sp, #64	; 0x40
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800481c:	203e      	movs	r0, #62	; 0x3e
 800481e:	183b      	adds	r3, r7, r0
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	215c      	movs	r1, #92	; 0x5c
 8004824:	5a52      	ldrh	r2, [r2, r1]
 8004826:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482c:	2b22      	cmp	r3, #34	; 0x22
 800482e:	d000      	beq.n	8004832 <UART_RxISR_16BIT+0x1e>
 8004830:	e095      	b.n	800495e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	213c      	movs	r1, #60	; 0x3c
 8004838:	187b      	adds	r3, r7, r1
 800483a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800483c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004844:	187b      	adds	r3, r7, r1
 8004846:	183a      	adds	r2, r7, r0
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	8812      	ldrh	r2, [r2, #0]
 800484c:	4013      	ands	r3, r2
 800484e:	b29a      	uxth	r2, r3
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	1c9a      	adds	r2, r3, #2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	225a      	movs	r2, #90	; 0x5a
 8004862:	5a9b      	ldrh	r3, [r3, r2]
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b299      	uxth	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	225a      	movs	r2, #90	; 0x5a
 800486e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	225a      	movs	r2, #90	; 0x5a
 8004874:	5a9b      	ldrh	r3, [r3, r2]
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d178      	bne.n	800496e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487c:	f3ef 8310 	mrs	r3, PRIMASK
 8004880:	617b      	str	r3, [r7, #20]
  return(result);
 8004882:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
 8004886:	2301      	movs	r3, #1
 8004888:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f383 8810 	msr	PRIMASK, r3
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4936      	ldr	r1, [pc, #216]	; (8004978 <UART_RxISR_16BIT+0x164>)
 800489e:	400a      	ands	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f383 8810 	msr	PRIMASK, r3
}
 80048ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ae:	f3ef 8310 	mrs	r3, PRIMASK
 80048b2:	623b      	str	r3, [r7, #32]
  return(result);
 80048b4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
 80048b8:	2301      	movs	r3, #1
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2101      	movs	r1, #1
 80048d0:	438a      	bics	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d12f      	bne.n	8004954 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fa:	f3ef 8310 	mrs	r3, PRIMASK
 80048fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004904:	2301      	movs	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2110      	movs	r1, #16
 800491c:	438a      	bics	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2210      	movs	r2, #16
 8004934:	4013      	ands	r3, r2
 8004936:	2b10      	cmp	r3, #16
 8004938:	d103      	bne.n	8004942 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2210      	movs	r2, #16
 8004940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2258      	movs	r2, #88	; 0x58
 8004946:	5a9a      	ldrh	r2, [r3, r2]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0011      	movs	r1, r2
 800494c:	0018      	movs	r0, r3
 800494e:	f7ff fa4d 	bl	8003dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004952:	e00c      	b.n	800496e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	0018      	movs	r0, r3
 8004958:	f7fb fc9a 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 800495c:	e007      	b.n	800496e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2108      	movs	r1, #8
 800496a:	430a      	orrs	r2, r1
 800496c:	619a      	str	r2, [r3, #24]
}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	b010      	add	sp, #64	; 0x40
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	fffffedf 	.word	0xfffffedf

0800497c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	b002      	add	sp, #8
 800498a:	bd80      	pop	{r7, pc}

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	; (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	2000000c 	.word	0x2000000c

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	2600      	movs	r6, #0
 800499c:	4d0c      	ldr	r5, [pc, #48]	; (80049d0 <__libc_init_array+0x38>)
 800499e:	4c0d      	ldr	r4, [pc, #52]	; (80049d4 <__libc_init_array+0x3c>)
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	2600      	movs	r6, #0
 80049aa:	f001 f8d7 	bl	8005b5c <_init>
 80049ae:	4d0a      	ldr	r5, [pc, #40]	; (80049d8 <__libc_init_array+0x40>)
 80049b0:	4c0a      	ldr	r4, [pc, #40]	; (80049dc <__libc_init_array+0x44>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	00b3      	lsls	r3, r6, #2
 80049be:	58eb      	ldr	r3, [r5, r3]
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	00b3      	lsls	r3, r6, #2
 80049c8:	58eb      	ldr	r3, [r5, r3]
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08005da4 	.word	0x08005da4
 80049d4:	08005da4 	.word	0x08005da4
 80049d8:	08005da4 	.word	0x08005da4
 80049dc:	08005da8 	.word	0x08005da8

080049e0 <memset>:
 80049e0:	0003      	movs	r3, r0
 80049e2:	1882      	adds	r2, r0, r2
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	7019      	strb	r1, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <srand>:
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <srand+0x48>)
 80049f2:	b570      	push	{r4, r5, r6, lr}
 80049f4:	681d      	ldr	r5, [r3, #0]
 80049f6:	0004      	movs	r4, r0
 80049f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d116      	bne.n	8004a2c <srand+0x3c>
 80049fe:	2018      	movs	r0, #24
 8004a00:	f000 f892 	bl	8004b28 <malloc>
 8004a04:	1e02      	subs	r2, r0, #0
 8004a06:	63a8      	str	r0, [r5, #56]	; 0x38
 8004a08:	d104      	bne.n	8004a14 <srand+0x24>
 8004a0a:	2142      	movs	r1, #66	; 0x42
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <srand+0x4c>)
 8004a0e:	480c      	ldr	r0, [pc, #48]	; (8004a40 <srand+0x50>)
 8004a10:	f000 f85c 	bl	8004acc <__assert_func>
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <srand+0x54>)
 8004a16:	2100      	movs	r1, #0
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <srand+0x58>)
 8004a1c:	6043      	str	r3, [r0, #4]
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <srand+0x5c>)
 8004a20:	6083      	str	r3, [r0, #8]
 8004a22:	230b      	movs	r3, #11
 8004a24:	8183      	strh	r3, [r0, #12]
 8004a26:	2001      	movs	r0, #1
 8004a28:	6110      	str	r0, [r2, #16]
 8004a2a:	6151      	str	r1, [r2, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a30:	611c      	str	r4, [r3, #16]
 8004a32:	615a      	str	r2, [r3, #20]
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	2000000c 	.word	0x2000000c
 8004a3c:	08005c60 	.word	0x08005c60
 8004a40:	08005c77 	.word	0x08005c77
 8004a44:	abcd330e 	.word	0xabcd330e
 8004a48:	e66d1234 	.word	0xe66d1234
 8004a4c:	0005deec 	.word	0x0005deec

08004a50 <rand>:
 8004a50:	4b16      	ldr	r3, [pc, #88]	; (8004aac <rand+0x5c>)
 8004a52:	b510      	push	{r4, lr}
 8004a54:	681c      	ldr	r4, [r3, #0]
 8004a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d116      	bne.n	8004a8a <rand+0x3a>
 8004a5c:	2018      	movs	r0, #24
 8004a5e:	f000 f863 	bl	8004b28 <malloc>
 8004a62:	1e02      	subs	r2, r0, #0
 8004a64:	63a0      	str	r0, [r4, #56]	; 0x38
 8004a66:	d104      	bne.n	8004a72 <rand+0x22>
 8004a68:	214e      	movs	r1, #78	; 0x4e
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <rand+0x60>)
 8004a6c:	4811      	ldr	r0, [pc, #68]	; (8004ab4 <rand+0x64>)
 8004a6e:	f000 f82d 	bl	8004acc <__assert_func>
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <rand+0x68>)
 8004a74:	2100      	movs	r1, #0
 8004a76:	6003      	str	r3, [r0, #0]
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <rand+0x6c>)
 8004a7a:	6043      	str	r3, [r0, #4]
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <rand+0x70>)
 8004a7e:	6083      	str	r3, [r0, #8]
 8004a80:	230b      	movs	r3, #11
 8004a82:	8183      	strh	r3, [r0, #12]
 8004a84:	2001      	movs	r0, #1
 8004a86:	6110      	str	r0, [r2, #16]
 8004a88:	6151      	str	r1, [r2, #20]
 8004a8a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004a8c:	4a0d      	ldr	r2, [pc, #52]	; (8004ac4 <rand+0x74>)
 8004a8e:	6920      	ldr	r0, [r4, #16]
 8004a90:	6961      	ldr	r1, [r4, #20]
 8004a92:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <rand+0x78>)
 8004a94:	f7fb fbce 	bl	8000234 <__aeabi_lmul>
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	1880      	adds	r0, r0, r2
 8004a9e:	4159      	adcs	r1, r3
 8004aa0:	6120      	str	r0, [r4, #16]
 8004aa2:	6161      	str	r1, [r4, #20]
 8004aa4:	0048      	lsls	r0, r1, #1
 8004aa6:	0840      	lsrs	r0, r0, #1
 8004aa8:	bd10      	pop	{r4, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	08005c60 	.word	0x08005c60
 8004ab4:	08005c77 	.word	0x08005c77
 8004ab8:	abcd330e 	.word	0xabcd330e
 8004abc:	e66d1234 	.word	0xe66d1234
 8004ac0:	0005deec 	.word	0x0005deec
 8004ac4:	4c957f2d 	.word	0x4c957f2d
 8004ac8:	5851f42d 	.word	0x5851f42d

08004acc <__assert_func>:
 8004acc:	b530      	push	{r4, r5, lr}
 8004ace:	0014      	movs	r4, r2
 8004ad0:	001a      	movs	r2, r3
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <__assert_func+0x2c>)
 8004ad4:	0005      	movs	r5, r0
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b085      	sub	sp, #20
 8004ada:	68d8      	ldr	r0, [r3, #12]
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <__assert_func+0x30>)
 8004ade:	2c00      	cmp	r4, #0
 8004ae0:	d101      	bne.n	8004ae6 <__assert_func+0x1a>
 8004ae2:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <__assert_func+0x34>)
 8004ae4:	001c      	movs	r4, r3
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	9100      	str	r1, [sp, #0]
 8004aea:	002b      	movs	r3, r5
 8004aec:	4905      	ldr	r1, [pc, #20]	; (8004b04 <__assert_func+0x38>)
 8004aee:	9402      	str	r4, [sp, #8]
 8004af0:	f000 f80a 	bl	8004b08 <fiprintf>
 8004af4:	f000 fcc8 	bl	8005488 <abort>
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	08005cd2 	.word	0x08005cd2
 8004b00:	08005d0d 	.word	0x08005d0d
 8004b04:	08005cdf 	.word	0x08005cdf

08004b08 <fiprintf>:
 8004b08:	b40e      	push	{r1, r2, r3}
 8004b0a:	b503      	push	{r0, r1, lr}
 8004b0c:	0001      	movs	r1, r0
 8004b0e:	ab03      	add	r3, sp, #12
 8004b10:	4804      	ldr	r0, [pc, #16]	; (8004b24 <fiprintf+0x1c>)
 8004b12:	cb04      	ldmia	r3!, {r2}
 8004b14:	6800      	ldr	r0, [r0, #0]
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	f000 f91a 	bl	8004d50 <_vfiprintf_r>
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bc08      	pop	{r3}
 8004b20:	b003      	add	sp, #12
 8004b22:	4718      	bx	r3
 8004b24:	2000000c 	.word	0x2000000c

08004b28 <malloc>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <malloc+0x10>)
 8004b2c:	0001      	movs	r1, r0
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	f000 f870 	bl	8004c14 <_malloc_r>
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	2000000c 	.word	0x2000000c

08004b3c <_free_r>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	0005      	movs	r5, r0
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d010      	beq.n	8004b66 <_free_r+0x2a>
 8004b44:	1f0c      	subs	r4, r1, #4
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da00      	bge.n	8004b4e <_free_r+0x12>
 8004b4c:	18e4      	adds	r4, r4, r3
 8004b4e:	0028      	movs	r0, r5
 8004b50:	f000 feec 	bl	800592c <__malloc_lock>
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <_free_r+0x90>)
 8004b56:	6813      	ldr	r3, [r2, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <_free_r+0x2c>
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	6014      	str	r4, [r2, #0]
 8004b60:	0028      	movs	r0, r5
 8004b62:	f000 feeb 	bl	800593c <__malloc_unlock>
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d908      	bls.n	8004b7e <_free_r+0x42>
 8004b6c:	6821      	ldr	r1, [r4, #0]
 8004b6e:	1860      	adds	r0, r4, r1
 8004b70:	4283      	cmp	r3, r0
 8004b72:	d1f3      	bne.n	8004b5c <_free_r+0x20>
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	1841      	adds	r1, r0, r1
 8004b7a:	6021      	str	r1, [r4, #0]
 8004b7c:	e7ee      	b.n	8004b5c <_free_r+0x20>
 8004b7e:	001a      	movs	r2, r3
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <_free_r+0x4e>
 8004b86:	42a3      	cmp	r3, r4
 8004b88:	d9f9      	bls.n	8004b7e <_free_r+0x42>
 8004b8a:	6811      	ldr	r1, [r2, #0]
 8004b8c:	1850      	adds	r0, r2, r1
 8004b8e:	42a0      	cmp	r0, r4
 8004b90:	d10b      	bne.n	8004baa <_free_r+0x6e>
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1809      	adds	r1, r1, r0
 8004b96:	1850      	adds	r0, r2, r1
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	4283      	cmp	r3, r0
 8004b9c:	d1e0      	bne.n	8004b60 <_free_r+0x24>
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	1841      	adds	r1, r0, r1
 8004ba4:	6011      	str	r1, [r2, #0]
 8004ba6:	6053      	str	r3, [r2, #4]
 8004ba8:	e7da      	b.n	8004b60 <_free_r+0x24>
 8004baa:	42a0      	cmp	r0, r4
 8004bac:	d902      	bls.n	8004bb4 <_free_r+0x78>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	e7d5      	b.n	8004b60 <_free_r+0x24>
 8004bb4:	6821      	ldr	r1, [r4, #0]
 8004bb6:	1860      	adds	r0, r4, r1
 8004bb8:	4283      	cmp	r3, r0
 8004bba:	d103      	bne.n	8004bc4 <_free_r+0x88>
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	1841      	adds	r1, r0, r1
 8004bc2:	6021      	str	r1, [r4, #0]
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	6054      	str	r4, [r2, #4]
 8004bc8:	e7ca      	b.n	8004b60 <_free_r+0x24>
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	2000019c 	.word	0x2000019c

08004bd0 <sbrk_aligned>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	4e0f      	ldr	r6, [pc, #60]	; (8004c10 <sbrk_aligned+0x40>)
 8004bd4:	000d      	movs	r5, r1
 8004bd6:	6831      	ldr	r1, [r6, #0]
 8004bd8:	0004      	movs	r4, r0
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	d102      	bne.n	8004be4 <sbrk_aligned+0x14>
 8004bde:	f000 fb73 	bl	80052c8 <_sbrk_r>
 8004be2:	6030      	str	r0, [r6, #0]
 8004be4:	0029      	movs	r1, r5
 8004be6:	0020      	movs	r0, r4
 8004be8:	f000 fb6e 	bl	80052c8 <_sbrk_r>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d00a      	beq.n	8004c06 <sbrk_aligned+0x36>
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	1cc5      	adds	r5, r0, #3
 8004bf4:	439d      	bics	r5, r3
 8004bf6:	42a8      	cmp	r0, r5
 8004bf8:	d007      	beq.n	8004c0a <sbrk_aligned+0x3a>
 8004bfa:	1a29      	subs	r1, r5, r0
 8004bfc:	0020      	movs	r0, r4
 8004bfe:	f000 fb63 	bl	80052c8 <_sbrk_r>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	d101      	bne.n	8004c0a <sbrk_aligned+0x3a>
 8004c06:	2501      	movs	r5, #1
 8004c08:	426d      	negs	r5, r5
 8004c0a:	0028      	movs	r0, r5
 8004c0c:	bd70      	pop	{r4, r5, r6, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	200001a0 	.word	0x200001a0

08004c14 <_malloc_r>:
 8004c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c16:	2203      	movs	r2, #3
 8004c18:	1ccb      	adds	r3, r1, #3
 8004c1a:	4393      	bics	r3, r2
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	0006      	movs	r6, r0
 8004c20:	001f      	movs	r7, r3
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d232      	bcs.n	8004c8c <_malloc_r+0x78>
 8004c26:	270c      	movs	r7, #12
 8004c28:	42b9      	cmp	r1, r7
 8004c2a:	d831      	bhi.n	8004c90 <_malloc_r+0x7c>
 8004c2c:	0030      	movs	r0, r6
 8004c2e:	f000 fe7d 	bl	800592c <__malloc_lock>
 8004c32:	4d32      	ldr	r5, [pc, #200]	; (8004cfc <_malloc_r+0xe8>)
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	001c      	movs	r4, r3
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	d12e      	bne.n	8004c9a <_malloc_r+0x86>
 8004c3c:	0039      	movs	r1, r7
 8004c3e:	0030      	movs	r0, r6
 8004c40:	f7ff ffc6 	bl	8004bd0 <sbrk_aligned>
 8004c44:	0004      	movs	r4, r0
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	d11e      	bne.n	8004c88 <_malloc_r+0x74>
 8004c4a:	682c      	ldr	r4, [r5, #0]
 8004c4c:	0025      	movs	r5, r4
 8004c4e:	2d00      	cmp	r5, #0
 8004c50:	d14a      	bne.n	8004ce8 <_malloc_r+0xd4>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	0029      	movs	r1, r5
 8004c56:	18e3      	adds	r3, r4, r3
 8004c58:	0030      	movs	r0, r6
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	f000 fb34 	bl	80052c8 <_sbrk_r>
 8004c60:	9b01      	ldr	r3, [sp, #4]
 8004c62:	4283      	cmp	r3, r0
 8004c64:	d143      	bne.n	8004cee <_malloc_r+0xda>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	3703      	adds	r7, #3
 8004c6a:	1aff      	subs	r7, r7, r3
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	439f      	bics	r7, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	2f0c      	cmp	r7, #12
 8004c74:	d200      	bcs.n	8004c78 <_malloc_r+0x64>
 8004c76:	270c      	movs	r7, #12
 8004c78:	0039      	movs	r1, r7
 8004c7a:	0030      	movs	r0, r6
 8004c7c:	f7ff ffa8 	bl	8004bd0 <sbrk_aligned>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d034      	beq.n	8004cee <_malloc_r+0xda>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	19df      	adds	r7, r3, r7
 8004c88:	6027      	str	r7, [r4, #0]
 8004c8a:	e013      	b.n	8004cb4 <_malloc_r+0xa0>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dacb      	bge.n	8004c28 <_malloc_r+0x14>
 8004c90:	230c      	movs	r3, #12
 8004c92:	2500      	movs	r5, #0
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	0028      	movs	r0, r5
 8004c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	1bd1      	subs	r1, r2, r7
 8004c9e:	d420      	bmi.n	8004ce2 <_malloc_r+0xce>
 8004ca0:	290b      	cmp	r1, #11
 8004ca2:	d917      	bls.n	8004cd4 <_malloc_r+0xc0>
 8004ca4:	19e2      	adds	r2, r4, r7
 8004ca6:	6027      	str	r7, [r4, #0]
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	d111      	bne.n	8004cd0 <_malloc_r+0xbc>
 8004cac:	602a      	str	r2, [r5, #0]
 8004cae:	6863      	ldr	r3, [r4, #4]
 8004cb0:	6011      	str	r1, [r2, #0]
 8004cb2:	6053      	str	r3, [r2, #4]
 8004cb4:	0030      	movs	r0, r6
 8004cb6:	0025      	movs	r5, r4
 8004cb8:	f000 fe40 	bl	800593c <__malloc_unlock>
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	350b      	adds	r5, #11
 8004cc0:	1d23      	adds	r3, r4, #4
 8004cc2:	4395      	bics	r5, r2
 8004cc4:	1aea      	subs	r2, r5, r3
 8004cc6:	429d      	cmp	r5, r3
 8004cc8:	d0e5      	beq.n	8004c96 <_malloc_r+0x82>
 8004cca:	1b5b      	subs	r3, r3, r5
 8004ccc:	50a3      	str	r3, [r4, r2]
 8004cce:	e7e2      	b.n	8004c96 <_malloc_r+0x82>
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	e7ec      	b.n	8004cae <_malloc_r+0x9a>
 8004cd4:	6862      	ldr	r2, [r4, #4]
 8004cd6:	42a3      	cmp	r3, r4
 8004cd8:	d101      	bne.n	8004cde <_malloc_r+0xca>
 8004cda:	602a      	str	r2, [r5, #0]
 8004cdc:	e7ea      	b.n	8004cb4 <_malloc_r+0xa0>
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	e7e8      	b.n	8004cb4 <_malloc_r+0xa0>
 8004ce2:	0023      	movs	r3, r4
 8004ce4:	6864      	ldr	r4, [r4, #4]
 8004ce6:	e7a7      	b.n	8004c38 <_malloc_r+0x24>
 8004ce8:	002c      	movs	r4, r5
 8004cea:	686d      	ldr	r5, [r5, #4]
 8004cec:	e7af      	b.n	8004c4e <_malloc_r+0x3a>
 8004cee:	230c      	movs	r3, #12
 8004cf0:	0030      	movs	r0, r6
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	f000 fe22 	bl	800593c <__malloc_unlock>
 8004cf8:	e7cd      	b.n	8004c96 <_malloc_r+0x82>
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	2000019c 	.word	0x2000019c

08004d00 <__sfputc_r>:
 8004d00:	6893      	ldr	r3, [r2, #8]
 8004d02:	b510      	push	{r4, lr}
 8004d04:	3b01      	subs	r3, #1
 8004d06:	6093      	str	r3, [r2, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	da04      	bge.n	8004d16 <__sfputc_r+0x16>
 8004d0c:	6994      	ldr	r4, [r2, #24]
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	db07      	blt.n	8004d22 <__sfputc_r+0x22>
 8004d12:	290a      	cmp	r1, #10
 8004d14:	d005      	beq.n	8004d22 <__sfputc_r+0x22>
 8004d16:	6813      	ldr	r3, [r2, #0]
 8004d18:	1c58      	adds	r0, r3, #1
 8004d1a:	6010      	str	r0, [r2, #0]
 8004d1c:	7019      	strb	r1, [r3, #0]
 8004d1e:	0008      	movs	r0, r1
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	f000 fae3 	bl	80052ec <__swbuf_r>
 8004d26:	0001      	movs	r1, r0
 8004d28:	e7f9      	b.n	8004d1e <__sfputc_r+0x1e>

08004d2a <__sfputs_r>:
 8004d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2c:	0006      	movs	r6, r0
 8004d2e:	000f      	movs	r7, r1
 8004d30:	0014      	movs	r4, r2
 8004d32:	18d5      	adds	r5, r2, r3
 8004d34:	42ac      	cmp	r4, r5
 8004d36:	d101      	bne.n	8004d3c <__sfputs_r+0x12>
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e007      	b.n	8004d4c <__sfputs_r+0x22>
 8004d3c:	7821      	ldrb	r1, [r4, #0]
 8004d3e:	003a      	movs	r2, r7
 8004d40:	0030      	movs	r0, r6
 8004d42:	f7ff ffdd 	bl	8004d00 <__sfputc_r>
 8004d46:	3401      	adds	r4, #1
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d1f3      	bne.n	8004d34 <__sfputs_r+0xa>
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d50 <_vfiprintf_r>:
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	b0a1      	sub	sp, #132	; 0x84
 8004d54:	0006      	movs	r6, r0
 8004d56:	000c      	movs	r4, r1
 8004d58:	001f      	movs	r7, r3
 8004d5a:	9203      	str	r2, [sp, #12]
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d004      	beq.n	8004d6a <_vfiprintf_r+0x1a>
 8004d60:	6983      	ldr	r3, [r0, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <_vfiprintf_r+0x1a>
 8004d66:	f000 fcc5 	bl	80056f4 <__sinit>
 8004d6a:	4b8e      	ldr	r3, [pc, #568]	; (8004fa4 <_vfiprintf_r+0x254>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	d11c      	bne.n	8004daa <_vfiprintf_r+0x5a>
 8004d70:	6874      	ldr	r4, [r6, #4]
 8004d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d74:	07db      	lsls	r3, r3, #31
 8004d76:	d405      	bmi.n	8004d84 <_vfiprintf_r+0x34>
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	059b      	lsls	r3, r3, #22
 8004d7c:	d402      	bmi.n	8004d84 <_vfiprintf_r+0x34>
 8004d7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d80:	f000 fd59 	bl	8005836 <__retarget_lock_acquire_recursive>
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	071b      	lsls	r3, r3, #28
 8004d88:	d502      	bpl.n	8004d90 <_vfiprintf_r+0x40>
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d11d      	bne.n	8004dcc <_vfiprintf_r+0x7c>
 8004d90:	0021      	movs	r1, r4
 8004d92:	0030      	movs	r0, r6
 8004d94:	f000 fb00 	bl	8005398 <__swsetup_r>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d017      	beq.n	8004dcc <_vfiprintf_r+0x7c>
 8004d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d9e:	07db      	lsls	r3, r3, #31
 8004da0:	d50d      	bpl.n	8004dbe <_vfiprintf_r+0x6e>
 8004da2:	2001      	movs	r0, #1
 8004da4:	4240      	negs	r0, r0
 8004da6:	b021      	add	sp, #132	; 0x84
 8004da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004daa:	4b7f      	ldr	r3, [pc, #508]	; (8004fa8 <_vfiprintf_r+0x258>)
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d101      	bne.n	8004db4 <_vfiprintf_r+0x64>
 8004db0:	68b4      	ldr	r4, [r6, #8]
 8004db2:	e7de      	b.n	8004d72 <_vfiprintf_r+0x22>
 8004db4:	4b7d      	ldr	r3, [pc, #500]	; (8004fac <_vfiprintf_r+0x25c>)
 8004db6:	429c      	cmp	r4, r3
 8004db8:	d1db      	bne.n	8004d72 <_vfiprintf_r+0x22>
 8004dba:	68f4      	ldr	r4, [r6, #12]
 8004dbc:	e7d9      	b.n	8004d72 <_vfiprintf_r+0x22>
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	059b      	lsls	r3, r3, #22
 8004dc2:	d4ee      	bmi.n	8004da2 <_vfiprintf_r+0x52>
 8004dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dc6:	f000 fd37 	bl	8005838 <__retarget_lock_release_recursive>
 8004dca:	e7ea      	b.n	8004da2 <_vfiprintf_r+0x52>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	ad08      	add	r5, sp, #32
 8004dd0:	616b      	str	r3, [r5, #20]
 8004dd2:	3320      	adds	r3, #32
 8004dd4:	766b      	strb	r3, [r5, #25]
 8004dd6:	3310      	adds	r3, #16
 8004dd8:	76ab      	strb	r3, [r5, #26]
 8004dda:	9707      	str	r7, [sp, #28]
 8004ddc:	9f03      	ldr	r7, [sp, #12]
 8004dde:	783b      	ldrb	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <_vfiprintf_r+0x98>
 8004de4:	2b25      	cmp	r3, #37	; 0x25
 8004de6:	d14e      	bne.n	8004e86 <_vfiprintf_r+0x136>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	1afb      	subs	r3, r7, r3
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	429f      	cmp	r7, r3
 8004df2:	d00d      	beq.n	8004e10 <_vfiprintf_r+0xc0>
 8004df4:	9b05      	ldr	r3, [sp, #20]
 8004df6:	0021      	movs	r1, r4
 8004df8:	0030      	movs	r0, r6
 8004dfa:	9a03      	ldr	r2, [sp, #12]
 8004dfc:	f7ff ff95 	bl	8004d2a <__sfputs_r>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d100      	bne.n	8004e06 <_vfiprintf_r+0xb6>
 8004e04:	e0b5      	b.n	8004f72 <_vfiprintf_r+0x222>
 8004e06:	696a      	ldr	r2, [r5, #20]
 8004e08:	9b05      	ldr	r3, [sp, #20]
 8004e0a:	4694      	mov	ip, r2
 8004e0c:	4463      	add	r3, ip
 8004e0e:	616b      	str	r3, [r5, #20]
 8004e10:	783b      	ldrb	r3, [r7, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d100      	bne.n	8004e18 <_vfiprintf_r+0xc8>
 8004e16:	e0ac      	b.n	8004f72 <_vfiprintf_r+0x222>
 8004e18:	2201      	movs	r2, #1
 8004e1a:	1c7b      	adds	r3, r7, #1
 8004e1c:	9303      	str	r3, [sp, #12]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	4252      	negs	r2, r2
 8004e22:	606a      	str	r2, [r5, #4]
 8004e24:	a904      	add	r1, sp, #16
 8004e26:	3254      	adds	r2, #84	; 0x54
 8004e28:	1852      	adds	r2, r2, r1
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	60eb      	str	r3, [r5, #12]
 8004e2e:	60ab      	str	r3, [r5, #8]
 8004e30:	7013      	strb	r3, [r2, #0]
 8004e32:	65ab      	str	r3, [r5, #88]	; 0x58
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	2205      	movs	r2, #5
 8004e38:	7819      	ldrb	r1, [r3, #0]
 8004e3a:	485d      	ldr	r0, [pc, #372]	; (8004fb0 <_vfiprintf_r+0x260>)
 8004e3c:	f000 fd6a 	bl	8005914 <memchr>
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	1c5f      	adds	r7, r3, #1
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d120      	bne.n	8004e8a <_vfiprintf_r+0x13a>
 8004e48:	682a      	ldr	r2, [r5, #0]
 8004e4a:	06d3      	lsls	r3, r2, #27
 8004e4c:	d504      	bpl.n	8004e58 <_vfiprintf_r+0x108>
 8004e4e:	2353      	movs	r3, #83	; 0x53
 8004e50:	a904      	add	r1, sp, #16
 8004e52:	185b      	adds	r3, r3, r1
 8004e54:	2120      	movs	r1, #32
 8004e56:	7019      	strb	r1, [r3, #0]
 8004e58:	0713      	lsls	r3, r2, #28
 8004e5a:	d504      	bpl.n	8004e66 <_vfiprintf_r+0x116>
 8004e5c:	2353      	movs	r3, #83	; 0x53
 8004e5e:	a904      	add	r1, sp, #16
 8004e60:	185b      	adds	r3, r3, r1
 8004e62:	212b      	movs	r1, #43	; 0x2b
 8004e64:	7019      	strb	r1, [r3, #0]
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e6c:	d016      	beq.n	8004e9c <_vfiprintf_r+0x14c>
 8004e6e:	2100      	movs	r1, #0
 8004e70:	68eb      	ldr	r3, [r5, #12]
 8004e72:	9f03      	ldr	r7, [sp, #12]
 8004e74:	783a      	ldrb	r2, [r7, #0]
 8004e76:	1c78      	adds	r0, r7, #1
 8004e78:	3a30      	subs	r2, #48	; 0x30
 8004e7a:	4684      	mov	ip, r0
 8004e7c:	2a09      	cmp	r2, #9
 8004e7e:	d94f      	bls.n	8004f20 <_vfiprintf_r+0x1d0>
 8004e80:	2900      	cmp	r1, #0
 8004e82:	d111      	bne.n	8004ea8 <_vfiprintf_r+0x158>
 8004e84:	e017      	b.n	8004eb6 <_vfiprintf_r+0x166>
 8004e86:	3701      	adds	r7, #1
 8004e88:	e7a9      	b.n	8004dde <_vfiprintf_r+0x8e>
 8004e8a:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <_vfiprintf_r+0x260>)
 8004e8c:	682a      	ldr	r2, [r5, #0]
 8004e8e:	1ac0      	subs	r0, r0, r3
 8004e90:	2301      	movs	r3, #1
 8004e92:	4083      	lsls	r3, r0
 8004e94:	4313      	orrs	r3, r2
 8004e96:	602b      	str	r3, [r5, #0]
 8004e98:	9703      	str	r7, [sp, #12]
 8004e9a:	e7cb      	b.n	8004e34 <_vfiprintf_r+0xe4>
 8004e9c:	9b07      	ldr	r3, [sp, #28]
 8004e9e:	1d19      	adds	r1, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	9107      	str	r1, [sp, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	db01      	blt.n	8004eac <_vfiprintf_r+0x15c>
 8004ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eaa:	e004      	b.n	8004eb6 <_vfiprintf_r+0x166>
 8004eac:	425b      	negs	r3, r3
 8004eae:	60eb      	str	r3, [r5, #12]
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	602b      	str	r3, [r5, #0]
 8004eb6:	783b      	ldrb	r3, [r7, #0]
 8004eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8004eba:	d10a      	bne.n	8004ed2 <_vfiprintf_r+0x182>
 8004ebc:	787b      	ldrb	r3, [r7, #1]
 8004ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec0:	d137      	bne.n	8004f32 <_vfiprintf_r+0x1e2>
 8004ec2:	9b07      	ldr	r3, [sp, #28]
 8004ec4:	3702      	adds	r7, #2
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	9207      	str	r2, [sp, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	db2d      	blt.n	8004f2c <_vfiprintf_r+0x1dc>
 8004ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	7839      	ldrb	r1, [r7, #0]
 8004ed6:	4837      	ldr	r0, [pc, #220]	; (8004fb4 <_vfiprintf_r+0x264>)
 8004ed8:	f000 fd1c 	bl	8005914 <memchr>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d007      	beq.n	8004ef0 <_vfiprintf_r+0x1a0>
 8004ee0:	4b34      	ldr	r3, [pc, #208]	; (8004fb4 <_vfiprintf_r+0x264>)
 8004ee2:	682a      	ldr	r2, [r5, #0]
 8004ee4:	1ac0      	subs	r0, r0, r3
 8004ee6:	2340      	movs	r3, #64	; 0x40
 8004ee8:	4083      	lsls	r3, r0
 8004eea:	4313      	orrs	r3, r2
 8004eec:	3701      	adds	r7, #1
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	7839      	ldrb	r1, [r7, #0]
 8004ef2:	1c7b      	adds	r3, r7, #1
 8004ef4:	2206      	movs	r2, #6
 8004ef6:	4830      	ldr	r0, [pc, #192]	; (8004fb8 <_vfiprintf_r+0x268>)
 8004ef8:	9303      	str	r3, [sp, #12]
 8004efa:	7629      	strb	r1, [r5, #24]
 8004efc:	f000 fd0a 	bl	8005914 <memchr>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d045      	beq.n	8004f90 <_vfiprintf_r+0x240>
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <_vfiprintf_r+0x26c>)
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d127      	bne.n	8004f5a <_vfiprintf_r+0x20a>
 8004f0a:	2207      	movs	r2, #7
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	3307      	adds	r3, #7
 8004f10:	4393      	bics	r3, r2
 8004f12:	3308      	adds	r3, #8
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	696b      	ldr	r3, [r5, #20]
 8004f18:	9a04      	ldr	r2, [sp, #16]
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	616b      	str	r3, [r5, #20]
 8004f1e:	e75d      	b.n	8004ddc <_vfiprintf_r+0x8c>
 8004f20:	210a      	movs	r1, #10
 8004f22:	434b      	muls	r3, r1
 8004f24:	4667      	mov	r7, ip
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	3909      	subs	r1, #9
 8004f2a:	e7a3      	b.n	8004e74 <_vfiprintf_r+0x124>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	425b      	negs	r3, r3
 8004f30:	e7ce      	b.n	8004ed0 <_vfiprintf_r+0x180>
 8004f32:	2300      	movs	r3, #0
 8004f34:	001a      	movs	r2, r3
 8004f36:	3701      	adds	r7, #1
 8004f38:	606b      	str	r3, [r5, #4]
 8004f3a:	7839      	ldrb	r1, [r7, #0]
 8004f3c:	1c78      	adds	r0, r7, #1
 8004f3e:	3930      	subs	r1, #48	; 0x30
 8004f40:	4684      	mov	ip, r0
 8004f42:	2909      	cmp	r1, #9
 8004f44:	d903      	bls.n	8004f4e <_vfiprintf_r+0x1fe>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0c3      	beq.n	8004ed2 <_vfiprintf_r+0x182>
 8004f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f4c:	e7c1      	b.n	8004ed2 <_vfiprintf_r+0x182>
 8004f4e:	230a      	movs	r3, #10
 8004f50:	435a      	muls	r2, r3
 8004f52:	4667      	mov	r7, ip
 8004f54:	1852      	adds	r2, r2, r1
 8004f56:	3b09      	subs	r3, #9
 8004f58:	e7ef      	b.n	8004f3a <_vfiprintf_r+0x1ea>
 8004f5a:	ab07      	add	r3, sp, #28
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	0022      	movs	r2, r4
 8004f60:	0029      	movs	r1, r5
 8004f62:	0030      	movs	r0, r6
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <_vfiprintf_r+0x270>)
 8004f66:	e000      	b.n	8004f6a <_vfiprintf_r+0x21a>
 8004f68:	bf00      	nop
 8004f6a:	9004      	str	r0, [sp, #16]
 8004f6c:	9b04      	ldr	r3, [sp, #16]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	d1d1      	bne.n	8004f16 <_vfiprintf_r+0x1c6>
 8004f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f74:	07db      	lsls	r3, r3, #31
 8004f76:	d405      	bmi.n	8004f84 <_vfiprintf_r+0x234>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	059b      	lsls	r3, r3, #22
 8004f7c:	d402      	bmi.n	8004f84 <_vfiprintf_r+0x234>
 8004f7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f80:	f000 fc5a 	bl	8005838 <__retarget_lock_release_recursive>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	065b      	lsls	r3, r3, #25
 8004f88:	d500      	bpl.n	8004f8c <_vfiprintf_r+0x23c>
 8004f8a:	e70a      	b.n	8004da2 <_vfiprintf_r+0x52>
 8004f8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f8e:	e70a      	b.n	8004da6 <_vfiprintf_r+0x56>
 8004f90:	ab07      	add	r3, sp, #28
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	0022      	movs	r2, r4
 8004f96:	0029      	movs	r1, r5
 8004f98:	0030      	movs	r0, r6
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <_vfiprintf_r+0x270>)
 8004f9c:	f000 f882 	bl	80050a4 <_printf_i>
 8004fa0:	e7e3      	b.n	8004f6a <_vfiprintf_r+0x21a>
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	08005d64 	.word	0x08005d64
 8004fa8:	08005d84 	.word	0x08005d84
 8004fac:	08005d44 	.word	0x08005d44
 8004fb0:	08005d0e 	.word	0x08005d0e
 8004fb4:	08005d14 	.word	0x08005d14
 8004fb8:	08005d18 	.word	0x08005d18
 8004fbc:	00000000 	.word	0x00000000
 8004fc0:	08004d2b 	.word	0x08004d2b

08004fc4 <_printf_common>:
 8004fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc6:	0015      	movs	r5, r2
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	688a      	ldr	r2, [r1, #8]
 8004fcc:	690b      	ldr	r3, [r1, #16]
 8004fce:	000c      	movs	r4, r1
 8004fd0:	9000      	str	r0, [sp, #0]
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	da00      	bge.n	8004fd8 <_printf_common+0x14>
 8004fd6:	0013      	movs	r3, r2
 8004fd8:	0022      	movs	r2, r4
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	3243      	adds	r2, #67	; 0x43
 8004fde:	7812      	ldrb	r2, [r2, #0]
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	d001      	beq.n	8004fe8 <_printf_common+0x24>
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	069b      	lsls	r3, r3, #26
 8004fec:	d502      	bpl.n	8004ff4 <_printf_common+0x30>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	2306      	movs	r3, #6
 8004ff8:	0017      	movs	r7, r2
 8004ffa:	401f      	ands	r7, r3
 8004ffc:	421a      	tst	r2, r3
 8004ffe:	d027      	beq.n	8005050 <_printf_common+0x8c>
 8005000:	0023      	movs	r3, r4
 8005002:	3343      	adds	r3, #67	; 0x43
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	1e5a      	subs	r2, r3, #1
 8005008:	4193      	sbcs	r3, r2
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	0692      	lsls	r2, r2, #26
 800500e:	d430      	bmi.n	8005072 <_printf_common+0xae>
 8005010:	0022      	movs	r2, r4
 8005012:	9901      	ldr	r1, [sp, #4]
 8005014:	9800      	ldr	r0, [sp, #0]
 8005016:	9e08      	ldr	r6, [sp, #32]
 8005018:	3243      	adds	r2, #67	; 0x43
 800501a:	47b0      	blx	r6
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d025      	beq.n	800506c <_printf_common+0xa8>
 8005020:	2306      	movs	r3, #6
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	682a      	ldr	r2, [r5, #0]
 8005026:	68e1      	ldr	r1, [r4, #12]
 8005028:	2500      	movs	r5, #0
 800502a:	4003      	ands	r3, r0
 800502c:	2b04      	cmp	r3, #4
 800502e:	d103      	bne.n	8005038 <_printf_common+0x74>
 8005030:	1a8d      	subs	r5, r1, r2
 8005032:	43eb      	mvns	r3, r5
 8005034:	17db      	asrs	r3, r3, #31
 8005036:	401d      	ands	r5, r3
 8005038:	68a3      	ldr	r3, [r4, #8]
 800503a:	6922      	ldr	r2, [r4, #16]
 800503c:	4293      	cmp	r3, r2
 800503e:	dd01      	ble.n	8005044 <_printf_common+0x80>
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	18ed      	adds	r5, r5, r3
 8005044:	2700      	movs	r7, #0
 8005046:	42bd      	cmp	r5, r7
 8005048:	d120      	bne.n	800508c <_printf_common+0xc8>
 800504a:	2000      	movs	r0, #0
 800504c:	e010      	b.n	8005070 <_printf_common+0xac>
 800504e:	3701      	adds	r7, #1
 8005050:	68e3      	ldr	r3, [r4, #12]
 8005052:	682a      	ldr	r2, [r5, #0]
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	42bb      	cmp	r3, r7
 8005058:	ddd2      	ble.n	8005000 <_printf_common+0x3c>
 800505a:	0022      	movs	r2, r4
 800505c:	2301      	movs	r3, #1
 800505e:	9901      	ldr	r1, [sp, #4]
 8005060:	9800      	ldr	r0, [sp, #0]
 8005062:	9e08      	ldr	r6, [sp, #32]
 8005064:	3219      	adds	r2, #25
 8005066:	47b0      	blx	r6
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d1f0      	bne.n	800504e <_printf_common+0x8a>
 800506c:	2001      	movs	r0, #1
 800506e:	4240      	negs	r0, r0
 8005070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005072:	2030      	movs	r0, #48	; 0x30
 8005074:	18e1      	adds	r1, r4, r3
 8005076:	3143      	adds	r1, #67	; 0x43
 8005078:	7008      	strb	r0, [r1, #0]
 800507a:	0021      	movs	r1, r4
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	3145      	adds	r1, #69	; 0x45
 8005080:	7809      	ldrb	r1, [r1, #0]
 8005082:	18a2      	adds	r2, r4, r2
 8005084:	3243      	adds	r2, #67	; 0x43
 8005086:	3302      	adds	r3, #2
 8005088:	7011      	strb	r1, [r2, #0]
 800508a:	e7c1      	b.n	8005010 <_printf_common+0x4c>
 800508c:	0022      	movs	r2, r4
 800508e:	2301      	movs	r3, #1
 8005090:	9901      	ldr	r1, [sp, #4]
 8005092:	9800      	ldr	r0, [sp, #0]
 8005094:	9e08      	ldr	r6, [sp, #32]
 8005096:	321a      	adds	r2, #26
 8005098:	47b0      	blx	r6
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d0e6      	beq.n	800506c <_printf_common+0xa8>
 800509e:	3701      	adds	r7, #1
 80050a0:	e7d1      	b.n	8005046 <_printf_common+0x82>
	...

080050a4 <_printf_i>:
 80050a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a6:	b08b      	sub	sp, #44	; 0x2c
 80050a8:	9206      	str	r2, [sp, #24]
 80050aa:	000a      	movs	r2, r1
 80050ac:	3243      	adds	r2, #67	; 0x43
 80050ae:	9307      	str	r3, [sp, #28]
 80050b0:	9005      	str	r0, [sp, #20]
 80050b2:	9204      	str	r2, [sp, #16]
 80050b4:	7e0a      	ldrb	r2, [r1, #24]
 80050b6:	000c      	movs	r4, r1
 80050b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050ba:	2a78      	cmp	r2, #120	; 0x78
 80050bc:	d807      	bhi.n	80050ce <_printf_i+0x2a>
 80050be:	2a62      	cmp	r2, #98	; 0x62
 80050c0:	d809      	bhi.n	80050d6 <_printf_i+0x32>
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	d100      	bne.n	80050c8 <_printf_i+0x24>
 80050c6:	e0c1      	b.n	800524c <_printf_i+0x1a8>
 80050c8:	2a58      	cmp	r2, #88	; 0x58
 80050ca:	d100      	bne.n	80050ce <_printf_i+0x2a>
 80050cc:	e08c      	b.n	80051e8 <_printf_i+0x144>
 80050ce:	0026      	movs	r6, r4
 80050d0:	3642      	adds	r6, #66	; 0x42
 80050d2:	7032      	strb	r2, [r6, #0]
 80050d4:	e022      	b.n	800511c <_printf_i+0x78>
 80050d6:	0010      	movs	r0, r2
 80050d8:	3863      	subs	r0, #99	; 0x63
 80050da:	2815      	cmp	r0, #21
 80050dc:	d8f7      	bhi.n	80050ce <_printf_i+0x2a>
 80050de:	f7fb f813 	bl	8000108 <__gnu_thumb1_case_shi>
 80050e2:	0016      	.short	0x0016
 80050e4:	fff6001f 	.word	0xfff6001f
 80050e8:	fff6fff6 	.word	0xfff6fff6
 80050ec:	001ffff6 	.word	0x001ffff6
 80050f0:	fff6fff6 	.word	0xfff6fff6
 80050f4:	fff6fff6 	.word	0xfff6fff6
 80050f8:	003600a8 	.word	0x003600a8
 80050fc:	fff6009a 	.word	0xfff6009a
 8005100:	00b9fff6 	.word	0x00b9fff6
 8005104:	0036fff6 	.word	0x0036fff6
 8005108:	fff6fff6 	.word	0xfff6fff6
 800510c:	009e      	.short	0x009e
 800510e:	0026      	movs	r6, r4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	3642      	adds	r6, #66	; 0x42
 8005114:	1d11      	adds	r1, r2, #4
 8005116:	6019      	str	r1, [r3, #0]
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	7033      	strb	r3, [r6, #0]
 800511c:	2301      	movs	r3, #1
 800511e:	e0a7      	b.n	8005270 <_printf_i+0x1cc>
 8005120:	6808      	ldr	r0, [r1, #0]
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	1d0a      	adds	r2, r1, #4
 8005126:	0605      	lsls	r5, r0, #24
 8005128:	d50b      	bpl.n	8005142 <_printf_i+0x9e>
 800512a:	680d      	ldr	r5, [r1, #0]
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	2d00      	cmp	r5, #0
 8005130:	da03      	bge.n	800513a <_printf_i+0x96>
 8005132:	232d      	movs	r3, #45	; 0x2d
 8005134:	9a04      	ldr	r2, [sp, #16]
 8005136:	426d      	negs	r5, r5
 8005138:	7013      	strb	r3, [r2, #0]
 800513a:	4b61      	ldr	r3, [pc, #388]	; (80052c0 <_printf_i+0x21c>)
 800513c:	270a      	movs	r7, #10
 800513e:	9303      	str	r3, [sp, #12]
 8005140:	e01b      	b.n	800517a <_printf_i+0xd6>
 8005142:	680d      	ldr	r5, [r1, #0]
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	0641      	lsls	r1, r0, #25
 8005148:	d5f1      	bpl.n	800512e <_printf_i+0x8a>
 800514a:	b22d      	sxth	r5, r5
 800514c:	e7ef      	b.n	800512e <_printf_i+0x8a>
 800514e:	680d      	ldr	r5, [r1, #0]
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	1d08      	adds	r0, r1, #4
 8005154:	6018      	str	r0, [r3, #0]
 8005156:	062e      	lsls	r6, r5, #24
 8005158:	d501      	bpl.n	800515e <_printf_i+0xba>
 800515a:	680d      	ldr	r5, [r1, #0]
 800515c:	e003      	b.n	8005166 <_printf_i+0xc2>
 800515e:	066d      	lsls	r5, r5, #25
 8005160:	d5fb      	bpl.n	800515a <_printf_i+0xb6>
 8005162:	680d      	ldr	r5, [r1, #0]
 8005164:	b2ad      	uxth	r5, r5
 8005166:	4b56      	ldr	r3, [pc, #344]	; (80052c0 <_printf_i+0x21c>)
 8005168:	2708      	movs	r7, #8
 800516a:	9303      	str	r3, [sp, #12]
 800516c:	2a6f      	cmp	r2, #111	; 0x6f
 800516e:	d000      	beq.n	8005172 <_printf_i+0xce>
 8005170:	3702      	adds	r7, #2
 8005172:	0023      	movs	r3, r4
 8005174:	2200      	movs	r2, #0
 8005176:	3343      	adds	r3, #67	; 0x43
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	6863      	ldr	r3, [r4, #4]
 800517c:	60a3      	str	r3, [r4, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	db03      	blt.n	800518a <_printf_i+0xe6>
 8005182:	2204      	movs	r2, #4
 8005184:	6821      	ldr	r1, [r4, #0]
 8005186:	4391      	bics	r1, r2
 8005188:	6021      	str	r1, [r4, #0]
 800518a:	2d00      	cmp	r5, #0
 800518c:	d102      	bne.n	8005194 <_printf_i+0xf0>
 800518e:	9e04      	ldr	r6, [sp, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00c      	beq.n	80051ae <_printf_i+0x10a>
 8005194:	9e04      	ldr	r6, [sp, #16]
 8005196:	0028      	movs	r0, r5
 8005198:	0039      	movs	r1, r7
 800519a:	f7fb f845 	bl	8000228 <__aeabi_uidivmod>
 800519e:	9b03      	ldr	r3, [sp, #12]
 80051a0:	3e01      	subs	r6, #1
 80051a2:	5c5b      	ldrb	r3, [r3, r1]
 80051a4:	7033      	strb	r3, [r6, #0]
 80051a6:	002b      	movs	r3, r5
 80051a8:	0005      	movs	r5, r0
 80051aa:	429f      	cmp	r7, r3
 80051ac:	d9f3      	bls.n	8005196 <_printf_i+0xf2>
 80051ae:	2f08      	cmp	r7, #8
 80051b0:	d109      	bne.n	80051c6 <_printf_i+0x122>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	07db      	lsls	r3, r3, #31
 80051b6:	d506      	bpl.n	80051c6 <_printf_i+0x122>
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	6922      	ldr	r2, [r4, #16]
 80051bc:	4293      	cmp	r3, r2
 80051be:	dc02      	bgt.n	80051c6 <_printf_i+0x122>
 80051c0:	2330      	movs	r3, #48	; 0x30
 80051c2:	3e01      	subs	r6, #1
 80051c4:	7033      	strb	r3, [r6, #0]
 80051c6:	9b04      	ldr	r3, [sp, #16]
 80051c8:	1b9b      	subs	r3, r3, r6
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	9b07      	ldr	r3, [sp, #28]
 80051ce:	0021      	movs	r1, r4
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	9805      	ldr	r0, [sp, #20]
 80051d4:	9b06      	ldr	r3, [sp, #24]
 80051d6:	aa09      	add	r2, sp, #36	; 0x24
 80051d8:	f7ff fef4 	bl	8004fc4 <_printf_common>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d14c      	bne.n	800527a <_printf_i+0x1d6>
 80051e0:	2001      	movs	r0, #1
 80051e2:	4240      	negs	r0, r0
 80051e4:	b00b      	add	sp, #44	; 0x2c
 80051e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e8:	3145      	adds	r1, #69	; 0x45
 80051ea:	700a      	strb	r2, [r1, #0]
 80051ec:	4a34      	ldr	r2, [pc, #208]	; (80052c0 <_printf_i+0x21c>)
 80051ee:	9203      	str	r2, [sp, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	ca20      	ldmia	r2!, {r5}
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	0608      	lsls	r0, r1, #24
 80051fa:	d516      	bpl.n	800522a <_printf_i+0x186>
 80051fc:	07cb      	lsls	r3, r1, #31
 80051fe:	d502      	bpl.n	8005206 <_printf_i+0x162>
 8005200:	2320      	movs	r3, #32
 8005202:	4319      	orrs	r1, r3
 8005204:	6021      	str	r1, [r4, #0]
 8005206:	2710      	movs	r7, #16
 8005208:	2d00      	cmp	r5, #0
 800520a:	d1b2      	bne.n	8005172 <_printf_i+0xce>
 800520c:	2320      	movs	r3, #32
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	439a      	bics	r2, r3
 8005212:	6022      	str	r2, [r4, #0]
 8005214:	e7ad      	b.n	8005172 <_printf_i+0xce>
 8005216:	2220      	movs	r2, #32
 8005218:	6809      	ldr	r1, [r1, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	6022      	str	r2, [r4, #0]
 800521e:	0022      	movs	r2, r4
 8005220:	2178      	movs	r1, #120	; 0x78
 8005222:	3245      	adds	r2, #69	; 0x45
 8005224:	7011      	strb	r1, [r2, #0]
 8005226:	4a27      	ldr	r2, [pc, #156]	; (80052c4 <_printf_i+0x220>)
 8005228:	e7e1      	b.n	80051ee <_printf_i+0x14a>
 800522a:	0648      	lsls	r0, r1, #25
 800522c:	d5e6      	bpl.n	80051fc <_printf_i+0x158>
 800522e:	b2ad      	uxth	r5, r5
 8005230:	e7e4      	b.n	80051fc <_printf_i+0x158>
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	680d      	ldr	r5, [r1, #0]
 8005236:	1d10      	adds	r0, r2, #4
 8005238:	6949      	ldr	r1, [r1, #20]
 800523a:	6018      	str	r0, [r3, #0]
 800523c:	6813      	ldr	r3, [r2, #0]
 800523e:	062e      	lsls	r6, r5, #24
 8005240:	d501      	bpl.n	8005246 <_printf_i+0x1a2>
 8005242:	6019      	str	r1, [r3, #0]
 8005244:	e002      	b.n	800524c <_printf_i+0x1a8>
 8005246:	066d      	lsls	r5, r5, #25
 8005248:	d5fb      	bpl.n	8005242 <_printf_i+0x19e>
 800524a:	8019      	strh	r1, [r3, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	9e04      	ldr	r6, [sp, #16]
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	e7bb      	b.n	80051cc <_printf_i+0x128>
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	1d11      	adds	r1, r2, #4
 8005258:	6019      	str	r1, [r3, #0]
 800525a:	6816      	ldr	r6, [r2, #0]
 800525c:	2100      	movs	r1, #0
 800525e:	0030      	movs	r0, r6
 8005260:	6862      	ldr	r2, [r4, #4]
 8005262:	f000 fb57 	bl	8005914 <memchr>
 8005266:	2800      	cmp	r0, #0
 8005268:	d001      	beq.n	800526e <_printf_i+0x1ca>
 800526a:	1b80      	subs	r0, r0, r6
 800526c:	6060      	str	r0, [r4, #4]
 800526e:	6863      	ldr	r3, [r4, #4]
 8005270:	6123      	str	r3, [r4, #16]
 8005272:	2300      	movs	r3, #0
 8005274:	9a04      	ldr	r2, [sp, #16]
 8005276:	7013      	strb	r3, [r2, #0]
 8005278:	e7a8      	b.n	80051cc <_printf_i+0x128>
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	0032      	movs	r2, r6
 800527e:	9906      	ldr	r1, [sp, #24]
 8005280:	9805      	ldr	r0, [sp, #20]
 8005282:	9d07      	ldr	r5, [sp, #28]
 8005284:	47a8      	blx	r5
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d0aa      	beq.n	80051e0 <_printf_i+0x13c>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	079b      	lsls	r3, r3, #30
 800528e:	d415      	bmi.n	80052bc <_printf_i+0x218>
 8005290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005292:	68e0      	ldr	r0, [r4, #12]
 8005294:	4298      	cmp	r0, r3
 8005296:	daa5      	bge.n	80051e4 <_printf_i+0x140>
 8005298:	0018      	movs	r0, r3
 800529a:	e7a3      	b.n	80051e4 <_printf_i+0x140>
 800529c:	0022      	movs	r2, r4
 800529e:	2301      	movs	r3, #1
 80052a0:	9906      	ldr	r1, [sp, #24]
 80052a2:	9805      	ldr	r0, [sp, #20]
 80052a4:	9e07      	ldr	r6, [sp, #28]
 80052a6:	3219      	adds	r2, #25
 80052a8:	47b0      	blx	r6
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	d098      	beq.n	80051e0 <_printf_i+0x13c>
 80052ae:	3501      	adds	r5, #1
 80052b0:	68e3      	ldr	r3, [r4, #12]
 80052b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	42ab      	cmp	r3, r5
 80052b8:	dcf0      	bgt.n	800529c <_printf_i+0x1f8>
 80052ba:	e7e9      	b.n	8005290 <_printf_i+0x1ec>
 80052bc:	2500      	movs	r5, #0
 80052be:	e7f7      	b.n	80052b0 <_printf_i+0x20c>
 80052c0:	08005d1f 	.word	0x08005d1f
 80052c4:	08005d30 	.word	0x08005d30

080052c8 <_sbrk_r>:
 80052c8:	2300      	movs	r3, #0
 80052ca:	b570      	push	{r4, r5, r6, lr}
 80052cc:	4d06      	ldr	r5, [pc, #24]	; (80052e8 <_sbrk_r+0x20>)
 80052ce:	0004      	movs	r4, r0
 80052d0:	0008      	movs	r0, r1
 80052d2:	602b      	str	r3, [r5, #0]
 80052d4:	f7fc fc58 	bl	8001b88 <_sbrk>
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	d103      	bne.n	80052e4 <_sbrk_r+0x1c>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d000      	beq.n	80052e4 <_sbrk_r+0x1c>
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	200001a8 	.word	0x200001a8

080052ec <__swbuf_r>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	0005      	movs	r5, r0
 80052f0:	000e      	movs	r6, r1
 80052f2:	0014      	movs	r4, r2
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d004      	beq.n	8005302 <__swbuf_r+0x16>
 80052f8:	6983      	ldr	r3, [r0, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <__swbuf_r+0x16>
 80052fe:	f000 f9f9 	bl	80056f4 <__sinit>
 8005302:	4b22      	ldr	r3, [pc, #136]	; (800538c <__swbuf_r+0xa0>)
 8005304:	429c      	cmp	r4, r3
 8005306:	d12e      	bne.n	8005366 <__swbuf_r+0x7a>
 8005308:	686c      	ldr	r4, [r5, #4]
 800530a:	69a3      	ldr	r3, [r4, #24]
 800530c:	60a3      	str	r3, [r4, #8]
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	d532      	bpl.n	800537a <__swbuf_r+0x8e>
 8005314:	6923      	ldr	r3, [r4, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02f      	beq.n	800537a <__swbuf_r+0x8e>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	6922      	ldr	r2, [r4, #16]
 800531e:	b2f7      	uxtb	r7, r6
 8005320:	1a98      	subs	r0, r3, r2
 8005322:	6963      	ldr	r3, [r4, #20]
 8005324:	b2f6      	uxtb	r6, r6
 8005326:	4283      	cmp	r3, r0
 8005328:	dc05      	bgt.n	8005336 <__swbuf_r+0x4a>
 800532a:	0021      	movs	r1, r4
 800532c:	0028      	movs	r0, r5
 800532e:	f000 f93f 	bl	80055b0 <_fflush_r>
 8005332:	2800      	cmp	r0, #0
 8005334:	d127      	bne.n	8005386 <__swbuf_r+0x9a>
 8005336:	68a3      	ldr	r3, [r4, #8]
 8005338:	3001      	adds	r0, #1
 800533a:	3b01      	subs	r3, #1
 800533c:	60a3      	str	r3, [r4, #8]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	6022      	str	r2, [r4, #0]
 8005344:	701f      	strb	r7, [r3, #0]
 8005346:	6963      	ldr	r3, [r4, #20]
 8005348:	4283      	cmp	r3, r0
 800534a:	d004      	beq.n	8005356 <__swbuf_r+0x6a>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	07db      	lsls	r3, r3, #31
 8005350:	d507      	bpl.n	8005362 <__swbuf_r+0x76>
 8005352:	2e0a      	cmp	r6, #10
 8005354:	d105      	bne.n	8005362 <__swbuf_r+0x76>
 8005356:	0021      	movs	r1, r4
 8005358:	0028      	movs	r0, r5
 800535a:	f000 f929 	bl	80055b0 <_fflush_r>
 800535e:	2800      	cmp	r0, #0
 8005360:	d111      	bne.n	8005386 <__swbuf_r+0x9a>
 8005362:	0030      	movs	r0, r6
 8005364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <__swbuf_r+0xa4>)
 8005368:	429c      	cmp	r4, r3
 800536a:	d101      	bne.n	8005370 <__swbuf_r+0x84>
 800536c:	68ac      	ldr	r4, [r5, #8]
 800536e:	e7cc      	b.n	800530a <__swbuf_r+0x1e>
 8005370:	4b08      	ldr	r3, [pc, #32]	; (8005394 <__swbuf_r+0xa8>)
 8005372:	429c      	cmp	r4, r3
 8005374:	d1c9      	bne.n	800530a <__swbuf_r+0x1e>
 8005376:	68ec      	ldr	r4, [r5, #12]
 8005378:	e7c7      	b.n	800530a <__swbuf_r+0x1e>
 800537a:	0021      	movs	r1, r4
 800537c:	0028      	movs	r0, r5
 800537e:	f000 f80b 	bl	8005398 <__swsetup_r>
 8005382:	2800      	cmp	r0, #0
 8005384:	d0c9      	beq.n	800531a <__swbuf_r+0x2e>
 8005386:	2601      	movs	r6, #1
 8005388:	4276      	negs	r6, r6
 800538a:	e7ea      	b.n	8005362 <__swbuf_r+0x76>
 800538c:	08005d64 	.word	0x08005d64
 8005390:	08005d84 	.word	0x08005d84
 8005394:	08005d44 	.word	0x08005d44

08005398 <__swsetup_r>:
 8005398:	4b37      	ldr	r3, [pc, #220]	; (8005478 <__swsetup_r+0xe0>)
 800539a:	b570      	push	{r4, r5, r6, lr}
 800539c:	681d      	ldr	r5, [r3, #0]
 800539e:	0006      	movs	r6, r0
 80053a0:	000c      	movs	r4, r1
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	d005      	beq.n	80053b2 <__swsetup_r+0x1a>
 80053a6:	69ab      	ldr	r3, [r5, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <__swsetup_r+0x1a>
 80053ac:	0028      	movs	r0, r5
 80053ae:	f000 f9a1 	bl	80056f4 <__sinit>
 80053b2:	4b32      	ldr	r3, [pc, #200]	; (800547c <__swsetup_r+0xe4>)
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d10f      	bne.n	80053d8 <__swsetup_r+0x40>
 80053b8:	686c      	ldr	r4, [r5, #4]
 80053ba:	230c      	movs	r3, #12
 80053bc:	5ee2      	ldrsh	r2, [r4, r3]
 80053be:	b293      	uxth	r3, r2
 80053c0:	0711      	lsls	r1, r2, #28
 80053c2:	d42d      	bmi.n	8005420 <__swsetup_r+0x88>
 80053c4:	06d9      	lsls	r1, r3, #27
 80053c6:	d411      	bmi.n	80053ec <__swsetup_r+0x54>
 80053c8:	2309      	movs	r3, #9
 80053ca:	2001      	movs	r0, #1
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	3337      	adds	r3, #55	; 0x37
 80053d0:	4313      	orrs	r3, r2
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	4240      	negs	r0, r0
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	4b29      	ldr	r3, [pc, #164]	; (8005480 <__swsetup_r+0xe8>)
 80053da:	429c      	cmp	r4, r3
 80053dc:	d101      	bne.n	80053e2 <__swsetup_r+0x4a>
 80053de:	68ac      	ldr	r4, [r5, #8]
 80053e0:	e7eb      	b.n	80053ba <__swsetup_r+0x22>
 80053e2:	4b28      	ldr	r3, [pc, #160]	; (8005484 <__swsetup_r+0xec>)
 80053e4:	429c      	cmp	r4, r3
 80053e6:	d1e8      	bne.n	80053ba <__swsetup_r+0x22>
 80053e8:	68ec      	ldr	r4, [r5, #12]
 80053ea:	e7e6      	b.n	80053ba <__swsetup_r+0x22>
 80053ec:	075b      	lsls	r3, r3, #29
 80053ee:	d513      	bpl.n	8005418 <__swsetup_r+0x80>
 80053f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053f2:	2900      	cmp	r1, #0
 80053f4:	d008      	beq.n	8005408 <__swsetup_r+0x70>
 80053f6:	0023      	movs	r3, r4
 80053f8:	3344      	adds	r3, #68	; 0x44
 80053fa:	4299      	cmp	r1, r3
 80053fc:	d002      	beq.n	8005404 <__swsetup_r+0x6c>
 80053fe:	0030      	movs	r0, r6
 8005400:	f7ff fb9c 	bl	8004b3c <_free_r>
 8005404:	2300      	movs	r3, #0
 8005406:	6363      	str	r3, [r4, #52]	; 0x34
 8005408:	2224      	movs	r2, #36	; 0x24
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	4393      	bics	r3, r2
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	2300      	movs	r3, #0
 8005412:	6063      	str	r3, [r4, #4]
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	2308      	movs	r3, #8
 800541a:	89a2      	ldrh	r2, [r4, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <__swsetup_r+0xa6>
 8005426:	21a0      	movs	r1, #160	; 0xa0
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	0089      	lsls	r1, r1, #2
 800542e:	0092      	lsls	r2, r2, #2
 8005430:	400b      	ands	r3, r1
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <__swsetup_r+0xa6>
 8005436:	0021      	movs	r1, r4
 8005438:	0030      	movs	r0, r6
 800543a:	f000 fa27 	bl	800588c <__smakebuf_r>
 800543e:	220c      	movs	r2, #12
 8005440:	5ea3      	ldrsh	r3, [r4, r2]
 8005442:	2001      	movs	r0, #1
 8005444:	001a      	movs	r2, r3
 8005446:	b299      	uxth	r1, r3
 8005448:	4002      	ands	r2, r0
 800544a:	4203      	tst	r3, r0
 800544c:	d00f      	beq.n	800546e <__swsetup_r+0xd6>
 800544e:	2200      	movs	r2, #0
 8005450:	60a2      	str	r2, [r4, #8]
 8005452:	6962      	ldr	r2, [r4, #20]
 8005454:	4252      	negs	r2, r2
 8005456:	61a2      	str	r2, [r4, #24]
 8005458:	2000      	movs	r0, #0
 800545a:	6922      	ldr	r2, [r4, #16]
 800545c:	4282      	cmp	r2, r0
 800545e:	d1ba      	bne.n	80053d6 <__swsetup_r+0x3e>
 8005460:	060a      	lsls	r2, r1, #24
 8005462:	d5b8      	bpl.n	80053d6 <__swsetup_r+0x3e>
 8005464:	2240      	movs	r2, #64	; 0x40
 8005466:	4313      	orrs	r3, r2
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	3801      	subs	r0, #1
 800546c:	e7b3      	b.n	80053d6 <__swsetup_r+0x3e>
 800546e:	0788      	lsls	r0, r1, #30
 8005470:	d400      	bmi.n	8005474 <__swsetup_r+0xdc>
 8005472:	6962      	ldr	r2, [r4, #20]
 8005474:	60a2      	str	r2, [r4, #8]
 8005476:	e7ef      	b.n	8005458 <__swsetup_r+0xc0>
 8005478:	2000000c 	.word	0x2000000c
 800547c:	08005d64 	.word	0x08005d64
 8005480:	08005d84 	.word	0x08005d84
 8005484:	08005d44 	.word	0x08005d44

08005488 <abort>:
 8005488:	2006      	movs	r0, #6
 800548a:	b510      	push	{r4, lr}
 800548c:	f000 fa88 	bl	80059a0 <raise>
 8005490:	2001      	movs	r0, #1
 8005492:	f7fc fb07 	bl	8001aa4 <_exit>
	...

08005498 <__sflush_r>:
 8005498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800549a:	898b      	ldrh	r3, [r1, #12]
 800549c:	0005      	movs	r5, r0
 800549e:	000c      	movs	r4, r1
 80054a0:	071a      	lsls	r2, r3, #28
 80054a2:	d45f      	bmi.n	8005564 <__sflush_r+0xcc>
 80054a4:	684a      	ldr	r2, [r1, #4]
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	dc04      	bgt.n	80054b4 <__sflush_r+0x1c>
 80054aa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	dc01      	bgt.n	80054b4 <__sflush_r+0x1c>
 80054b0:	2000      	movs	r0, #0
 80054b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80054b6:	2f00      	cmp	r7, #0
 80054b8:	d0fa      	beq.n	80054b0 <__sflush_r+0x18>
 80054ba:	2200      	movs	r2, #0
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	682e      	ldr	r6, [r5, #0]
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	001a      	movs	r2, r3
 80054c4:	0149      	lsls	r1, r1, #5
 80054c6:	400a      	ands	r2, r1
 80054c8:	420b      	tst	r3, r1
 80054ca:	d034      	beq.n	8005536 <__sflush_r+0x9e>
 80054cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	075b      	lsls	r3, r3, #29
 80054d2:	d506      	bpl.n	80054e2 <__sflush_r+0x4a>
 80054d4:	6863      	ldr	r3, [r4, #4]
 80054d6:	1ac0      	subs	r0, r0, r3
 80054d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <__sflush_r+0x4a>
 80054de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054e0:	1ac0      	subs	r0, r0, r3
 80054e2:	0002      	movs	r2, r0
 80054e4:	6a21      	ldr	r1, [r4, #32]
 80054e6:	2300      	movs	r3, #0
 80054e8:	0028      	movs	r0, r5
 80054ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80054ec:	47b8      	blx	r7
 80054ee:	89a1      	ldrh	r1, [r4, #12]
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d106      	bne.n	8005502 <__sflush_r+0x6a>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	2b1d      	cmp	r3, #29
 80054f8:	d831      	bhi.n	800555e <__sflush_r+0xc6>
 80054fa:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <__sflush_r+0x114>)
 80054fc:	40da      	lsrs	r2, r3
 80054fe:	07d3      	lsls	r3, r2, #31
 8005500:	d52d      	bpl.n	800555e <__sflush_r+0xc6>
 8005502:	2300      	movs	r3, #0
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	04cb      	lsls	r3, r1, #19
 800550c:	d505      	bpl.n	800551a <__sflush_r+0x82>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	d102      	bne.n	8005518 <__sflush_r+0x80>
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d100      	bne.n	800551a <__sflush_r+0x82>
 8005518:	6560      	str	r0, [r4, #84]	; 0x54
 800551a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800551c:	602e      	str	r6, [r5, #0]
 800551e:	2900      	cmp	r1, #0
 8005520:	d0c6      	beq.n	80054b0 <__sflush_r+0x18>
 8005522:	0023      	movs	r3, r4
 8005524:	3344      	adds	r3, #68	; 0x44
 8005526:	4299      	cmp	r1, r3
 8005528:	d002      	beq.n	8005530 <__sflush_r+0x98>
 800552a:	0028      	movs	r0, r5
 800552c:	f7ff fb06 	bl	8004b3c <_free_r>
 8005530:	2000      	movs	r0, #0
 8005532:	6360      	str	r0, [r4, #52]	; 0x34
 8005534:	e7bd      	b.n	80054b2 <__sflush_r+0x1a>
 8005536:	2301      	movs	r3, #1
 8005538:	0028      	movs	r0, r5
 800553a:	6a21      	ldr	r1, [r4, #32]
 800553c:	47b8      	blx	r7
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	d1c5      	bne.n	80054ce <__sflush_r+0x36>
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0c2      	beq.n	80054ce <__sflush_r+0x36>
 8005548:	2b1d      	cmp	r3, #29
 800554a:	d001      	beq.n	8005550 <__sflush_r+0xb8>
 800554c:	2b16      	cmp	r3, #22
 800554e:	d101      	bne.n	8005554 <__sflush_r+0xbc>
 8005550:	602e      	str	r6, [r5, #0]
 8005552:	e7ad      	b.n	80054b0 <__sflush_r+0x18>
 8005554:	2340      	movs	r3, #64	; 0x40
 8005556:	89a2      	ldrh	r2, [r4, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	e7a9      	b.n	80054b2 <__sflush_r+0x1a>
 800555e:	2340      	movs	r3, #64	; 0x40
 8005560:	430b      	orrs	r3, r1
 8005562:	e7fa      	b.n	800555a <__sflush_r+0xc2>
 8005564:	690f      	ldr	r7, [r1, #16]
 8005566:	2f00      	cmp	r7, #0
 8005568:	d0a2      	beq.n	80054b0 <__sflush_r+0x18>
 800556a:	680a      	ldr	r2, [r1, #0]
 800556c:	600f      	str	r7, [r1, #0]
 800556e:	1bd2      	subs	r2, r2, r7
 8005570:	9201      	str	r2, [sp, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	079b      	lsls	r3, r3, #30
 8005576:	d100      	bne.n	800557a <__sflush_r+0xe2>
 8005578:	694a      	ldr	r2, [r1, #20]
 800557a:	60a2      	str	r2, [r4, #8]
 800557c:	9b01      	ldr	r3, [sp, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dc00      	bgt.n	8005584 <__sflush_r+0xec>
 8005582:	e795      	b.n	80054b0 <__sflush_r+0x18>
 8005584:	003a      	movs	r2, r7
 8005586:	0028      	movs	r0, r5
 8005588:	9b01      	ldr	r3, [sp, #4]
 800558a:	6a21      	ldr	r1, [r4, #32]
 800558c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800558e:	47b0      	blx	r6
 8005590:	2800      	cmp	r0, #0
 8005592:	dc06      	bgt.n	80055a2 <__sflush_r+0x10a>
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	2001      	movs	r0, #1
 8005598:	89a2      	ldrh	r2, [r4, #12]
 800559a:	4240      	negs	r0, r0
 800559c:	4313      	orrs	r3, r2
 800559e:	81a3      	strh	r3, [r4, #12]
 80055a0:	e787      	b.n	80054b2 <__sflush_r+0x1a>
 80055a2:	9b01      	ldr	r3, [sp, #4]
 80055a4:	183f      	adds	r7, r7, r0
 80055a6:	1a1b      	subs	r3, r3, r0
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	e7e7      	b.n	800557c <__sflush_r+0xe4>
 80055ac:	20400001 	.word	0x20400001

080055b0 <_fflush_r>:
 80055b0:	690b      	ldr	r3, [r1, #16]
 80055b2:	b570      	push	{r4, r5, r6, lr}
 80055b4:	0005      	movs	r5, r0
 80055b6:	000c      	movs	r4, r1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <_fflush_r+0x12>
 80055bc:	2500      	movs	r5, #0
 80055be:	0028      	movs	r0, r5
 80055c0:	bd70      	pop	{r4, r5, r6, pc}
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d004      	beq.n	80055d0 <_fflush_r+0x20>
 80055c6:	6983      	ldr	r3, [r0, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <_fflush_r+0x20>
 80055cc:	f000 f892 	bl	80056f4 <__sinit>
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <_fflush_r+0x74>)
 80055d2:	429c      	cmp	r4, r3
 80055d4:	d11b      	bne.n	800560e <_fflush_r+0x5e>
 80055d6:	686c      	ldr	r4, [r5, #4]
 80055d8:	220c      	movs	r2, #12
 80055da:	5ea3      	ldrsh	r3, [r4, r2]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ed      	beq.n	80055bc <_fflush_r+0xc>
 80055e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055e2:	07d2      	lsls	r2, r2, #31
 80055e4:	d404      	bmi.n	80055f0 <_fflush_r+0x40>
 80055e6:	059b      	lsls	r3, r3, #22
 80055e8:	d402      	bmi.n	80055f0 <_fflush_r+0x40>
 80055ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ec:	f000 f923 	bl	8005836 <__retarget_lock_acquire_recursive>
 80055f0:	0028      	movs	r0, r5
 80055f2:	0021      	movs	r1, r4
 80055f4:	f7ff ff50 	bl	8005498 <__sflush_r>
 80055f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055fa:	0005      	movs	r5, r0
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d4de      	bmi.n	80055be <_fflush_r+0xe>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	059b      	lsls	r3, r3, #22
 8005604:	d4db      	bmi.n	80055be <_fflush_r+0xe>
 8005606:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005608:	f000 f916 	bl	8005838 <__retarget_lock_release_recursive>
 800560c:	e7d7      	b.n	80055be <_fflush_r+0xe>
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <_fflush_r+0x78>)
 8005610:	429c      	cmp	r4, r3
 8005612:	d101      	bne.n	8005618 <_fflush_r+0x68>
 8005614:	68ac      	ldr	r4, [r5, #8]
 8005616:	e7df      	b.n	80055d8 <_fflush_r+0x28>
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <_fflush_r+0x7c>)
 800561a:	429c      	cmp	r4, r3
 800561c:	d1dc      	bne.n	80055d8 <_fflush_r+0x28>
 800561e:	68ec      	ldr	r4, [r5, #12]
 8005620:	e7da      	b.n	80055d8 <_fflush_r+0x28>
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	08005d64 	.word	0x08005d64
 8005628:	08005d84 	.word	0x08005d84
 800562c:	08005d44 	.word	0x08005d44

08005630 <std>:
 8005630:	2300      	movs	r3, #0
 8005632:	b510      	push	{r4, lr}
 8005634:	0004      	movs	r4, r0
 8005636:	6003      	str	r3, [r0, #0]
 8005638:	6043      	str	r3, [r0, #4]
 800563a:	6083      	str	r3, [r0, #8]
 800563c:	8181      	strh	r1, [r0, #12]
 800563e:	6643      	str	r3, [r0, #100]	; 0x64
 8005640:	0019      	movs	r1, r3
 8005642:	81c2      	strh	r2, [r0, #14]
 8005644:	6103      	str	r3, [r0, #16]
 8005646:	6143      	str	r3, [r0, #20]
 8005648:	6183      	str	r3, [r0, #24]
 800564a:	2208      	movs	r2, #8
 800564c:	305c      	adds	r0, #92	; 0x5c
 800564e:	f7ff f9c7 	bl	80049e0 <memset>
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <std+0x38>)
 8005654:	6224      	str	r4, [r4, #32]
 8005656:	6263      	str	r3, [r4, #36]	; 0x24
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <std+0x3c>)
 800565a:	62a3      	str	r3, [r4, #40]	; 0x28
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <std+0x40>)
 800565e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005660:	4b04      	ldr	r3, [pc, #16]	; (8005674 <std+0x44>)
 8005662:	6323      	str	r3, [r4, #48]	; 0x30
 8005664:	bd10      	pop	{r4, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	080059e1 	.word	0x080059e1
 800566c:	08005a09 	.word	0x08005a09
 8005670:	08005a41 	.word	0x08005a41
 8005674:	08005a6d 	.word	0x08005a6d

08005678 <_cleanup_r>:
 8005678:	b510      	push	{r4, lr}
 800567a:	4902      	ldr	r1, [pc, #8]	; (8005684 <_cleanup_r+0xc>)
 800567c:	f000 f8ba 	bl	80057f4 <_fwalk_reent>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	080055b1 	.word	0x080055b1

08005688 <__sfmoreglue>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	2568      	movs	r5, #104	; 0x68
 800568c:	1e4a      	subs	r2, r1, #1
 800568e:	4355      	muls	r5, r2
 8005690:	000e      	movs	r6, r1
 8005692:	0029      	movs	r1, r5
 8005694:	3174      	adds	r1, #116	; 0x74
 8005696:	f7ff fabd 	bl	8004c14 <_malloc_r>
 800569a:	1e04      	subs	r4, r0, #0
 800569c:	d008      	beq.n	80056b0 <__sfmoreglue+0x28>
 800569e:	2100      	movs	r1, #0
 80056a0:	002a      	movs	r2, r5
 80056a2:	6001      	str	r1, [r0, #0]
 80056a4:	6046      	str	r6, [r0, #4]
 80056a6:	300c      	adds	r0, #12
 80056a8:	60a0      	str	r0, [r4, #8]
 80056aa:	3268      	adds	r2, #104	; 0x68
 80056ac:	f7ff f998 	bl	80049e0 <memset>
 80056b0:	0020      	movs	r0, r4
 80056b2:	bd70      	pop	{r4, r5, r6, pc}

080056b4 <__sfp_lock_acquire>:
 80056b4:	b510      	push	{r4, lr}
 80056b6:	4802      	ldr	r0, [pc, #8]	; (80056c0 <__sfp_lock_acquire+0xc>)
 80056b8:	f000 f8bd 	bl	8005836 <__retarget_lock_acquire_recursive>
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	200001a5 	.word	0x200001a5

080056c4 <__sfp_lock_release>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4802      	ldr	r0, [pc, #8]	; (80056d0 <__sfp_lock_release+0xc>)
 80056c8:	f000 f8b6 	bl	8005838 <__retarget_lock_release_recursive>
 80056cc:	bd10      	pop	{r4, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	200001a5 	.word	0x200001a5

080056d4 <__sinit_lock_acquire>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4802      	ldr	r0, [pc, #8]	; (80056e0 <__sinit_lock_acquire+0xc>)
 80056d8:	f000 f8ad 	bl	8005836 <__retarget_lock_acquire_recursive>
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	200001a6 	.word	0x200001a6

080056e4 <__sinit_lock_release>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4802      	ldr	r0, [pc, #8]	; (80056f0 <__sinit_lock_release+0xc>)
 80056e8:	f000 f8a6 	bl	8005838 <__retarget_lock_release_recursive>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	200001a6 	.word	0x200001a6

080056f4 <__sinit>:
 80056f4:	b513      	push	{r0, r1, r4, lr}
 80056f6:	0004      	movs	r4, r0
 80056f8:	f7ff ffec 	bl	80056d4 <__sinit_lock_acquire>
 80056fc:	69a3      	ldr	r3, [r4, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <__sinit+0x14>
 8005702:	f7ff ffef 	bl	80056e4 <__sinit_lock_release>
 8005706:	bd13      	pop	{r0, r1, r4, pc}
 8005708:	64a3      	str	r3, [r4, #72]	; 0x48
 800570a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800570c:	6523      	str	r3, [r4, #80]	; 0x50
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <__sinit+0x68>)
 8005710:	4a13      	ldr	r2, [pc, #76]	; (8005760 <__sinit+0x6c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	62a2      	str	r2, [r4, #40]	; 0x28
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	42a3      	cmp	r3, r4
 800571a:	d101      	bne.n	8005720 <__sinit+0x2c>
 800571c:	2301      	movs	r3, #1
 800571e:	61a3      	str	r3, [r4, #24]
 8005720:	0020      	movs	r0, r4
 8005722:	f000 f81f 	bl	8005764 <__sfp>
 8005726:	6060      	str	r0, [r4, #4]
 8005728:	0020      	movs	r0, r4
 800572a:	f000 f81b 	bl	8005764 <__sfp>
 800572e:	60a0      	str	r0, [r4, #8]
 8005730:	0020      	movs	r0, r4
 8005732:	f000 f817 	bl	8005764 <__sfp>
 8005736:	2200      	movs	r2, #0
 8005738:	2104      	movs	r1, #4
 800573a:	60e0      	str	r0, [r4, #12]
 800573c:	6860      	ldr	r0, [r4, #4]
 800573e:	f7ff ff77 	bl	8005630 <std>
 8005742:	2201      	movs	r2, #1
 8005744:	2109      	movs	r1, #9
 8005746:	68a0      	ldr	r0, [r4, #8]
 8005748:	f7ff ff72 	bl	8005630 <std>
 800574c:	2202      	movs	r2, #2
 800574e:	2112      	movs	r1, #18
 8005750:	68e0      	ldr	r0, [r4, #12]
 8005752:	f7ff ff6d 	bl	8005630 <std>
 8005756:	2301      	movs	r3, #1
 8005758:	61a3      	str	r3, [r4, #24]
 800575a:	e7d2      	b.n	8005702 <__sinit+0xe>
 800575c:	08005c5c 	.word	0x08005c5c
 8005760:	08005679 	.word	0x08005679

08005764 <__sfp>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	0007      	movs	r7, r0
 8005768:	f7ff ffa4 	bl	80056b4 <__sfp_lock_acquire>
 800576c:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <__sfp+0x88>)
 800576e:	681e      	ldr	r6, [r3, #0]
 8005770:	69b3      	ldr	r3, [r6, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <__sfp+0x18>
 8005776:	0030      	movs	r0, r6
 8005778:	f7ff ffbc 	bl	80056f4 <__sinit>
 800577c:	3648      	adds	r6, #72	; 0x48
 800577e:	68b4      	ldr	r4, [r6, #8]
 8005780:	6873      	ldr	r3, [r6, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	d504      	bpl.n	8005790 <__sfp+0x2c>
 8005786:	6833      	ldr	r3, [r6, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d022      	beq.n	80057d2 <__sfp+0x6e>
 800578c:	6836      	ldr	r6, [r6, #0]
 800578e:	e7f6      	b.n	800577e <__sfp+0x1a>
 8005790:	220c      	movs	r2, #12
 8005792:	5ea5      	ldrsh	r5, [r4, r2]
 8005794:	2d00      	cmp	r5, #0
 8005796:	d11a      	bne.n	80057ce <__sfp+0x6a>
 8005798:	0020      	movs	r0, r4
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <__sfp+0x8c>)
 800579c:	3058      	adds	r0, #88	; 0x58
 800579e:	60e3      	str	r3, [r4, #12]
 80057a0:	6665      	str	r5, [r4, #100]	; 0x64
 80057a2:	f000 f847 	bl	8005834 <__retarget_lock_init_recursive>
 80057a6:	f7ff ff8d 	bl	80056c4 <__sfp_lock_release>
 80057aa:	0020      	movs	r0, r4
 80057ac:	2208      	movs	r2, #8
 80057ae:	0029      	movs	r1, r5
 80057b0:	6025      	str	r5, [r4, #0]
 80057b2:	60a5      	str	r5, [r4, #8]
 80057b4:	6065      	str	r5, [r4, #4]
 80057b6:	6125      	str	r5, [r4, #16]
 80057b8:	6165      	str	r5, [r4, #20]
 80057ba:	61a5      	str	r5, [r4, #24]
 80057bc:	305c      	adds	r0, #92	; 0x5c
 80057be:	f7ff f90f 	bl	80049e0 <memset>
 80057c2:	6365      	str	r5, [r4, #52]	; 0x34
 80057c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80057c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80057c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80057ca:	0020      	movs	r0, r4
 80057cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ce:	3468      	adds	r4, #104	; 0x68
 80057d0:	e7d7      	b.n	8005782 <__sfp+0x1e>
 80057d2:	2104      	movs	r1, #4
 80057d4:	0038      	movs	r0, r7
 80057d6:	f7ff ff57 	bl	8005688 <__sfmoreglue>
 80057da:	1e04      	subs	r4, r0, #0
 80057dc:	6030      	str	r0, [r6, #0]
 80057de:	d1d5      	bne.n	800578c <__sfp+0x28>
 80057e0:	f7ff ff70 	bl	80056c4 <__sfp_lock_release>
 80057e4:	230c      	movs	r3, #12
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	e7ef      	b.n	80057ca <__sfp+0x66>
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	08005c5c 	.word	0x08005c5c
 80057f0:	ffff0001 	.word	0xffff0001

080057f4 <_fwalk_reent>:
 80057f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f6:	0004      	movs	r4, r0
 80057f8:	0006      	movs	r6, r0
 80057fa:	2700      	movs	r7, #0
 80057fc:	9101      	str	r1, [sp, #4]
 80057fe:	3448      	adds	r4, #72	; 0x48
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	68a5      	ldr	r5, [r4, #8]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	9b00      	ldr	r3, [sp, #0]
 8005808:	3b01      	subs	r3, #1
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	d504      	bpl.n	8005818 <_fwalk_reent+0x24>
 800580e:	6824      	ldr	r4, [r4, #0]
 8005810:	2c00      	cmp	r4, #0
 8005812:	d1f5      	bne.n	8005800 <_fwalk_reent+0xc>
 8005814:	0038      	movs	r0, r7
 8005816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005818:	89ab      	ldrh	r3, [r5, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d908      	bls.n	8005830 <_fwalk_reent+0x3c>
 800581e:	220e      	movs	r2, #14
 8005820:	5eab      	ldrsh	r3, [r5, r2]
 8005822:	3301      	adds	r3, #1
 8005824:	d004      	beq.n	8005830 <_fwalk_reent+0x3c>
 8005826:	0029      	movs	r1, r5
 8005828:	0030      	movs	r0, r6
 800582a:	9b01      	ldr	r3, [sp, #4]
 800582c:	4798      	blx	r3
 800582e:	4307      	orrs	r7, r0
 8005830:	3568      	adds	r5, #104	; 0x68
 8005832:	e7e8      	b.n	8005806 <_fwalk_reent+0x12>

08005834 <__retarget_lock_init_recursive>:
 8005834:	4770      	bx	lr

08005836 <__retarget_lock_acquire_recursive>:
 8005836:	4770      	bx	lr

08005838 <__retarget_lock_release_recursive>:
 8005838:	4770      	bx	lr
	...

0800583c <__swhatbuf_r>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	000e      	movs	r6, r1
 8005840:	001d      	movs	r5, r3
 8005842:	230e      	movs	r3, #14
 8005844:	5ec9      	ldrsh	r1, [r1, r3]
 8005846:	0014      	movs	r4, r2
 8005848:	b096      	sub	sp, #88	; 0x58
 800584a:	2900      	cmp	r1, #0
 800584c:	da08      	bge.n	8005860 <__swhatbuf_r+0x24>
 800584e:	220c      	movs	r2, #12
 8005850:	5eb3      	ldrsh	r3, [r6, r2]
 8005852:	2200      	movs	r2, #0
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	061b      	lsls	r3, r3, #24
 8005858:	d411      	bmi.n	800587e <__swhatbuf_r+0x42>
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	e00f      	b.n	8005880 <__swhatbuf_r+0x44>
 8005860:	466a      	mov	r2, sp
 8005862:	f000 f92f 	bl	8005ac4 <_fstat_r>
 8005866:	2800      	cmp	r0, #0
 8005868:	dbf1      	blt.n	800584e <__swhatbuf_r+0x12>
 800586a:	23f0      	movs	r3, #240	; 0xf0
 800586c:	9901      	ldr	r1, [sp, #4]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	4019      	ands	r1, r3
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <__swhatbuf_r+0x4c>)
 8005874:	18c9      	adds	r1, r1, r3
 8005876:	424b      	negs	r3, r1
 8005878:	4159      	adcs	r1, r3
 800587a:	6029      	str	r1, [r5, #0]
 800587c:	e7ed      	b.n	800585a <__swhatbuf_r+0x1e>
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	2000      	movs	r0, #0
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	b016      	add	sp, #88	; 0x58
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	ffffe000 	.word	0xffffe000

0800588c <__smakebuf_r>:
 800588c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800588e:	2602      	movs	r6, #2
 8005890:	898b      	ldrh	r3, [r1, #12]
 8005892:	0005      	movs	r5, r0
 8005894:	000c      	movs	r4, r1
 8005896:	4233      	tst	r3, r6
 8005898:	d006      	beq.n	80058a8 <__smakebuf_r+0x1c>
 800589a:	0023      	movs	r3, r4
 800589c:	3347      	adds	r3, #71	; 0x47
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	2301      	movs	r3, #1
 80058a4:	6163      	str	r3, [r4, #20]
 80058a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80058a8:	466a      	mov	r2, sp
 80058aa:	ab01      	add	r3, sp, #4
 80058ac:	f7ff ffc6 	bl	800583c <__swhatbuf_r>
 80058b0:	9900      	ldr	r1, [sp, #0]
 80058b2:	0007      	movs	r7, r0
 80058b4:	0028      	movs	r0, r5
 80058b6:	f7ff f9ad 	bl	8004c14 <_malloc_r>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d108      	bne.n	80058d0 <__smakebuf_r+0x44>
 80058be:	220c      	movs	r2, #12
 80058c0:	5ea3      	ldrsh	r3, [r4, r2]
 80058c2:	059a      	lsls	r2, r3, #22
 80058c4:	d4ef      	bmi.n	80058a6 <__smakebuf_r+0x1a>
 80058c6:	2203      	movs	r2, #3
 80058c8:	4393      	bics	r3, r2
 80058ca:	431e      	orrs	r6, r3
 80058cc:	81a6      	strh	r6, [r4, #12]
 80058ce:	e7e4      	b.n	800589a <__smakebuf_r+0xe>
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <__smakebuf_r+0x84>)
 80058d2:	62ab      	str	r3, [r5, #40]	; 0x28
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	89a2      	ldrh	r2, [r4, #12]
 80058d8:	6020      	str	r0, [r4, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	9b00      	ldr	r3, [sp, #0]
 80058e0:	6120      	str	r0, [r4, #16]
 80058e2:	6163      	str	r3, [r4, #20]
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <__smakebuf_r+0x7a>
 80058ea:	0028      	movs	r0, r5
 80058ec:	230e      	movs	r3, #14
 80058ee:	5ee1      	ldrsh	r1, [r4, r3]
 80058f0:	f000 f8fa 	bl	8005ae8 <_isatty_r>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d006      	beq.n	8005906 <__smakebuf_r+0x7a>
 80058f8:	2203      	movs	r2, #3
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	4393      	bics	r3, r2
 80058fe:	001a      	movs	r2, r3
 8005900:	2301      	movs	r3, #1
 8005902:	4313      	orrs	r3, r2
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	89a0      	ldrh	r0, [r4, #12]
 8005908:	4307      	orrs	r7, r0
 800590a:	81a7      	strh	r7, [r4, #12]
 800590c:	e7cb      	b.n	80058a6 <__smakebuf_r+0x1a>
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	08005679 	.word	0x08005679

08005914 <memchr>:
 8005914:	b2c9      	uxtb	r1, r1
 8005916:	1882      	adds	r2, r0, r2
 8005918:	4290      	cmp	r0, r2
 800591a:	d101      	bne.n	8005920 <memchr+0xc>
 800591c:	2000      	movs	r0, #0
 800591e:	4770      	bx	lr
 8005920:	7803      	ldrb	r3, [r0, #0]
 8005922:	428b      	cmp	r3, r1
 8005924:	d0fb      	beq.n	800591e <memchr+0xa>
 8005926:	3001      	adds	r0, #1
 8005928:	e7f6      	b.n	8005918 <memchr+0x4>
	...

0800592c <__malloc_lock>:
 800592c:	b510      	push	{r4, lr}
 800592e:	4802      	ldr	r0, [pc, #8]	; (8005938 <__malloc_lock+0xc>)
 8005930:	f7ff ff81 	bl	8005836 <__retarget_lock_acquire_recursive>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	200001a4 	.word	0x200001a4

0800593c <__malloc_unlock>:
 800593c:	b510      	push	{r4, lr}
 800593e:	4802      	ldr	r0, [pc, #8]	; (8005948 <__malloc_unlock+0xc>)
 8005940:	f7ff ff7a 	bl	8005838 <__retarget_lock_release_recursive>
 8005944:	bd10      	pop	{r4, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	200001a4 	.word	0x200001a4

0800594c <_raise_r>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	0004      	movs	r4, r0
 8005950:	000d      	movs	r5, r1
 8005952:	291f      	cmp	r1, #31
 8005954:	d904      	bls.n	8005960 <_raise_r+0x14>
 8005956:	2316      	movs	r3, #22
 8005958:	6003      	str	r3, [r0, #0]
 800595a:	2001      	movs	r0, #1
 800595c:	4240      	negs	r0, r0
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <_raise_r+0x24>
 8005966:	008a      	lsls	r2, r1, #2
 8005968:	189b      	adds	r3, r3, r2
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2a00      	cmp	r2, #0
 800596e:	d108      	bne.n	8005982 <_raise_r+0x36>
 8005970:	0020      	movs	r0, r4
 8005972:	f000 f831 	bl	80059d8 <_getpid_r>
 8005976:	002a      	movs	r2, r5
 8005978:	0001      	movs	r1, r0
 800597a:	0020      	movs	r0, r4
 800597c:	f000 f81a 	bl	80059b4 <_kill_r>
 8005980:	e7ed      	b.n	800595e <_raise_r+0x12>
 8005982:	2000      	movs	r0, #0
 8005984:	2a01      	cmp	r2, #1
 8005986:	d0ea      	beq.n	800595e <_raise_r+0x12>
 8005988:	1c51      	adds	r1, r2, #1
 800598a:	d103      	bne.n	8005994 <_raise_r+0x48>
 800598c:	2316      	movs	r3, #22
 800598e:	3001      	adds	r0, #1
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	e7e4      	b.n	800595e <_raise_r+0x12>
 8005994:	2400      	movs	r4, #0
 8005996:	0028      	movs	r0, r5
 8005998:	601c      	str	r4, [r3, #0]
 800599a:	4790      	blx	r2
 800599c:	0020      	movs	r0, r4
 800599e:	e7de      	b.n	800595e <_raise_r+0x12>

080059a0 <raise>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <raise+0x10>)
 80059a4:	0001      	movs	r1, r0
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	f7ff ffd0 	bl	800594c <_raise_r>
 80059ac:	bd10      	pop	{r4, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	2000000c 	.word	0x2000000c

080059b4 <_kill_r>:
 80059b4:	2300      	movs	r3, #0
 80059b6:	b570      	push	{r4, r5, r6, lr}
 80059b8:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_kill_r+0x20>)
 80059ba:	0004      	movs	r4, r0
 80059bc:	0008      	movs	r0, r1
 80059be:	0011      	movs	r1, r2
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f7fc f85f 	bl	8001a84 <_kill>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d103      	bne.n	80059d2 <_kill_r+0x1e>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d000      	beq.n	80059d2 <_kill_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	200001a8 	.word	0x200001a8

080059d8 <_getpid_r>:
 80059d8:	b510      	push	{r4, lr}
 80059da:	f7fc f84d 	bl	8001a78 <_getpid>
 80059de:	bd10      	pop	{r4, pc}

080059e0 <__sread>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	000c      	movs	r4, r1
 80059e4:	250e      	movs	r5, #14
 80059e6:	5f49      	ldrsh	r1, [r1, r5]
 80059e8:	f000 f8a4 	bl	8005b34 <_read_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	db03      	blt.n	80059f8 <__sread+0x18>
 80059f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059f2:	181b      	adds	r3, r3, r0
 80059f4:	6563      	str	r3, [r4, #84]	; 0x54
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	4a02      	ldr	r2, [pc, #8]	; (8005a04 <__sread+0x24>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	e7f9      	b.n	80059f6 <__sread+0x16>
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	ffffefff 	.word	0xffffefff

08005a08 <__swrite>:
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	001f      	movs	r7, r3
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	0005      	movs	r5, r0
 8005a10:	000c      	movs	r4, r1
 8005a12:	0016      	movs	r6, r2
 8005a14:	05db      	lsls	r3, r3, #23
 8005a16:	d505      	bpl.n	8005a24 <__swrite+0x1c>
 8005a18:	230e      	movs	r3, #14
 8005a1a:	5ec9      	ldrsh	r1, [r1, r3]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2302      	movs	r3, #2
 8005a20:	f000 f874 	bl	8005b0c <_lseek_r>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <__swrite+0x34>)
 8005a28:	0028      	movs	r0, r5
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	81a3      	strh	r3, [r4, #12]
 8005a2e:	0032      	movs	r2, r6
 8005a30:	230e      	movs	r3, #14
 8005a32:	5ee1      	ldrsh	r1, [r4, r3]
 8005a34:	003b      	movs	r3, r7
 8005a36:	f000 f81f 	bl	8005a78 <_write_r>
 8005a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3c:	ffffefff 	.word	0xffffefff

08005a40 <__sseek>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	000c      	movs	r4, r1
 8005a44:	250e      	movs	r5, #14
 8005a46:	5f49      	ldrsh	r1, [r1, r5]
 8005a48:	f000 f860 	bl	8005b0c <_lseek_r>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	1c42      	adds	r2, r0, #1
 8005a50:	d103      	bne.n	8005a5a <__sseek+0x1a>
 8005a52:	4a05      	ldr	r2, [pc, #20]	; (8005a68 <__sseek+0x28>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	0152      	lsls	r2, r2, #5
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	6560      	str	r0, [r4, #84]	; 0x54
 8005a64:	e7f8      	b.n	8005a58 <__sseek+0x18>
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	ffffefff 	.word	0xffffefff

08005a6c <__sclose>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	230e      	movs	r3, #14
 8005a70:	5ec9      	ldrsh	r1, [r1, r3]
 8005a72:	f000 f815 	bl	8005aa0 <_close_r>
 8005a76:	bd10      	pop	{r4, pc}

08005a78 <_write_r>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	0004      	movs	r4, r0
 8005a7c:	0008      	movs	r0, r1
 8005a7e:	0011      	movs	r1, r2
 8005a80:	001a      	movs	r2, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	4d05      	ldr	r5, [pc, #20]	; (8005a9c <_write_r+0x24>)
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	f7fc f835 	bl	8001af6 <_write>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d103      	bne.n	8005a98 <_write_r+0x20>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d000      	beq.n	8005a98 <_write_r+0x20>
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	200001a8 	.word	0x200001a8

08005aa0 <_close_r>:
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	b570      	push	{r4, r5, r6, lr}
 8005aa4:	4d06      	ldr	r5, [pc, #24]	; (8005ac0 <_close_r+0x20>)
 8005aa6:	0004      	movs	r4, r0
 8005aa8:	0008      	movs	r0, r1
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	f7fc f83f 	bl	8001b2e <_close>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d103      	bne.n	8005abc <_close_r+0x1c>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d000      	beq.n	8005abc <_close_r+0x1c>
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	200001a8 	.word	0x200001a8

08005ac4 <_fstat_r>:
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b570      	push	{r4, r5, r6, lr}
 8005ac8:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_fstat_r+0x20>)
 8005aca:	0004      	movs	r4, r0
 8005acc:	0008      	movs	r0, r1
 8005ace:	0011      	movs	r1, r2
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	f7fc f836 	bl	8001b42 <_fstat>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	d103      	bne.n	8005ae2 <_fstat_r+0x1e>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d000      	beq.n	8005ae2 <_fstat_r+0x1e>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	200001a8 	.word	0x200001a8

08005ae8 <_isatty_r>:
 8005ae8:	2300      	movs	r3, #0
 8005aea:	b570      	push	{r4, r5, r6, lr}
 8005aec:	4d06      	ldr	r5, [pc, #24]	; (8005b08 <_isatty_r+0x20>)
 8005aee:	0004      	movs	r4, r0
 8005af0:	0008      	movs	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fc f833 	bl	8001b5e <_isatty>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d103      	bne.n	8005b04 <_isatty_r+0x1c>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d000      	beq.n	8005b04 <_isatty_r+0x1c>
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	200001a8 	.word	0x200001a8

08005b0c <_lseek_r>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	0004      	movs	r4, r0
 8005b10:	0008      	movs	r0, r1
 8005b12:	0011      	movs	r1, r2
 8005b14:	001a      	movs	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	4d05      	ldr	r5, [pc, #20]	; (8005b30 <_lseek_r+0x24>)
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	f7fc f828 	bl	8001b70 <_lseek>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d103      	bne.n	8005b2c <_lseek_r+0x20>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d000      	beq.n	8005b2c <_lseek_r+0x20>
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	bd70      	pop	{r4, r5, r6, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	200001a8 	.word	0x200001a8

08005b34 <_read_r>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	0004      	movs	r4, r0
 8005b38:	0008      	movs	r0, r1
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	001a      	movs	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	; (8005b58 <_read_r+0x24>)
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f7fb ffba 	bl	8001abc <_read>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d103      	bne.n	8005b54 <_read_r+0x20>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d000      	beq.n	8005b54 <_read_r+0x20>
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	200001a8 	.word	0x200001a8

08005b5c <_init>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr

08005b68 <_fini>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr
