
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c5c  08005c5c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c5c  08005c5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08005cd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08005cd4  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c071  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e34  00000000  00000000  0002c109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193cb  00000000  00000000  0002f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d346  00000000  00000000  000486b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf20  00000000  00000000  000559f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d7c  00000000  00000000  000e296c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a78 	.word	0x08005a78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005a78 	.word	0x08005a78

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (huart -> Instance == huart1.Instance){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <HAL_UART_RxCpltCallback+0x3c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d10f      	bne.n	80002c4 <HAL_UART_RxCpltCallback+0x34>
	  if (rxData < 55) currentEffect =  rxData - 48;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <HAL_UART_RxCpltCallback+0x40>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b36      	cmp	r3, #54	; 0x36
 80002aa:	d805      	bhi.n	80002b8 <HAL_UART_RxCpltCallback+0x28>
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <HAL_UART_RxCpltCallback+0x40>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	3b30      	subs	r3, #48	; 0x30
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <HAL_UART_RxCpltCallback+0x44>)
 80002b6:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1,&rxData, 1);
 80002b8:	4905      	ldr	r1, [pc, #20]	; (80002d0 <HAL_UART_RxCpltCallback+0x40>)
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_UART_RxCpltCallback+0x3c>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0018      	movs	r0, r3
 80002c0:	f003 f9d8 	bl	8003674 <HAL_UART_Receive_IT>
  }
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b002      	add	sp, #8
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	200000f0 	.word	0x200000f0
 80002d0:	20000190 	.word	0x20000190
 80002d4:	2000018c 	.word	0x2000018c

080002d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	0002      	movs	r2, r0
 80002e0:	1dbb      	adds	r3, r7, #6
 80002e2:	801a      	strh	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 80002e4:	2390      	movs	r3, #144	; 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2102      	movs	r1, #2
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 ffa4 	bl	8002238 <HAL_GPIO_ReadPin>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d10c      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0x36>
  {
	  if (currentEffect < 7) currentEffect++;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	dc05      	bgt.n	8000308 <HAL_GPIO_EXTI_Callback+0x30>
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1c5a      	adds	r2, r3, #1
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	e002      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x36>
	  else currentEffect = 0;
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <HAL_GPIO_EXTI_Callback+0x44>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
  }
  HAL_Delay(200);
 800030e:	20c8      	movs	r0, #200	; 0xc8
 8000310:	f001 fcaa 	bl	8001c68 <HAL_Delay>
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b002      	add	sp, #8
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000018c 	.word	0x2000018c

08000320 <TransmitData>:

void TransmitData(uint8_t* data) //ok
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2200      	movs	r2, #0
 800032e:	2140      	movs	r1, #64	; 0x40
 8000330:	0018      	movs	r0, r3
 8000332:	f001 ff9e 	bl	8002272 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data, 9, 100);
 8000336:	6879      	ldr	r1, [r7, #4]
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <TransmitData+0x38>)
 800033a:	2364      	movs	r3, #100	; 0x64
 800033c:	2209      	movs	r2, #9
 800033e:	f002 fe77 	bl	8003030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	2201      	movs	r2, #1
 8000348:	2140      	movs	r1, #64	; 0x40
 800034a:	0018      	movs	r0, r3
 800034c:	f001 ff91 	bl	8002272 <HAL_GPIO_WritePin>
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b002      	add	sp, #8
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000008c 	.word	0x2000008c

0800035c <mergeData>:

void mergeData(uint8_t column_data[], uint8_t layer_data) //ok
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	000a      	movs	r2, r1
 8000366:	1cfb      	adds	r3, r7, #3
 8000368:	701a      	strb	r2, [r3, #0]
	dataOut[0] = layer_data;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <mergeData+0x48>)
 800036c:	1cfa      	adds	r2, r7, #3
 800036e:	7812      	ldrb	r2, [r2, #0]
 8000370:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8000372:	2301      	movs	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e00c      	b.n	8000392 <mergeData+0x36>
	{
		dataOut[i] = column_data[i-1];
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	3b01      	subs	r3, #1
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	18d3      	adds	r3, r2, r3
 8000380:	7819      	ldrb	r1, [r3, #0]
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <mergeData+0x48>)
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	18d3      	adds	r3, r2, r3
 8000388:	1c0a      	adds	r2, r1, #0
 800038a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2b08      	cmp	r3, #8
 8000396:	ddef      	ble.n	8000378 <mergeData+0x1c>
	}
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b004      	add	sp, #16
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	20000180 	.word	0x20000180

080003a8 <clearCube>:
		TransmitData(dataOut);
	}
}

void clearCube() //ok
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	layer = 0x00;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <clearCube+0x48>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	e007      	b.n	80003ca <clearCube+0x22>
	{
		column[i] = 0x00;
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <clearCube+0x4c>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	18d3      	adds	r3, r2, r3
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	ddf4      	ble.n	80003ba <clearCube+0x12>
	}
	mergeData(column, layer);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <clearCube+0x48>)
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <clearCube+0x4c>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ffbf 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <clearCube+0x50>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ff9d 	bl	8000320 <TransmitData>
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b002      	add	sp, #8
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	20000174 	.word	0x20000174
 80003f4:	20000178 	.word	0x20000178
 80003f8:	20000180 	.word	0x20000180

080003fc <diagonalCube>:

void diagonalCube() //ok
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
	layer = 0x18;
 8000402:	4b44      	ldr	r3, [pc, #272]	; (8000514 <diagonalCube+0x118>)
 8000404:	2218      	movs	r2, #24
 8000406:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 8000408:	2303      	movs	r3, #3
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e007      	b.n	800041e <diagonalCube+0x22>
	{
		column[i] = 0x18;
 800040e:	4a42      	ldr	r2, [pc, #264]	; (8000518 <diagonalCube+0x11c>)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	18d3      	adds	r3, r2, r3
 8000414:	2218      	movs	r2, #24
 8000416:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	2b04      	cmp	r3, #4
 8000422:	ddf4      	ble.n	800040e <diagonalCube+0x12>
	}
	mergeData(column, layer);
 8000424:	4b3b      	ldr	r3, [pc, #236]	; (8000514 <diagonalCube+0x118>)
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	4b3b      	ldr	r3, [pc, #236]	; (8000518 <diagonalCube+0x11c>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff95 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000432:	4b3a      	ldr	r3, [pc, #232]	; (800051c <diagonalCube+0x120>)
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ff73 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 800043a:	20fa      	movs	r0, #250	; 0xfa
 800043c:	f001 fc14 	bl	8001c68 <HAL_Delay>
	clearCube();
 8000440:	f7ff ffb2 	bl	80003a8 <clearCube>

	layer = 0x24;
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <diagonalCube+0x118>)
 8000446:	2224      	movs	r2, #36	; 0x24
 8000448:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	e007      	b.n	8000460 <diagonalCube+0x64>
	{
		column[i] = 0x3c;
 8000450:	4a31      	ldr	r2, [pc, #196]	; (8000518 <diagonalCube+0x11c>)
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	18d3      	adds	r3, r2, r3
 8000456:	223c      	movs	r2, #60	; 0x3c
 8000458:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	3301      	adds	r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	2b05      	cmp	r3, #5
 8000464:	ddf4      	ble.n	8000450 <diagonalCube+0x54>
	}
	mergeData(column, layer);
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <diagonalCube+0x118>)
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <diagonalCube+0x11c>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f7ff ff74 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <diagonalCube+0x120>)
 8000476:	0018      	movs	r0, r3
 8000478:	f7ff ff52 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 800047c:	20fa      	movs	r0, #250	; 0xfa
 800047e:	f001 fbf3 	bl	8001c68 <HAL_Delay>
	clearCube();
 8000482:	f7ff ff91 	bl	80003a8 <clearCube>

	layer = 0x42;
 8000486:	4b23      	ldr	r3, [pc, #140]	; (8000514 <diagonalCube+0x118>)
 8000488:	2242      	movs	r2, #66	; 0x42
 800048a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 800048c:	2301      	movs	r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	e007      	b.n	80004a2 <diagonalCube+0xa6>
	{
		column[i] = 0x7e;
 8000492:	4a21      	ldr	r2, [pc, #132]	; (8000518 <diagonalCube+0x11c>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	18d3      	adds	r3, r2, r3
 8000498:	227e      	movs	r2, #126	; 0x7e
 800049a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3301      	adds	r3, #1
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	ddf4      	ble.n	8000492 <diagonalCube+0x96>
	}
	mergeData(column, layer);
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <diagonalCube+0x118>)
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <diagonalCube+0x11c>)
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff53 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <diagonalCube+0x120>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff ff31 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 80004be:	20fa      	movs	r0, #250	; 0xfa
 80004c0:	f001 fbd2 	bl	8001c68 <HAL_Delay>
	clearCube();
 80004c4:	f7ff ff70 	bl	80003a8 <clearCube>

	layer = 0x81;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <diagonalCube+0x118>)
 80004ca:	2281      	movs	r2, #129	; 0x81
 80004cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	e007      	b.n	80004e4 <diagonalCube+0xe8>
	{
		column[i]=  0xff;
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <diagonalCube+0x11c>)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	22ff      	movs	r2, #255	; 0xff
 80004dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	2b07      	cmp	r3, #7
 80004e8:	ddf4      	ble.n	80004d4 <diagonalCube+0xd8>
	}
	mergeData(column, layer);
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <diagonalCube+0x118>)
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <diagonalCube+0x11c>)
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff ff32 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <diagonalCube+0x120>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff ff10 	bl	8000320 <TransmitData>
	HAL_Delay(delay/2);
 8000500:	20fa      	movs	r0, #250	; 0xfa
 8000502:	f001 fbb1 	bl	8001c68 <HAL_Delay>
	clearCube();
 8000506:	f7ff ff4f 	bl	80003a8 <clearCube>
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b004      	add	sp, #16
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	20000174 	.word	0x20000174
 8000518:	20000178 	.word	0x20000178
 800051c:	20000180 	.word	0x20000180

08000520 <planeZCube>:

void planeZCube() //ok
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	e007      	b.n	800053c <planeZCube+0x1c>
	{
		column[i] = 0xff;
 800052c:	4a24      	ldr	r2, [pc, #144]	; (80005c0 <planeZCube+0xa0>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	22ff      	movs	r2, #255	; 0xff
 8000534:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3301      	adds	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	ddf4      	ble.n	800052c <planeZCube+0xc>
	}
	for (int i = 8; i > -8; i--)
 8000542:	2308      	movs	r3, #8
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	e031      	b.n	80005ac <planeZCube+0x8c>
	{
		if (i >= 0) {
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db15      	blt.n	800057a <planeZCube+0x5a>
			layer = 0x01 << i;
 800054e:	2201      	movs	r2, #1
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	409a      	lsls	r2, r3
 8000554:	0013      	movs	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <planeZCube+0xa4>)
 800055a:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <planeZCube+0xa4>)
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <planeZCube+0xa0>)
 8000562:	0011      	movs	r1, r2
 8000564:	0018      	movs	r0, r3
 8000566:	f7ff fef9 	bl	800035c <mergeData>
			TransmitData(dataOut);
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <planeZCube+0xa8>)
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff fed7 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 8000572:	207d      	movs	r0, #125	; 0x7d
 8000574:	f001 fb78 	bl	8001c68 <HAL_Delay>
 8000578:	e015      	b.n	80005a6 <planeZCube+0x86>
		} else {
			layer = 0x80 >> (7 + i);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	3307      	adds	r3, #7
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	411a      	asrs	r2, r3
 8000582:	0013      	movs	r3, r2
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <planeZCube+0xa4>)
 8000588:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <planeZCube+0xa4>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <planeZCube+0xa0>)
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff fee2 	bl	800035c <mergeData>
			TransmitData(dataOut);
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <planeZCube+0xa8>)
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff fec0 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 80005a0:	207d      	movs	r0, #125	; 0x7d
 80005a2:	f001 fb61 	bl	8001c68 <HAL_Delay>
	for (int i = 8; i > -8; i--)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	3307      	adds	r3, #7
 80005b0:	daca      	bge.n	8000548 <planeZCube+0x28>
		}
	}
	clearCube();
 80005b2:	f7ff fef9 	bl	80003a8 <clearCube>
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000178 	.word	0x20000178
 80005c4:	20000174 	.word	0x20000174
 80005c8:	20000180 	.word	0x20000180

080005cc <planeYCube>:

void planeYCube() //ok
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
	layer = 0xff;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <planeYCube+0xb8>)
 80005d4:	22ff      	movs	r2, #255	; 0xff
 80005d6:	701a      	strb	r2, [r3, #0]
	for (int i = 8; i > -8; i--)
 80005d8:	2308      	movs	r3, #8
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e049      	b.n	8000672 <planeYCube+0xa6>
	{
		if (i >= 0) {
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db21      	blt.n	8000628 <planeYCube+0x5c>
			for (int j = 0; j < 8; j++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	e00c      	b.n	8000604 <planeYCube+0x38>
			{
				column[j] = 0x01 << i;
 80005ea:	2201      	movs	r2, #1
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0013      	movs	r3, r2
 80005f2:	b2d9      	uxtb	r1, r3
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <planeYCube+0xbc>)
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	18d3      	adds	r3, r2, r3
 80005fa:	1c0a      	adds	r2, r1, #0
 80005fc:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3301      	adds	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2b07      	cmp	r3, #7
 8000608:	ddef      	ble.n	80005ea <planeYCube+0x1e>
			}
			mergeData(column, layer);
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <planeYCube+0xb8>)
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <planeYCube+0xbc>)
 8000610:	0011      	movs	r1, r2
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff fea2 	bl	800035c <mergeData>
			TransmitData(dataOut);
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <planeYCube+0xc0>)
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff fe80 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 8000620:	207d      	movs	r0, #125	; 0x7d
 8000622:	f001 fb21 	bl	8001c68 <HAL_Delay>
 8000626:	e021      	b.n	800066c <planeYCube+0xa0>
		} else {
			for (int j = 0; j < 8; j++)
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	e00d      	b.n	800064a <planeYCube+0x7e>
			{
				column[j] = 0x80 >> (7 + i);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3307      	adds	r3, #7
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	411a      	asrs	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	b2d9      	uxtb	r1, r3
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <planeYCube+0xbc>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	18d3      	adds	r3, r2, r3
 8000640:	1c0a      	adds	r2, r1, #0
 8000642:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b07      	cmp	r3, #7
 800064e:	ddee      	ble.n	800062e <planeYCube+0x62>
			}
			mergeData(column, layer);
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <planeYCube+0xb8>)
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <planeYCube+0xbc>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fe7f 	bl	800035c <mergeData>
			TransmitData(dataOut);
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <planeYCube+0xc0>)
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff fe5d 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 8000666:	207d      	movs	r0, #125	; 0x7d
 8000668:	f001 fafe 	bl	8001c68 <HAL_Delay>
	for (int i = 8; i > -8; i--)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3b01      	subs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3307      	adds	r3, #7
 8000676:	dab2      	bge.n	80005de <planeYCube+0x12>
		}
	}
	clearCube();
 8000678:	f7ff fe96 	bl	80003a8 <clearCube>
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b004      	add	sp, #16
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000174 	.word	0x20000174
 8000688:	20000178 	.word	0x20000178
 800068c:	20000180 	.word	0x20000180

08000690 <planeXCube>:

void planeXCube() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
		for (int i = -7; i < 8; i++)
 8000696:	2307      	movs	r3, #7
 8000698:	425b      	negs	r3, r3
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	e01c      	b.n	80006d8 <planeXCube+0x48>
		{
			layer = 0xff;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <planeXCube+0x58>)
 80006a0:	22ff      	movs	r2, #255	; 0xff
 80006a2:	701a      	strb	r2, [r3, #0]
			column[abs(i)] = 0xff;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	17da      	asrs	r2, r3, #31
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	4053      	eors	r3, r2
 80006ac:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <planeXCube+0x5c>)
 80006ae:	21ff      	movs	r1, #255	; 0xff
 80006b0:	54d1      	strb	r1, [r2, r3]
			mergeData(column, layer);
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <planeXCube+0x58>)
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <planeXCube+0x5c>)
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fe4e 	bl	800035c <mergeData>
			TransmitData(dataOut);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <planeXCube+0x60>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fe2c 	bl	8000320 <TransmitData>
			HAL_Delay(delay*0.25);
 80006c8:	207d      	movs	r0, #125	; 0x7d
 80006ca:	f001 facd 	bl	8001c68 <HAL_Delay>
			clearCube();
 80006ce:	f7ff fe6b 	bl	80003a8 <clearCube>
		for (int i = -7; i < 8; i++)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	dddf      	ble.n	800069e <planeXCube+0xe>
		}
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000174 	.word	0x20000174
 80006ec:	20000178 	.word	0x20000178
 80006f0:	20000180 	.word	0x20000180

080006f4 <randomRainCube>:

void randomRainCube() //ok
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0

	srand(HAL_GetTick());
 80006fa:	f001 faab 	bl	8001c54 <HAL_GetTick>
 80006fe:	0003      	movs	r3, r0
 8000700:	0018      	movs	r0, r3
 8000702:	f004 f903 	bl	800490c <srand>
	for (int i = 0; i < 8; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e043      	b.n	8000794 <randomRainCube+0xa0>
		column[rand() % 8] = 0x01 << rand() % 8;
 800070c:	f004 f92e 	bl	800496c <rand>
 8000710:	0003      	movs	r3, r0
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <randomRainCube+0xb0>)
 8000714:	4013      	ands	r3, r2
 8000716:	d504      	bpl.n	8000722 <randomRainCube+0x2e>
 8000718:	3b01      	subs	r3, #1
 800071a:	2208      	movs	r2, #8
 800071c:	4252      	negs	r2, r2
 800071e:	4313      	orrs	r3, r2
 8000720:	3301      	adds	r3, #1
 8000722:	001a      	movs	r2, r3
 8000724:	2301      	movs	r3, #1
 8000726:	4093      	lsls	r3, r2
 8000728:	001c      	movs	r4, r3
 800072a:	f004 f91f 	bl	800496c <rand>
 800072e:	0003      	movs	r3, r0
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <randomRainCube+0xb0>)
 8000732:	4013      	ands	r3, r2
 8000734:	d504      	bpl.n	8000740 <randomRainCube+0x4c>
 8000736:	3b01      	subs	r3, #1
 8000738:	2208      	movs	r2, #8
 800073a:	4252      	negs	r2, r2
 800073c:	4313      	orrs	r3, r2
 800073e:	3301      	adds	r3, #1
 8000740:	001a      	movs	r2, r3
 8000742:	b2e1      	uxtb	r1, r4
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <randomRainCube+0xb4>)
 8000746:	5499      	strb	r1, [r3, r2]
	    for (int j = 0; j < 8; j++) {
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	e017      	b.n	800077e <randomRainCube+0x8a>
			layer = 0x80 >> j;
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	411a      	asrs	r2, r3
 8000754:	0013      	movs	r3, r2
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <randomRainCube+0xb8>)
 800075a:	701a      	strb	r2, [r3, #0]
	    	mergeData(column, layer);
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <randomRainCube+0xb8>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <randomRainCube+0xb4>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff fdf9 	bl	800035c <mergeData>
	    	TransmitData(dataOut);
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <randomRainCube+0xbc>)
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff fdd7 	bl	8000320 <TransmitData>
	    	HAL_Delay(35);
 8000772:	2023      	movs	r0, #35	; 0x23
 8000774:	f001 fa78 	bl	8001c68 <HAL_Delay>
	    for (int j = 0; j < 8; j++) {
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b07      	cmp	r3, #7
 8000782:	dde4      	ble.n	800074e <randomRainCube+0x5a>
	    }
	    clearCube();
 8000784:	f7ff fe10 	bl	80003a8 <clearCube>
	    HAL_Delay(delay*0.2);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f001 fa6d 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3301      	adds	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b07      	cmp	r3, #7
 8000798:	ddb8      	ble.n	800070c <randomRainCube+0x18>
	}
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b003      	add	sp, #12
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	80000007 	.word	0x80000007
 80007a8:	20000178 	.word	0x20000178
 80007ac:	20000174 	.word	0x20000174
 80007b0:	20000180 	.word	0x20000180

080007b4 <growShrinkCube>:

void growShrinkCube() //ok
{
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	b08f      	sub	sp, #60	; 0x3c
 80007b8:	af00      	add	r7, sp, #0
	int TIME = 150;
 80007ba:	2396      	movs	r3, #150	; 0x96
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t data1[9] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 80007be:	2128      	movs	r1, #40	; 0x28
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <growShrinkCube+0xbc>)
 80007c4:	ca11      	ldmia	r2!, {r0, r4}
 80007c6:	c311      	stmia	r3!, {r0, r4}
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	701a      	strb	r2, [r3, #0]
	uint8_t data2[9] = {0x7e,0x00,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x00};
 80007cc:	251c      	movs	r5, #28
 80007ce:	197b      	adds	r3, r7, r5
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <growShrinkCube+0xc0>)
 80007d2:	ca11      	ldmia	r2!, {r0, r4}
 80007d4:	c311      	stmia	r3!, {r0, r4}
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	701a      	strb	r2, [r3, #0]
	uint8_t data3[9] = {0x3c,0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00};
 80007da:	2610      	movs	r6, #16
 80007dc:	19bb      	adds	r3, r7, r6
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <growShrinkCube+0xc4>)
 80007e0:	ca11      	ldmia	r2!, {r0, r4}
 80007e2:	c311      	stmia	r3!, {r0, r4}
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	701a      	strb	r2, [r3, #0]
	uint8_t data4[9] = {0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <growShrinkCube+0xc8>)
 80007ec:	ca11      	ldmia	r2!, {r0, r4}
 80007ee:	c311      	stmia	r3!, {r0, r4}
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	701a      	strb	r2, [r3, #0]
	TransmitData(data1);
 80007f4:	000c      	movs	r4, r1
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fd91 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 80007fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fa31 	bl	8001c68 <HAL_Delay>
	TransmitData(data2);
 8000806:	197b      	adds	r3, r7, r5
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff fd89 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800080e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fa29 	bl	8001c68 <HAL_Delay>
	TransmitData(data3);
 8000816:	19bb      	adds	r3, r7, r6
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff fd81 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800081e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fa21 	bl	8001c68 <HAL_Delay>
	TransmitData(data4);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fd79 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fa19 	bl	8001c68 <HAL_Delay>
	TransmitData(data3);
 8000836:	19bb      	adds	r3, r7, r6
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fd71 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800083e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000840:	0018      	movs	r0, r3
 8000842:	f001 fa11 	bl	8001c68 <HAL_Delay>
	TransmitData(data2);
 8000846:	197b      	adds	r3, r7, r5
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff fd69 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800084e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fa09 	bl	8001c68 <HAL_Delay>
	TransmitData(data1);
 8000856:	193b      	adds	r3, r7, r4
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fd61 	bl	8000320 <TransmitData>
	HAL_Delay(TIME);
 800085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fa01 	bl	8001c68 <HAL_Delay>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b00f      	add	sp, #60	; 0x3c
 800086c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	08005a90 	.word	0x08005a90
 8000874:	08005a9c 	.word	0x08005a9c
 8000878:	08005aa8 	.word	0x08005aa8
 800087c:	08005ab4 	.word	0x08005ab4

08000880 <aroundEdgeCube>:

void aroundEdgeCube() //ok
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
		//layer 1
		layer = 0x81;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <aroundEdgeCube+0xa8>)
 8000888:	2281      	movs	r2, #129	; 0x81
 800088a:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0xff;
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <aroundEdgeCube+0xac>)
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	71da      	strb	r2, [r3, #7]
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <aroundEdgeCube+0xac>)
 8000894:	79da      	ldrb	r2, [r3, #7]
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <aroundEdgeCube+0xac>)
 8000898:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 800089a:	2301      	movs	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	e007      	b.n	80008b0 <aroundEdgeCube+0x30>
		{
			column[i] = 0x81;
 80008a0:	4a22      	ldr	r2, [pc, #136]	; (800092c <aroundEdgeCube+0xac>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	2281      	movs	r2, #129	; 0x81
 80008a8:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	ddf4      	ble.n	80008a0 <aroundEdgeCube+0x20>
		}
		mergeData(column, layer);
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <aroundEdgeCube+0xa8>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <aroundEdgeCube+0xac>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fd4c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <aroundEdgeCube+0xb0>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff fd2a 	bl	8000320 <TransmitData>
		HAL_Delay(0);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f001 f9cb 	bl	8001c68 <HAL_Delay>
		//layer 2- 7
		layer = 0x7e;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <aroundEdgeCube+0xa8>)
 80008d4:	227e      	movs	r2, #126	; 0x7e
 80008d6:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0x81;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <aroundEdgeCube+0xac>)
 80008da:	2281      	movs	r2, #129	; 0x81
 80008dc:	71da      	strb	r2, [r3, #7]
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <aroundEdgeCube+0xac>)
 80008e0:	79da      	ldrb	r2, [r3, #7]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <aroundEdgeCube+0xac>)
 80008e4:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 80008e6:	2301      	movs	r3, #1
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	e007      	b.n	80008fc <aroundEdgeCube+0x7c>
		{
			column[i] = 0x00;
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <aroundEdgeCube+0xac>)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	ddf4      	ble.n	80008ec <aroundEdgeCube+0x6c>
		}
		mergeData(column, layer);
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <aroundEdgeCube+0xa8>)
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <aroundEdgeCube+0xac>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fd26 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <aroundEdgeCube+0xb0>)
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fd04 	bl	8000320 <TransmitData>
		HAL_Delay(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f001 f9a5 	bl	8001c68 <HAL_Delay>
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	20000174 	.word	0x20000174
 800092c:	20000178 	.word	0x20000178
 8000930:	20000180 	.word	0x20000180

08000934 <diaedgeCube>:

void diaedgeCube() //ok
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
	int hold = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	607b      	str	r3, [r7, #4]
	//layer 1-8
	layer = 0x81;
 800093e:	4b5f      	ldr	r3, [pc, #380]	; (8000abc <diaedgeCube+0x188>)
 8000940:	2281      	movs	r2, #129	; 0x81
 8000942:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0xff;
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <diaedgeCube+0x18c>)
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	71da      	strb	r2, [r3, #7]
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <diaedgeCube+0x18c>)
 800094c:	79da      	ldrb	r2, [r3, #7]
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <diaedgeCube+0x18c>)
 8000950:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e007      	b.n	8000968 <diaedgeCube+0x34>
		column[i] = 0x81;
 8000958:	4a59      	ldr	r2, [pc, #356]	; (8000ac0 <diaedgeCube+0x18c>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	18d3      	adds	r3, r2, r3
 800095e:	2281      	movs	r2, #129	; 0x81
 8000960:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b06      	cmp	r3, #6
 800096c:	ddf4      	ble.n	8000958 <diaedgeCube+0x24>
	}
	mergeData(column, layer);
 800096e:	4b53      	ldr	r3, [pc, #332]	; (8000abc <diaedgeCube+0x188>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <diaedgeCube+0x18c>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fcf0 	bl	800035c <mergeData>
	TransmitData(dataOut);
 800097c:	4b51      	ldr	r3, [pc, #324]	; (8000ac4 <diaedgeCube+0x190>)
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fcce 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0018      	movs	r0, r3
 8000988:	f001 f96e 	bl	8001c68 <HAL_Delay>
	clearCube();
 800098c:	f7ff fd0c 	bl	80003a8 <clearCube>

	//layer 2-7
	layer = 0x42;
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <diaedgeCube+0x188>)
 8000992:	2242      	movs	r2, #66	; 0x42
 8000994:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 8000996:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <diaedgeCube+0x18c>)
 8000998:	2281      	movs	r2, #129	; 0x81
 800099a:	71da      	strb	r2, [r3, #7]
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <diaedgeCube+0x18c>)
 800099e:	79da      	ldrb	r2, [r3, #7]
 80009a0:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <diaedgeCube+0x18c>)
 80009a2:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = 0x42;
 80009a4:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <diaedgeCube+0x18c>)
 80009a6:	2242      	movs	r2, #66	; 0x42
 80009a8:	719a      	strb	r2, [r3, #6]
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <diaedgeCube+0x18c>)
 80009ac:	799a      	ldrb	r2, [r3, #6]
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <diaedgeCube+0x18c>)
 80009b0:	705a      	strb	r2, [r3, #1]
	for (int i = 2; i < 6; i++) {
 80009b2:	2302      	movs	r3, #2
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	e007      	b.n	80009c8 <diaedgeCube+0x94>
		column[i] = 0x00;
 80009b8:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <diaedgeCube+0x18c>)
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++) {
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	ddf4      	ble.n	80009b8 <diaedgeCube+0x84>
	}
	mergeData(column, layer);
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <diaedgeCube+0x188>)
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <diaedgeCube+0x18c>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fcc0 	bl	800035c <mergeData>
	TransmitData(dataOut);
 80009dc:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <diaedgeCube+0x190>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fc9e 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 f93e 	bl	8001c68 <HAL_Delay>
	clearCube();
 80009ec:	f7ff fcdc 	bl	80003a8 <clearCube>

	//layer 3-6
	layer = 0x24;
 80009f0:	4b32      	ldr	r3, [pc, #200]	; (8000abc <diaedgeCube+0x188>)
 80009f2:	2224      	movs	r2, #36	; 0x24
 80009f4:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <diaedgeCube+0x18c>)
 80009f8:	2281      	movs	r2, #129	; 0x81
 80009fa:	71da      	strb	r2, [r3, #7]
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <diaedgeCube+0x18c>)
 80009fe:	79da      	ldrb	r2, [r3, #7]
 8000a00:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a02:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = column[3] = column[4] = 0x00;
 8000a04:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	711a      	strb	r2, [r3, #4]
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a0c:	791a      	ldrb	r2, [r3, #4]
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a10:	70da      	strb	r2, [r3, #3]
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a14:	78da      	ldrb	r2, [r3, #3]
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a18:	719a      	strb	r2, [r3, #6]
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a1c:	799a      	ldrb	r2, [r3, #6]
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a20:	705a      	strb	r2, [r3, #1]
	column[2] = column[5] = 0x24;
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a24:	2224      	movs	r2, #36	; 0x24
 8000a26:	715a      	strb	r2, [r3, #5]
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a2a:	795a      	ldrb	r2, [r3, #5]
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a2e:	709a      	strb	r2, [r3, #2]
	mergeData(column, layer);
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <diaedgeCube+0x188>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fc8f 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <diaedgeCube+0x190>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fc6d 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 f90d 	bl	8001c68 <HAL_Delay>
	clearCube();
 8000a4e:	f7ff fcab 	bl	80003a8 <clearCube>

	//layer 4-5
	layer = 0x18;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <diaedgeCube+0x188>)
 8000a54:	2218      	movs	r2, #24
 8000a56:	701a      	strb	r2, [r3, #0]
	column[3] =column[4] = 0x18;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	711a      	strb	r2, [r3, #4]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a60:	791a      	ldrb	r2, [r3, #4]
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a64:	70da      	strb	r2, [r3, #3]
	column[0] = column[7] = 0x81;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a68:	2281      	movs	r2, #129	; 0x81
 8000a6a:	71da      	strb	r2, [r3, #7]
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a6e:	79da      	ldrb	r2, [r3, #7]
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a72:	701a      	strb	r2, [r3, #0]
	column[1] = column[2] = column[5] = column[6] = 0x00;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	719a      	strb	r2, [r3, #6]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a7c:	799a      	ldrb	r2, [r3, #6]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a80:	715a      	strb	r2, [r3, #5]
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a84:	795a      	ldrb	r2, [r3, #5]
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a88:	709a      	strb	r2, [r3, #2]
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a8c:	789a      	ldrb	r2, [r3, #2]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a90:	705a      	strb	r2, [r3, #1]
	mergeData(column, layer);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <diaedgeCube+0x188>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <diaedgeCube+0x18c>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fc5e 	bl	800035c <mergeData>
	TransmitData(dataOut);
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <diaedgeCube+0x190>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fc3c 	bl	8000320 <TransmitData>
	HAL_Delay(hold);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 f8dc 	bl	8001c68 <HAL_Delay>
	clearCube();
 8000ab0:	f7ff fc7a 	bl	80003a8 <clearCube>
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b004      	add	sp, #16
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000174 	.word	0x20000174
 8000ac0:	20000178 	.word	0x20000178
 8000ac4:	20000180 	.word	0x20000180

08000ac8 <numberingCube>:

void numberingCube() //ok
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af00      	add	r7, sp, #0
	int x = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
	int y = 40;
 8000ad2:	2328      	movs	r3, #40	; 0x28
 8000ad4:	603b      	str	r3, [r7, #0]
	clearCube();
 8000ad6:	f7ff fc67 	bl	80003a8 <clearCube>
	//digit 0
	for (int i = 0; i < 8; i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ade:	e04d      	b.n	8000b7c <numberingCube+0xb4>
	{
		column[i] = 0x3c;
 8000ae0:	4ae0      	ldr	r2, [pc, #896]	; (8000e64 <numberingCube+0x39c>)
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae4:	18d3      	adds	r3, r2, r3
 8000ae6:	223c      	movs	r2, #60	; 0x3c
 8000ae8:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000aea:	4bdf      	ldr	r3, [pc, #892]	; (8000e68 <numberingCube+0x3a0>)
 8000aec:	2281      	movs	r2, #129	; 0x81
 8000aee:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000af0:	4bdd      	ldr	r3, [pc, #884]	; (8000e68 <numberingCube+0x3a0>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	4bdb      	ldr	r3, [pc, #876]	; (8000e64 <numberingCube+0x39c>)
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fc2f 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000afe:	4bdb      	ldr	r3, [pc, #876]	; (8000e6c <numberingCube+0x3a4>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fc0d 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 f8ad 	bl	8001c68 <HAL_Delay>

		column[i] = 0x66;
 8000b0e:	4ad5      	ldr	r2, [pc, #852]	; (8000e64 <numberingCube+0x39c>)
 8000b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	2266      	movs	r2, #102	; 0x66
 8000b16:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000b18:	4bd3      	ldr	r3, [pc, #844]	; (8000e68 <numberingCube+0x3a0>)
 8000b1a:	2242      	movs	r2, #66	; 0x42
 8000b1c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b1e:	4bd2      	ldr	r3, [pc, #840]	; (8000e68 <numberingCube+0x3a0>)
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	4bd0      	ldr	r3, [pc, #832]	; (8000e64 <numberingCube+0x39c>)
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fc18 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000b2c:	4bcf      	ldr	r3, [pc, #828]	; (8000e6c <numberingCube+0x3a4>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fbf6 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 f896 	bl	8001c68 <HAL_Delay>

		column[i] = 0xc3;
 8000b3c:	4ac9      	ldr	r2, [pc, #804]	; (8000e64 <numberingCube+0x39c>)
 8000b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	22c3      	movs	r2, #195	; 0xc3
 8000b44:	701a      	strb	r2, [r3, #0]
		layer = 0x3c;
 8000b46:	4bc8      	ldr	r3, [pc, #800]	; (8000e68 <numberingCube+0x3a0>)
 8000b48:	223c      	movs	r2, #60	; 0x3c
 8000b4a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b4c:	4bc6      	ldr	r3, [pc, #792]	; (8000e68 <numberingCube+0x3a0>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	4bc4      	ldr	r3, [pc, #784]	; (8000e64 <numberingCube+0x39c>)
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fc01 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000b5a:	4bc4      	ldr	r3, [pc, #784]	; (8000e6c <numberingCube+0x3a4>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff fbdf 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 f87f 	bl	8001c68 <HAL_Delay>
		clearCube();
 8000b6a:	f7ff fc1d 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 f879 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b78:	3301      	adds	r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	ddae      	ble.n	8000ae0 <numberingCube+0x18>
	}
	HAL_Delay(delay);
 8000b82:	23fa      	movs	r3, #250	; 0xfa
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 f86e 	bl	8001c68 <HAL_Delay>
	//digit 1
	for (int i = 0; i < 8; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b90:	e092      	b.n	8000cb8 <numberingCube+0x1f0>
	{
		column[i] = 0xff;
 8000b92:	4ab4      	ldr	r2, [pc, #720]	; (8000e64 <numberingCube+0x39c>)
 8000b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b96:	18d3      	adds	r3, r2, r3
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000b9c:	4bb2      	ldr	r3, [pc, #712]	; (8000e68 <numberingCube+0x3a0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ba2:	4bb1      	ldr	r3, [pc, #708]	; (8000e68 <numberingCube+0x3a0>)
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	4baf      	ldr	r3, [pc, #700]	; (8000e64 <numberingCube+0x39c>)
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fbd6 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000bb0:	4bae      	ldr	r3, [pc, #696]	; (8000e6c <numberingCube+0x3a4>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff fbb4 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 f854 	bl	8001c68 <HAL_Delay>

		column[i] = 0x98;
 8000bc0:	4aa8      	ldr	r2, [pc, #672]	; (8000e64 <numberingCube+0x39c>)
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	2298      	movs	r2, #152	; 0x98
 8000bc8:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000bca:	4ba7      	ldr	r3, [pc, #668]	; (8000e68 <numberingCube+0x3a0>)
 8000bcc:	2208      	movs	r2, #8
 8000bce:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000bd0:	4ba5      	ldr	r3, [pc, #660]	; (8000e68 <numberingCube+0x3a0>)
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	4ba3      	ldr	r3, [pc, #652]	; (8000e64 <numberingCube+0x39c>)
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbbf 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000bde:	4ba3      	ldr	r3, [pc, #652]	; (8000e6c <numberingCube+0x3a4>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fb9d 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 f83d 	bl	8001c68 <HAL_Delay>

		column[i] = 0xd8;
 8000bee:	4a9d      	ldr	r2, [pc, #628]	; (8000e64 <numberingCube+0x39c>)
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf2:	18d3      	adds	r3, r2, r3
 8000bf4:	22d8      	movs	r2, #216	; 0xd8
 8000bf6:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000bf8:	4b9b      	ldr	r3, [pc, #620]	; (8000e68 <numberingCube+0x3a0>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000bfe:	4b9a      	ldr	r3, [pc, #616]	; (8000e68 <numberingCube+0x3a0>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	4b98      	ldr	r3, [pc, #608]	; (8000e64 <numberingCube+0x39c>)
 8000c04:	0011      	movs	r1, r2
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fba8 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c0c:	4b97      	ldr	r3, [pc, #604]	; (8000e6c <numberingCube+0x3a4>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fb86 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 f826 	bl	8001c68 <HAL_Delay>

		column[i] = 0x78;
 8000c1c:	4a91      	ldr	r2, [pc, #580]	; (8000e64 <numberingCube+0x39c>)
 8000c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	2278      	movs	r2, #120	; 0x78
 8000c24:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000c26:	4b90      	ldr	r3, [pc, #576]	; (8000e68 <numberingCube+0x3a0>)
 8000c28:	2220      	movs	r2, #32
 8000c2a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c2c:	4b8e      	ldr	r3, [pc, #568]	; (8000e68 <numberingCube+0x3a0>)
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	4b8c      	ldr	r3, [pc, #560]	; (8000e64 <numberingCube+0x39c>)
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fb91 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c3a:	4b8c      	ldr	r3, [pc, #560]	; (8000e6c <numberingCube+0x3a4>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fb6f 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 f80f 	bl	8001c68 <HAL_Delay>

		column[i] = 0x38;
 8000c4a:	4a86      	ldr	r2, [pc, #536]	; (8000e64 <numberingCube+0x39c>)
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	18d3      	adds	r3, r2, r3
 8000c50:	2238      	movs	r2, #56	; 0x38
 8000c52:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000c54:	4b84      	ldr	r3, [pc, #528]	; (8000e68 <numberingCube+0x3a0>)
 8000c56:	2240      	movs	r2, #64	; 0x40
 8000c58:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c5a:	4b83      	ldr	r3, [pc, #524]	; (8000e68 <numberingCube+0x3a0>)
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	4b81      	ldr	r3, [pc, #516]	; (8000e64 <numberingCube+0x39c>)
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fb7a 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c68:	4b80      	ldr	r3, [pc, #512]	; (8000e6c <numberingCube+0x3a4>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fb58 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fff8 	bl	8001c68 <HAL_Delay>

		column[i] = 0x18;
 8000c78:	4a7a      	ldr	r2, [pc, #488]	; (8000e64 <numberingCube+0x39c>)
 8000c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	2218      	movs	r2, #24
 8000c80:	701a      	strb	r2, [r3, #0]
		layer = 0x86;
 8000c82:	4b79      	ldr	r3, [pc, #484]	; (8000e68 <numberingCube+0x3a0>)
 8000c84:	2286      	movs	r2, #134	; 0x86
 8000c86:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c88:	4b77      	ldr	r3, [pc, #476]	; (8000e68 <numberingCube+0x3a0>)
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <numberingCube+0x39c>)
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fb63 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000c96:	4b75      	ldr	r3, [pc, #468]	; (8000e6c <numberingCube+0x3a4>)
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fb41 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 ffe1 	bl	8001c68 <HAL_Delay>
		clearCube();
 8000ca6:	f7ff fb7f 	bl	80003a8 <clearCube>

		HAL_Delay(y);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 ffdb 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	dc00      	bgt.n	8000cc0 <numberingCube+0x1f8>
 8000cbe:	e768      	b.n	8000b92 <numberingCube+0xca>
	}
	HAL_Delay(delay);
 8000cc0:	23fa      	movs	r3, #250	; 0xfa
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 ffcf 	bl	8001c68 <HAL_Delay>
	//digit 2
	for (int i = 0; i < 8; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cce:	e0bc      	b.n	8000e4a <numberingCube+0x382>
	{
		column[i] = 0x3c;
 8000cd0:	4a64      	ldr	r2, [pc, #400]	; (8000e64 <numberingCube+0x39c>)
 8000cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	223c      	movs	r2, #60	; 0x3c
 8000cd8:	701a      	strb	r2, [r3, #0]
		layer = 0x80;
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <numberingCube+0x3a0>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ce0:	4b61      	ldr	r3, [pc, #388]	; (8000e68 <numberingCube+0x3a0>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b5f      	ldr	r3, [pc, #380]	; (8000e64 <numberingCube+0x39c>)
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fb37 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000cee:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <numberingCube+0x3a4>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fb15 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 ffb5 	bl	8001c68 <HAL_Delay>

		column[i] = 0x66;
 8000cfe:	4a59      	ldr	r2, [pc, #356]	; (8000e64 <numberingCube+0x39c>)
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	2266      	movs	r2, #102	; 0x66
 8000d06:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000d08:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <numberingCube+0x3a0>)
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d0e:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <numberingCube+0x3a0>)
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <numberingCube+0x39c>)
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fb20 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000d1c:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <numberingCube+0x3a4>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fafe 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 ff9e 	bl	8001c68 <HAL_Delay>

		column[i] = 0xc6;
 8000d2c:	4a4d      	ldr	r2, [pc, #308]	; (8000e64 <numberingCube+0x39c>)
 8000d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d30:	18d3      	adds	r3, r2, r3
 8000d32:	22c6      	movs	r2, #198	; 0xc6
 8000d34:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000d36:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <numberingCube+0x3a0>)
 8000d38:	2220      	movs	r2, #32
 8000d3a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <numberingCube+0x3a0>)
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <numberingCube+0x39c>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fb09 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000d4a:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <numberingCube+0x3a4>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fae7 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 ff87 	bl	8001c68 <HAL_Delay>

		column[i] = 0x06;
 8000d5a:	4a42      	ldr	r2, [pc, #264]	; (8000e64 <numberingCube+0x39c>)
 8000d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5e:	18d3      	adds	r3, r2, r3
 8000d60:	2206      	movs	r2, #6
 8000d62:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000d64:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <numberingCube+0x3a0>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <numberingCube+0x3a0>)
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <numberingCube+0x39c>)
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff faf2 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <numberingCube+0x3a4>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fad0 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 ff70 	bl	8001c68 <HAL_Delay>

		column[i] = 0x0c;
 8000d88:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <numberingCube+0x39c>)
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	220c      	movs	r2, #12
 8000d90:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <numberingCube+0x3a0>)
 8000d94:	2208      	movs	r2, #8
 8000d96:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <numberingCube+0x3a0>)
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <numberingCube+0x39c>)
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fadb 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <numberingCube+0x3a4>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fab9 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 ff59 	bl	8001c68 <HAL_Delay>

		column[i] = 0x18;
 8000db6:	4a2b      	ldr	r2, [pc, #172]	; (8000e64 <numberingCube+0x39c>)
 8000db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	2218      	movs	r2, #24
 8000dbe:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <numberingCube+0x3a0>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <numberingCube+0x3a0>)
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <numberingCube+0x39c>)
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fac4 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <numberingCube+0x3a4>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff faa2 	bl	8000320 <TransmitData>

		column[i] = 0x70;
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <numberingCube+0x39c>)
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	18d3      	adds	r3, r2, r3
 8000de2:	2270      	movs	r2, #112	; 0x70
 8000de4:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <numberingCube+0x3a0>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <numberingCube+0x3a0>)
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <numberingCube+0x39c>)
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fab1 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <numberingCube+0x3a4>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fa8f 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 ff2f 	bl	8001c68 <HAL_Delay>

		column[i] = 0xff;
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <numberingCube+0x39c>)
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <numberingCube+0x3a0>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <numberingCube+0x3a0>)
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <numberingCube+0x39c>)
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fa9a 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <numberingCube+0x3a4>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fa78 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 ff18 	bl	8001c68 <HAL_Delay>
		clearCube();
 8000e38:	f7ff fab6 	bl	80003a8 <clearCube>

		HAL_Delay(y);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 ff12 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	3301      	adds	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	dc00      	bgt.n	8000e52 <numberingCube+0x38a>
 8000e50:	e73e      	b.n	8000cd0 <numberingCube+0x208>
	}
	HAL_Delay(delay);
 8000e52:	23fa      	movs	r3, #250	; 0xfa
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 ff06 	bl	8001c68 <HAL_Delay>
	//digit 3
	for (int i = 0; i < 8; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e60:	e06b      	b.n	8000f3a <numberingCube+0x472>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000178 	.word	0x20000178
 8000e68:	20000174 	.word	0x20000174
 8000e6c:	20000180 	.word	0x20000180
	{
		column[i] = 0x7e;
 8000e70:	4af4      	ldr	r2, [pc, #976]	; (8001244 <numberingCube+0x77c>)
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	18d3      	adds	r3, r2, r3
 8000e76:	227e      	movs	r2, #126	; 0x7e
 8000e78:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000e7a:	4bf3      	ldr	r3, [pc, #972]	; (8001248 <numberingCube+0x780>)
 8000e7c:	2281      	movs	r2, #129	; 0x81
 8000e7e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e80:	4bf1      	ldr	r3, [pc, #964]	; (8001248 <numberingCube+0x780>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	4bef      	ldr	r3, [pc, #956]	; (8001244 <numberingCube+0x77c>)
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fa67 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000e8e:	4bef      	ldr	r3, [pc, #956]	; (800124c <numberingCube+0x784>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff fa45 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fee5 	bl	8001c68 <HAL_Delay>

		column[i] = 0xe7;
 8000e9e:	4ae9      	ldr	r2, [pc, #932]	; (8001244 <numberingCube+0x77c>)
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	22e7      	movs	r2, #231	; 0xe7
 8000ea6:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000ea8:	4be7      	ldr	r3, [pc, #924]	; (8001248 <numberingCube+0x780>)
 8000eaa:	2242      	movs	r2, #66	; 0x42
 8000eac:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000eae:	4be6      	ldr	r3, [pc, #920]	; (8001248 <numberingCube+0x780>)
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	4be4      	ldr	r3, [pc, #912]	; (8001244 <numberingCube+0x77c>)
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fa50 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000ebc:	4be3      	ldr	r3, [pc, #908]	; (800124c <numberingCube+0x784>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fa2e 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 fece 	bl	8001c68 <HAL_Delay>

		column[i] = 0xc3;
 8000ecc:	4add      	ldr	r2, [pc, #884]	; (8001244 <numberingCube+0x77c>)
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	22c3      	movs	r2, #195	; 0xc3
 8000ed4:	701a      	strb	r2, [r3, #0]
		layer = 0x24;
 8000ed6:	4bdc      	ldr	r3, [pc, #880]	; (8001248 <numberingCube+0x780>)
 8000ed8:	2224      	movs	r2, #36	; 0x24
 8000eda:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000edc:	4bda      	ldr	r3, [pc, #872]	; (8001248 <numberingCube+0x780>)
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	4bd8      	ldr	r3, [pc, #864]	; (8001244 <numberingCube+0x77c>)
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fa39 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000eea:	4bd8      	ldr	r3, [pc, #864]	; (800124c <numberingCube+0x784>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fa17 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 feb7 	bl	8001c68 <HAL_Delay>

		column[i] = 0x06;
 8000efa:	4ad2      	ldr	r2, [pc, #840]	; (8001244 <numberingCube+0x77c>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	18d3      	adds	r3, r2, r3
 8000f00:	2206      	movs	r2, #6
 8000f02:	701a      	strb	r2, [r3, #0]
		layer = 0x18;
 8000f04:	4bd0      	ldr	r3, [pc, #832]	; (8001248 <numberingCube+0x780>)
 8000f06:	2218      	movs	r2, #24
 8000f08:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f0a:	4bcf      	ldr	r3, [pc, #828]	; (8001248 <numberingCube+0x780>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	4bcd      	ldr	r3, [pc, #820]	; (8001244 <numberingCube+0x77c>)
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fa22 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000f18:	4bcc      	ldr	r3, [pc, #816]	; (800124c <numberingCube+0x784>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff fa00 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 fea0 	bl	8001c68 <HAL_Delay>
		clearCube();
 8000f28:	f7ff fa3e 	bl	80003a8 <clearCube>

		HAL_Delay(y);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 fe9a 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	3301      	adds	r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	dd97      	ble.n	8000e70 <numberingCube+0x3a8>
	}
	HAL_Delay(delay);
 8000f40:	23fa      	movs	r3, #250	; 0xfa
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 fe8f 	bl	8001c68 <HAL_Delay>
	//digit 4
	for (int i = 0; i < 8; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4e:	e05f      	b.n	8001010 <numberingCube+0x548>
	{
		column[i] = 0x06;
 8000f50:	4abc      	ldr	r2, [pc, #752]	; (8001244 <numberingCube+0x77c>)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	2206      	movs	r2, #6
 8000f58:	701a      	strb	r2, [r3, #0]
		layer = 0xf3;
 8000f5a:	4bbb      	ldr	r3, [pc, #748]	; (8001248 <numberingCube+0x780>)
 8000f5c:	22f3      	movs	r2, #243	; 0xf3
 8000f5e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f60:	4bb9      	ldr	r3, [pc, #740]	; (8001248 <numberingCube+0x780>)
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4bb7      	ldr	r3, [pc, #732]	; (8001244 <numberingCube+0x77c>)
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff f9f7 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000f6e:	4bb7      	ldr	r3, [pc, #732]	; (800124c <numberingCube+0x784>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff f9d5 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fe75 	bl	8001c68 <HAL_Delay>

		column[i] = 0xff;
 8000f7e:	4ab1      	ldr	r2, [pc, #708]	; (8001244 <numberingCube+0x77c>)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 8000f88:	4baf      	ldr	r3, [pc, #700]	; (8001248 <numberingCube+0x780>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f8e:	4bae      	ldr	r3, [pc, #696]	; (8001248 <numberingCube+0x780>)
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4bac      	ldr	r3, [pc, #688]	; (8001244 <numberingCube+0x77c>)
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff f9e0 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000f9c:	4bab      	ldr	r3, [pc, #684]	; (800124c <numberingCube+0x784>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff f9be 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fe5e 	bl	8001c68 <HAL_Delay>

		for (int j = 0; j < 4; j++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	e022      	b.n	8000ff8 <numberingCube+0x530>
		{
		column[i] = 0x08 << j;
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	4aa1      	ldr	r2, [pc, #644]	; (8001244 <numberingCube+0x77c>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	1c0a      	adds	r2, r1, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
		layer = 0x80 >> j;
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	411a      	asrs	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b9d      	ldr	r3, [pc, #628]	; (8001248 <numberingCube+0x780>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000fd4:	4b9c      	ldr	r3, [pc, #624]	; (8001248 <numberingCube+0x780>)
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	4b9a      	ldr	r3, [pc, #616]	; (8001244 <numberingCube+0x77c>)
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff f9bd 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8000fe2:	4b9a      	ldr	r3, [pc, #616]	; (800124c <numberingCube+0x784>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f99b 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fe3b 	bl	8001c68 <HAL_Delay>
		for (int j = 0; j < 4; j++)
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	ddd9      	ble.n	8000fb2 <numberingCube+0x4ea>
		}
		clearCube();
 8000ffe:	f7ff f9d3 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	f000 fe2f 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	2b07      	cmp	r3, #7
 8001014:	dd9c      	ble.n	8000f50 <numberingCube+0x488>
	}
	HAL_Delay(delay);
 8001016:	23fa      	movs	r3, #250	; 0xfa
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	0018      	movs	r0, r3
 800101c:	f000 fe24 	bl	8001c68 <HAL_Delay>
	//digit 5
	for (int i = 0; i < 8; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	e092      	b.n	800114c <numberingCube+0x684>
	{
		column[i] = 0xff;
 8001026:	4a87      	ldr	r2, [pc, #540]	; (8001244 <numberingCube+0x77c>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	18d3      	adds	r3, r2, r3
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 8001030:	4b85      	ldr	r3, [pc, #532]	; (8001248 <numberingCube+0x780>)
 8001032:	22c0      	movs	r2, #192	; 0xc0
 8001034:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001036:	4b84      	ldr	r3, [pc, #528]	; (8001248 <numberingCube+0x780>)
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	4b82      	ldr	r3, [pc, #520]	; (8001244 <numberingCube+0x77c>)
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff f98c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001044:	4b81      	ldr	r3, [pc, #516]	; (800124c <numberingCube+0x784>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff f96a 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fe0a 	bl	8001c68 <HAL_Delay>

		column[i] = 0xc0;
 8001054:	4a7b      	ldr	r2, [pc, #492]	; (8001244 <numberingCube+0x77c>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	22c0      	movs	r2, #192	; 0xc0
 800105c:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 800105e:	4b7a      	ldr	r3, [pc, #488]	; (8001248 <numberingCube+0x780>)
 8001060:	2220      	movs	r2, #32
 8001062:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <numberingCube+0x780>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b76      	ldr	r3, [pc, #472]	; (8001244 <numberingCube+0x77c>)
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff f975 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <numberingCube+0x784>)
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff f953 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f000 fdf3 	bl	8001c68 <HAL_Delay>

		column[i] = 0xfe;
 8001082:	4a70      	ldr	r2, [pc, #448]	; (8001244 <numberingCube+0x77c>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	18d3      	adds	r3, r2, r3
 8001088:	22fe      	movs	r2, #254	; 0xfe
 800108a:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 800108c:	4b6e      	ldr	r3, [pc, #440]	; (8001248 <numberingCube+0x780>)
 800108e:	2210      	movs	r2, #16
 8001090:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <numberingCube+0x780>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <numberingCube+0x77c>)
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff f95e 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80010a0:	4b6a      	ldr	r3, [pc, #424]	; (800124c <numberingCube+0x784>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff f93c 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fddc 	bl	8001c68 <HAL_Delay>

		column[i] = 0x03;
 80010b0:	4a64      	ldr	r2, [pc, #400]	; (8001244 <numberingCube+0x77c>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	2203      	movs	r2, #3
 80010b8:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <numberingCube+0x780>)
 80010bc:	220c      	movs	r2, #12
 80010be:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80010c0:	4b61      	ldr	r3, [pc, #388]	; (8001248 <numberingCube+0x780>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <numberingCube+0x77c>)
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff f947 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <numberingCube+0x784>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff f925 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 fdc5 	bl	8001c68 <HAL_Delay>

		column[i] = 0x83;
 80010de:	4a59      	ldr	r2, [pc, #356]	; (8001244 <numberingCube+0x77c>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	2283      	movs	r2, #131	; 0x83
 80010e6:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 80010e8:	4b57      	ldr	r3, [pc, #348]	; (8001248 <numberingCube+0x780>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <numberingCube+0x780>)
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <numberingCube+0x77c>)
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff f930 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <numberingCube+0x784>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff f90e 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	0018      	movs	r0, r3
 8001108:	f000 fdae 	bl	8001c68 <HAL_Delay>

		column[i] = 0x7e;
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <numberingCube+0x77c>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	227e      	movs	r2, #126	; 0x7e
 8001114:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <numberingCube+0x780>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <numberingCube+0x780>)
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	4b48      	ldr	r3, [pc, #288]	; (8001244 <numberingCube+0x77c>)
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff f919 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800112a:	4b48      	ldr	r3, [pc, #288]	; (800124c <numberingCube+0x784>)
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff f8f7 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fd97 	bl	8001c68 <HAL_Delay>
		clearCube();
 800113a:	f7ff f935 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f000 fd91 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b07      	cmp	r3, #7
 8001150:	dc00      	bgt.n	8001154 <numberingCube+0x68c>
 8001152:	e768      	b.n	8001026 <numberingCube+0x55e>
	}
	HAL_Delay(delay);
 8001154:	23fa      	movs	r3, #250	; 0xfa
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fd85 	bl	8001c68 <HAL_Delay>
	//digit 6
	for (int i = 0; i < 8; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	e064      	b.n	800122e <numberingCube+0x766>
	{
		column[i] = 0x7e;
 8001164:	4a37      	ldr	r2, [pc, #220]	; (8001244 <numberingCube+0x77c>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	227e      	movs	r2, #126	; 0x7e
 800116c:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <numberingCube+0x780>)
 8001170:	2281      	movs	r2, #129	; 0x81
 8001172:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001174:	4b34      	ldr	r3, [pc, #208]	; (8001248 <numberingCube+0x780>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <numberingCube+0x77c>)
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff f8ed 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <numberingCube+0x784>)
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff f8cb 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 fd6b 	bl	8001c68 <HAL_Delay>

		column[i] = 0xc3;
 8001192:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <numberingCube+0x77c>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	22c3      	movs	r2, #195	; 0xc3
 800119a:	701a      	strb	r2, [r3, #0]
		layer = 0x4e;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <numberingCube+0x780>)
 800119e:	224e      	movs	r2, #78	; 0x4e
 80011a0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <numberingCube+0x780>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <numberingCube+0x77c>)
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff f8d6 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <numberingCube+0x784>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff f8b4 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 fd54 	bl	8001c68 <HAL_Delay>

		column[i] = 0xc0;
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <numberingCube+0x77c>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	22c0      	movs	r2, #192	; 0xc0
 80011c8:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <numberingCube+0x780>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <numberingCube+0x780>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <numberingCube+0x77c>)
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff f8bf 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <numberingCube+0x784>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff f89d 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 fd3d 	bl	8001c68 <HAL_Delay>

		column[i] = 0xfe;
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <numberingCube+0x77c>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	22fe      	movs	r2, #254	; 0xfe
 80011f6:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <numberingCube+0x780>)
 80011fa:	2210      	movs	r2, #16
 80011fc:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <numberingCube+0x780>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <numberingCube+0x77c>)
 8001204:	0011      	movs	r1, r2
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff f8a8 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <numberingCube+0x784>)
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff f886 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fd26 	bl	8001c68 <HAL_Delay>
		clearCube();
 800121c:	f7ff f8c4 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	0018      	movs	r0, r3
 8001224:	f000 fd20 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	3301      	adds	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b07      	cmp	r3, #7
 8001232:	dd97      	ble.n	8001164 <numberingCube+0x69c>
	}
	HAL_Delay(delay);
 8001234:	23fa      	movs	r3, #250	; 0xfa
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	0018      	movs	r0, r3
 800123a:	f000 fd15 	bl	8001c68 <HAL_Delay>
	//digit 7
	for (int i = 0; i < 8; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e04e      	b.n	80012e2 <numberingCube+0x81a>
 8001244:	20000178 	.word	0x20000178
 8001248:	20000174 	.word	0x20000174
 800124c:	20000180 	.word	0x20000180
	{
		column[i] = 0x7f;
 8001250:	4a9a      	ldr	r2, [pc, #616]	; (80014bc <numberingCube+0x9f4>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	227f      	movs	r2, #127	; 0x7f
 8001258:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 800125a:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <numberingCube+0x9f8>)
 800125c:	22c0      	movs	r2, #192	; 0xc0
 800125e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001260:	4b97      	ldr	r3, [pc, #604]	; (80014c0 <numberingCube+0x9f8>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b95      	ldr	r3, [pc, #596]	; (80014bc <numberingCube+0x9f4>)
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff f877 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800126e:	4b95      	ldr	r3, [pc, #596]	; (80014c4 <numberingCube+0x9fc>)
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff f855 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	0018      	movs	r0, r3
 800127a:	f000 fcf5 	bl	8001c68 <HAL_Delay>

		for (int j = 0; j < 6; j++)
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e022      	b.n	80012ca <numberingCube+0x802>
		{
			column[i] = 0x03 << j;
 8001284:	2203      	movs	r2, #3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	b2d9      	uxtb	r1, r3
 800128e:	4a8b      	ldr	r2, [pc, #556]	; (80014bc <numberingCube+0x9f4>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	18d3      	adds	r3, r2, r3
 8001294:	1c0a      	adds	r2, r1, #0
 8001296:	701a      	strb	r2, [r3, #0]
			layer = 0x20 >> j;
 8001298:	2220      	movs	r2, #32
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	411a      	asrs	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b87      	ldr	r3, [pc, #540]	; (80014c0 <numberingCube+0x9f8>)
 80012a4:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 80012a6:	4b86      	ldr	r3, [pc, #536]	; (80014c0 <numberingCube+0x9f8>)
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b84      	ldr	r3, [pc, #528]	; (80014bc <numberingCube+0x9f4>)
 80012ac:	0011      	movs	r1, r2
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff f854 	bl	800035c <mergeData>
			TransmitData(dataOut);
 80012b4:	4b83      	ldr	r3, [pc, #524]	; (80014c4 <numberingCube+0x9fc>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff f832 	bl	8000320 <TransmitData>
			HAL_Delay(x);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 fcd2 	bl	8001c68 <HAL_Delay>
		for (int j = 0; j < 6; j++)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	3301      	adds	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	ddd9      	ble.n	8001284 <numberingCube+0x7bc>
		}
		clearCube();
 80012d0:	f7ff f86a 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 fcc6 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	ddb3      	ble.n	8001250 <numberingCube+0x788>
	}
	HAL_Delay(delay);
 80012e8:	23fa      	movs	r3, #250	; 0xfa
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 fcbb 	bl	8001c68 <HAL_Delay>
	//digit 8
	for (int i = 0; i < 8; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e036      	b.n	8001366 <numberingCube+0x89e>
	{
		column[i] = 0xc3;
 80012f8:	4a70      	ldr	r2, [pc, #448]	; (80014bc <numberingCube+0x9f4>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	22c3      	movs	r2, #195	; 0xc3
 8001300:	701a      	strb	r2, [r3, #0]
		layer = 0x66;
 8001302:	4b6f      	ldr	r3, [pc, #444]	; (80014c0 <numberingCube+0x9f8>)
 8001304:	2266      	movs	r2, #102	; 0x66
 8001306:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001308:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <numberingCube+0x9f8>)
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	4b6b      	ldr	r3, [pc, #428]	; (80014bc <numberingCube+0x9f4>)
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff f823 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001316:	4b6b      	ldr	r3, [pc, #428]	; (80014c4 <numberingCube+0x9fc>)
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff f801 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f000 fca1 	bl	8001c68 <HAL_Delay>

		column[i] = 0x7e;
 8001326:	4a65      	ldr	r2, [pc, #404]	; (80014bc <numberingCube+0x9f4>)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	18d3      	adds	r3, r2, r3
 800132c:	227e      	movs	r2, #126	; 0x7e
 800132e:	701a      	strb	r2, [r3, #0]
		layer = 0x99;
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <numberingCube+0x9f8>)
 8001332:	2299      	movs	r2, #153	; 0x99
 8001334:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <numberingCube+0x9f8>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b60      	ldr	r3, [pc, #384]	; (80014bc <numberingCube+0x9f4>)
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff f80c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001344:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <numberingCube+0x9fc>)
 8001346:	0018      	movs	r0, r3
 8001348:	f7fe ffea 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0018      	movs	r0, r3
 8001350:	f000 fc8a 	bl	8001c68 <HAL_Delay>
		clearCube();
 8001354:	f7ff f828 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fc84 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b07      	cmp	r3, #7
 800136a:	ddc5      	ble.n	80012f8 <numberingCube+0x830>
	}
	HAL_Delay(delay);
 800136c:	23fa      	movs	r3, #250	; 0xfa
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	0018      	movs	r0, r3
 8001372:	f000 fc79 	bl	8001c68 <HAL_Delay>
	//digit 9
	for (int i = 0; i < 8; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	e092      	b.n	80014a2 <numberingCube+0x9da>
	{
		column[i] = 0x7e;
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <numberingCube+0x9f4>)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	18d3      	adds	r3, r2, r3
 8001382:	227e      	movs	r2, #126	; 0x7e
 8001384:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <numberingCube+0x9f8>)
 8001388:	2281      	movs	r2, #129	; 0x81
 800138a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800138c:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <numberingCube+0x9f8>)
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	4b4a      	ldr	r3, [pc, #296]	; (80014bc <numberingCube+0x9f4>)
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7fe ffe1 	bl	800035c <mergeData>
		TransmitData(dataOut);
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <numberingCube+0x9fc>)
 800139c:	0018      	movs	r0, r3
 800139e:	f7fe ffbf 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 fc5f 	bl	8001c68 <HAL_Delay>

		column[i] = 0xc3;
 80013aa:	4a44      	ldr	r2, [pc, #272]	; (80014bc <numberingCube+0x9f4>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	18d3      	adds	r3, r2, r3
 80013b0:	22c3      	movs	r2, #195	; 0xc3
 80013b2:	701a      	strb	r2, [r3, #0]
		layer = 0x60;
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <numberingCube+0x9f8>)
 80013b6:	2260      	movs	r2, #96	; 0x60
 80013b8:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <numberingCube+0x9f8>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <numberingCube+0x9f4>)
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7fe ffca 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <numberingCube+0x9fc>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7fe ffa8 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 fc48 	bl	8001c68 <HAL_Delay>

		column[i] = 0xff;
 80013d8:	4a38      	ldr	r2, [pc, #224]	; (80014bc <numberingCube+0x9f4>)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	18d3      	adds	r3, r2, r3
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 80013e2:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <numberingCube+0x9f8>)
 80013e4:	2210      	movs	r2, #16
 80013e6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <numberingCube+0x9f8>)
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	4b33      	ldr	r3, [pc, #204]	; (80014bc <numberingCube+0x9f4>)
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7fe ffb3 	bl	800035c <mergeData>
		TransmitData(dataOut);
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <numberingCube+0x9fc>)
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7fe ff91 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f000 fc31 	bl	8001c68 <HAL_Delay>

		column[i] = 0x7f;
 8001406:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <numberingCube+0x9f4>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	18d3      	adds	r3, r2, r3
 800140c:	227f      	movs	r2, #127	; 0x7f
 800140e:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <numberingCube+0x9f8>)
 8001412:	2208      	movs	r2, #8
 8001414:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <numberingCube+0x9f8>)
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <numberingCube+0x9f4>)
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f7fe ff9c 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <numberingCube+0x9fc>)
 8001426:	0018      	movs	r0, r3
 8001428:	f7fe ff7a 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fc1a 	bl	8001c68 <HAL_Delay>

		column[i] = 0x03;
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <numberingCube+0x9f4>)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	18d3      	adds	r3, r2, r3
 800143a:	2203      	movs	r2, #3
 800143c:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <numberingCube+0x9f8>)
 8001440:	2204      	movs	r2, #4
 8001442:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <numberingCube+0x9f8>)
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <numberingCube+0x9f4>)
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f7fe ff85 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <numberingCube+0x9fc>)
 8001454:	0018      	movs	r0, r3
 8001456:	f7fe ff63 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fc03 	bl	8001c68 <HAL_Delay>

		column[i] = 0x83;
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <numberingCube+0x9f4>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	18d3      	adds	r3, r2, r3
 8001468:	2283      	movs	r2, #131	; 0x83
 800146a:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <numberingCube+0x9f8>)
 800146e:	2202      	movs	r2, #2
 8001470:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <numberingCube+0x9f8>)
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <numberingCube+0x9f4>)
 8001478:	0011      	movs	r1, r2
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe ff6e 	bl	800035c <mergeData>
		TransmitData(dataOut);
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <numberingCube+0x9fc>)
 8001482:	0018      	movs	r0, r3
 8001484:	f7fe ff4c 	bl	8000320 <TransmitData>
		HAL_Delay(x);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0018      	movs	r0, r3
 800148c:	f000 fbec 	bl	8001c68 <HAL_Delay>
		clearCube();
 8001490:	f7fe ff8a 	bl	80003a8 <clearCube>
		HAL_Delay(y);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	f000 fbe6 	bl	8001c68 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3301      	adds	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	dc00      	bgt.n	80014aa <numberingCube+0x9e2>
 80014a8:	e768      	b.n	800137c <numberingCube+0x8b4>
	}
	HAL_Delay(delay);
 80014aa:	23fa      	movs	r3, #250	; 0xfa
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fbda 	bl	8001c68 <HAL_Delay>
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b00e      	add	sp, #56	; 0x38
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000178 	.word	0x20000178
 80014c0:	20000174 	.word	0x20000174
 80014c4:	20000180 	.word	0x20000180

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014cc:	f000 fb68 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 f838 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f000 f904 	bl	80016e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014d8:	f000 f894 	bl	8001604 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80014dc:	f000 f8d0 	bl	8001680 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80014e0:	4914      	ldr	r1, [pc, #80]	; (8001534 <main+0x6c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <main+0x70>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	0018      	movs	r0, r3
 80014e8:	f002 f8c4 	bl	8003674 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 switch (currentEffect) {
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <main+0x74>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b06      	cmp	r3, #6
 80014f2:	d81d      	bhi.n	8001530 <main+0x68>
 80014f4:	009a      	lsls	r2, r3, #2
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <main+0x78>)
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	469f      	mov	pc, r3
		case 0:
			growShrinkCube();
 80014fe:	f7ff f959 	bl	80007b4 <growShrinkCube>
			break;
 8001502:	e016      	b.n	8001532 <main+0x6a>
		case 1:
			planeXCube();
 8001504:	f7ff f8c4 	bl	8000690 <planeXCube>
			planeYCube();
 8001508:	f7ff f860 	bl	80005cc <planeYCube>
			planeZCube();
 800150c:	f7ff f808 	bl	8000520 <planeZCube>
			break;
 8001510:	e00f      	b.n	8001532 <main+0x6a>
		case 2:
			diagonalCube();
 8001512:	f7fe ff73 	bl	80003fc <diagonalCube>
			break;
 8001516:	e00c      	b.n	8001532 <main+0x6a>
		case 3:
			randomRainCube();
 8001518:	f7ff f8ec 	bl	80006f4 <randomRainCube>
			break;
 800151c:	e009      	b.n	8001532 <main+0x6a>
		case 4:
			aroundEdgeCube();
 800151e:	f7ff f9af 	bl	8000880 <aroundEdgeCube>
			break;
 8001522:	e006      	b.n	8001532 <main+0x6a>
		case 5:
			diaedgeCube();
 8001524:	f7ff fa06 	bl	8000934 <diaedgeCube>
			break;
 8001528:	e003      	b.n	8001532 <main+0x6a>
		case 6:
			numberingCube();
 800152a:	f7ff facd 	bl	8000ac8 <numberingCube>
			break;
 800152e:	e000      	b.n	8001532 <main+0x6a>
		default:
			break;
 8001530:	46c0      	nop			; (mov r8, r8)
	 switch (currentEffect) {
 8001532:	e7db      	b.n	80014ec <main+0x24>
 8001534:	20000190 	.word	0x20000190
 8001538:	200000f0 	.word	0x200000f0
 800153c:	2000018c 	.word	0x2000018c
 8001540:	08005ae0 	.word	0x08005ae0

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b099      	sub	sp, #100	; 0x64
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	242c      	movs	r4, #44	; 0x2c
 800154c:	193b      	adds	r3, r7, r4
 800154e:	0018      	movs	r0, r3
 8001550:	2334      	movs	r3, #52	; 0x34
 8001552:	001a      	movs	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f003 f9d1 	bl	80048fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155a:	231c      	movs	r3, #28
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	0018      	movs	r0, r3
 8001560:	2310      	movs	r3, #16
 8001562:	001a      	movs	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	f003 f9c9 	bl	80048fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	0018      	movs	r0, r3
 800156e:	2318      	movs	r3, #24
 8001570:	001a      	movs	r2, r3
 8001572:	2100      	movs	r1, #0
 8001574:	f003 f9c2 	bl	80048fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001578:	0021      	movs	r1, r4
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2201      	movs	r2, #1
 8001584:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2202      	movs	r2, #2
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0252      	lsls	r2, r2, #9
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001594:	187b      	adds	r3, r7, r1
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	0352      	lsls	r2, r2, #13
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2200      	movs	r2, #0
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 fe9d 	bl	80022e4 <HAL_RCC_OscConfig>
 80015aa:	1e03      	subs	r3, r0, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f8f9 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	211c      	movs	r1, #28
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2207      	movs	r2, #7
 80015b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2202      	movs	r2, #2
 80015be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2101      	movs	r1, #1
 80015d0:	0018      	movs	r0, r3
 80015d2:	f001 fa0d 	bl	80029f0 <HAL_RCC_ClockConfig>
 80015d6:	1e03      	subs	r3, r0, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015da:	f000 f8e3 	bl	80017a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	0018      	movs	r0, r3
 80015ee:	f001 fb79 	bl	8002ce4 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80015f6:	f000 f8d5 	bl	80017a4 <Error_Handler>
  }
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b019      	add	sp, #100	; 0x64
 8001600:	bd90      	pop	{r4, r7, pc}
	...

08001604 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_SPI1_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_SPI1_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_SPI1_Init+0x74>)
 8001610:	2282      	movs	r2, #130	; 0x82
 8001612:	0052      	lsls	r2, r2, #1
 8001614:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_SPI1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_SPI1_Init+0x74>)
 800161e:	22e0      	movs	r2, #224	; 0xe0
 8001620:	00d2      	lsls	r2, r2, #3
 8001622:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_SPI1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_SPI1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_SPI1_Init+0x74>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_SPI1_Init+0x74>)
 800163a:	2220      	movs	r2, #32
 800163c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_SPI1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_SPI1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_SPI1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_SPI1_Init+0x74>)
 8001652:	2207      	movs	r2, #7
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_SPI1_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_SPI1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <MX_SPI1_Init+0x74>)
 8001664:	0018      	movs	r0, r3
 8001666:	f001 fc2b 	bl	8002ec0 <HAL_SPI_Init>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d001      	beq.n	8001672 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800166e:	f000 f899 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000008c 	.word	0x2000008c
 800167c:	40013000 	.word	0x40013000

08001680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <MX_USART1_UART_Init+0x5c>)
 8001688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 800168c:	22e1      	movs	r2, #225	; 0xe1
 800168e:	0252      	lsls	r2, r2, #9
 8001690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <MX_USART1_UART_Init+0x58>)
 80016c4:	0018      	movs	r0, r3
 80016c6:	f001 ff81 	bl	80035cc <HAL_UART_Init>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ce:	f000 f869 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200000f0 	.word	0x200000f0
 80016dc:	40013800 	.word	0x40013800

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	240c      	movs	r4, #12
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	0018      	movs	r0, r3
 80016ec:	2314      	movs	r3, #20
 80016ee:	001a      	movs	r2, r3
 80016f0:	2100      	movs	r1, #0
 80016f2:	f003 f903 	bl	80048fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <MX_GPIO_Init+0xc0>)
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <MX_GPIO_Init+0xc0>)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	03c9      	lsls	r1, r1, #15
 8001700:	430a      	orrs	r2, r1
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <MX_GPIO_Init+0xc0>)
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	03db      	lsls	r3, r3, #15
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <MX_GPIO_Init+0xc0>)
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_GPIO_Init+0xc0>)
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0289      	lsls	r1, r1, #10
 800171c:	430a      	orrs	r2, r1
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_GPIO_Init+0xc0>)
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	029b      	lsls	r3, r3, #10
 8001728:	4013      	ands	r3, r2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 800172e:	2390      	movs	r3, #144	; 0x90
 8001730:	05db      	lsls	r3, r3, #23
 8001732:	2200      	movs	r2, #0
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	0018      	movs	r0, r3
 8001738:	f000 fd9b 	bl	8002272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800173c:	193b      	adds	r3, r7, r4
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001742:	193b      	adds	r3, r7, r4
 8001744:	2284      	movs	r2, #132	; 0x84
 8001746:	0392      	lsls	r2, r2, #14
 8001748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2201      	movs	r2, #1
 800174e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	193a      	adds	r2, r7, r4
 8001752:	2390      	movs	r3, #144	; 0x90
 8001754:	05db      	lsls	r3, r3, #23
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fc05 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 800175e:	0021      	movs	r1, r4
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2201      	movs	r2, #1
 800176a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2203      	movs	r2, #3
 8001776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 8001778:	187a      	adds	r2, r7, r1
 800177a:	2390      	movs	r3, #144	; 0x90
 800177c:	05db      	lsls	r3, r3, #23
 800177e:	0011      	movs	r1, r2
 8001780:	0018      	movs	r0, r3
 8001782:	f000 fbf1 	bl	8001f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2102      	movs	r1, #2
 800178a:	2005      	movs	r0, #5
 800178c:	f000 fb3c 	bl	8001e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001790:	2005      	movs	r0, #5
 8001792:	f000 fb4e 	bl	8001e32 <HAL_NVIC_EnableIRQ>

}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b009      	add	sp, #36	; 0x24
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	40021000 	.word	0x40021000

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x44>)
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_MspInit+0x44>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x44>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x44>)
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_MspInit+0x44>)
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	0549      	lsls	r1, r1, #21
 80017d8:	430a      	orrs	r2, r1
 80017da:	61da      	str	r2, [r3, #28]
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_MspInit+0x44>)
 80017de:	69da      	ldr	r2, [r3, #28]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	055b      	lsls	r3, r3, #21
 80017e4:	4013      	ands	r3, r2
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	2414      	movs	r4, #20
 8001802:	193b      	adds	r3, r7, r4
 8001804:	0018      	movs	r0, r3
 8001806:	2314      	movs	r3, #20
 8001808:	001a      	movs	r2, r3
 800180a:	2100      	movs	r1, #0
 800180c:	f003 f876 	bl	80048fc <memset>
  if(hspi->Instance==SPI1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_SPI_MspInit+0x90>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d132      	bne.n	8001880 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_SPI_MspInit+0x94>)
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_SPI_MspInit+0x94>)
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0149      	lsls	r1, r1, #5
 8001824:	430a      	orrs	r2, r1
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_SPI_MspInit+0x94>)
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_SPI_MspInit+0x94>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_SPI_MspInit+0x94>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0289      	lsls	r1, r1, #10
 8001840:	430a      	orrs	r2, r1
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_SPI_MspInit+0x94>)
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	029b      	lsls	r3, r3, #10
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001852:	0021      	movs	r1, r4
 8001854:	187b      	adds	r3, r7, r1
 8001856:	22a0      	movs	r2, #160	; 0xa0
 8001858:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2202      	movs	r2, #2
 800185e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2203      	movs	r2, #3
 800186a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	187a      	adds	r2, r7, r1
 8001874:	2390      	movs	r3, #144	; 0x90
 8001876:	05db      	lsls	r3, r3, #23
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fb74 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b00b      	add	sp, #44	; 0x2c
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	40013000 	.word	0x40013000
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08b      	sub	sp, #44	; 0x2c
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	2414      	movs	r4, #20
 800189a:	193b      	adds	r3, r7, r4
 800189c:	0018      	movs	r0, r3
 800189e:	2314      	movs	r3, #20
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f003 f82a 	bl	80048fc <memset>
  if(huart->Instance==USART1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a21      	ldr	r2, [pc, #132]	; (8001934 <HAL_UART_MspInit+0xa4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d13b      	bne.n	800192a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_UART_MspInit+0xa8>)
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_UART_MspInit+0xa8>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	01c9      	lsls	r1, r1, #7
 80018bc:	430a      	orrs	r2, r1
 80018be:	619a      	str	r2, [r3, #24]
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_UART_MspInit+0xa8>)
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	01db      	lsls	r3, r3, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_UART_MspInit+0xa8>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_UART_MspInit+0xa8>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0289      	lsls	r1, r1, #10
 80018d8:	430a      	orrs	r2, r1
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_UART_MspInit+0xa8>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	22c0      	movs	r2, #192	; 0xc0
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	0021      	movs	r1, r4
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2202      	movs	r2, #2
 80018f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2203      	movs	r2, #3
 8001904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2201      	movs	r2, #1
 800190a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	187a      	adds	r2, r7, r1
 800190e:	2390      	movs	r3, #144	; 0x90
 8001910:	05db      	lsls	r3, r3, #23
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fb27 	bl	8001f68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	201b      	movs	r0, #27
 8001920:	f000 fa72 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001924:	201b      	movs	r0, #27
 8001926:	f000 fa84 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b00b      	add	sp, #44	; 0x2c
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40013800 	.word	0x40013800
 8001938:	40021000 	.word	0x40021000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f966 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800196e:	2002      	movs	r0, #2
 8001970:	f000 fc9c 	bl	80022ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <USART1_IRQHandler+0x14>)
 8001982:	0018      	movs	r0, r3
 8001984:	f001 fed8 	bl	8003738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	200000f0 	.word	0x200000f0

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019aa:	f002 ff7d 	bl	80048a8 <__errno>
 80019ae:	0003      	movs	r3, r0
 80019b0:	2216      	movs	r2, #22
 80019b2:	601a      	str	r2, [r3, #0]
	return -1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	425b      	negs	r3, r3
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_exit>:

void _exit (int status)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c8:	2301      	movs	r3, #1
 80019ca:	425a      	negs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff ffe5 	bl	80019a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019d6:	e7fe      	b.n	80019d6 <_exit+0x16>

080019d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ea:	e000      	b.n	80019ee <_read+0x16>
 80019ec:	bf00      	nop
 80019ee:	0001      	movs	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
	}

return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b006      	add	sp, #24
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	e000      	b.n	8001a32 <_write+0x20>
 8001a30:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
	}
	return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b006      	add	sp, #24
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	return -1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	425b      	negs	r3, r3
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	0192      	lsls	r2, r2, #6
 8001a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_isatty>:

int _isatty(int file)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	return 1;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	18d3      	adds	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f002 fee8 	bl	80048a8 <__errno>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	18d2      	adds	r2, r2, r3
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b006      	add	sp, #24
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20001800 	.word	0x20001800
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000194 	.word	0x20000194
 8001b0c:	200001b0 	.word	0x200001b0

08001b10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <LoopForever+0x6>)
    LDR R1, [R0]
 8001b22:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001b24:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <LoopForever+0xa>)
    CMP R1, R2
 8001b28:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001b2a:	d105      	bne.n	8001b38 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001b2c:	4812      	ldr	r0, [pc, #72]	; (8001b78 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001b2e:	4913      	ldr	r1, [pc, #76]	; (8001b7c <LoopForever+0x12>)
    STR R1, [R0]
 8001b30:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001b32:	4813      	ldr	r0, [pc, #76]	; (8001b80 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001b34:	4913      	ldr	r1, [pc, #76]	; (8001b84 <LoopForever+0x1a>)
    STR R1, [R0]
 8001b36:	6001      	str	r1, [r0, #0]

08001b38 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	4813      	ldr	r0, [pc, #76]	; (8001b88 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001b3a:	4914      	ldr	r1, [pc, #80]	; (8001b8c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <LoopForever+0x26>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001b50:	4c11      	ldr	r4, [pc, #68]	; (8001b98 <LoopForever+0x2e>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b5e:	f7ff ffd7 	bl	8001b10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b62:	f002 fea7 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b66:	f7ff fcaf 	bl	80014c8 <main>

08001b6a <LoopForever>:

LoopForever:
    b LoopForever
 8001b6a:	e7fe      	b.n	8001b6a <LoopForever>
  ldr   r0, =_estack
 8001b6c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001b70:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001b74:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001b78:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001b7c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001b80:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001b84:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b90:	08005c64 	.word	0x08005c64
  ldr r2, =_sbss
 8001b94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b98:	200001ac 	.word	0x200001ac

08001b9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_Init+0x24>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_Init+0x24>)
 8001baa:	2110      	movs	r1, #16
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 f809 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fdfb 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_InitTick+0x5c>)
 8001bd2:	681c      	ldr	r4, [r3, #0]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_InitTick+0x60>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	0019      	movs	r1, r3
 8001bda:	23fa      	movs	r3, #250	; 0xfa
 8001bdc:	0098      	lsls	r0, r3, #2
 8001bde:	f7fe fa9d 	bl	800011c <__udivsi3>
 8001be2:	0003      	movs	r3, r0
 8001be4:	0019      	movs	r1, r3
 8001be6:	0020      	movs	r0, r4
 8001be8:	f7fe fa98 	bl	800011c <__udivsi3>
 8001bec:	0003      	movs	r3, r0
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 f92f 	bl	8001e52 <HAL_SYSTICK_Config>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00f      	b.n	8001c1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d80b      	bhi.n	8001c1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	2301      	movs	r3, #1
 8001c06:	425b      	negs	r3, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 f8fc 	bl	8001e08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_InitTick+0x64>)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b003      	add	sp, #12
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	001a      	movs	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x20>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	18d2      	adds	r2, r2, r3
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_IncTick+0x20>)
 8001c42:	601a      	str	r2, [r3, #0]
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000198 	.word	0x20000198

08001c54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_GetTick+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20000198 	.word	0x20000198

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fff0 	bl	8001c54 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	001a      	movs	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	189b      	adds	r3, r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	f7ff ffe0 	bl	8001c54 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b004      	add	sp, #16
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	20000008 	.word	0x20000008

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cc2:	d809      	bhi.n	8001cd8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	231f      	movs	r3, #31
 8001ccc:	401a      	ands	r2, r3
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_EnableIRQ+0x30>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4091      	lsls	r1, r2
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
  }
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	0002      	movs	r2, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf8:	d828      	bhi.n	8001d4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <__NVIC_SetPriority+0xd4>)
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	33c0      	adds	r3, #192	; 0xc0
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	589b      	ldr	r3, [r3, r2]
 8001d0a:	1dfa      	adds	r2, r7, #7
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	0011      	movs	r1, r2
 8001d10:	2203      	movs	r2, #3
 8001d12:	400a      	ands	r2, r1
 8001d14:	00d2      	lsls	r2, r2, #3
 8001d16:	21ff      	movs	r1, #255	; 0xff
 8001d18:	4091      	lsls	r1, r2
 8001d1a:	000a      	movs	r2, r1
 8001d1c:	43d2      	mvns	r2, r2
 8001d1e:	401a      	ands	r2, r3
 8001d20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	401a      	ands	r2, r3
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	2303      	movs	r3, #3
 8001d32:	4003      	ands	r3, r0
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d38:	481f      	ldr	r0, [pc, #124]	; (8001db8 <__NVIC_SetPriority+0xd4>)
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	430a      	orrs	r2, r1
 8001d44:	33c0      	adds	r3, #192	; 0xc0
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d4a:	e031      	b.n	8001db0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <__NVIC_SetPriority+0xd8>)
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	0019      	movs	r1, r3
 8001d54:	230f      	movs	r3, #15
 8001d56:	400b      	ands	r3, r1
 8001d58:	3b08      	subs	r3, #8
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3306      	adds	r3, #6
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	3304      	adds	r3, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1dfa      	adds	r2, r7, #7
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	400a      	ands	r2, r1
 8001d70:	00d2      	lsls	r2, r2, #3
 8001d72:	21ff      	movs	r1, #255	; 0xff
 8001d74:	4091      	lsls	r1, r2
 8001d76:	000a      	movs	r2, r1
 8001d78:	43d2      	mvns	r2, r2
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	22ff      	movs	r2, #255	; 0xff
 8001d84:	401a      	ands	r2, r3
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	4003      	ands	r3, r0
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <__NVIC_SetPriority+0xd8>)
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	001c      	movs	r4, r3
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	4023      	ands	r3, r4
 8001da0:	3b08      	subs	r3, #8
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	430a      	orrs	r2, r1
 8001da6:	3306      	adds	r3, #6
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	18c3      	adds	r3, r0, r3
 8001dac:	3304      	adds	r3, #4
 8001dae:	601a      	str	r2, [r3, #0]
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b003      	add	sp, #12
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	045b      	lsls	r3, r3, #17
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d301      	bcc.n	8001dd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e010      	b.n	8001dfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <SysTick_Config+0x44>)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	3a01      	subs	r2, #1
 8001dde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de0:	2301      	movs	r3, #1
 8001de2:	425b      	negs	r3, r3
 8001de4:	2103      	movs	r1, #3
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff ff7c 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SysTick_Config+0x44>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SysTick_Config+0x44>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	210f      	movs	r1, #15
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	1c02      	adds	r2, r0, #0
 8001e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	0011      	movs	r1, r2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	0002      	movs	r2, r0
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff ff33 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff ffaf 	bl	8001dc0 <SysTick_Config>
 8001e62:	0003      	movs	r3, r0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2221      	movs	r2, #33	; 0x21
 8001e78:	5c9b      	ldrb	r3, [r3, r2]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e020      	b.n	8001ed4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	210e      	movs	r1, #14
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	438a      	bics	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4091      	lsls	r1, r2
 8001ebe:	000a      	movs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2221      	movs	r2, #33	; 0x21
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	2100      	movs	r1, #0
 8001ed0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2221      	movs	r2, #33	; 0x21
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d006      	beq.n	8001f06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e028      	b.n	8001f58 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	210e      	movs	r1, #14
 8001f12:	438a      	bics	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	438a      	bics	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4091      	lsls	r1, r2
 8001f32:	000a      	movs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2221      	movs	r2, #33	; 0x21
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	2100      	movs	r1, #0
 8001f44:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	0010      	movs	r0, r2
 8001f56:	4798      	blx	r3
    } 
  }
  return status;
 8001f58:	230f      	movs	r3, #15
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	781b      	ldrb	r3, [r3, #0]
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b004      	add	sp, #16
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	e149      	b.n	800220c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d100      	bne.n	8001f90 <HAL_GPIO_Init+0x28>
 8001f8e:	e13a      	b.n	8002206 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d005      	beq.n	8001fa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d130      	bne.n	800200a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	0013      	movs	r3, r2
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fde:	2201      	movs	r2, #1
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	4013      	ands	r3, r2
 8002012:	2b03      	cmp	r3, #3
 8002014:	d017      	beq.n	8002046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	409a      	lsls	r2, r3
 8002024:	0013      	movs	r3, r2
 8002026:	43da      	mvns	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	409a      	lsls	r2, r3
 8002038:	0013      	movs	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d123      	bne.n	800209a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	58d3      	ldr	r3, [r2, r3]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2207      	movs	r2, #7
 8002064:	4013      	ands	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	43da      	mvns	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2107      	movs	r1, #7
 800207e:	400b      	ands	r3, r1
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	6939      	ldr	r1, [r7, #16]
 8002098:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	43da      	mvns	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	401a      	ands	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	0013      	movs	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	4013      	ands	r3, r2
 80020d8:	d100      	bne.n	80020dc <HAL_GPIO_Init+0x174>
 80020da:	e094      	b.n	8002206 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020dc:	4b51      	ldr	r3, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x2bc>)
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_GPIO_Init+0x2bc>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	619a      	str	r2, [r3, #24]
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_GPIO_Init+0x2bc>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x2c0>)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	589b      	ldr	r3, [r3, r2]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2203      	movs	r2, #3
 8002106:	4013      	ands	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	409a      	lsls	r2, r3
 800210e:	0013      	movs	r3, r2
 8002110:	43da      	mvns	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	2390      	movs	r3, #144	; 0x90
 800211c:	05db      	lsls	r3, r3, #23
 800211e:	429a      	cmp	r2, r3
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x1d6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a41      	ldr	r2, [pc, #260]	; (800222c <HAL_GPIO_Init+0x2c4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x1d2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a40      	ldr	r2, [pc, #256]	; (8002230 <HAL_GPIO_Init+0x2c8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x1ce>
 8002132:	2302      	movs	r3, #2
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x1d8>
 8002136:	2305      	movs	r3, #5
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x1d8>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x1d8>
 800213e:	2300      	movs	r3, #0
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	2103      	movs	r1, #3
 8002144:	400a      	ands	r2, r1
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	4093      	lsls	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002150:	4935      	ldr	r1, [pc, #212]	; (8002228 <HAL_GPIO_Init+0x2c0>)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43da      	mvns	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	025b      	lsls	r3, r3, #9
 8002176:	4013      	ands	r3, r2
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	4013      	ands	r3, r2
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43da      	mvns	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	035b      	lsls	r3, r3, #13
 80021ca:	4013      	ands	r3, r2
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	039b      	lsls	r3, r3, #14
 80021f4:	4013      	ands	r3, r2
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	40da      	lsrs	r2, r3
 8002214:	1e13      	subs	r3, r2, #0
 8002216:	d000      	beq.n	800221a <HAL_GPIO_Init+0x2b2>
 8002218:	e6ae      	b.n	8001f78 <HAL_GPIO_Init+0x10>
  } 
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b006      	add	sp, #24
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000
 800222c:	48000400 	.word	0x48000400
 8002230:	48000800 	.word	0x48000800
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	000a      	movs	r2, r1
 8002242:	1cbb      	adds	r3, r7, #2
 8002244:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	1cba      	adds	r2, r7, #2
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	4013      	ands	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002252:	230f      	movs	r3, #15
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e003      	b.n	8002264 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225c:	230f      	movs	r3, #15
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002264:	230f      	movs	r3, #15
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
  }
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	0008      	movs	r0, r1
 800227c:	0011      	movs	r1, r2
 800227e:	1cbb      	adds	r3, r7, #2
 8002280:	1c02      	adds	r2, r0, #0
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	1c7b      	adds	r3, r7, #1
 8002286:	1c0a      	adds	r2, r1, #0
 8002288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800228a:	1c7b      	adds	r3, r7, #1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002292:	1cbb      	adds	r3, r7, #2
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800229a:	e003      	b.n	80022a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800229c:	1cbb      	adds	r3, r7, #2
 800229e:	881a      	ldrh	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	0002      	movs	r2, r0
 80022b4:	1dbb      	adds	r3, r7, #6
 80022b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	1dba      	adds	r2, r7, #6
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	4013      	ands	r3, r2
 80022c2:	d008      	beq.n	80022d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022c6:	1dba      	adds	r2, r7, #6
 80022c8:	8812      	ldrh	r2, [r2, #0]
 80022ca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022cc:	1dbb      	adds	r3, r7, #6
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7fe f801 	bl	80002d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f000 fb76 	bl	80029e4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d100      	bne.n	8002304 <HAL_RCC_OscConfig+0x20>
 8002302:	e08e      	b.n	8002422 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002304:	4bc5      	ldr	r3, [pc, #788]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	220c      	movs	r2, #12
 800230a:	4013      	ands	r3, r2
 800230c:	2b04      	cmp	r3, #4
 800230e:	d00e      	beq.n	800232e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002310:	4bc2      	ldr	r3, [pc, #776]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	220c      	movs	r2, #12
 8002316:	4013      	ands	r3, r2
 8002318:	2b08      	cmp	r3, #8
 800231a:	d117      	bne.n	800234c <HAL_RCC_OscConfig+0x68>
 800231c:	4bbf      	ldr	r3, [pc, #764]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	23c0      	movs	r3, #192	; 0xc0
 8002322:	025b      	lsls	r3, r3, #9
 8002324:	401a      	ands	r2, r3
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	025b      	lsls	r3, r3, #9
 800232a:	429a      	cmp	r2, r3
 800232c:	d10e      	bne.n	800234c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232e:	4bbb      	ldr	r3, [pc, #748]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	4013      	ands	r3, r2
 8002338:	d100      	bne.n	800233c <HAL_RCC_OscConfig+0x58>
 800233a:	e071      	b.n	8002420 <HAL_RCC_OscConfig+0x13c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d000      	beq.n	8002346 <HAL_RCC_OscConfig+0x62>
 8002344:	e06c      	b.n	8002420 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f000 fb4c 	bl	80029e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x80>
 8002354:	4bb1      	ldr	r3, [pc, #708]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4bb0      	ldr	r3, [pc, #704]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0249      	lsls	r1, r1, #9
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e02f      	b.n	80023c4 <HAL_RCC_OscConfig+0xe0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0xa2>
 800236c:	4bab      	ldr	r3, [pc, #684]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4baa      	ldr	r3, [pc, #680]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002372:	49ab      	ldr	r1, [pc, #684]	; (8002620 <HAL_RCC_OscConfig+0x33c>)
 8002374:	400a      	ands	r2, r1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	4ba8      	ldr	r3, [pc, #672]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4ba7      	ldr	r3, [pc, #668]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800237e:	49a9      	ldr	r1, [pc, #676]	; (8002624 <HAL_RCC_OscConfig+0x340>)
 8002380:	400a      	ands	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e01e      	b.n	80023c4 <HAL_RCC_OscConfig+0xe0>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d10e      	bne.n	80023ac <HAL_RCC_OscConfig+0xc8>
 800238e:	4ba3      	ldr	r3, [pc, #652]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4ba2      	ldr	r3, [pc, #648]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	02c9      	lsls	r1, r1, #11
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	4b9f      	ldr	r3, [pc, #636]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b9e      	ldr	r3, [pc, #632]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0249      	lsls	r1, r1, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xe0>
 80023ac:	4b9b      	ldr	r3, [pc, #620]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b9a      	ldr	r3, [pc, #616]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80023b2:	499b      	ldr	r1, [pc, #620]	; (8002620 <HAL_RCC_OscConfig+0x33c>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	4b98      	ldr	r3, [pc, #608]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b97      	ldr	r3, [pc, #604]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80023be:	4999      	ldr	r1, [pc, #612]	; (8002624 <HAL_RCC_OscConfig+0x340>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d014      	beq.n	80023f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fc42 	bl	8001c54 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d6:	f7ff fc3d 	bl	8001c54 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	; 0x64
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e2fd      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e8:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	4013      	ands	r3, r2
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0xf2>
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7ff fc2d 	bl	8001c54 <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff fc28 	bl	8001c54 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e2e8      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	4b82      	ldr	r3, [pc, #520]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	029b      	lsls	r3, r3, #10
 800241a:	4013      	ands	r3, r2
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x11c>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d100      	bne.n	800242e <HAL_RCC_OscConfig+0x14a>
 800242c:	e06c      	b.n	8002508 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800242e:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	220c      	movs	r2, #12
 8002434:	4013      	ands	r3, r2
 8002436:	d00e      	beq.n	8002456 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002438:	4b78      	ldr	r3, [pc, #480]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	220c      	movs	r2, #12
 800243e:	4013      	ands	r3, r2
 8002440:	2b08      	cmp	r3, #8
 8002442:	d11f      	bne.n	8002484 <HAL_RCC_OscConfig+0x1a0>
 8002444:	4b75      	ldr	r3, [pc, #468]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	23c0      	movs	r3, #192	; 0xc0
 800244a:	025b      	lsls	r3, r3, #9
 800244c:	401a      	ands	r2, r3
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	429a      	cmp	r2, r3
 8002454:	d116      	bne.n	8002484 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	4b71      	ldr	r3, [pc, #452]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2202      	movs	r2, #2
 800245c:	4013      	ands	r3, r2
 800245e:	d005      	beq.n	800246c <HAL_RCC_OscConfig+0x188>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e2bb      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b6b      	ldr	r3, [pc, #428]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	22f8      	movs	r2, #248	; 0xf8
 8002472:	4393      	bics	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00da      	lsls	r2, r3, #3
 800247c:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	e041      	b.n	8002508 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d024      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b62      	ldr	r3, [pc, #392]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002492:	2101      	movs	r1, #1
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fbdc 	bl	8001c54 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff fbd7 	bl	8001c54 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e297      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	d0f1      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b57      	ldr	r3, [pc, #348]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	22f8      	movs	r2, #248	; 0xf8
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00da      	lsls	r2, r3, #3
 80024ce:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e018      	b.n	8002508 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4b50      	ldr	r3, [pc, #320]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80024dc:	2101      	movs	r1, #1
 80024de:	438a      	bics	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff fbb7 	bl	8001c54 <HAL_GetTick>
 80024e6:	0003      	movs	r3, r0
 80024e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ec:	f7ff fbb2 	bl	8001c54 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e272      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d1f1      	bne.n	80024ec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2208      	movs	r2, #8
 800250e:	4013      	ands	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800251c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7ff fb95 	bl	8001c54 <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002530:	f7ff fb90 	bl	8001c54 <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e250      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d0f1      	beq.n	8002530 <HAL_RCC_OscConfig+0x24c>
 800254c:	e018      	b.n	8002580 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002554:	2101      	movs	r1, #1
 8002556:	438a      	bics	r2, r1
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7ff fb7b 	bl	8001c54 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7ff fb76 	bl	8001c54 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e236      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d1f1      	bne.n	8002564 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2204      	movs	r2, #4
 8002586:	4013      	ands	r3, r2
 8002588:	d100      	bne.n	800258c <HAL_RCC_OscConfig+0x2a8>
 800258a:	e0b5      	b.n	80026f8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258c:	201f      	movs	r0, #31
 800258e:	183b      	adds	r3, r7, r0
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	055b      	lsls	r3, r3, #21
 800259c:	4013      	ands	r3, r2
 800259e:	d110      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80025a6:	2180      	movs	r1, #128	; 0x80
 80025a8:	0549      	lsls	r1, r1, #21
 80025aa:	430a      	orrs	r2, r1
 80025ac:	61da      	str	r2, [r3, #28]
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_RCC_OscConfig+0x338>)
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	055b      	lsls	r3, r3, #21
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x344>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d11a      	bne.n	8002604 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_RCC_OscConfig+0x344>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_RCC_OscConfig+0x344>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0049      	lsls	r1, r1, #1
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025dc:	f7ff fb3a 	bl	8001c54 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7ff fb35 	bl	8001c54 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1f5      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x344>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10f      	bne.n	800262c <HAL_RCC_OscConfig+0x348>
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_RCC_OscConfig+0x338>)
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_RCC_OscConfig+0x338>)
 8002612:	2101      	movs	r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	621a      	str	r2, [r3, #32]
 8002618:	e036      	b.n	8002688 <HAL_RCC_OscConfig+0x3a4>
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40021000 	.word	0x40021000
 8002620:	fffeffff 	.word	0xfffeffff
 8002624:	fffbffff 	.word	0xfffbffff
 8002628:	40007000 	.word	0x40007000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x36a>
 8002634:	4bca      	ldr	r3, [pc, #808]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	4bc9      	ldr	r3, [pc, #804]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800263a:	2101      	movs	r1, #1
 800263c:	438a      	bics	r2, r1
 800263e:	621a      	str	r2, [r3, #32]
 8002640:	4bc7      	ldr	r3, [pc, #796]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	4bc6      	ldr	r3, [pc, #792]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002646:	2104      	movs	r1, #4
 8002648:	438a      	bics	r2, r1
 800264a:	621a      	str	r2, [r3, #32]
 800264c:	e01c      	b.n	8002688 <HAL_RCC_OscConfig+0x3a4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x38c>
 8002656:	4bc2      	ldr	r3, [pc, #776]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002658:	6a1a      	ldr	r2, [r3, #32]
 800265a:	4bc1      	ldr	r3, [pc, #772]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800265c:	2104      	movs	r1, #4
 800265e:	430a      	orrs	r2, r1
 8002660:	621a      	str	r2, [r3, #32]
 8002662:	4bbf      	ldr	r3, [pc, #764]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	4bbe      	ldr	r3, [pc, #760]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002668:	2101      	movs	r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	621a      	str	r2, [r3, #32]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x3a4>
 8002670:	4bbb      	ldr	r3, [pc, #748]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	4bba      	ldr	r3, [pc, #744]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	621a      	str	r2, [r3, #32]
 800267c:	4bb8      	ldr	r3, [pc, #736]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800267e:	6a1a      	ldr	r2, [r3, #32]
 8002680:	4bb7      	ldr	r3, [pc, #732]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002682:	2104      	movs	r1, #4
 8002684:	438a      	bics	r2, r1
 8002686:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d014      	beq.n	80026ba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7ff fae0 	bl	8001c54 <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	e009      	b.n	80026ae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7ff fadb 	bl	8001c54 <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4aaf      	ldr	r2, [pc, #700]	; (8002964 <HAL_RCC_OscConfig+0x680>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e19a      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	4bac      	ldr	r3, [pc, #688]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	2202      	movs	r2, #2
 80026b4:	4013      	ands	r3, r2
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x3b6>
 80026b8:	e013      	b.n	80026e2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff facb 	bl	8001c54 <HAL_GetTick>
 80026be:	0003      	movs	r3, r0
 80026c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	e009      	b.n	80026d8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff fac6 	bl	8001c54 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	4aa5      	ldr	r2, [pc, #660]	; (8002964 <HAL_RCC_OscConfig+0x680>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e185      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	4ba1      	ldr	r3, [pc, #644]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026e2:	231f      	movs	r3, #31
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	4b9c      	ldr	r3, [pc, #624]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	4b9b      	ldr	r3, [pc, #620]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80026f2:	499d      	ldr	r1, [pc, #628]	; (8002968 <HAL_RCC_OscConfig+0x684>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2210      	movs	r2, #16
 80026fe:	4013      	ands	r3, r2
 8002700:	d063      	beq.n	80027ca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d12a      	bne.n	8002760 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800270a:	4b95      	ldr	r3, [pc, #596]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800270c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270e:	4b94      	ldr	r3, [pc, #592]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002710:	2104      	movs	r1, #4
 8002712:	430a      	orrs	r2, r1
 8002714:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002716:	4b92      	ldr	r3, [pc, #584]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271a:	4b91      	ldr	r3, [pc, #580]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff fa97 	bl	8001c54 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800272c:	f7ff fa92 	bl	8001c54 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e152      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d0f1      	beq.n	800272c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002748:	4b85      	ldr	r3, [pc, #532]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	22f8      	movs	r2, #248	; 0xf8
 800274e:	4393      	bics	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	00da      	lsls	r2, r3, #3
 8002758:	4b81      	ldr	r3, [pc, #516]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800275a:	430a      	orrs	r2, r1
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
 800275e:	e034      	b.n	80027ca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	3305      	adds	r3, #5
 8002766:	d111      	bne.n	800278c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002768:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800276a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800276e:	2104      	movs	r1, #4
 8002770:	438a      	bics	r2, r1
 8002772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002774:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	22f8      	movs	r2, #248	; 0xf8
 800277a:	4393      	bics	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	00da      	lsls	r2, r3, #3
 8002784:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002786:	430a      	orrs	r2, r1
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
 800278a:	e01e      	b.n	80027ca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800278c:	4b74      	ldr	r3, [pc, #464]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800278e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002790:	4b73      	ldr	r3, [pc, #460]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002792:	2104      	movs	r1, #4
 8002794:	430a      	orrs	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002798:	4b71      	ldr	r3, [pc, #452]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800279a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800279e:	2101      	movs	r1, #1
 80027a0:	438a      	bics	r2, r1
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7ff fa56 	bl	8001c54 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027ae:	f7ff fa51 	bl	8001c54 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e111      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027c0:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	2202      	movs	r2, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d1f1      	bne.n	80027ae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2220      	movs	r2, #32
 80027d0:	4013      	ands	r3, r2
 80027d2:	d05c      	beq.n	800288e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027d4:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	220c      	movs	r2, #12
 80027da:	4013      	ands	r3, r2
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	d00e      	beq.n	80027fe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027e0:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	220c      	movs	r2, #12
 80027e6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d114      	bne.n	8002816 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027ec:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	23c0      	movs	r3, #192	; 0xc0
 80027f2:	025b      	lsls	r3, r3, #9
 80027f4:	401a      	ands	r2, r3
 80027f6:	23c0      	movs	r3, #192	; 0xc0
 80027f8:	025b      	lsls	r3, r3, #9
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d10b      	bne.n	8002816 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80027fe:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	025b      	lsls	r3, r3, #9
 8002806:	4013      	ands	r3, r2
 8002808:	d040      	beq.n	800288c <HAL_RCC_OscConfig+0x5a8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d03c      	beq.n	800288c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0e6      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01b      	beq.n	8002856 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800281e:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002822:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0249      	lsls	r1, r1, #9
 8002828:	430a      	orrs	r2, r1
 800282a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fa12 	bl	8001c54 <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002836:	f7ff fa0d 	bl	8001c54 <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0cd      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002848:	4b45      	ldr	r3, [pc, #276]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800284a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	025b      	lsls	r3, r3, #9
 8002850:	4013      	ands	r3, r2
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x552>
 8002854:	e01b      	b.n	800288e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002856:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800285c:	4943      	ldr	r1, [pc, #268]	; (800296c <HAL_RCC_OscConfig+0x688>)
 800285e:	400a      	ands	r2, r1
 8002860:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7ff f9f7 	bl	8001c54 <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286c:	f7ff f9f2 	bl	8001c54 <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0b2      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	4013      	ands	r3, r2
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x588>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800288c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d100      	bne.n	8002898 <HAL_RCC_OscConfig+0x5b4>
 8002896:	e0a4      	b.n	80029e2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	220c      	movs	r2, #12
 800289e:	4013      	ands	r3, r2
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d100      	bne.n	80028a6 <HAL_RCC_OscConfig+0x5c2>
 80028a4:	e078      	b.n	8002998 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d14c      	bne.n	8002948 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80028b4:	492e      	ldr	r1, [pc, #184]	; (8002970 <HAL_RCC_OscConfig+0x68c>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7ff f9cb 	bl	8001c54 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f9c6 	bl	8001c54 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e086      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	049b      	lsls	r3, r3, #18
 80028de:	4013      	ands	r3, r2
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e2:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	220f      	movs	r2, #15
 80028e8:	4393      	bics	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80028f2:	430a      	orrs	r2, r1
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_RCC_OscConfig+0x690>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	431a      	orrs	r2, r3
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	0449      	lsls	r1, r1, #17
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff f999 	bl	8001c54 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f994 	bl	8001c54 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e054      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	049b      	lsls	r3, r3, #18
 8002942:	4013      	ands	r3, r2
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x644>
 8002946:	e04c      	b.n	80029e2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCC_OscConfig+0x67c>)
 800294e:	4908      	ldr	r1, [pc, #32]	; (8002970 <HAL_RCC_OscConfig+0x68c>)
 8002950:	400a      	ands	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff f97e 	bl	8001c54 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e015      	b.n	800298a <HAL_RCC_OscConfig+0x6a6>
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	00001388 	.word	0x00001388
 8002968:	efffffff 	.word	0xefffffff
 800296c:	fffeffff 	.word	0xfffeffff
 8002970:	feffffff 	.word	0xfeffffff
 8002974:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002978:	f7ff f96c 	bl	8001c54 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e02c      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_RCC_OscConfig+0x708>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	049b      	lsls	r3, r3, #18
 8002992:	4013      	ands	r3, r2
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x694>
 8002996:	e024      	b.n	80029e2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e01f      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_RCC_OscConfig+0x708>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_RCC_OscConfig+0x708>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	23c0      	movs	r3, #192	; 0xc0
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	401a      	ands	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	429a      	cmp	r2, r3
 80029be:	d10e      	bne.n	80029de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	220f      	movs	r2, #15
 80029c4:	401a      	ands	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d107      	bne.n	80029de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	23f0      	movs	r3, #240	; 0xf0
 80029d2:	039b      	lsls	r3, r3, #14
 80029d4:	401a      	ands	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b008      	add	sp, #32
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0bf      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d911      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b5e      	ldr	r3, [pc, #376]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	4393      	bics	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0a6      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2204      	movs	r2, #4
 8002a46:	4013      	ands	r3, r2
 8002a48:	d006      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a4a:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002a50:	21e0      	movs	r1, #224	; 0xe0
 8002a52:	00c9      	lsls	r1, r1, #3
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	22f0      	movs	r2, #240	; 0xf0
 8002a5e:	4393      	bics	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d04c      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	029b      	lsls	r3, r3, #10
 8002a86:	4013      	ands	r3, r2
 8002a88:	d120      	bne.n	8002acc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07a      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	4b3e      	ldr	r3, [pc, #248]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	049b      	lsls	r3, r3, #18
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d114      	bne.n	8002acc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06e      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002aae:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d108      	bne.n	8002acc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e062      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e05b      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7ff f8b8 	bl	8001c54 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae8:	e009      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aea:	f7ff f8b3 	bl	8001c54 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x1a4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e042      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	220c      	movs	r2, #12
 8002b04:	401a      	ands	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1ec      	bne.n	8002aea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d211      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4393      	bics	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x19c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e020      	b.n	8002b84 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2204      	movs	r2, #4
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <HAL_RCC_ClockConfig+0x1a8>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b60:	f000 f820 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8002b64:	0001      	movs	r1, r0
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1a0>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	4013      	ands	r3, r2
 8002b70:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x1ac>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	000a      	movs	r2, r1
 8002b76:	40da      	lsrs	r2, r3
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7ff f823 	bl	8001bc8 <HAL_InitTick>
  
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40022000 	.word	0x40022000
 8002b90:	40021000 	.word	0x40021000
 8002b94:	00001388 	.word	0x00001388
 8002b98:	fffff8ff 	.word	0xfffff8ff
 8002b9c:	08005afc 	.word	0x08005afc
 8002ba0:	20000000 	.word	0x20000000

08002ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b08f      	sub	sp, #60	; 0x3c
 8002ba8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002baa:	2314      	movs	r3, #20
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xec>)
 8002bb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bb2:	c313      	stmia	r3!, {r0, r1, r4}
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002bbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bbe:	c313      	stmia	r3!, {r0, r1, r4}
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bcc:	2300      	movs	r3, #0
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	220c      	movs	r2, #12
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	d047      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0xd4>
 8002be8:	d849      	bhi.n	8002c7e <HAL_RCC_GetSysClockFreq+0xda>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d002      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x50>
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x56>
 8002bf2:	e044      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf4:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bf8:	e044      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	220f      	movs	r2, #15
 8002c00:	4013      	ands	r3, r2
 8002c02:	2214      	movs	r2, #20
 8002c04:	18ba      	adds	r2, r7, r2
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	220f      	movs	r2, #15
 8002c10:	4013      	ands	r3, r2
 8002c12:	1d3a      	adds	r2, r7, #4
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1a:	23c0      	movs	r3, #192	; 0xc0
 8002c1c:	025b      	lsls	r3, r3, #9
 8002c1e:	401a      	ands	r2, r3
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	025b      	lsls	r3, r3, #9
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c2a:	481c      	ldr	r0, [pc, #112]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c2c:	f7fd fa76 	bl	800011c <__udivsi3>
 8002c30:	0003      	movs	r3, r0
 8002c32:	001a      	movs	r2, r3
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	4353      	muls	r3, r2
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3a:	e01a      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3e:	23c0      	movs	r3, #192	; 0xc0
 8002c40:	025b      	lsls	r3, r3, #9
 8002c42:	401a      	ands	r2, r3
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	025b      	lsls	r3, r3, #9
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d109      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c4e:	4814      	ldr	r0, [pc, #80]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c50:	f7fd fa64 	bl	800011c <__udivsi3>
 8002c54:	0003      	movs	r3, r0
 8002c56:	001a      	movs	r2, r3
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	4353      	muls	r3, r2
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c62:	480e      	ldr	r0, [pc, #56]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c64:	f7fd fa5a 	bl	800011c <__udivsi3>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	4353      	muls	r3, r2
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c7c:	e002      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c82:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b00f      	add	sp, #60	; 0x3c
 8002c8c:	bd90      	pop	{r4, r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	08005ac0 	.word	0x08005ac0
 8002c94:	08005ad0 	.word	0x08005ad0
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	02dc6c00 	.word	0x02dc6c00

08002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca8:	4b02      	ldr	r3, [pc, #8]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002cbc:	f7ff fff2 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cc0:	0001      	movs	r1, r0
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	2207      	movs	r2, #7
 8002cca:	4013      	ands	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	40d9      	lsrs	r1, r3
 8002cd2:	000b      	movs	r3, r1
}    
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08005b0c 	.word	0x08005b0c

08002ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	025b      	lsls	r3, r3, #9
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d00:	e08e      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2017      	movs	r0, #23
 8002d04:	183b      	adds	r3, r7, r0
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b67      	ldr	r3, [pc, #412]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	055b      	lsls	r3, r3, #21
 8002d12:	4013      	ands	r3, r2
 8002d14:	d110      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0549      	lsls	r1, r1, #21
 8002d20:	430a      	orrs	r2, r1
 8002d22:	61da      	str	r2, [r3, #28]
 8002d24:	4b60      	ldr	r3, [pc, #384]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	055b      	lsls	r3, r3, #21
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	d11a      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b58      	ldr	r3, [pc, #352]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0049      	lsls	r1, r1, #1
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fe ff7f 	bl	8001c54 <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	e008      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5c:	f7fe ff7a 	bl	8001c54 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e097      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d034      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	23c0      	movs	r3, #192	; 0xc0
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d02c      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002da6:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0249      	lsls	r1, r1, #9
 8002db0:	430a      	orrs	r2, r1
 8002db2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db4:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dba:	493e      	ldr	r1, [pc, #248]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe ff41 	bl	8001c54 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	e009      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe ff3c 	bl	8001c54 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e058      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	2202      	movs	r2, #2
 8002df2:	4013      	ands	r3, r2
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e0a:	2317      	movs	r3, #23
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e1a:	4928      	ldr	r1, [pc, #160]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	2203      	movs	r2, #3
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	4013      	ands	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e48:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4393      	bics	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	029b      	lsls	r3, r3, #10
 8002e64:	4013      	ands	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	4393      	bics	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4013      	ands	r3, r2
 8002e86:	d009      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	4393      	bics	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b006      	add	sp, #24
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	fffffcff 	.word	0xfffffcff
 8002eb4:	fffeffff 	.word	0xfffeffff
 8002eb8:	00001388 	.word	0x00001388
 8002ebc:	efffffff 	.word	0xefffffff

08002ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0a8      	b.n	8003024 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	2382      	movs	r3, #130	; 0x82
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d009      	beq.n	8002efa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
 8002eec:	e005      	b.n	8002efa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	225d      	movs	r2, #93	; 0x5d
 8002f04:	5c9b      	ldrb	r3, [r3, r2]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	225c      	movs	r2, #92	; 0x5c
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7fe fc6e 	bl	80017f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	225d      	movs	r2, #93	; 0x5d
 8002f20:	2102      	movs	r1, #2
 8002f22:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	438a      	bics	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	23e0      	movs	r3, #224	; 0xe0
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d902      	bls.n	8002f46 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e002      	b.n	8002f4c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	23f0      	movs	r3, #240	; 0xf0
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d008      	beq.n	8002f6a <HAL_SPI_Init+0xaa>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	23e0      	movs	r3, #224	; 0xe0
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d002      	beq.n	8002f6a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	2382      	movs	r3, #130	; 0x82
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	401a      	ands	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	2384      	movs	r3, #132	; 0x84
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2102      	movs	r1, #2
 8002f86:	400b      	ands	r3, r1
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	400b      	ands	r3, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6999      	ldr	r1, [r3, #24]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2138      	movs	r1, #56	; 0x38
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	2204      	movs	r2, #4
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2110      	movs	r1, #16
 8002fd8:	400b      	ands	r3, r1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	2108      	movs	r1, #8
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68d9      	ldr	r1, [r3, #12]
 8002fea:	23f0      	movs	r3, #240	; 0xf0
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	400b      	ands	r3, r1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	015b      	lsls	r3, r3, #5
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4907      	ldr	r1, [pc, #28]	; (800302c <HAL_SPI_Init+0x16c>)
 8003010:	400a      	ands	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	225d      	movs	r2, #93	; 0x5d
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	fffff7ff 	.word	0xfffff7ff

08003030 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	1dbb      	adds	r3, r7, #6
 800303e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003040:	231f      	movs	r3, #31
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	225c      	movs	r2, #92	; 0x5c
 800304c:	5c9b      	ldrb	r3, [r3, r2]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_SPI_Transmit+0x26>
 8003052:	2302      	movs	r3, #2
 8003054:	e140      	b.n	80032d8 <HAL_SPI_Transmit+0x2a8>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	225c      	movs	r2, #92	; 0x5c
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800305e:	f7fe fdf9 	bl	8001c54 <HAL_GetTick>
 8003062:	0003      	movs	r3, r0
 8003064:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003066:	2316      	movs	r3, #22
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	1dba      	adds	r2, r7, #6
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	225d      	movs	r2, #93	; 0x5d
 8003074:	5c9b      	ldrb	r3, [r3, r2]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d004      	beq.n	8003086 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800307c:	231f      	movs	r3, #31
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2202      	movs	r2, #2
 8003082:	701a      	strb	r2, [r3, #0]
    goto error;
 8003084:	e11d      	b.n	80032c2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_SPI_Transmit+0x64>
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003094:	231f      	movs	r3, #31
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
    goto error;
 800309c:	e111      	b.n	80032c2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	225d      	movs	r2, #93	; 0x5d
 80030a2:	2103      	movs	r1, #3
 80030a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1dba      	adds	r2, r7, #6
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1dba      	adds	r2, r7, #6
 80030be:	8812      	ldrh	r2, [r2, #0]
 80030c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2244      	movs	r2, #68	; 0x44
 80030cc:	2100      	movs	r1, #0
 80030ce:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2246      	movs	r2, #70	; 0x46
 80030d4:	2100      	movs	r1, #0
 80030d6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d110      	bne.n	8003112 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2140      	movs	r1, #64	; 0x40
 80030fc:	438a      	bics	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	01c9      	lsls	r1, r1, #7
 800310e:	430a      	orrs	r2, r1
 8003110:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	4013      	ands	r3, r2
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	23e0      	movs	r3, #224	; 0xe0
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	429a      	cmp	r2, r3
 800313a:	d94e      	bls.n	80031da <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <HAL_SPI_Transmit+0x11e>
 8003144:	2316      	movs	r3, #22
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d13f      	bne.n	80031ce <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	881a      	ldrh	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003172:	e02c      	b.n	80031ce <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2202      	movs	r2, #2
 800317c:	4013      	ands	r3, r2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d112      	bne.n	80031a8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	1c9a      	adds	r2, r3, #2
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031a6:	e012      	b.n	80031ce <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a8:	f7fe fd54 	bl	8001c54 <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d802      	bhi.n	80031be <HAL_SPI_Transmit+0x18e>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	d102      	bne.n	80031c4 <HAL_SPI_Transmit+0x194>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80031c4:	231f      	movs	r3, #31
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2203      	movs	r2, #3
 80031ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80031cc:	e079      	b.n	80032c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1cd      	bne.n	8003174 <HAL_SPI_Transmit+0x144>
 80031d8:	e04f      	b.n	800327a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <HAL_SPI_Transmit+0x1bc>
 80031e2:	2316      	movs	r3, #22
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d141      	bne.n	8003270 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003212:	e02d      	b.n	8003270 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2202      	movs	r2, #2
 800321c:	4013      	ands	r3, r2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d113      	bne.n	800324a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	330c      	adds	r3, #12
 800322c:	7812      	ldrb	r2, [r2, #0]
 800322e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003248:	e012      	b.n	8003270 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800324a:	f7fe fd03 	bl	8001c54 <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d802      	bhi.n	8003260 <HAL_SPI_Transmit+0x230>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	d102      	bne.n	8003266 <HAL_SPI_Transmit+0x236>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003266:	231f      	movs	r3, #31
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2203      	movs	r2, #3
 800326c:	701a      	strb	r2, [r3, #0]
          goto error;
 800326e:	e028      	b.n	80032c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1cc      	bne.n	8003214 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	6839      	ldr	r1, [r7, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f95d 	bl	8003540 <SPI_EndRxTxTransaction>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d002      	beq.n	8003290 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80032b6:	231f      	movs	r3, #31
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e000      	b.n	80032c2 <HAL_SPI_Transmit+0x292>
  }

error:
 80032c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	225d      	movs	r2, #93	; 0x5d
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	225c      	movs	r2, #92	; 0x5c
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80032d2:	231f      	movs	r3, #31
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	781b      	ldrb	r3, [r3, #0]
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b008      	add	sp, #32
 80032de:	bd80      	pop	{r7, pc}

080032e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032f0:	f7fe fcb0 	bl	8001c54 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003300:	f7fe fca8 	bl	8001c54 <HAL_GetTick>
 8003304:	0003      	movs	r3, r0
 8003306:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003308:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	015b      	lsls	r3, r3, #5
 800330e:	0d1b      	lsrs	r3, r3, #20
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	4353      	muls	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003316:	e058      	b.n	80033ca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	d055      	beq.n	80033ca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800331e:	f7fe fc99 	bl	8001c54 <HAL_GetTick>
 8003322:	0002      	movs	r2, r0
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	429a      	cmp	r2, r3
 800332c:	d902      	bls.n	8003334 <SPI_WaitFlagStateUntilTimeout+0x54>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d142      	bne.n	80033ba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	21e0      	movs	r1, #224	; 0xe0
 8003340:	438a      	bics	r2, r1
 8003342:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	2382      	movs	r3, #130	; 0x82
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	429a      	cmp	r2, r3
 800334e:	d113      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	429a      	cmp	r2, r3
 800335a:	d005      	beq.n	8003368 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2140      	movs	r1, #64	; 0x40
 8003374:	438a      	bics	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	019b      	lsls	r3, r3, #6
 8003380:	429a      	cmp	r2, r3
 8003382:	d110      	bne.n	80033a6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	491a      	ldr	r1, [pc, #104]	; (80033f8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	0189      	lsls	r1, r1, #6
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	225d      	movs	r2, #93	; 0x5d
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	225c      	movs	r2, #92	; 0x5c
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e017      	b.n	80033ea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	425a      	negs	r2, r3
 80033da:	4153      	adcs	r3, r2
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	001a      	movs	r2, r3
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d197      	bne.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b008      	add	sp, #32
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000000 	.word	0x20000000
 80033f8:	ffffdfff 	.word	0xffffdfff

080033fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	; 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800340a:	2317      	movs	r3, #23
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003412:	f7fe fc1f 	bl	8001c54 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	18d3      	adds	r3, r2, r3
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003422:	f7fe fc17 	bl	8001c54 <HAL_GetTick>
 8003426:	0003      	movs	r3, r0
 8003428:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	0013      	movs	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	189b      	adds	r3, r3, r2
 800343c:	00da      	lsls	r2, r3, #3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	0d1b      	lsrs	r3, r3, #20
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	4353      	muls	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003448:	e068      	b.n	800351c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	23c0      	movs	r3, #192	; 0xc0
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	429a      	cmp	r2, r3
 8003452:	d10a      	bne.n	800346a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	2117      	movs	r1, #23
 8003462:	187b      	adds	r3, r7, r1
 8003464:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003466:	187b      	adds	r3, r7, r1
 8003468:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	d055      	beq.n	800351c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003470:	f7fe fbf0 	bl	8001c54 <HAL_GetTick>
 8003474:	0002      	movs	r2, r0
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	429a      	cmp	r2, r3
 800347e:	d902      	bls.n	8003486 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d142      	bne.n	800350c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	21e0      	movs	r1, #224	; 0xe0
 8003492:	438a      	bics	r2, r1
 8003494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	2382      	movs	r3, #130	; 0x82
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	429a      	cmp	r2, r3
 80034a0:	d113      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0xce>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d005      	beq.n	80034ba <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d107      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	438a      	bics	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d110      	bne.n	80034f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4916      	ldr	r1, [pc, #88]	; (800353c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	0189      	lsls	r1, r1, #6
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	225d      	movs	r2, #93	; 0x5d
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	225c      	movs	r2, #92	; 0x5c
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e010      	b.n	800352e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	3b01      	subs	r3, #1
 800351a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d18e      	bne.n	800344a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b00a      	add	sp, #40	; 0x28
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	20000000 	.word	0x20000000
 800353c:	ffffdfff 	.word	0xffffdfff

08003540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	0013      	movs	r3, r2
 800355a:	2200      	movs	r2, #0
 800355c:	f7ff ff4e 	bl	80033fc <SPI_WaitFifoStateUntilTimeout>
 8003560:	1e03      	subs	r3, r0, #0
 8003562:	d007      	beq.n	8003574 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003568:	2220      	movs	r2, #32
 800356a:	431a      	orrs	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e027      	b.n	80035c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	0013      	movs	r3, r2
 800357e:	2200      	movs	r2, #0
 8003580:	2180      	movs	r1, #128	; 0x80
 8003582:	f7ff fead 	bl	80032e0 <SPI_WaitFlagStateUntilTimeout>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d007      	beq.n	800359a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	2220      	movs	r2, #32
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e014      	b.n	80035c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	23c0      	movs	r3, #192	; 0xc0
 800359e:	00d9      	lsls	r1, r3, #3
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	0013      	movs	r3, r2
 80035a8:	2200      	movs	r2, #0
 80035aa:	f7ff ff27 	bl	80033fc <SPI_WaitFifoStateUntilTimeout>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d007      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b6:	2220      	movs	r2, #32
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e000      	b.n	80035c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b004      	add	sp, #16
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e044      	b.n	8003668 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2274      	movs	r2, #116	; 0x74
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fe f94d 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2224      	movs	r2, #36	; 0x24
 80035fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	438a      	bics	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	0018      	movs	r0, r3
 8003610:	f000 fb86 	bl	8003d20 <UART_SetConfig>
 8003614:	0003      	movs	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e024      	b.n	8003668 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 fcb9 	bl	8003fa0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	490d      	ldr	r1, [pc, #52]	; (8003670 <HAL_UART_Init+0xa4>)
 800363a:	400a      	ands	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	212a      	movs	r1, #42	; 0x2a
 800364a:	438a      	bics	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 fd51 	bl	8004108 <UART_CheckIdleState>
 8003666:	0003      	movs	r3, r0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}
 8003670:	ffffb7ff 	.word	0xffffb7ff

08003674 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	1dbb      	adds	r3, r7, #6
 8003680:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003686:	2b20      	cmp	r3, #32
 8003688:	d150      	bne.n	800372c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_UART_Receive_IT+0x24>
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e048      	b.n	800372e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	015b      	lsls	r3, r3, #5
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d109      	bne.n	80036bc <HAL_UART_Receive_IT+0x48>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4013      	ands	r3, r2
 80036b6:	d001      	beq.n	80036bc <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e038      	b.n	800372e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2274      	movs	r2, #116	; 0x74
 80036c0:	5c9b      	ldrb	r3, [r3, r2]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Receive_IT+0x56>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e031      	b.n	800372e <HAL_UART_Receive_IT+0xba>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2274      	movs	r2, #116	; 0x74
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	4013      	ands	r3, r2
 80036e4:	d019      	beq.n	800371a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e6:	f3ef 8310 	mrs	r3, PRIMASK
 80036ea:	613b      	str	r3, [r7, #16]
  return(result);
 80036ec:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	2301      	movs	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f383 8810 	msr	PRIMASK, r3
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2180      	movs	r1, #128	; 0x80
 8003708:	04c9      	lsls	r1, r1, #19
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800371a:	1dbb      	adds	r3, r7, #6
 800371c:	881a      	ldrh	r2, [r3, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	0018      	movs	r0, r3
 8003724:	f000 fdfc 	bl	8004320 <UART_Start_Receive_IT>
 8003728:	0003      	movs	r3, r0
 800372a:	e000      	b.n	800372e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b008      	add	sp, #32
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b0ab      	sub	sp, #172	; 0xac
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	22a4      	movs	r2, #164	; 0xa4
 8003748:	18b9      	adds	r1, r7, r2
 800374a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	20a0      	movs	r0, #160	; 0xa0
 8003754:	1839      	adds	r1, r7, r0
 8003756:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	219c      	movs	r1, #156	; 0x9c
 8003760:	1879      	adds	r1, r7, r1
 8003762:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003764:	0011      	movs	r1, r2
 8003766:	18bb      	adds	r3, r7, r2
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a99      	ldr	r2, [pc, #612]	; (80039d0 <HAL_UART_IRQHandler+0x298>)
 800376c:	4013      	ands	r3, r2
 800376e:	2298      	movs	r2, #152	; 0x98
 8003770:	18bc      	adds	r4, r7, r2
 8003772:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003774:	18bb      	adds	r3, r7, r2
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d114      	bne.n	80037a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800377c:	187b      	adds	r3, r7, r1
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2220      	movs	r2, #32
 8003782:	4013      	ands	r3, r2
 8003784:	d00f      	beq.n	80037a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003786:	183b      	adds	r3, r7, r0
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2220      	movs	r2, #32
 800378c:	4013      	ands	r3, r2
 800378e:	d00a      	beq.n	80037a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003794:	2b00      	cmp	r3, #0
 8003796:	d100      	bne.n	800379a <HAL_UART_IRQHandler+0x62>
 8003798:	e296      	b.n	8003cc8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	0010      	movs	r0, r2
 80037a2:	4798      	blx	r3
      }
      return;
 80037a4:	e290      	b.n	8003cc8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037a6:	2398      	movs	r3, #152	; 0x98
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d100      	bne.n	80037b2 <HAL_UART_IRQHandler+0x7a>
 80037b0:	e114      	b.n	80039dc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037b2:	239c      	movs	r3, #156	; 0x9c
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2201      	movs	r2, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	d106      	bne.n	80037cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037be:	23a0      	movs	r3, #160	; 0xa0
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a83      	ldr	r2, [pc, #524]	; (80039d4 <HAL_UART_IRQHandler+0x29c>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	d100      	bne.n	80037cc <HAL_UART_IRQHandler+0x94>
 80037ca:	e107      	b.n	80039dc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037cc:	23a4      	movs	r3, #164	; 0xa4
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2201      	movs	r2, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	d012      	beq.n	80037fe <HAL_UART_IRQHandler+0xc6>
 80037d8:	23a0      	movs	r3, #160	; 0xa0
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	d00b      	beq.n	80037fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	589b      	ldr	r3, [r3, r2]
 80037f4:	2201      	movs	r2, #1
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037fe:	23a4      	movs	r3, #164	; 0xa4
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2202      	movs	r2, #2
 8003806:	4013      	ands	r3, r2
 8003808:	d011      	beq.n	800382e <HAL_UART_IRQHandler+0xf6>
 800380a:	239c      	movs	r3, #156	; 0x9c
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	4013      	ands	r3, r2
 8003814:	d00b      	beq.n	800382e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2202      	movs	r2, #2
 800381c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	589b      	ldr	r3, [r3, r2]
 8003824:	2204      	movs	r2, #4
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800382e:	23a4      	movs	r3, #164	; 0xa4
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2204      	movs	r2, #4
 8003836:	4013      	ands	r3, r2
 8003838:	d011      	beq.n	800385e <HAL_UART_IRQHandler+0x126>
 800383a:	239c      	movs	r3, #156	; 0x9c
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2201      	movs	r2, #1
 8003842:	4013      	ands	r3, r2
 8003844:	d00b      	beq.n	800385e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2204      	movs	r2, #4
 800384c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2280      	movs	r2, #128	; 0x80
 8003852:	589b      	ldr	r3, [r3, r2]
 8003854:	2202      	movs	r2, #2
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800385e:	23a4      	movs	r3, #164	; 0xa4
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2208      	movs	r2, #8
 8003866:	4013      	ands	r3, r2
 8003868:	d017      	beq.n	800389a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800386a:	23a0      	movs	r3, #160	; 0xa0
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2220      	movs	r2, #32
 8003872:	4013      	ands	r3, r2
 8003874:	d105      	bne.n	8003882 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003876:	239c      	movs	r3, #156	; 0x9c
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003880:	d00b      	beq.n	800389a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2208      	movs	r2, #8
 8003888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	589b      	ldr	r3, [r3, r2]
 8003890:	2208      	movs	r2, #8
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800389a:	23a4      	movs	r3, #164	; 0xa4
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4013      	ands	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_UART_IRQHandler+0x198>
 80038a8:	23a0      	movs	r3, #160	; 0xa0
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	04db      	lsls	r3, r3, #19
 80038b2:	4013      	ands	r3, r2
 80038b4:	d00c      	beq.n	80038d0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	589b      	ldr	r3, [r3, r2]
 80038c6:	2220      	movs	r2, #32
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	589b      	ldr	r3, [r3, r2]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d100      	bne.n	80038dc <HAL_UART_IRQHandler+0x1a4>
 80038da:	e1f7      	b.n	8003ccc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038dc:	23a4      	movs	r3, #164	; 0xa4
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	4013      	ands	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038e8:	23a0      	movs	r3, #160	; 0xa0
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2220      	movs	r2, #32
 80038f0:	4013      	ands	r3, r2
 80038f2:	d008      	beq.n	8003906 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	0010      	movs	r0, r2
 8003904:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	589b      	ldr	r3, [r3, r2]
 800390c:	2194      	movs	r1, #148	; 0x94
 800390e:	187a      	adds	r2, r7, r1
 8003910:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	4013      	ands	r3, r2
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d004      	beq.n	800392a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003920:	187b      	adds	r3, r7, r1
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2228      	movs	r2, #40	; 0x28
 8003926:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003928:	d047      	beq.n	80039ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f000 fda7 	bl	8004480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2240      	movs	r2, #64	; 0x40
 800393a:	4013      	ands	r3, r2
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d137      	bne.n	80039b0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003940:	f3ef 8310 	mrs	r3, PRIMASK
 8003944:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003948:	2090      	movs	r0, #144	; 0x90
 800394a:	183a      	adds	r2, r7, r0
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	2301      	movs	r3, #1
 8003950:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2140      	movs	r1, #64	; 0x40
 8003966:	438a      	bics	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	183b      	adds	r3, r7, r0
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_UART_IRQHandler+0x2a0>)
 8003986:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	0018      	movs	r0, r3
 800398e:	f7fe faa5 	bl	8001edc <HAL_DMA_Abort_IT>
 8003992:	1e03      	subs	r3, r0, #0
 8003994:	d01a      	beq.n	80039cc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	0018      	movs	r0, r3
 80039a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	e012      	b.n	80039cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 f9a5 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ae:	e00d      	b.n	80039cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 f9a0 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e008      	b.n	80039cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 f99b 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	2100      	movs	r1, #0
 80039c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80039ca:	e17f      	b.n	8003ccc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	46c0      	nop			; (mov r8, r8)
    return;
 80039ce:	e17d      	b.n	8003ccc <HAL_UART_IRQHandler+0x594>
 80039d0:	0000080f 	.word	0x0000080f
 80039d4:	04000120 	.word	0x04000120
 80039d8:	08004545 	.word	0x08004545

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d000      	beq.n	80039e6 <HAL_UART_IRQHandler+0x2ae>
 80039e4:	e131      	b.n	8003c4a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039e6:	23a4      	movs	r3, #164	; 0xa4
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2210      	movs	r2, #16
 80039ee:	4013      	ands	r3, r2
 80039f0:	d100      	bne.n	80039f4 <HAL_UART_IRQHandler+0x2bc>
 80039f2:	e12a      	b.n	8003c4a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039f4:	23a0      	movs	r3, #160	; 0xa0
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2210      	movs	r2, #16
 80039fc:	4013      	ands	r3, r2
 80039fe:	d100      	bne.n	8003a02 <HAL_UART_IRQHandler+0x2ca>
 8003a00:	e123      	b.n	8003c4a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2210      	movs	r2, #16
 8003a08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2240      	movs	r2, #64	; 0x40
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d000      	beq.n	8003a1a <HAL_UART_IRQHandler+0x2e2>
 8003a18:	e09b      	b.n	8003b52 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	217e      	movs	r1, #126	; 0x7e
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003a28:	187b      	adds	r3, r7, r1
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d100      	bne.n	8003a32 <HAL_UART_IRQHandler+0x2fa>
 8003a30:	e14e      	b.n	8003cd0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2258      	movs	r2, #88	; 0x58
 8003a36:	5a9b      	ldrh	r3, [r3, r2]
 8003a38:	187a      	adds	r2, r7, r1
 8003a3a:	8812      	ldrh	r2, [r2, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d300      	bcc.n	8003a42 <HAL_UART_IRQHandler+0x30a>
 8003a40:	e146      	b.n	8003cd0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	187a      	adds	r2, r7, r1
 8003a46:	215a      	movs	r1, #90	; 0x5a
 8003a48:	8812      	ldrh	r2, [r2, #0]
 8003a4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d06e      	beq.n	8003b34 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a56:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a60:	2301      	movs	r3, #1
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	499a      	ldr	r1, [pc, #616]	; (8003ce0 <HAL_UART_IRQHandler+0x5a8>)
 8003a78:	400a      	ands	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a88:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a90:	677b      	str	r3, [r7, #116]	; 0x74
 8003a92:	2301      	movs	r3, #1
 8003a94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	438a      	bics	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab4:	f383 8810 	msr	PRIMASK, r3
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aba:	f3ef 8310 	mrs	r3, PRIMASK
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aca:	f383 8810 	msr	PRIMASK, r3
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2140      	movs	r1, #64	; 0x40
 8003adc:	438a      	bics	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae6:	f383 8810 	msr	PRIMASK, r3
}
 8003aea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af8:	f3ef 8310 	mrs	r3, PRIMASK
 8003afc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b02:	2301      	movs	r3, #1
 8003b04:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b08:	f383 8810 	msr	PRIMASK, r3
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2110      	movs	r1, #16
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b20:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b24:	f383 8810 	msr	PRIMASK, r3
}
 8003b28:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f7fe f99c 	bl	8001e6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2258      	movs	r2, #88	; 0x58
 8003b38:	5a9a      	ldrh	r2, [r3, r2]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	215a      	movs	r1, #90	; 0x5a
 8003b3e:	5a5b      	ldrh	r3, [r3, r1]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0011      	movs	r1, r2
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 f8dc 	bl	8003d08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b50:	e0be      	b.n	8003cd0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2258      	movs	r2, #88	; 0x58
 8003b56:	5a99      	ldrh	r1, [r3, r2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	225a      	movs	r2, #90	; 0x5a
 8003b5c:	5a9b      	ldrh	r3, [r3, r2]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	208e      	movs	r0, #142	; 0x8e
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	1a8a      	subs	r2, r1, r2
 8003b66:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	225a      	movs	r2, #90	; 0x5a
 8003b6c:	5a9b      	ldrh	r3, [r3, r2]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d100      	bne.n	8003b76 <HAL_UART_IRQHandler+0x43e>
 8003b74:	e0ae      	b.n	8003cd4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003b76:	183b      	adds	r3, r7, r0
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d100      	bne.n	8003b80 <HAL_UART_IRQHandler+0x448>
 8003b7e:	e0a9      	b.n	8003cd4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b80:	f3ef 8310 	mrs	r3, PRIMASK
 8003b84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b86:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b88:	2488      	movs	r4, #136	; 0x88
 8003b8a:	193a      	adds	r2, r7, r4
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	2301      	movs	r3, #1
 8003b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f383 8810 	msr	PRIMASK, r3
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	494f      	ldr	r1, [pc, #316]	; (8003ce4 <HAL_UART_IRQHandler+0x5ac>)
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	193b      	adds	r3, r7, r4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f383 8810 	msr	PRIMASK, r3
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bbe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	2484      	movs	r4, #132	; 0x84
 8003bc2:	193a      	adds	r2, r7, r4
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	438a      	bics	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c02:	f3ef 8310 	mrs	r3, PRIMASK
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0a:	2480      	movs	r4, #128	; 0x80
 8003c0c:	193a      	adds	r2, r7, r4
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	2301      	movs	r3, #1
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	f383 8810 	msr	PRIMASK, r3
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2110      	movs	r1, #16
 8003c28:	438a      	bics	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	193b      	adds	r3, r7, r4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	881a      	ldrh	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0011      	movs	r1, r2
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f860 	bl	8003d08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c48:	e044      	b.n	8003cd4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c4a:	23a4      	movs	r3, #164	; 0xa4
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	035b      	lsls	r3, r3, #13
 8003c54:	4013      	ands	r3, r2
 8003c56:	d010      	beq.n	8003c7a <HAL_UART_IRQHandler+0x542>
 8003c58:	239c      	movs	r3, #156	; 0x9c
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	03db      	lsls	r3, r3, #15
 8003c62:	4013      	ands	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	0352      	lsls	r2, r2, #13
 8003c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 fe10 	bl	8004898 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c78:	e02f      	b.n	8003cda <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c7a:	23a4      	movs	r3, #164	; 0xa4
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	4013      	ands	r3, r2
 8003c84:	d00f      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c86:	23a0      	movs	r3, #160	; 0xa0
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01e      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	4798      	blx	r3
    }
    return;
 8003ca4:	e018      	b.n	8003cd8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ca6:	23a4      	movs	r3, #164	; 0xa4
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2240      	movs	r2, #64	; 0x40
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_UART_IRQHandler+0x5a2>
 8003cb2:	23a0      	movs	r3, #160	; 0xa0
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2240      	movs	r2, #64	; 0x40
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d00d      	beq.n	8003cda <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 fc56 	bl	8004572 <UART_EndTransmit_IT>
    return;
 8003cc6:	e008      	b.n	8003cda <HAL_UART_IRQHandler+0x5a2>
      return;
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	e006      	b.n	8003cda <HAL_UART_IRQHandler+0x5a2>
    return;
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	e004      	b.n	8003cda <HAL_UART_IRQHandler+0x5a2>
      return;
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	e002      	b.n	8003cda <HAL_UART_IRQHandler+0x5a2>
      return;
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	e000      	b.n	8003cda <HAL_UART_IRQHandler+0x5a2>
    return;
 8003cd8:	46c0      	nop			; (mov r8, r8)
  }

}
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b02b      	add	sp, #172	; 0xac
 8003cde:	bd90      	pop	{r4, r7, pc}
 8003ce0:	fffffeff 	.word	0xfffffeff
 8003ce4:	fffffedf 	.word	0xfffffedf

08003ce8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	000a      	movs	r2, r1
 8003d12:	1cbb      	adds	r3, r7, #2
 8003d14:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d28:	231e      	movs	r3, #30
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a8d      	ldr	r2, [pc, #564]	; (8003f84 <UART_SetConfig+0x264>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a88      	ldr	r2, [pc, #544]	; (8003f88 <UART_SetConfig+0x268>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a7f      	ldr	r2, [pc, #508]	; (8003f8c <UART_SetConfig+0x26c>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a7b      	ldr	r2, [pc, #492]	; (8003f90 <UART_SetConfig+0x270>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d127      	bne.n	8003df6 <UART_SetConfig+0xd6>
 8003da6:	4b7b      	ldr	r3, [pc, #492]	; (8003f94 <UART_SetConfig+0x274>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	2203      	movs	r2, #3
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d00d      	beq.n	8003dce <UART_SetConfig+0xae>
 8003db2:	d81b      	bhi.n	8003dec <UART_SetConfig+0xcc>
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d014      	beq.n	8003de2 <UART_SetConfig+0xc2>
 8003db8:	d818      	bhi.n	8003dec <UART_SetConfig+0xcc>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <UART_SetConfig+0xa4>
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d00a      	beq.n	8003dd8 <UART_SetConfig+0xb8>
 8003dc2:	e013      	b.n	8003dec <UART_SetConfig+0xcc>
 8003dc4:	231f      	movs	r3, #31
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e021      	b.n	8003e12 <UART_SetConfig+0xf2>
 8003dce:	231f      	movs	r3, #31
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e01c      	b.n	8003e12 <UART_SetConfig+0xf2>
 8003dd8:	231f      	movs	r3, #31
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	2204      	movs	r2, #4
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	e017      	b.n	8003e12 <UART_SetConfig+0xf2>
 8003de2:	231f      	movs	r3, #31
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	2208      	movs	r2, #8
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e012      	b.n	8003e12 <UART_SetConfig+0xf2>
 8003dec:	231f      	movs	r3, #31
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2210      	movs	r2, #16
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	e00d      	b.n	8003e12 <UART_SetConfig+0xf2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a67      	ldr	r2, [pc, #412]	; (8003f98 <UART_SetConfig+0x278>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d104      	bne.n	8003e0a <UART_SetConfig+0xea>
 8003e00:	231f      	movs	r3, #31
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e003      	b.n	8003e12 <UART_SetConfig+0xf2>
 8003e0a:	231f      	movs	r3, #31
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	2210      	movs	r2, #16
 8003e10:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d15d      	bne.n	8003eda <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003e1e:	231f      	movs	r3, #31
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d015      	beq.n	8003e54 <UART_SetConfig+0x134>
 8003e28:	dc18      	bgt.n	8003e5c <UART_SetConfig+0x13c>
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d00d      	beq.n	8003e4a <UART_SetConfig+0x12a>
 8003e2e:	dc15      	bgt.n	8003e5c <UART_SetConfig+0x13c>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <UART_SetConfig+0x11a>
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d005      	beq.n	8003e44 <UART_SetConfig+0x124>
 8003e38:	e010      	b.n	8003e5c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3a:	f7fe ff3d 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	61bb      	str	r3, [r7, #24]
        break;
 8003e42:	e012      	b.n	8003e6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e44:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <UART_SetConfig+0x27c>)
 8003e46:	61bb      	str	r3, [r7, #24]
        break;
 8003e48:	e00f      	b.n	8003e6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4a:	f7fe feab 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	61bb      	str	r3, [r7, #24]
        break;
 8003e52:	e00a      	b.n	8003e6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	61bb      	str	r3, [r7, #24]
        break;
 8003e5a:	e006      	b.n	8003e6a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e60:	231e      	movs	r3, #30
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
        break;
 8003e68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d100      	bne.n	8003e72 <UART_SetConfig+0x152>
 8003e70:	e07b      	b.n	8003f6a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	005a      	lsls	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	18d2      	adds	r2, r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	0019      	movs	r1, r3
 8003e84:	0010      	movs	r0, r2
 8003e86:	f7fc f949 	bl	800011c <__udivsi3>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d91c      	bls.n	8003ed0 <UART_SetConfig+0x1b0>
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	025b      	lsls	r3, r3, #9
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d217      	bcs.n	8003ed0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	200e      	movs	r0, #14
 8003ea6:	183b      	adds	r3, r7, r0
 8003ea8:	210f      	movs	r1, #15
 8003eaa:	438a      	bics	r2, r1
 8003eac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	b299      	uxth	r1, r3
 8003eba:	183b      	adds	r3, r7, r0
 8003ebc:	183a      	adds	r2, r7, r0
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	183a      	adds	r2, r7, r0
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	e04c      	b.n	8003f6a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed0:	231e      	movs	r3, #30
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e047      	b.n	8003f6a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eda:	231f      	movs	r3, #31
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d015      	beq.n	8003f10 <UART_SetConfig+0x1f0>
 8003ee4:	dc18      	bgt.n	8003f18 <UART_SetConfig+0x1f8>
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d00d      	beq.n	8003f06 <UART_SetConfig+0x1e6>
 8003eea:	dc15      	bgt.n	8003f18 <UART_SetConfig+0x1f8>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <UART_SetConfig+0x1d6>
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d005      	beq.n	8003f00 <UART_SetConfig+0x1e0>
 8003ef4:	e010      	b.n	8003f18 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef6:	f7fe fedf 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8003efa:	0003      	movs	r3, r0
 8003efc:	61bb      	str	r3, [r7, #24]
        break;
 8003efe:	e012      	b.n	8003f26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <UART_SetConfig+0x27c>)
 8003f02:	61bb      	str	r3, [r7, #24]
        break;
 8003f04:	e00f      	b.n	8003f26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f06:	f7fe fe4d 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	61bb      	str	r3, [r7, #24]
        break;
 8003f0e:	e00a      	b.n	8003f26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	61bb      	str	r3, [r7, #24]
        break;
 8003f16:	e006      	b.n	8003f26 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f1c:	231e      	movs	r3, #30
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
        break;
 8003f24:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01e      	beq.n	8003f6a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	085a      	lsrs	r2, r3, #1
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	18d2      	adds	r2, r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	0010      	movs	r0, r2
 8003f3e:	f7fc f8ed 	bl	800011c <__udivsi3>
 8003f42:	0003      	movs	r3, r0
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	d909      	bls.n	8003f62 <UART_SetConfig+0x242>
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	025b      	lsls	r3, r3, #9
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d204      	bcs.n	8003f62 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	e003      	b.n	8003f6a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f62:	231e      	movs	r3, #30
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f76:	231e      	movs	r3, #30
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b008      	add	sp, #32
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	efff69f3 	.word	0xefff69f3
 8003f88:	ffffcfff 	.word	0xffffcfff
 8003f8c:	fffff4ff 	.word	0xfffff4ff
 8003f90:	40013800 	.word	0x40013800
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40004400 	.word	0x40004400
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a4a      	ldr	r2, [pc, #296]	; (80040e4 <UART_AdvFeatureConfig+0x144>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2202      	movs	r2, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4a43      	ldr	r2, [pc, #268]	; (80040e8 <UART_AdvFeatureConfig+0x148>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d00b      	beq.n	800400e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <UART_AdvFeatureConfig+0x14c>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2208      	movs	r2, #8
 8004014:	4013      	ands	r3, r2
 8004016:	d00b      	beq.n	8004030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <UART_AdvFeatureConfig+0x150>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2210      	movs	r2, #16
 8004036:	4013      	ands	r3, r2
 8004038:	d00b      	beq.n	8004052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <UART_AdvFeatureConfig+0x154>)
 8004042:	4013      	ands	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2220      	movs	r2, #32
 8004058:	4013      	ands	r3, r2
 800405a:	d00b      	beq.n	8004074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <UART_AdvFeatureConfig+0x158>)
 8004064:	4013      	ands	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2240      	movs	r2, #64	; 0x40
 800407a:	4013      	ands	r3, r2
 800407c:	d01d      	beq.n	80040ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <UART_AdvFeatureConfig+0x15c>)
 8004086:	4013      	ands	r3, r2
 8004088:	0019      	movs	r1, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	035b      	lsls	r3, r3, #13
 800409e:	429a      	cmp	r2, r3
 80040a0:	d10b      	bne.n	80040ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <UART_AdvFeatureConfig+0x160>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	4013      	ands	r3, r2
 80040c2:	d00b      	beq.n	80040dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <UART_AdvFeatureConfig+0x164>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b002      	add	sp, #8
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	fffdffff 	.word	0xfffdffff
 80040e8:	fffeffff 	.word	0xfffeffff
 80040ec:	fffbffff 	.word	0xfffbffff
 80040f0:	ffff7fff 	.word	0xffff7fff
 80040f4:	ffffefff 	.word	0xffffefff
 80040f8:	ffffdfff 	.word	0xffffdfff
 80040fc:	ffefffff 	.word	0xffefffff
 8004100:	ff9fffff 	.word	0xff9fffff
 8004104:	fff7ffff 	.word	0xfff7ffff

08004108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af02      	add	r7, sp, #8
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	2100      	movs	r1, #0
 8004116:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004118:	f7fd fd9c 	bl	8001c54 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2208      	movs	r2, #8
 8004128:	4013      	ands	r3, r2
 800412a:	2b08      	cmp	r3, #8
 800412c:	d10c      	bne.n	8004148 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	0391      	lsls	r1, r2, #14
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <UART_CheckIdleState+0x8c>)
 8004138:	9200      	str	r2, [sp, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	f000 f82c 	bl	8004198 <UART_WaitOnFlagUntilTimeout>
 8004140:	1e03      	subs	r3, r0, #0
 8004142:	d001      	beq.n	8004148 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e021      	b.n	800418c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2204      	movs	r2, #4
 8004150:	4013      	ands	r3, r2
 8004152:	2b04      	cmp	r3, #4
 8004154:	d10c      	bne.n	8004170 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	03d1      	lsls	r1, r2, #15
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <UART_CheckIdleState+0x8c>)
 8004160:	9200      	str	r2, [sp, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	f000 f818 	bl	8004198 <UART_WaitOnFlagUntilTimeout>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d001      	beq.n	8004170 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e00d      	b.n	800418c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2274      	movs	r2, #116	; 0x74
 8004186:	2100      	movs	r1, #0
 8004188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}
 8004194:	01ffffff 	.word	0x01ffffff

08004198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b094      	sub	sp, #80	; 0x50
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a8:	e0a3      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ac:	3301      	adds	r3, #1
 80041ae:	d100      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80041b0:	e09f      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fd fd4f 	bl	8001c54 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d13d      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c8:	f3ef 8310 	mrs	r3, PRIMASK
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
 80041d2:	2301      	movs	r3, #1
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	494c      	ldr	r1, [pc, #304]	; (800431c <UART_WaitOnFlagUntilTimeout+0x184>)
 80041ea:	400a      	ands	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	f383 8810 	msr	PRIMASK, r3
}
 80041f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	643b      	str	r3, [r7, #64]	; 0x40
 8004204:	2301      	movs	r3, #1
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2101      	movs	r1, #1
 800421c:	438a      	bics	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2274      	movs	r2, #116	; 0x74
 800423c:	2100      	movs	r1, #0
 800423e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e067      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2204      	movs	r2, #4
 800424c:	4013      	ands	r3, r2
 800424e:	d050      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	401a      	ands	r2, r3
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	429a      	cmp	r2, r3
 8004262:	d146      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426e:	f3ef 8310 	mrs	r3, PRIMASK
 8004272:	613b      	str	r3, [r7, #16]
  return(result);
 8004274:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004278:	2301      	movs	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f383 8810 	msr	PRIMASK, r3
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4923      	ldr	r1, [pc, #140]	; (800431c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004290:	400a      	ands	r2, r1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004296:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f383 8810 	msr	PRIMASK, r3
}
 800429e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a0:	f3ef 8310 	mrs	r3, PRIMASK
 80042a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80042a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042aa:	2301      	movs	r3, #1
 80042ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f383 8810 	msr	PRIMASK, r3
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	438a      	bics	r2, r1
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2280      	movs	r2, #128	; 0x80
 80042e2:	2120      	movs	r1, #32
 80042e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2274      	movs	r2, #116	; 0x74
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e010      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	425a      	negs	r2, r3
 8004302:	4153      	adcs	r3, r2
 8004304:	b2db      	uxtb	r3, r3
 8004306:	001a      	movs	r2, r3
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d100      	bne.n	8004312 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004310:	e74b      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b014      	add	sp, #80	; 0x50
 800431a:	bd80      	pop	{r7, pc}
 800431c:	fffffe5f 	.word	0xfffffe5f

08004320 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	; 0x30
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	1dbb      	adds	r3, r7, #6
 800432c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1dba      	adds	r2, r7, #6
 8004338:	2158      	movs	r1, #88	; 0x58
 800433a:	8812      	ldrh	r2, [r2, #0]
 800433c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1dba      	adds	r2, r7, #6
 8004342:	215a      	movs	r1, #90	; 0x5a
 8004344:	8812      	ldrh	r2, [r2, #0]
 8004346:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	015b      	lsls	r3, r3, #5
 8004356:	429a      	cmp	r2, r3
 8004358:	d10d      	bne.n	8004376 <UART_Start_Receive_IT+0x56>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <UART_Start_Receive_IT+0x4c>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	225c      	movs	r2, #92	; 0x5c
 8004366:	4943      	ldr	r1, [pc, #268]	; (8004474 <UART_Start_Receive_IT+0x154>)
 8004368:	5299      	strh	r1, [r3, r2]
 800436a:	e02e      	b.n	80043ca <UART_Start_Receive_IT+0xaa>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	225c      	movs	r2, #92	; 0x5c
 8004370:	21ff      	movs	r1, #255	; 0xff
 8004372:	5299      	strh	r1, [r3, r2]
 8004374:	e029      	b.n	80043ca <UART_Start_Receive_IT+0xaa>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10d      	bne.n	800439a <UART_Start_Receive_IT+0x7a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <UART_Start_Receive_IT+0x70>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	225c      	movs	r2, #92	; 0x5c
 800438a:	21ff      	movs	r1, #255	; 0xff
 800438c:	5299      	strh	r1, [r3, r2]
 800438e:	e01c      	b.n	80043ca <UART_Start_Receive_IT+0xaa>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	225c      	movs	r2, #92	; 0x5c
 8004394:	217f      	movs	r1, #127	; 0x7f
 8004396:	5299      	strh	r1, [r3, r2]
 8004398:	e017      	b.n	80043ca <UART_Start_Receive_IT+0xaa>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	055b      	lsls	r3, r3, #21
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d10d      	bne.n	80043c2 <UART_Start_Receive_IT+0xa2>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <UART_Start_Receive_IT+0x98>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	225c      	movs	r2, #92	; 0x5c
 80043b2:	217f      	movs	r1, #127	; 0x7f
 80043b4:	5299      	strh	r1, [r3, r2]
 80043b6:	e008      	b.n	80043ca <UART_Start_Receive_IT+0xaa>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	225c      	movs	r2, #92	; 0x5c
 80043bc:	213f      	movs	r1, #63	; 0x3f
 80043be:	5299      	strh	r1, [r3, r2]
 80043c0:	e003      	b.n	80043ca <UART_Start_Receive_IT+0xaa>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	225c      	movs	r2, #92	; 0x5c
 80043c6:	2100      	movs	r1, #0
 80043c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	2100      	movs	r1, #0
 80043d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2222      	movs	r2, #34	; 0x22
 80043d6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80043de:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	2301      	movs	r3, #1
 80043e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	430a      	orrs	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	015b      	lsls	r3, r3, #5
 8004412:	429a      	cmp	r2, r3
 8004414:	d107      	bne.n	8004426 <UART_Start_Receive_IT+0x106>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <UART_Start_Receive_IT+0x158>)
 8004422:	665a      	str	r2, [r3, #100]	; 0x64
 8004424:	e002      	b.n	800442c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <UART_Start_Receive_IT+0x15c>)
 800442a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2274      	movs	r2, #116	; 0x74
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004434:	f3ef 8310 	mrs	r3, PRIMASK
 8004438:	613b      	str	r3, [r7, #16]
  return(result);
 800443a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2190      	movs	r1, #144	; 0x90
 8004456:	0049      	lsls	r1, r1, #1
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f383 8810 	msr	PRIMASK, r3
}
 8004466:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b00c      	add	sp, #48	; 0x30
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	000001ff 	.word	0x000001ff
 8004478:	08004731 	.word	0x08004731
 800447c:	080045c9 	.word	0x080045c9

08004480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08e      	sub	sp, #56	; 0x38
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8310 	mrs	r3, PRIMASK
 800448c:	617b      	str	r3, [r7, #20]
  return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
 8004492:	2301      	movs	r3, #1
 8004494:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f383 8810 	msr	PRIMASK, r3
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4925      	ldr	r1, [pc, #148]	; (8004540 <UART_EndRxTransfer+0xc0>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f383 8810 	msr	PRIMASK, r3
}
 80044b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ba:	f3ef 8310 	mrs	r3, PRIMASK
 80044be:	623b      	str	r3, [r7, #32]
  return(result);
 80044c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
 80044c4:	2301      	movs	r3, #1
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f383 8810 	msr	PRIMASK, r3
}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	438a      	bics	r2, r1
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	f383 8810 	msr	PRIMASK, r3
}
 80044ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d118      	bne.n	8004526 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f4:	f3ef 8310 	mrs	r3, PRIMASK
 80044f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044fe:	2301      	movs	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2110      	movs	r1, #16
 8004516:	438a      	bics	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f383 8810 	msr	PRIMASK, r3
}
 8004524:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b00e      	add	sp, #56	; 0x38
 800453e:	bd80      	pop	{r7, pc}
 8004540:	fffffedf 	.word	0xfffffedf

08004544 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	225a      	movs	r2, #90	; 0x5a
 8004556:	2100      	movs	r1, #0
 8004558:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2252      	movs	r2, #82	; 0x52
 800455e:	2100      	movs	r1, #0
 8004560:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	0018      	movs	r0, r3
 8004566:	f7ff fbc7 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b004      	add	sp, #16
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457a:	f3ef 8310 	mrs	r3, PRIMASK
 800457e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004580:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	2301      	movs	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2140      	movs	r1, #64	; 0x40
 800459c:	438a      	bics	r2, r1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f7ff fb94 	bl	8003ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b006      	add	sp, #24
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b090      	sub	sp, #64	; 0x40
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045d0:	203e      	movs	r0, #62	; 0x3e
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	215c      	movs	r1, #92	; 0x5c
 80045d8:	5a52      	ldrh	r2, [r2, r1]
 80045da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e0:	2b22      	cmp	r3, #34	; 0x22
 80045e2:	d000      	beq.n	80045e6 <UART_RxISR_8BIT+0x1e>
 80045e4:	e095      	b.n	8004712 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	213c      	movs	r1, #60	; 0x3c
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80045f0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045f2:	187b      	adds	r3, r7, r1
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	183b      	adds	r3, r7, r0
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b2d9      	uxtb	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	400a      	ands	r2, r1
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	225a      	movs	r2, #90	; 0x5a
 8004616:	5a9b      	ldrh	r3, [r3, r2]
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b299      	uxth	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	225a      	movs	r2, #90	; 0x5a
 8004622:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	225a      	movs	r2, #90	; 0x5a
 8004628:	5a9b      	ldrh	r3, [r3, r2]
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d178      	bne.n	8004722 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004630:	f3ef 8310 	mrs	r3, PRIMASK
 8004634:	61bb      	str	r3, [r7, #24]
  return(result);
 8004636:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004638:	63bb      	str	r3, [r7, #56]	; 0x38
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4936      	ldr	r1, [pc, #216]	; (800472c <UART_RxISR_8BIT+0x164>)
 8004652:	400a      	ands	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f383 8810 	msr	PRIMASK, r3
}
 8004660:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004662:	f3ef 8310 	mrs	r3, PRIMASK
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
 800466c:	2301      	movs	r3, #1
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	f383 8810 	msr	PRIMASK, r3
}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2101      	movs	r1, #1
 8004684:	438a      	bics	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468e:	f383 8810 	msr	PRIMASK, r3
}
 8004692:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d12f      	bne.n	8004708 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ae:	f3ef 8310 	mrs	r3, PRIMASK
 80046b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80046b4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
 80046b8:	2301      	movs	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f383 8810 	msr	PRIMASK, r3
}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2110      	movs	r1, #16
 80046d0:	438a      	bics	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f383 8810 	msr	PRIMASK, r3
}
 80046de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	2210      	movs	r2, #16
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d103      	bne.n	80046f6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2210      	movs	r2, #16
 80046f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2258      	movs	r2, #88	; 0x58
 80046fa:	5a9a      	ldrh	r2, [r3, r2]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff fb01 	bl	8003d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004706:	e00c      	b.n	8004722 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	0018      	movs	r0, r3
 800470c:	f7fb fdc0 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8004710:	e007      	b.n	8004722 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2108      	movs	r1, #8
 800471e:	430a      	orrs	r2, r1
 8004720:	619a      	str	r2, [r3, #24]
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b010      	add	sp, #64	; 0x40
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	fffffedf 	.word	0xfffffedf

08004730 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b090      	sub	sp, #64	; 0x40
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004738:	203e      	movs	r0, #62	; 0x3e
 800473a:	183b      	adds	r3, r7, r0
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	215c      	movs	r1, #92	; 0x5c
 8004740:	5a52      	ldrh	r2, [r2, r1]
 8004742:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004748:	2b22      	cmp	r3, #34	; 0x22
 800474a:	d000      	beq.n	800474e <UART_RxISR_16BIT+0x1e>
 800474c:	e095      	b.n	800487a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	213c      	movs	r1, #60	; 0x3c
 8004754:	187b      	adds	r3, r7, r1
 8004756:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004758:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004760:	187b      	adds	r3, r7, r1
 8004762:	183a      	adds	r2, r7, r0
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	8812      	ldrh	r2, [r2, #0]
 8004768:	4013      	ands	r3, r2
 800476a:	b29a      	uxth	r2, r3
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	225a      	movs	r2, #90	; 0x5a
 800477e:	5a9b      	ldrh	r3, [r3, r2]
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b299      	uxth	r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	225a      	movs	r2, #90	; 0x5a
 800478a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	225a      	movs	r2, #90	; 0x5a
 8004790:	5a9b      	ldrh	r3, [r3, r2]
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d178      	bne.n	800488a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004798:	f3ef 8310 	mrs	r3, PRIMASK
 800479c:	617b      	str	r3, [r7, #20]
  return(result);
 800479e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
 80047a2:	2301      	movs	r3, #1
 80047a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f383 8810 	msr	PRIMASK, r3
}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4936      	ldr	r1, [pc, #216]	; (8004894 <UART_RxISR_16BIT+0x164>)
 80047ba:	400a      	ands	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f383 8810 	msr	PRIMASK, r3
}
 80047c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ca:	f3ef 8310 	mrs	r3, PRIMASK
 80047ce:	623b      	str	r3, [r7, #32]
  return(result);
 80047d0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
 80047d4:	2301      	movs	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	f383 8810 	msr	PRIMASK, r3
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2101      	movs	r1, #1
 80047ec:	438a      	bics	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	f383 8810 	msr	PRIMASK, r3
}
 80047fa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	2b01      	cmp	r3, #1
 800480e:	d12f      	bne.n	8004870 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004816:	f3ef 8310 	mrs	r3, PRIMASK
 800481a:	60bb      	str	r3, [r7, #8]
  return(result);
 800481c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004820:	2301      	movs	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f383 8810 	msr	PRIMASK, r3
}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2110      	movs	r1, #16
 8004838:	438a      	bics	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2210      	movs	r2, #16
 8004850:	4013      	ands	r3, r2
 8004852:	2b10      	cmp	r3, #16
 8004854:	d103      	bne.n	800485e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2210      	movs	r2, #16
 800485c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2258      	movs	r2, #88	; 0x58
 8004862:	5a9a      	ldrh	r2, [r3, r2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0011      	movs	r1, r2
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fa4d 	bl	8003d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800486e:	e00c      	b.n	800488a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0018      	movs	r0, r3
 8004874:	f7fb fd0c 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8004878:	e007      	b.n	800488a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2108      	movs	r1, #8
 8004886:	430a      	orrs	r2, r1
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b010      	add	sp, #64	; 0x40
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	fffffedf 	.word	0xfffffedf

08004898 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <__errno>:
 80048a8:	4b01      	ldr	r3, [pc, #4]	; (80048b0 <__errno+0x8>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	4770      	bx	lr
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	2000000c 	.word	0x2000000c

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	2600      	movs	r6, #0
 80048b8:	4d0c      	ldr	r5, [pc, #48]	; (80048ec <__libc_init_array+0x38>)
 80048ba:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <__libc_init_array+0x3c>)
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	2600      	movs	r6, #0
 80048c6:	f001 f8d7 	bl	8005a78 <_init>
 80048ca:	4d0a      	ldr	r5, [pc, #40]	; (80048f4 <__libc_init_array+0x40>)
 80048cc:	4c0a      	ldr	r4, [pc, #40]	; (80048f8 <__libc_init_array+0x44>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	00b3      	lsls	r3, r6, #2
 80048da:	58eb      	ldr	r3, [r5, r3]
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	00b3      	lsls	r3, r6, #2
 80048e4:	58eb      	ldr	r3, [r5, r3]
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	08005c5c 	.word	0x08005c5c
 80048f0:	08005c5c 	.word	0x08005c5c
 80048f4:	08005c5c 	.word	0x08005c5c
 80048f8:	08005c60 	.word	0x08005c60

080048fc <memset>:
 80048fc:	0003      	movs	r3, r0
 80048fe:	1882      	adds	r2, r0, r2
 8004900:	4293      	cmp	r3, r2
 8004902:	d100      	bne.n	8004906 <memset+0xa>
 8004904:	4770      	bx	lr
 8004906:	7019      	strb	r1, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	e7f9      	b.n	8004900 <memset+0x4>

0800490c <srand>:
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <srand+0x48>)
 800490e:	b570      	push	{r4, r5, r6, lr}
 8004910:	681d      	ldr	r5, [r3, #0]
 8004912:	0004      	movs	r4, r0
 8004914:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004916:	2b00      	cmp	r3, #0
 8004918:	d116      	bne.n	8004948 <srand+0x3c>
 800491a:	2018      	movs	r0, #24
 800491c:	f000 f892 	bl	8004a44 <malloc>
 8004920:	1e02      	subs	r2, r0, #0
 8004922:	63a8      	str	r0, [r5, #56]	; 0x38
 8004924:	d104      	bne.n	8004930 <srand+0x24>
 8004926:	2142      	movs	r1, #66	; 0x42
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <srand+0x4c>)
 800492a:	480c      	ldr	r0, [pc, #48]	; (800495c <srand+0x50>)
 800492c:	f000 f85c 	bl	80049e8 <__assert_func>
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <srand+0x54>)
 8004932:	2100      	movs	r1, #0
 8004934:	6003      	str	r3, [r0, #0]
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <srand+0x58>)
 8004938:	6043      	str	r3, [r0, #4]
 800493a:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <srand+0x5c>)
 800493c:	6083      	str	r3, [r0, #8]
 800493e:	230b      	movs	r3, #11
 8004940:	8183      	strh	r3, [r0, #12]
 8004942:	2001      	movs	r0, #1
 8004944:	6110      	str	r0, [r2, #16]
 8004946:	6151      	str	r1, [r2, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800494c:	611c      	str	r4, [r3, #16]
 800494e:	615a      	str	r2, [r3, #20]
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	2000000c 	.word	0x2000000c
 8004958:	08005b18 	.word	0x08005b18
 800495c:	08005b2f 	.word	0x08005b2f
 8004960:	abcd330e 	.word	0xabcd330e
 8004964:	e66d1234 	.word	0xe66d1234
 8004968:	0005deec 	.word	0x0005deec

0800496c <rand>:
 800496c:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <rand+0x5c>)
 800496e:	b510      	push	{r4, lr}
 8004970:	681c      	ldr	r4, [r3, #0]
 8004972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d116      	bne.n	80049a6 <rand+0x3a>
 8004978:	2018      	movs	r0, #24
 800497a:	f000 f863 	bl	8004a44 <malloc>
 800497e:	1e02      	subs	r2, r0, #0
 8004980:	63a0      	str	r0, [r4, #56]	; 0x38
 8004982:	d104      	bne.n	800498e <rand+0x22>
 8004984:	214e      	movs	r1, #78	; 0x4e
 8004986:	4b11      	ldr	r3, [pc, #68]	; (80049cc <rand+0x60>)
 8004988:	4811      	ldr	r0, [pc, #68]	; (80049d0 <rand+0x64>)
 800498a:	f000 f82d 	bl	80049e8 <__assert_func>
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <rand+0x68>)
 8004990:	2100      	movs	r1, #0
 8004992:	6003      	str	r3, [r0, #0]
 8004994:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <rand+0x6c>)
 8004996:	6043      	str	r3, [r0, #4]
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <rand+0x70>)
 800499a:	6083      	str	r3, [r0, #8]
 800499c:	230b      	movs	r3, #11
 800499e:	8183      	strh	r3, [r0, #12]
 80049a0:	2001      	movs	r0, #1
 80049a2:	6110      	str	r0, [r2, #16]
 80049a4:	6151      	str	r1, [r2, #20]
 80049a6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80049a8:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <rand+0x74>)
 80049aa:	6920      	ldr	r0, [r4, #16]
 80049ac:	6961      	ldr	r1, [r4, #20]
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <rand+0x78>)
 80049b0:	f7fb fc40 	bl	8000234 <__aeabi_lmul>
 80049b4:	2201      	movs	r2, #1
 80049b6:	2300      	movs	r3, #0
 80049b8:	1880      	adds	r0, r0, r2
 80049ba:	4159      	adcs	r1, r3
 80049bc:	6120      	str	r0, [r4, #16]
 80049be:	6161      	str	r1, [r4, #20]
 80049c0:	0048      	lsls	r0, r1, #1
 80049c2:	0840      	lsrs	r0, r0, #1
 80049c4:	bd10      	pop	{r4, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	2000000c 	.word	0x2000000c
 80049cc:	08005b18 	.word	0x08005b18
 80049d0:	08005b2f 	.word	0x08005b2f
 80049d4:	abcd330e 	.word	0xabcd330e
 80049d8:	e66d1234 	.word	0xe66d1234
 80049dc:	0005deec 	.word	0x0005deec
 80049e0:	4c957f2d 	.word	0x4c957f2d
 80049e4:	5851f42d 	.word	0x5851f42d

080049e8 <__assert_func>:
 80049e8:	b530      	push	{r4, r5, lr}
 80049ea:	0014      	movs	r4, r2
 80049ec:	001a      	movs	r2, r3
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <__assert_func+0x2c>)
 80049f0:	0005      	movs	r5, r0
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b085      	sub	sp, #20
 80049f6:	68d8      	ldr	r0, [r3, #12]
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <__assert_func+0x30>)
 80049fa:	2c00      	cmp	r4, #0
 80049fc:	d101      	bne.n	8004a02 <__assert_func+0x1a>
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <__assert_func+0x34>)
 8004a00:	001c      	movs	r4, r3
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	9100      	str	r1, [sp, #0]
 8004a06:	002b      	movs	r3, r5
 8004a08:	4905      	ldr	r1, [pc, #20]	; (8004a20 <__assert_func+0x38>)
 8004a0a:	9402      	str	r4, [sp, #8]
 8004a0c:	f000 f80a 	bl	8004a24 <fiprintf>
 8004a10:	f000 fcc8 	bl	80053a4 <abort>
 8004a14:	2000000c 	.word	0x2000000c
 8004a18:	08005b8a 	.word	0x08005b8a
 8004a1c:	08005bc5 	.word	0x08005bc5
 8004a20:	08005b97 	.word	0x08005b97

08004a24 <fiprintf>:
 8004a24:	b40e      	push	{r1, r2, r3}
 8004a26:	b503      	push	{r0, r1, lr}
 8004a28:	0001      	movs	r1, r0
 8004a2a:	ab03      	add	r3, sp, #12
 8004a2c:	4804      	ldr	r0, [pc, #16]	; (8004a40 <fiprintf+0x1c>)
 8004a2e:	cb04      	ldmia	r3!, {r2}
 8004a30:	6800      	ldr	r0, [r0, #0]
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	f000 f91a 	bl	8004c6c <_vfiprintf_r>
 8004a38:	b002      	add	sp, #8
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	b003      	add	sp, #12
 8004a3e:	4718      	bx	r3
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <malloc>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <malloc+0x10>)
 8004a48:	0001      	movs	r1, r0
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	f000 f870 	bl	8004b30 <_malloc_r>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <_free_r>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	0005      	movs	r5, r0
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	d010      	beq.n	8004a82 <_free_r+0x2a>
 8004a60:	1f0c      	subs	r4, r1, #4
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	da00      	bge.n	8004a6a <_free_r+0x12>
 8004a68:	18e4      	adds	r4, r4, r3
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	f000 feec 	bl	8005848 <__malloc_lock>
 8004a70:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <_free_r+0x90>)
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <_free_r+0x2c>
 8004a78:	6063      	str	r3, [r4, #4]
 8004a7a:	6014      	str	r4, [r2, #0]
 8004a7c:	0028      	movs	r0, r5
 8004a7e:	f000 feeb 	bl	8005858 <__malloc_unlock>
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d908      	bls.n	8004a9a <_free_r+0x42>
 8004a88:	6821      	ldr	r1, [r4, #0]
 8004a8a:	1860      	adds	r0, r4, r1
 8004a8c:	4283      	cmp	r3, r0
 8004a8e:	d1f3      	bne.n	8004a78 <_free_r+0x20>
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	1841      	adds	r1, r0, r1
 8004a96:	6021      	str	r1, [r4, #0]
 8004a98:	e7ee      	b.n	8004a78 <_free_r+0x20>
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <_free_r+0x4e>
 8004aa2:	42a3      	cmp	r3, r4
 8004aa4:	d9f9      	bls.n	8004a9a <_free_r+0x42>
 8004aa6:	6811      	ldr	r1, [r2, #0]
 8004aa8:	1850      	adds	r0, r2, r1
 8004aaa:	42a0      	cmp	r0, r4
 8004aac:	d10b      	bne.n	8004ac6 <_free_r+0x6e>
 8004aae:	6820      	ldr	r0, [r4, #0]
 8004ab0:	1809      	adds	r1, r1, r0
 8004ab2:	1850      	adds	r0, r2, r1
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	4283      	cmp	r3, r0
 8004ab8:	d1e0      	bne.n	8004a7c <_free_r+0x24>
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	1841      	adds	r1, r0, r1
 8004ac0:	6011      	str	r1, [r2, #0]
 8004ac2:	6053      	str	r3, [r2, #4]
 8004ac4:	e7da      	b.n	8004a7c <_free_r+0x24>
 8004ac6:	42a0      	cmp	r0, r4
 8004ac8:	d902      	bls.n	8004ad0 <_free_r+0x78>
 8004aca:	230c      	movs	r3, #12
 8004acc:	602b      	str	r3, [r5, #0]
 8004ace:	e7d5      	b.n	8004a7c <_free_r+0x24>
 8004ad0:	6821      	ldr	r1, [r4, #0]
 8004ad2:	1860      	adds	r0, r4, r1
 8004ad4:	4283      	cmp	r3, r0
 8004ad6:	d103      	bne.n	8004ae0 <_free_r+0x88>
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	1841      	adds	r1, r0, r1
 8004ade:	6021      	str	r1, [r4, #0]
 8004ae0:	6063      	str	r3, [r4, #4]
 8004ae2:	6054      	str	r4, [r2, #4]
 8004ae4:	e7ca      	b.n	8004a7c <_free_r+0x24>
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	2000019c 	.word	0x2000019c

08004aec <sbrk_aligned>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	4e0f      	ldr	r6, [pc, #60]	; (8004b2c <sbrk_aligned+0x40>)
 8004af0:	000d      	movs	r5, r1
 8004af2:	6831      	ldr	r1, [r6, #0]
 8004af4:	0004      	movs	r4, r0
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d102      	bne.n	8004b00 <sbrk_aligned+0x14>
 8004afa:	f000 fb73 	bl	80051e4 <_sbrk_r>
 8004afe:	6030      	str	r0, [r6, #0]
 8004b00:	0029      	movs	r1, r5
 8004b02:	0020      	movs	r0, r4
 8004b04:	f000 fb6e 	bl	80051e4 <_sbrk_r>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d00a      	beq.n	8004b22 <sbrk_aligned+0x36>
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	1cc5      	adds	r5, r0, #3
 8004b10:	439d      	bics	r5, r3
 8004b12:	42a8      	cmp	r0, r5
 8004b14:	d007      	beq.n	8004b26 <sbrk_aligned+0x3a>
 8004b16:	1a29      	subs	r1, r5, r0
 8004b18:	0020      	movs	r0, r4
 8004b1a:	f000 fb63 	bl	80051e4 <_sbrk_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	d101      	bne.n	8004b26 <sbrk_aligned+0x3a>
 8004b22:	2501      	movs	r5, #1
 8004b24:	426d      	negs	r5, r5
 8004b26:	0028      	movs	r0, r5
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	200001a0 	.word	0x200001a0

08004b30 <_malloc_r>:
 8004b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b32:	2203      	movs	r2, #3
 8004b34:	1ccb      	adds	r3, r1, #3
 8004b36:	4393      	bics	r3, r2
 8004b38:	3308      	adds	r3, #8
 8004b3a:	0006      	movs	r6, r0
 8004b3c:	001f      	movs	r7, r3
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d232      	bcs.n	8004ba8 <_malloc_r+0x78>
 8004b42:	270c      	movs	r7, #12
 8004b44:	42b9      	cmp	r1, r7
 8004b46:	d831      	bhi.n	8004bac <_malloc_r+0x7c>
 8004b48:	0030      	movs	r0, r6
 8004b4a:	f000 fe7d 	bl	8005848 <__malloc_lock>
 8004b4e:	4d32      	ldr	r5, [pc, #200]	; (8004c18 <_malloc_r+0xe8>)
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	001c      	movs	r4, r3
 8004b54:	2c00      	cmp	r4, #0
 8004b56:	d12e      	bne.n	8004bb6 <_malloc_r+0x86>
 8004b58:	0039      	movs	r1, r7
 8004b5a:	0030      	movs	r0, r6
 8004b5c:	f7ff ffc6 	bl	8004aec <sbrk_aligned>
 8004b60:	0004      	movs	r4, r0
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d11e      	bne.n	8004ba4 <_malloc_r+0x74>
 8004b66:	682c      	ldr	r4, [r5, #0]
 8004b68:	0025      	movs	r5, r4
 8004b6a:	2d00      	cmp	r5, #0
 8004b6c:	d14a      	bne.n	8004c04 <_malloc_r+0xd4>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	0029      	movs	r1, r5
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	0030      	movs	r0, r6
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	f000 fb34 	bl	80051e4 <_sbrk_r>
 8004b7c:	9b01      	ldr	r3, [sp, #4]
 8004b7e:	4283      	cmp	r3, r0
 8004b80:	d143      	bne.n	8004c0a <_malloc_r+0xda>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	3703      	adds	r7, #3
 8004b86:	1aff      	subs	r7, r7, r3
 8004b88:	2303      	movs	r3, #3
 8004b8a:	439f      	bics	r7, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	2f0c      	cmp	r7, #12
 8004b90:	d200      	bcs.n	8004b94 <_malloc_r+0x64>
 8004b92:	270c      	movs	r7, #12
 8004b94:	0039      	movs	r1, r7
 8004b96:	0030      	movs	r0, r6
 8004b98:	f7ff ffa8 	bl	8004aec <sbrk_aligned>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d034      	beq.n	8004c0a <_malloc_r+0xda>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	19df      	adds	r7, r3, r7
 8004ba4:	6027      	str	r7, [r4, #0]
 8004ba6:	e013      	b.n	8004bd0 <_malloc_r+0xa0>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	dacb      	bge.n	8004b44 <_malloc_r+0x14>
 8004bac:	230c      	movs	r3, #12
 8004bae:	2500      	movs	r5, #0
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	0028      	movs	r0, r5
 8004bb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	1bd1      	subs	r1, r2, r7
 8004bba:	d420      	bmi.n	8004bfe <_malloc_r+0xce>
 8004bbc:	290b      	cmp	r1, #11
 8004bbe:	d917      	bls.n	8004bf0 <_malloc_r+0xc0>
 8004bc0:	19e2      	adds	r2, r4, r7
 8004bc2:	6027      	str	r7, [r4, #0]
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d111      	bne.n	8004bec <_malloc_r+0xbc>
 8004bc8:	602a      	str	r2, [r5, #0]
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	6053      	str	r3, [r2, #4]
 8004bd0:	0030      	movs	r0, r6
 8004bd2:	0025      	movs	r5, r4
 8004bd4:	f000 fe40 	bl	8005858 <__malloc_unlock>
 8004bd8:	2207      	movs	r2, #7
 8004bda:	350b      	adds	r5, #11
 8004bdc:	1d23      	adds	r3, r4, #4
 8004bde:	4395      	bics	r5, r2
 8004be0:	1aea      	subs	r2, r5, r3
 8004be2:	429d      	cmp	r5, r3
 8004be4:	d0e5      	beq.n	8004bb2 <_malloc_r+0x82>
 8004be6:	1b5b      	subs	r3, r3, r5
 8004be8:	50a3      	str	r3, [r4, r2]
 8004bea:	e7e2      	b.n	8004bb2 <_malloc_r+0x82>
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	e7ec      	b.n	8004bca <_malloc_r+0x9a>
 8004bf0:	6862      	ldr	r2, [r4, #4]
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	d101      	bne.n	8004bfa <_malloc_r+0xca>
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	e7ea      	b.n	8004bd0 <_malloc_r+0xa0>
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	e7e8      	b.n	8004bd0 <_malloc_r+0xa0>
 8004bfe:	0023      	movs	r3, r4
 8004c00:	6864      	ldr	r4, [r4, #4]
 8004c02:	e7a7      	b.n	8004b54 <_malloc_r+0x24>
 8004c04:	002c      	movs	r4, r5
 8004c06:	686d      	ldr	r5, [r5, #4]
 8004c08:	e7af      	b.n	8004b6a <_malloc_r+0x3a>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	0030      	movs	r0, r6
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	f000 fe22 	bl	8005858 <__malloc_unlock>
 8004c14:	e7cd      	b.n	8004bb2 <_malloc_r+0x82>
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	2000019c 	.word	0x2000019c

08004c1c <__sfputc_r>:
 8004c1c:	6893      	ldr	r3, [r2, #8]
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	3b01      	subs	r3, #1
 8004c22:	6093      	str	r3, [r2, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	da04      	bge.n	8004c32 <__sfputc_r+0x16>
 8004c28:	6994      	ldr	r4, [r2, #24]
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	db07      	blt.n	8004c3e <__sfputc_r+0x22>
 8004c2e:	290a      	cmp	r1, #10
 8004c30:	d005      	beq.n	8004c3e <__sfputc_r+0x22>
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	1c58      	adds	r0, r3, #1
 8004c36:	6010      	str	r0, [r2, #0]
 8004c38:	7019      	strb	r1, [r3, #0]
 8004c3a:	0008      	movs	r0, r1
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	f000 fae3 	bl	8005208 <__swbuf_r>
 8004c42:	0001      	movs	r1, r0
 8004c44:	e7f9      	b.n	8004c3a <__sfputc_r+0x1e>

08004c46 <__sfputs_r>:
 8004c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c48:	0006      	movs	r6, r0
 8004c4a:	000f      	movs	r7, r1
 8004c4c:	0014      	movs	r4, r2
 8004c4e:	18d5      	adds	r5, r2, r3
 8004c50:	42ac      	cmp	r4, r5
 8004c52:	d101      	bne.n	8004c58 <__sfputs_r+0x12>
 8004c54:	2000      	movs	r0, #0
 8004c56:	e007      	b.n	8004c68 <__sfputs_r+0x22>
 8004c58:	7821      	ldrb	r1, [r4, #0]
 8004c5a:	003a      	movs	r2, r7
 8004c5c:	0030      	movs	r0, r6
 8004c5e:	f7ff ffdd 	bl	8004c1c <__sfputc_r>
 8004c62:	3401      	adds	r4, #1
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d1f3      	bne.n	8004c50 <__sfputs_r+0xa>
 8004c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c6c <_vfiprintf_r>:
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	b0a1      	sub	sp, #132	; 0x84
 8004c70:	0006      	movs	r6, r0
 8004c72:	000c      	movs	r4, r1
 8004c74:	001f      	movs	r7, r3
 8004c76:	9203      	str	r2, [sp, #12]
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d004      	beq.n	8004c86 <_vfiprintf_r+0x1a>
 8004c7c:	6983      	ldr	r3, [r0, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <_vfiprintf_r+0x1a>
 8004c82:	f000 fcc5 	bl	8005610 <__sinit>
 8004c86:	4b8e      	ldr	r3, [pc, #568]	; (8004ec0 <_vfiprintf_r+0x254>)
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	d11c      	bne.n	8004cc6 <_vfiprintf_r+0x5a>
 8004c8c:	6874      	ldr	r4, [r6, #4]
 8004c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c90:	07db      	lsls	r3, r3, #31
 8004c92:	d405      	bmi.n	8004ca0 <_vfiprintf_r+0x34>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	059b      	lsls	r3, r3, #22
 8004c98:	d402      	bmi.n	8004ca0 <_vfiprintf_r+0x34>
 8004c9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c9c:	f000 fd59 	bl	8005752 <__retarget_lock_acquire_recursive>
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	071b      	lsls	r3, r3, #28
 8004ca4:	d502      	bpl.n	8004cac <_vfiprintf_r+0x40>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11d      	bne.n	8004ce8 <_vfiprintf_r+0x7c>
 8004cac:	0021      	movs	r1, r4
 8004cae:	0030      	movs	r0, r6
 8004cb0:	f000 fb00 	bl	80052b4 <__swsetup_r>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d017      	beq.n	8004ce8 <_vfiprintf_r+0x7c>
 8004cb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cba:	07db      	lsls	r3, r3, #31
 8004cbc:	d50d      	bpl.n	8004cda <_vfiprintf_r+0x6e>
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	4240      	negs	r0, r0
 8004cc2:	b021      	add	sp, #132	; 0x84
 8004cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc6:	4b7f      	ldr	r3, [pc, #508]	; (8004ec4 <_vfiprintf_r+0x258>)
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	d101      	bne.n	8004cd0 <_vfiprintf_r+0x64>
 8004ccc:	68b4      	ldr	r4, [r6, #8]
 8004cce:	e7de      	b.n	8004c8e <_vfiprintf_r+0x22>
 8004cd0:	4b7d      	ldr	r3, [pc, #500]	; (8004ec8 <_vfiprintf_r+0x25c>)
 8004cd2:	429c      	cmp	r4, r3
 8004cd4:	d1db      	bne.n	8004c8e <_vfiprintf_r+0x22>
 8004cd6:	68f4      	ldr	r4, [r6, #12]
 8004cd8:	e7d9      	b.n	8004c8e <_vfiprintf_r+0x22>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	d4ee      	bmi.n	8004cbe <_vfiprintf_r+0x52>
 8004ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ce2:	f000 fd37 	bl	8005754 <__retarget_lock_release_recursive>
 8004ce6:	e7ea      	b.n	8004cbe <_vfiprintf_r+0x52>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	ad08      	add	r5, sp, #32
 8004cec:	616b      	str	r3, [r5, #20]
 8004cee:	3320      	adds	r3, #32
 8004cf0:	766b      	strb	r3, [r5, #25]
 8004cf2:	3310      	adds	r3, #16
 8004cf4:	76ab      	strb	r3, [r5, #26]
 8004cf6:	9707      	str	r7, [sp, #28]
 8004cf8:	9f03      	ldr	r7, [sp, #12]
 8004cfa:	783b      	ldrb	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <_vfiprintf_r+0x98>
 8004d00:	2b25      	cmp	r3, #37	; 0x25
 8004d02:	d14e      	bne.n	8004da2 <_vfiprintf_r+0x136>
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	1afb      	subs	r3, r7, r3
 8004d08:	9305      	str	r3, [sp, #20]
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	429f      	cmp	r7, r3
 8004d0e:	d00d      	beq.n	8004d2c <_vfiprintf_r+0xc0>
 8004d10:	9b05      	ldr	r3, [sp, #20]
 8004d12:	0021      	movs	r1, r4
 8004d14:	0030      	movs	r0, r6
 8004d16:	9a03      	ldr	r2, [sp, #12]
 8004d18:	f7ff ff95 	bl	8004c46 <__sfputs_r>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d100      	bne.n	8004d22 <_vfiprintf_r+0xb6>
 8004d20:	e0b5      	b.n	8004e8e <_vfiprintf_r+0x222>
 8004d22:	696a      	ldr	r2, [r5, #20]
 8004d24:	9b05      	ldr	r3, [sp, #20]
 8004d26:	4694      	mov	ip, r2
 8004d28:	4463      	add	r3, ip
 8004d2a:	616b      	str	r3, [r5, #20]
 8004d2c:	783b      	ldrb	r3, [r7, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d100      	bne.n	8004d34 <_vfiprintf_r+0xc8>
 8004d32:	e0ac      	b.n	8004e8e <_vfiprintf_r+0x222>
 8004d34:	2201      	movs	r2, #1
 8004d36:	1c7b      	adds	r3, r7, #1
 8004d38:	9303      	str	r3, [sp, #12]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4252      	negs	r2, r2
 8004d3e:	606a      	str	r2, [r5, #4]
 8004d40:	a904      	add	r1, sp, #16
 8004d42:	3254      	adds	r2, #84	; 0x54
 8004d44:	1852      	adds	r2, r2, r1
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	60eb      	str	r3, [r5, #12]
 8004d4a:	60ab      	str	r3, [r5, #8]
 8004d4c:	7013      	strb	r3, [r2, #0]
 8004d4e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	2205      	movs	r2, #5
 8004d54:	7819      	ldrb	r1, [r3, #0]
 8004d56:	485d      	ldr	r0, [pc, #372]	; (8004ecc <_vfiprintf_r+0x260>)
 8004d58:	f000 fd6a 	bl	8005830 <memchr>
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	1c5f      	adds	r7, r3, #1
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d120      	bne.n	8004da6 <_vfiprintf_r+0x13a>
 8004d64:	682a      	ldr	r2, [r5, #0]
 8004d66:	06d3      	lsls	r3, r2, #27
 8004d68:	d504      	bpl.n	8004d74 <_vfiprintf_r+0x108>
 8004d6a:	2353      	movs	r3, #83	; 0x53
 8004d6c:	a904      	add	r1, sp, #16
 8004d6e:	185b      	adds	r3, r3, r1
 8004d70:	2120      	movs	r1, #32
 8004d72:	7019      	strb	r1, [r3, #0]
 8004d74:	0713      	lsls	r3, r2, #28
 8004d76:	d504      	bpl.n	8004d82 <_vfiprintf_r+0x116>
 8004d78:	2353      	movs	r3, #83	; 0x53
 8004d7a:	a904      	add	r1, sp, #16
 8004d7c:	185b      	adds	r3, r3, r1
 8004d7e:	212b      	movs	r1, #43	; 0x2b
 8004d80:	7019      	strb	r1, [r3, #0]
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b2a      	cmp	r3, #42	; 0x2a
 8004d88:	d016      	beq.n	8004db8 <_vfiprintf_r+0x14c>
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	68eb      	ldr	r3, [r5, #12]
 8004d8e:	9f03      	ldr	r7, [sp, #12]
 8004d90:	783a      	ldrb	r2, [r7, #0]
 8004d92:	1c78      	adds	r0, r7, #1
 8004d94:	3a30      	subs	r2, #48	; 0x30
 8004d96:	4684      	mov	ip, r0
 8004d98:	2a09      	cmp	r2, #9
 8004d9a:	d94f      	bls.n	8004e3c <_vfiprintf_r+0x1d0>
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d111      	bne.n	8004dc4 <_vfiprintf_r+0x158>
 8004da0:	e017      	b.n	8004dd2 <_vfiprintf_r+0x166>
 8004da2:	3701      	adds	r7, #1
 8004da4:	e7a9      	b.n	8004cfa <_vfiprintf_r+0x8e>
 8004da6:	4b49      	ldr	r3, [pc, #292]	; (8004ecc <_vfiprintf_r+0x260>)
 8004da8:	682a      	ldr	r2, [r5, #0]
 8004daa:	1ac0      	subs	r0, r0, r3
 8004dac:	2301      	movs	r3, #1
 8004dae:	4083      	lsls	r3, r0
 8004db0:	4313      	orrs	r3, r2
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	9703      	str	r7, [sp, #12]
 8004db6:	e7cb      	b.n	8004d50 <_vfiprintf_r+0xe4>
 8004db8:	9b07      	ldr	r3, [sp, #28]
 8004dba:	1d19      	adds	r1, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9107      	str	r1, [sp, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db01      	blt.n	8004dc8 <_vfiprintf_r+0x15c>
 8004dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dc6:	e004      	b.n	8004dd2 <_vfiprintf_r+0x166>
 8004dc8:	425b      	negs	r3, r3
 8004dca:	60eb      	str	r3, [r5, #12]
 8004dcc:	2302      	movs	r3, #2
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	783b      	ldrb	r3, [r7, #0]
 8004dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd6:	d10a      	bne.n	8004dee <_vfiprintf_r+0x182>
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	2b2a      	cmp	r3, #42	; 0x2a
 8004ddc:	d137      	bne.n	8004e4e <_vfiprintf_r+0x1e2>
 8004dde:	9b07      	ldr	r3, [sp, #28]
 8004de0:	3702      	adds	r7, #2
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	9207      	str	r2, [sp, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db2d      	blt.n	8004e48 <_vfiprintf_r+0x1dc>
 8004dec:	9309      	str	r3, [sp, #36]	; 0x24
 8004dee:	2203      	movs	r2, #3
 8004df0:	7839      	ldrb	r1, [r7, #0]
 8004df2:	4837      	ldr	r0, [pc, #220]	; (8004ed0 <_vfiprintf_r+0x264>)
 8004df4:	f000 fd1c 	bl	8005830 <memchr>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d007      	beq.n	8004e0c <_vfiprintf_r+0x1a0>
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <_vfiprintf_r+0x264>)
 8004dfe:	682a      	ldr	r2, [r5, #0]
 8004e00:	1ac0      	subs	r0, r0, r3
 8004e02:	2340      	movs	r3, #64	; 0x40
 8004e04:	4083      	lsls	r3, r0
 8004e06:	4313      	orrs	r3, r2
 8004e08:	3701      	adds	r7, #1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	7839      	ldrb	r1, [r7, #0]
 8004e0e:	1c7b      	adds	r3, r7, #1
 8004e10:	2206      	movs	r2, #6
 8004e12:	4830      	ldr	r0, [pc, #192]	; (8004ed4 <_vfiprintf_r+0x268>)
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	7629      	strb	r1, [r5, #24]
 8004e18:	f000 fd0a 	bl	8005830 <memchr>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d045      	beq.n	8004eac <_vfiprintf_r+0x240>
 8004e20:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <_vfiprintf_r+0x26c>)
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d127      	bne.n	8004e76 <_vfiprintf_r+0x20a>
 8004e26:	2207      	movs	r2, #7
 8004e28:	9b07      	ldr	r3, [sp, #28]
 8004e2a:	3307      	adds	r3, #7
 8004e2c:	4393      	bics	r3, r2
 8004e2e:	3308      	adds	r3, #8
 8004e30:	9307      	str	r3, [sp, #28]
 8004e32:	696b      	ldr	r3, [r5, #20]
 8004e34:	9a04      	ldr	r2, [sp, #16]
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	616b      	str	r3, [r5, #20]
 8004e3a:	e75d      	b.n	8004cf8 <_vfiprintf_r+0x8c>
 8004e3c:	210a      	movs	r1, #10
 8004e3e:	434b      	muls	r3, r1
 8004e40:	4667      	mov	r7, ip
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	3909      	subs	r1, #9
 8004e46:	e7a3      	b.n	8004d90 <_vfiprintf_r+0x124>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	425b      	negs	r3, r3
 8004e4c:	e7ce      	b.n	8004dec <_vfiprintf_r+0x180>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	001a      	movs	r2, r3
 8004e52:	3701      	adds	r7, #1
 8004e54:	606b      	str	r3, [r5, #4]
 8004e56:	7839      	ldrb	r1, [r7, #0]
 8004e58:	1c78      	adds	r0, r7, #1
 8004e5a:	3930      	subs	r1, #48	; 0x30
 8004e5c:	4684      	mov	ip, r0
 8004e5e:	2909      	cmp	r1, #9
 8004e60:	d903      	bls.n	8004e6a <_vfiprintf_r+0x1fe>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0c3      	beq.n	8004dee <_vfiprintf_r+0x182>
 8004e66:	9209      	str	r2, [sp, #36]	; 0x24
 8004e68:	e7c1      	b.n	8004dee <_vfiprintf_r+0x182>
 8004e6a:	230a      	movs	r3, #10
 8004e6c:	435a      	muls	r2, r3
 8004e6e:	4667      	mov	r7, ip
 8004e70:	1852      	adds	r2, r2, r1
 8004e72:	3b09      	subs	r3, #9
 8004e74:	e7ef      	b.n	8004e56 <_vfiprintf_r+0x1ea>
 8004e76:	ab07      	add	r3, sp, #28
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	0022      	movs	r2, r4
 8004e7c:	0029      	movs	r1, r5
 8004e7e:	0030      	movs	r0, r6
 8004e80:	4b16      	ldr	r3, [pc, #88]	; (8004edc <_vfiprintf_r+0x270>)
 8004e82:	e000      	b.n	8004e86 <_vfiprintf_r+0x21a>
 8004e84:	bf00      	nop
 8004e86:	9004      	str	r0, [sp, #16]
 8004e88:	9b04      	ldr	r3, [sp, #16]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	d1d1      	bne.n	8004e32 <_vfiprintf_r+0x1c6>
 8004e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e90:	07db      	lsls	r3, r3, #31
 8004e92:	d405      	bmi.n	8004ea0 <_vfiprintf_r+0x234>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	059b      	lsls	r3, r3, #22
 8004e98:	d402      	bmi.n	8004ea0 <_vfiprintf_r+0x234>
 8004e9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9c:	f000 fc5a 	bl	8005754 <__retarget_lock_release_recursive>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	065b      	lsls	r3, r3, #25
 8004ea4:	d500      	bpl.n	8004ea8 <_vfiprintf_r+0x23c>
 8004ea6:	e70a      	b.n	8004cbe <_vfiprintf_r+0x52>
 8004ea8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004eaa:	e70a      	b.n	8004cc2 <_vfiprintf_r+0x56>
 8004eac:	ab07      	add	r3, sp, #28
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	0022      	movs	r2, r4
 8004eb2:	0029      	movs	r1, r5
 8004eb4:	0030      	movs	r0, r6
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <_vfiprintf_r+0x270>)
 8004eb8:	f000 f882 	bl	8004fc0 <_printf_i>
 8004ebc:	e7e3      	b.n	8004e86 <_vfiprintf_r+0x21a>
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	08005c1c 	.word	0x08005c1c
 8004ec4:	08005c3c 	.word	0x08005c3c
 8004ec8:	08005bfc 	.word	0x08005bfc
 8004ecc:	08005bc6 	.word	0x08005bc6
 8004ed0:	08005bcc 	.word	0x08005bcc
 8004ed4:	08005bd0 	.word	0x08005bd0
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	08004c47 	.word	0x08004c47

08004ee0 <_printf_common>:
 8004ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ee2:	0015      	movs	r5, r2
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	688a      	ldr	r2, [r1, #8]
 8004ee8:	690b      	ldr	r3, [r1, #16]
 8004eea:	000c      	movs	r4, r1
 8004eec:	9000      	str	r0, [sp, #0]
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	da00      	bge.n	8004ef4 <_printf_common+0x14>
 8004ef2:	0013      	movs	r3, r2
 8004ef4:	0022      	movs	r2, r4
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	3243      	adds	r2, #67	; 0x43
 8004efa:	7812      	ldrb	r2, [r2, #0]
 8004efc:	2a00      	cmp	r2, #0
 8004efe:	d001      	beq.n	8004f04 <_printf_common+0x24>
 8004f00:	3301      	adds	r3, #1
 8004f02:	602b      	str	r3, [r5, #0]
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	069b      	lsls	r3, r3, #26
 8004f08:	d502      	bpl.n	8004f10 <_printf_common+0x30>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	2306      	movs	r3, #6
 8004f14:	0017      	movs	r7, r2
 8004f16:	401f      	ands	r7, r3
 8004f18:	421a      	tst	r2, r3
 8004f1a:	d027      	beq.n	8004f6c <_printf_common+0x8c>
 8004f1c:	0023      	movs	r3, r4
 8004f1e:	3343      	adds	r3, #67	; 0x43
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	1e5a      	subs	r2, r3, #1
 8004f24:	4193      	sbcs	r3, r2
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	0692      	lsls	r2, r2, #26
 8004f2a:	d430      	bmi.n	8004f8e <_printf_common+0xae>
 8004f2c:	0022      	movs	r2, r4
 8004f2e:	9901      	ldr	r1, [sp, #4]
 8004f30:	9800      	ldr	r0, [sp, #0]
 8004f32:	9e08      	ldr	r6, [sp, #32]
 8004f34:	3243      	adds	r2, #67	; 0x43
 8004f36:	47b0      	blx	r6
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d025      	beq.n	8004f88 <_printf_common+0xa8>
 8004f3c:	2306      	movs	r3, #6
 8004f3e:	6820      	ldr	r0, [r4, #0]
 8004f40:	682a      	ldr	r2, [r5, #0]
 8004f42:	68e1      	ldr	r1, [r4, #12]
 8004f44:	2500      	movs	r5, #0
 8004f46:	4003      	ands	r3, r0
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d103      	bne.n	8004f54 <_printf_common+0x74>
 8004f4c:	1a8d      	subs	r5, r1, r2
 8004f4e:	43eb      	mvns	r3, r5
 8004f50:	17db      	asrs	r3, r3, #31
 8004f52:	401d      	ands	r5, r3
 8004f54:	68a3      	ldr	r3, [r4, #8]
 8004f56:	6922      	ldr	r2, [r4, #16]
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	dd01      	ble.n	8004f60 <_printf_common+0x80>
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	18ed      	adds	r5, r5, r3
 8004f60:	2700      	movs	r7, #0
 8004f62:	42bd      	cmp	r5, r7
 8004f64:	d120      	bne.n	8004fa8 <_printf_common+0xc8>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e010      	b.n	8004f8c <_printf_common+0xac>
 8004f6a:	3701      	adds	r7, #1
 8004f6c:	68e3      	ldr	r3, [r4, #12]
 8004f6e:	682a      	ldr	r2, [r5, #0]
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	42bb      	cmp	r3, r7
 8004f74:	ddd2      	ble.n	8004f1c <_printf_common+0x3c>
 8004f76:	0022      	movs	r2, r4
 8004f78:	2301      	movs	r3, #1
 8004f7a:	9901      	ldr	r1, [sp, #4]
 8004f7c:	9800      	ldr	r0, [sp, #0]
 8004f7e:	9e08      	ldr	r6, [sp, #32]
 8004f80:	3219      	adds	r2, #25
 8004f82:	47b0      	blx	r6
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d1f0      	bne.n	8004f6a <_printf_common+0x8a>
 8004f88:	2001      	movs	r0, #1
 8004f8a:	4240      	negs	r0, r0
 8004f8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f8e:	2030      	movs	r0, #48	; 0x30
 8004f90:	18e1      	adds	r1, r4, r3
 8004f92:	3143      	adds	r1, #67	; 0x43
 8004f94:	7008      	strb	r0, [r1, #0]
 8004f96:	0021      	movs	r1, r4
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	3145      	adds	r1, #69	; 0x45
 8004f9c:	7809      	ldrb	r1, [r1, #0]
 8004f9e:	18a2      	adds	r2, r4, r2
 8004fa0:	3243      	adds	r2, #67	; 0x43
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	7011      	strb	r1, [r2, #0]
 8004fa6:	e7c1      	b.n	8004f2c <_printf_common+0x4c>
 8004fa8:	0022      	movs	r2, r4
 8004faa:	2301      	movs	r3, #1
 8004fac:	9901      	ldr	r1, [sp, #4]
 8004fae:	9800      	ldr	r0, [sp, #0]
 8004fb0:	9e08      	ldr	r6, [sp, #32]
 8004fb2:	321a      	adds	r2, #26
 8004fb4:	47b0      	blx	r6
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	d0e6      	beq.n	8004f88 <_printf_common+0xa8>
 8004fba:	3701      	adds	r7, #1
 8004fbc:	e7d1      	b.n	8004f62 <_printf_common+0x82>
	...

08004fc0 <_printf_i>:
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b08b      	sub	sp, #44	; 0x2c
 8004fc4:	9206      	str	r2, [sp, #24]
 8004fc6:	000a      	movs	r2, r1
 8004fc8:	3243      	adds	r2, #67	; 0x43
 8004fca:	9307      	str	r3, [sp, #28]
 8004fcc:	9005      	str	r0, [sp, #20]
 8004fce:	9204      	str	r2, [sp, #16]
 8004fd0:	7e0a      	ldrb	r2, [r1, #24]
 8004fd2:	000c      	movs	r4, r1
 8004fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fd6:	2a78      	cmp	r2, #120	; 0x78
 8004fd8:	d807      	bhi.n	8004fea <_printf_i+0x2a>
 8004fda:	2a62      	cmp	r2, #98	; 0x62
 8004fdc:	d809      	bhi.n	8004ff2 <_printf_i+0x32>
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d100      	bne.n	8004fe4 <_printf_i+0x24>
 8004fe2:	e0c1      	b.n	8005168 <_printf_i+0x1a8>
 8004fe4:	2a58      	cmp	r2, #88	; 0x58
 8004fe6:	d100      	bne.n	8004fea <_printf_i+0x2a>
 8004fe8:	e08c      	b.n	8005104 <_printf_i+0x144>
 8004fea:	0026      	movs	r6, r4
 8004fec:	3642      	adds	r6, #66	; 0x42
 8004fee:	7032      	strb	r2, [r6, #0]
 8004ff0:	e022      	b.n	8005038 <_printf_i+0x78>
 8004ff2:	0010      	movs	r0, r2
 8004ff4:	3863      	subs	r0, #99	; 0x63
 8004ff6:	2815      	cmp	r0, #21
 8004ff8:	d8f7      	bhi.n	8004fea <_printf_i+0x2a>
 8004ffa:	f7fb f885 	bl	8000108 <__gnu_thumb1_case_shi>
 8004ffe:	0016      	.short	0x0016
 8005000:	fff6001f 	.word	0xfff6001f
 8005004:	fff6fff6 	.word	0xfff6fff6
 8005008:	001ffff6 	.word	0x001ffff6
 800500c:	fff6fff6 	.word	0xfff6fff6
 8005010:	fff6fff6 	.word	0xfff6fff6
 8005014:	003600a8 	.word	0x003600a8
 8005018:	fff6009a 	.word	0xfff6009a
 800501c:	00b9fff6 	.word	0x00b9fff6
 8005020:	0036fff6 	.word	0x0036fff6
 8005024:	fff6fff6 	.word	0xfff6fff6
 8005028:	009e      	.short	0x009e
 800502a:	0026      	movs	r6, r4
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	3642      	adds	r6, #66	; 0x42
 8005030:	1d11      	adds	r1, r2, #4
 8005032:	6019      	str	r1, [r3, #0]
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	7033      	strb	r3, [r6, #0]
 8005038:	2301      	movs	r3, #1
 800503a:	e0a7      	b.n	800518c <_printf_i+0x1cc>
 800503c:	6808      	ldr	r0, [r1, #0]
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	1d0a      	adds	r2, r1, #4
 8005042:	0605      	lsls	r5, r0, #24
 8005044:	d50b      	bpl.n	800505e <_printf_i+0x9e>
 8005046:	680d      	ldr	r5, [r1, #0]
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	2d00      	cmp	r5, #0
 800504c:	da03      	bge.n	8005056 <_printf_i+0x96>
 800504e:	232d      	movs	r3, #45	; 0x2d
 8005050:	9a04      	ldr	r2, [sp, #16]
 8005052:	426d      	negs	r5, r5
 8005054:	7013      	strb	r3, [r2, #0]
 8005056:	4b61      	ldr	r3, [pc, #388]	; (80051dc <_printf_i+0x21c>)
 8005058:	270a      	movs	r7, #10
 800505a:	9303      	str	r3, [sp, #12]
 800505c:	e01b      	b.n	8005096 <_printf_i+0xd6>
 800505e:	680d      	ldr	r5, [r1, #0]
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	0641      	lsls	r1, r0, #25
 8005064:	d5f1      	bpl.n	800504a <_printf_i+0x8a>
 8005066:	b22d      	sxth	r5, r5
 8005068:	e7ef      	b.n	800504a <_printf_i+0x8a>
 800506a:	680d      	ldr	r5, [r1, #0]
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	1d08      	adds	r0, r1, #4
 8005070:	6018      	str	r0, [r3, #0]
 8005072:	062e      	lsls	r6, r5, #24
 8005074:	d501      	bpl.n	800507a <_printf_i+0xba>
 8005076:	680d      	ldr	r5, [r1, #0]
 8005078:	e003      	b.n	8005082 <_printf_i+0xc2>
 800507a:	066d      	lsls	r5, r5, #25
 800507c:	d5fb      	bpl.n	8005076 <_printf_i+0xb6>
 800507e:	680d      	ldr	r5, [r1, #0]
 8005080:	b2ad      	uxth	r5, r5
 8005082:	4b56      	ldr	r3, [pc, #344]	; (80051dc <_printf_i+0x21c>)
 8005084:	2708      	movs	r7, #8
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	2a6f      	cmp	r2, #111	; 0x6f
 800508a:	d000      	beq.n	800508e <_printf_i+0xce>
 800508c:	3702      	adds	r7, #2
 800508e:	0023      	movs	r3, r4
 8005090:	2200      	movs	r2, #0
 8005092:	3343      	adds	r3, #67	; 0x43
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	60a3      	str	r3, [r4, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	db03      	blt.n	80050a6 <_printf_i+0xe6>
 800509e:	2204      	movs	r2, #4
 80050a0:	6821      	ldr	r1, [r4, #0]
 80050a2:	4391      	bics	r1, r2
 80050a4:	6021      	str	r1, [r4, #0]
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	d102      	bne.n	80050b0 <_printf_i+0xf0>
 80050aa:	9e04      	ldr	r6, [sp, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00c      	beq.n	80050ca <_printf_i+0x10a>
 80050b0:	9e04      	ldr	r6, [sp, #16]
 80050b2:	0028      	movs	r0, r5
 80050b4:	0039      	movs	r1, r7
 80050b6:	f7fb f8b7 	bl	8000228 <__aeabi_uidivmod>
 80050ba:	9b03      	ldr	r3, [sp, #12]
 80050bc:	3e01      	subs	r6, #1
 80050be:	5c5b      	ldrb	r3, [r3, r1]
 80050c0:	7033      	strb	r3, [r6, #0]
 80050c2:	002b      	movs	r3, r5
 80050c4:	0005      	movs	r5, r0
 80050c6:	429f      	cmp	r7, r3
 80050c8:	d9f3      	bls.n	80050b2 <_printf_i+0xf2>
 80050ca:	2f08      	cmp	r7, #8
 80050cc:	d109      	bne.n	80050e2 <_printf_i+0x122>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	07db      	lsls	r3, r3, #31
 80050d2:	d506      	bpl.n	80050e2 <_printf_i+0x122>
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	6922      	ldr	r2, [r4, #16]
 80050d8:	4293      	cmp	r3, r2
 80050da:	dc02      	bgt.n	80050e2 <_printf_i+0x122>
 80050dc:	2330      	movs	r3, #48	; 0x30
 80050de:	3e01      	subs	r6, #1
 80050e0:	7033      	strb	r3, [r6, #0]
 80050e2:	9b04      	ldr	r3, [sp, #16]
 80050e4:	1b9b      	subs	r3, r3, r6
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	0021      	movs	r1, r4
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	9805      	ldr	r0, [sp, #20]
 80050f0:	9b06      	ldr	r3, [sp, #24]
 80050f2:	aa09      	add	r2, sp, #36	; 0x24
 80050f4:	f7ff fef4 	bl	8004ee0 <_printf_common>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d14c      	bne.n	8005196 <_printf_i+0x1d6>
 80050fc:	2001      	movs	r0, #1
 80050fe:	4240      	negs	r0, r0
 8005100:	b00b      	add	sp, #44	; 0x2c
 8005102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005104:	3145      	adds	r1, #69	; 0x45
 8005106:	700a      	strb	r2, [r1, #0]
 8005108:	4a34      	ldr	r2, [pc, #208]	; (80051dc <_printf_i+0x21c>)
 800510a:	9203      	str	r2, [sp, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	ca20      	ldmia	r2!, {r5}
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	0608      	lsls	r0, r1, #24
 8005116:	d516      	bpl.n	8005146 <_printf_i+0x186>
 8005118:	07cb      	lsls	r3, r1, #31
 800511a:	d502      	bpl.n	8005122 <_printf_i+0x162>
 800511c:	2320      	movs	r3, #32
 800511e:	4319      	orrs	r1, r3
 8005120:	6021      	str	r1, [r4, #0]
 8005122:	2710      	movs	r7, #16
 8005124:	2d00      	cmp	r5, #0
 8005126:	d1b2      	bne.n	800508e <_printf_i+0xce>
 8005128:	2320      	movs	r3, #32
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	439a      	bics	r2, r3
 800512e:	6022      	str	r2, [r4, #0]
 8005130:	e7ad      	b.n	800508e <_printf_i+0xce>
 8005132:	2220      	movs	r2, #32
 8005134:	6809      	ldr	r1, [r1, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	6022      	str	r2, [r4, #0]
 800513a:	0022      	movs	r2, r4
 800513c:	2178      	movs	r1, #120	; 0x78
 800513e:	3245      	adds	r2, #69	; 0x45
 8005140:	7011      	strb	r1, [r2, #0]
 8005142:	4a27      	ldr	r2, [pc, #156]	; (80051e0 <_printf_i+0x220>)
 8005144:	e7e1      	b.n	800510a <_printf_i+0x14a>
 8005146:	0648      	lsls	r0, r1, #25
 8005148:	d5e6      	bpl.n	8005118 <_printf_i+0x158>
 800514a:	b2ad      	uxth	r5, r5
 800514c:	e7e4      	b.n	8005118 <_printf_i+0x158>
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	680d      	ldr	r5, [r1, #0]
 8005152:	1d10      	adds	r0, r2, #4
 8005154:	6949      	ldr	r1, [r1, #20]
 8005156:	6018      	str	r0, [r3, #0]
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	062e      	lsls	r6, r5, #24
 800515c:	d501      	bpl.n	8005162 <_printf_i+0x1a2>
 800515e:	6019      	str	r1, [r3, #0]
 8005160:	e002      	b.n	8005168 <_printf_i+0x1a8>
 8005162:	066d      	lsls	r5, r5, #25
 8005164:	d5fb      	bpl.n	800515e <_printf_i+0x19e>
 8005166:	8019      	strh	r1, [r3, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	9e04      	ldr	r6, [sp, #16]
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	e7bb      	b.n	80050e8 <_printf_i+0x128>
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	1d11      	adds	r1, r2, #4
 8005174:	6019      	str	r1, [r3, #0]
 8005176:	6816      	ldr	r6, [r2, #0]
 8005178:	2100      	movs	r1, #0
 800517a:	0030      	movs	r0, r6
 800517c:	6862      	ldr	r2, [r4, #4]
 800517e:	f000 fb57 	bl	8005830 <memchr>
 8005182:	2800      	cmp	r0, #0
 8005184:	d001      	beq.n	800518a <_printf_i+0x1ca>
 8005186:	1b80      	subs	r0, r0, r6
 8005188:	6060      	str	r0, [r4, #4]
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	6123      	str	r3, [r4, #16]
 800518e:	2300      	movs	r3, #0
 8005190:	9a04      	ldr	r2, [sp, #16]
 8005192:	7013      	strb	r3, [r2, #0]
 8005194:	e7a8      	b.n	80050e8 <_printf_i+0x128>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	0032      	movs	r2, r6
 800519a:	9906      	ldr	r1, [sp, #24]
 800519c:	9805      	ldr	r0, [sp, #20]
 800519e:	9d07      	ldr	r5, [sp, #28]
 80051a0:	47a8      	blx	r5
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	d0aa      	beq.n	80050fc <_printf_i+0x13c>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	079b      	lsls	r3, r3, #30
 80051aa:	d415      	bmi.n	80051d8 <_printf_i+0x218>
 80051ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ae:	68e0      	ldr	r0, [r4, #12]
 80051b0:	4298      	cmp	r0, r3
 80051b2:	daa5      	bge.n	8005100 <_printf_i+0x140>
 80051b4:	0018      	movs	r0, r3
 80051b6:	e7a3      	b.n	8005100 <_printf_i+0x140>
 80051b8:	0022      	movs	r2, r4
 80051ba:	2301      	movs	r3, #1
 80051bc:	9906      	ldr	r1, [sp, #24]
 80051be:	9805      	ldr	r0, [sp, #20]
 80051c0:	9e07      	ldr	r6, [sp, #28]
 80051c2:	3219      	adds	r2, #25
 80051c4:	47b0      	blx	r6
 80051c6:	1c43      	adds	r3, r0, #1
 80051c8:	d098      	beq.n	80050fc <_printf_i+0x13c>
 80051ca:	3501      	adds	r5, #1
 80051cc:	68e3      	ldr	r3, [r4, #12]
 80051ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	42ab      	cmp	r3, r5
 80051d4:	dcf0      	bgt.n	80051b8 <_printf_i+0x1f8>
 80051d6:	e7e9      	b.n	80051ac <_printf_i+0x1ec>
 80051d8:	2500      	movs	r5, #0
 80051da:	e7f7      	b.n	80051cc <_printf_i+0x20c>
 80051dc:	08005bd7 	.word	0x08005bd7
 80051e0:	08005be8 	.word	0x08005be8

080051e4 <_sbrk_r>:
 80051e4:	2300      	movs	r3, #0
 80051e6:	b570      	push	{r4, r5, r6, lr}
 80051e8:	4d06      	ldr	r5, [pc, #24]	; (8005204 <_sbrk_r+0x20>)
 80051ea:	0004      	movs	r4, r0
 80051ec:	0008      	movs	r0, r1
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	f7fc fc58 	bl	8001aa4 <_sbrk>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d103      	bne.n	8005200 <_sbrk_r+0x1c>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d000      	beq.n	8005200 <_sbrk_r+0x1c>
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	bd70      	pop	{r4, r5, r6, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	200001a8 	.word	0x200001a8

08005208 <__swbuf_r>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	0005      	movs	r5, r0
 800520c:	000e      	movs	r6, r1
 800520e:	0014      	movs	r4, r2
 8005210:	2800      	cmp	r0, #0
 8005212:	d004      	beq.n	800521e <__swbuf_r+0x16>
 8005214:	6983      	ldr	r3, [r0, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <__swbuf_r+0x16>
 800521a:	f000 f9f9 	bl	8005610 <__sinit>
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <__swbuf_r+0xa0>)
 8005220:	429c      	cmp	r4, r3
 8005222:	d12e      	bne.n	8005282 <__swbuf_r+0x7a>
 8005224:	686c      	ldr	r4, [r5, #4]
 8005226:	69a3      	ldr	r3, [r4, #24]
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	071b      	lsls	r3, r3, #28
 800522e:	d532      	bpl.n	8005296 <__swbuf_r+0x8e>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d02f      	beq.n	8005296 <__swbuf_r+0x8e>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	6922      	ldr	r2, [r4, #16]
 800523a:	b2f7      	uxtb	r7, r6
 800523c:	1a98      	subs	r0, r3, r2
 800523e:	6963      	ldr	r3, [r4, #20]
 8005240:	b2f6      	uxtb	r6, r6
 8005242:	4283      	cmp	r3, r0
 8005244:	dc05      	bgt.n	8005252 <__swbuf_r+0x4a>
 8005246:	0021      	movs	r1, r4
 8005248:	0028      	movs	r0, r5
 800524a:	f000 f93f 	bl	80054cc <_fflush_r>
 800524e:	2800      	cmp	r0, #0
 8005250:	d127      	bne.n	80052a2 <__swbuf_r+0x9a>
 8005252:	68a3      	ldr	r3, [r4, #8]
 8005254:	3001      	adds	r0, #1
 8005256:	3b01      	subs	r3, #1
 8005258:	60a3      	str	r3, [r4, #8]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	6022      	str	r2, [r4, #0]
 8005260:	701f      	strb	r7, [r3, #0]
 8005262:	6963      	ldr	r3, [r4, #20]
 8005264:	4283      	cmp	r3, r0
 8005266:	d004      	beq.n	8005272 <__swbuf_r+0x6a>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	07db      	lsls	r3, r3, #31
 800526c:	d507      	bpl.n	800527e <__swbuf_r+0x76>
 800526e:	2e0a      	cmp	r6, #10
 8005270:	d105      	bne.n	800527e <__swbuf_r+0x76>
 8005272:	0021      	movs	r1, r4
 8005274:	0028      	movs	r0, r5
 8005276:	f000 f929 	bl	80054cc <_fflush_r>
 800527a:	2800      	cmp	r0, #0
 800527c:	d111      	bne.n	80052a2 <__swbuf_r+0x9a>
 800527e:	0030      	movs	r0, r6
 8005280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <__swbuf_r+0xa4>)
 8005284:	429c      	cmp	r4, r3
 8005286:	d101      	bne.n	800528c <__swbuf_r+0x84>
 8005288:	68ac      	ldr	r4, [r5, #8]
 800528a:	e7cc      	b.n	8005226 <__swbuf_r+0x1e>
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <__swbuf_r+0xa8>)
 800528e:	429c      	cmp	r4, r3
 8005290:	d1c9      	bne.n	8005226 <__swbuf_r+0x1e>
 8005292:	68ec      	ldr	r4, [r5, #12]
 8005294:	e7c7      	b.n	8005226 <__swbuf_r+0x1e>
 8005296:	0021      	movs	r1, r4
 8005298:	0028      	movs	r0, r5
 800529a:	f000 f80b 	bl	80052b4 <__swsetup_r>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0c9      	beq.n	8005236 <__swbuf_r+0x2e>
 80052a2:	2601      	movs	r6, #1
 80052a4:	4276      	negs	r6, r6
 80052a6:	e7ea      	b.n	800527e <__swbuf_r+0x76>
 80052a8:	08005c1c 	.word	0x08005c1c
 80052ac:	08005c3c 	.word	0x08005c3c
 80052b0:	08005bfc 	.word	0x08005bfc

080052b4 <__swsetup_r>:
 80052b4:	4b37      	ldr	r3, [pc, #220]	; (8005394 <__swsetup_r+0xe0>)
 80052b6:	b570      	push	{r4, r5, r6, lr}
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	0006      	movs	r6, r0
 80052bc:	000c      	movs	r4, r1
 80052be:	2d00      	cmp	r5, #0
 80052c0:	d005      	beq.n	80052ce <__swsetup_r+0x1a>
 80052c2:	69ab      	ldr	r3, [r5, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <__swsetup_r+0x1a>
 80052c8:	0028      	movs	r0, r5
 80052ca:	f000 f9a1 	bl	8005610 <__sinit>
 80052ce:	4b32      	ldr	r3, [pc, #200]	; (8005398 <__swsetup_r+0xe4>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	d10f      	bne.n	80052f4 <__swsetup_r+0x40>
 80052d4:	686c      	ldr	r4, [r5, #4]
 80052d6:	230c      	movs	r3, #12
 80052d8:	5ee2      	ldrsh	r2, [r4, r3]
 80052da:	b293      	uxth	r3, r2
 80052dc:	0711      	lsls	r1, r2, #28
 80052de:	d42d      	bmi.n	800533c <__swsetup_r+0x88>
 80052e0:	06d9      	lsls	r1, r3, #27
 80052e2:	d411      	bmi.n	8005308 <__swsetup_r+0x54>
 80052e4:	2309      	movs	r3, #9
 80052e6:	2001      	movs	r0, #1
 80052e8:	6033      	str	r3, [r6, #0]
 80052ea:	3337      	adds	r3, #55	; 0x37
 80052ec:	4313      	orrs	r3, r2
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	4240      	negs	r0, r0
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	4b29      	ldr	r3, [pc, #164]	; (800539c <__swsetup_r+0xe8>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d101      	bne.n	80052fe <__swsetup_r+0x4a>
 80052fa:	68ac      	ldr	r4, [r5, #8]
 80052fc:	e7eb      	b.n	80052d6 <__swsetup_r+0x22>
 80052fe:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <__swsetup_r+0xec>)
 8005300:	429c      	cmp	r4, r3
 8005302:	d1e8      	bne.n	80052d6 <__swsetup_r+0x22>
 8005304:	68ec      	ldr	r4, [r5, #12]
 8005306:	e7e6      	b.n	80052d6 <__swsetup_r+0x22>
 8005308:	075b      	lsls	r3, r3, #29
 800530a:	d513      	bpl.n	8005334 <__swsetup_r+0x80>
 800530c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800530e:	2900      	cmp	r1, #0
 8005310:	d008      	beq.n	8005324 <__swsetup_r+0x70>
 8005312:	0023      	movs	r3, r4
 8005314:	3344      	adds	r3, #68	; 0x44
 8005316:	4299      	cmp	r1, r3
 8005318:	d002      	beq.n	8005320 <__swsetup_r+0x6c>
 800531a:	0030      	movs	r0, r6
 800531c:	f7ff fb9c 	bl	8004a58 <_free_r>
 8005320:	2300      	movs	r3, #0
 8005322:	6363      	str	r3, [r4, #52]	; 0x34
 8005324:	2224      	movs	r2, #36	; 0x24
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	4393      	bics	r3, r2
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	2300      	movs	r3, #0
 800532e:	6063      	str	r3, [r4, #4]
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	2308      	movs	r3, #8
 8005336:	89a2      	ldrh	r2, [r4, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <__swsetup_r+0xa6>
 8005342:	21a0      	movs	r1, #160	; 0xa0
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	0089      	lsls	r1, r1, #2
 800534a:	0092      	lsls	r2, r2, #2
 800534c:	400b      	ands	r3, r1
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <__swsetup_r+0xa6>
 8005352:	0021      	movs	r1, r4
 8005354:	0030      	movs	r0, r6
 8005356:	f000 fa27 	bl	80057a8 <__smakebuf_r>
 800535a:	220c      	movs	r2, #12
 800535c:	5ea3      	ldrsh	r3, [r4, r2]
 800535e:	2001      	movs	r0, #1
 8005360:	001a      	movs	r2, r3
 8005362:	b299      	uxth	r1, r3
 8005364:	4002      	ands	r2, r0
 8005366:	4203      	tst	r3, r0
 8005368:	d00f      	beq.n	800538a <__swsetup_r+0xd6>
 800536a:	2200      	movs	r2, #0
 800536c:	60a2      	str	r2, [r4, #8]
 800536e:	6962      	ldr	r2, [r4, #20]
 8005370:	4252      	negs	r2, r2
 8005372:	61a2      	str	r2, [r4, #24]
 8005374:	2000      	movs	r0, #0
 8005376:	6922      	ldr	r2, [r4, #16]
 8005378:	4282      	cmp	r2, r0
 800537a:	d1ba      	bne.n	80052f2 <__swsetup_r+0x3e>
 800537c:	060a      	lsls	r2, r1, #24
 800537e:	d5b8      	bpl.n	80052f2 <__swsetup_r+0x3e>
 8005380:	2240      	movs	r2, #64	; 0x40
 8005382:	4313      	orrs	r3, r2
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	3801      	subs	r0, #1
 8005388:	e7b3      	b.n	80052f2 <__swsetup_r+0x3e>
 800538a:	0788      	lsls	r0, r1, #30
 800538c:	d400      	bmi.n	8005390 <__swsetup_r+0xdc>
 800538e:	6962      	ldr	r2, [r4, #20]
 8005390:	60a2      	str	r2, [r4, #8]
 8005392:	e7ef      	b.n	8005374 <__swsetup_r+0xc0>
 8005394:	2000000c 	.word	0x2000000c
 8005398:	08005c1c 	.word	0x08005c1c
 800539c:	08005c3c 	.word	0x08005c3c
 80053a0:	08005bfc 	.word	0x08005bfc

080053a4 <abort>:
 80053a4:	2006      	movs	r0, #6
 80053a6:	b510      	push	{r4, lr}
 80053a8:	f000 fa88 	bl	80058bc <raise>
 80053ac:	2001      	movs	r0, #1
 80053ae:	f7fc fb07 	bl	80019c0 <_exit>
	...

080053b4 <__sflush_r>:
 80053b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053b6:	898b      	ldrh	r3, [r1, #12]
 80053b8:	0005      	movs	r5, r0
 80053ba:	000c      	movs	r4, r1
 80053bc:	071a      	lsls	r2, r3, #28
 80053be:	d45f      	bmi.n	8005480 <__sflush_r+0xcc>
 80053c0:	684a      	ldr	r2, [r1, #4]
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	dc04      	bgt.n	80053d0 <__sflush_r+0x1c>
 80053c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	dc01      	bgt.n	80053d0 <__sflush_r+0x1c>
 80053cc:	2000      	movs	r0, #0
 80053ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80053d2:	2f00      	cmp	r7, #0
 80053d4:	d0fa      	beq.n	80053cc <__sflush_r+0x18>
 80053d6:	2200      	movs	r2, #0
 80053d8:	2180      	movs	r1, #128	; 0x80
 80053da:	682e      	ldr	r6, [r5, #0]
 80053dc:	602a      	str	r2, [r5, #0]
 80053de:	001a      	movs	r2, r3
 80053e0:	0149      	lsls	r1, r1, #5
 80053e2:	400a      	ands	r2, r1
 80053e4:	420b      	tst	r3, r1
 80053e6:	d034      	beq.n	8005452 <__sflush_r+0x9e>
 80053e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	075b      	lsls	r3, r3, #29
 80053ee:	d506      	bpl.n	80053fe <__sflush_r+0x4a>
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	1ac0      	subs	r0, r0, r3
 80053f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <__sflush_r+0x4a>
 80053fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053fc:	1ac0      	subs	r0, r0, r3
 80053fe:	0002      	movs	r2, r0
 8005400:	6a21      	ldr	r1, [r4, #32]
 8005402:	2300      	movs	r3, #0
 8005404:	0028      	movs	r0, r5
 8005406:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005408:	47b8      	blx	r7
 800540a:	89a1      	ldrh	r1, [r4, #12]
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d106      	bne.n	800541e <__sflush_r+0x6a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	2b1d      	cmp	r3, #29
 8005414:	d831      	bhi.n	800547a <__sflush_r+0xc6>
 8005416:	4a2c      	ldr	r2, [pc, #176]	; (80054c8 <__sflush_r+0x114>)
 8005418:	40da      	lsrs	r2, r3
 800541a:	07d3      	lsls	r3, r2, #31
 800541c:	d52d      	bpl.n	800547a <__sflush_r+0xc6>
 800541e:	2300      	movs	r3, #0
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	04cb      	lsls	r3, r1, #19
 8005428:	d505      	bpl.n	8005436 <__sflush_r+0x82>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d102      	bne.n	8005434 <__sflush_r+0x80>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d100      	bne.n	8005436 <__sflush_r+0x82>
 8005434:	6560      	str	r0, [r4, #84]	; 0x54
 8005436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005438:	602e      	str	r6, [r5, #0]
 800543a:	2900      	cmp	r1, #0
 800543c:	d0c6      	beq.n	80053cc <__sflush_r+0x18>
 800543e:	0023      	movs	r3, r4
 8005440:	3344      	adds	r3, #68	; 0x44
 8005442:	4299      	cmp	r1, r3
 8005444:	d002      	beq.n	800544c <__sflush_r+0x98>
 8005446:	0028      	movs	r0, r5
 8005448:	f7ff fb06 	bl	8004a58 <_free_r>
 800544c:	2000      	movs	r0, #0
 800544e:	6360      	str	r0, [r4, #52]	; 0x34
 8005450:	e7bd      	b.n	80053ce <__sflush_r+0x1a>
 8005452:	2301      	movs	r3, #1
 8005454:	0028      	movs	r0, r5
 8005456:	6a21      	ldr	r1, [r4, #32]
 8005458:	47b8      	blx	r7
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d1c5      	bne.n	80053ea <__sflush_r+0x36>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0c2      	beq.n	80053ea <__sflush_r+0x36>
 8005464:	2b1d      	cmp	r3, #29
 8005466:	d001      	beq.n	800546c <__sflush_r+0xb8>
 8005468:	2b16      	cmp	r3, #22
 800546a:	d101      	bne.n	8005470 <__sflush_r+0xbc>
 800546c:	602e      	str	r6, [r5, #0]
 800546e:	e7ad      	b.n	80053cc <__sflush_r+0x18>
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	89a2      	ldrh	r2, [r4, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	e7a9      	b.n	80053ce <__sflush_r+0x1a>
 800547a:	2340      	movs	r3, #64	; 0x40
 800547c:	430b      	orrs	r3, r1
 800547e:	e7fa      	b.n	8005476 <__sflush_r+0xc2>
 8005480:	690f      	ldr	r7, [r1, #16]
 8005482:	2f00      	cmp	r7, #0
 8005484:	d0a2      	beq.n	80053cc <__sflush_r+0x18>
 8005486:	680a      	ldr	r2, [r1, #0]
 8005488:	600f      	str	r7, [r1, #0]
 800548a:	1bd2      	subs	r2, r2, r7
 800548c:	9201      	str	r2, [sp, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	079b      	lsls	r3, r3, #30
 8005492:	d100      	bne.n	8005496 <__sflush_r+0xe2>
 8005494:	694a      	ldr	r2, [r1, #20]
 8005496:	60a2      	str	r2, [r4, #8]
 8005498:	9b01      	ldr	r3, [sp, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	dc00      	bgt.n	80054a0 <__sflush_r+0xec>
 800549e:	e795      	b.n	80053cc <__sflush_r+0x18>
 80054a0:	003a      	movs	r2, r7
 80054a2:	0028      	movs	r0, r5
 80054a4:	9b01      	ldr	r3, [sp, #4]
 80054a6:	6a21      	ldr	r1, [r4, #32]
 80054a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054aa:	47b0      	blx	r6
 80054ac:	2800      	cmp	r0, #0
 80054ae:	dc06      	bgt.n	80054be <__sflush_r+0x10a>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	2001      	movs	r0, #1
 80054b4:	89a2      	ldrh	r2, [r4, #12]
 80054b6:	4240      	negs	r0, r0
 80054b8:	4313      	orrs	r3, r2
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	e787      	b.n	80053ce <__sflush_r+0x1a>
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	183f      	adds	r7, r7, r0
 80054c2:	1a1b      	subs	r3, r3, r0
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	e7e7      	b.n	8005498 <__sflush_r+0xe4>
 80054c8:	20400001 	.word	0x20400001

080054cc <_fflush_r>:
 80054cc:	690b      	ldr	r3, [r1, #16]
 80054ce:	b570      	push	{r4, r5, r6, lr}
 80054d0:	0005      	movs	r5, r0
 80054d2:	000c      	movs	r4, r1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <_fflush_r+0x12>
 80054d8:	2500      	movs	r5, #0
 80054da:	0028      	movs	r0, r5
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
 80054de:	2800      	cmp	r0, #0
 80054e0:	d004      	beq.n	80054ec <_fflush_r+0x20>
 80054e2:	6983      	ldr	r3, [r0, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <_fflush_r+0x20>
 80054e8:	f000 f892 	bl	8005610 <__sinit>
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <_fflush_r+0x74>)
 80054ee:	429c      	cmp	r4, r3
 80054f0:	d11b      	bne.n	800552a <_fflush_r+0x5e>
 80054f2:	686c      	ldr	r4, [r5, #4]
 80054f4:	220c      	movs	r2, #12
 80054f6:	5ea3      	ldrsh	r3, [r4, r2]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0ed      	beq.n	80054d8 <_fflush_r+0xc>
 80054fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054fe:	07d2      	lsls	r2, r2, #31
 8005500:	d404      	bmi.n	800550c <_fflush_r+0x40>
 8005502:	059b      	lsls	r3, r3, #22
 8005504:	d402      	bmi.n	800550c <_fflush_r+0x40>
 8005506:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005508:	f000 f923 	bl	8005752 <__retarget_lock_acquire_recursive>
 800550c:	0028      	movs	r0, r5
 800550e:	0021      	movs	r1, r4
 8005510:	f7ff ff50 	bl	80053b4 <__sflush_r>
 8005514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005516:	0005      	movs	r5, r0
 8005518:	07db      	lsls	r3, r3, #31
 800551a:	d4de      	bmi.n	80054da <_fflush_r+0xe>
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	059b      	lsls	r3, r3, #22
 8005520:	d4db      	bmi.n	80054da <_fflush_r+0xe>
 8005522:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005524:	f000 f916 	bl	8005754 <__retarget_lock_release_recursive>
 8005528:	e7d7      	b.n	80054da <_fflush_r+0xe>
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <_fflush_r+0x78>)
 800552c:	429c      	cmp	r4, r3
 800552e:	d101      	bne.n	8005534 <_fflush_r+0x68>
 8005530:	68ac      	ldr	r4, [r5, #8]
 8005532:	e7df      	b.n	80054f4 <_fflush_r+0x28>
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <_fflush_r+0x7c>)
 8005536:	429c      	cmp	r4, r3
 8005538:	d1dc      	bne.n	80054f4 <_fflush_r+0x28>
 800553a:	68ec      	ldr	r4, [r5, #12]
 800553c:	e7da      	b.n	80054f4 <_fflush_r+0x28>
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	08005c1c 	.word	0x08005c1c
 8005544:	08005c3c 	.word	0x08005c3c
 8005548:	08005bfc 	.word	0x08005bfc

0800554c <std>:
 800554c:	2300      	movs	r3, #0
 800554e:	b510      	push	{r4, lr}
 8005550:	0004      	movs	r4, r0
 8005552:	6003      	str	r3, [r0, #0]
 8005554:	6043      	str	r3, [r0, #4]
 8005556:	6083      	str	r3, [r0, #8]
 8005558:	8181      	strh	r1, [r0, #12]
 800555a:	6643      	str	r3, [r0, #100]	; 0x64
 800555c:	0019      	movs	r1, r3
 800555e:	81c2      	strh	r2, [r0, #14]
 8005560:	6103      	str	r3, [r0, #16]
 8005562:	6143      	str	r3, [r0, #20]
 8005564:	6183      	str	r3, [r0, #24]
 8005566:	2208      	movs	r2, #8
 8005568:	305c      	adds	r0, #92	; 0x5c
 800556a:	f7ff f9c7 	bl	80048fc <memset>
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <std+0x38>)
 8005570:	6224      	str	r4, [r4, #32]
 8005572:	6263      	str	r3, [r4, #36]	; 0x24
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <std+0x3c>)
 8005576:	62a3      	str	r3, [r4, #40]	; 0x28
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <std+0x40>)
 800557a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <std+0x44>)
 800557e:	6323      	str	r3, [r4, #48]	; 0x30
 8005580:	bd10      	pop	{r4, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	080058fd 	.word	0x080058fd
 8005588:	08005925 	.word	0x08005925
 800558c:	0800595d 	.word	0x0800595d
 8005590:	08005989 	.word	0x08005989

08005594 <_cleanup_r>:
 8005594:	b510      	push	{r4, lr}
 8005596:	4902      	ldr	r1, [pc, #8]	; (80055a0 <_cleanup_r+0xc>)
 8005598:	f000 f8ba 	bl	8005710 <_fwalk_reent>
 800559c:	bd10      	pop	{r4, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	080054cd 	.word	0x080054cd

080055a4 <__sfmoreglue>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	2568      	movs	r5, #104	; 0x68
 80055a8:	1e4a      	subs	r2, r1, #1
 80055aa:	4355      	muls	r5, r2
 80055ac:	000e      	movs	r6, r1
 80055ae:	0029      	movs	r1, r5
 80055b0:	3174      	adds	r1, #116	; 0x74
 80055b2:	f7ff fabd 	bl	8004b30 <_malloc_r>
 80055b6:	1e04      	subs	r4, r0, #0
 80055b8:	d008      	beq.n	80055cc <__sfmoreglue+0x28>
 80055ba:	2100      	movs	r1, #0
 80055bc:	002a      	movs	r2, r5
 80055be:	6001      	str	r1, [r0, #0]
 80055c0:	6046      	str	r6, [r0, #4]
 80055c2:	300c      	adds	r0, #12
 80055c4:	60a0      	str	r0, [r4, #8]
 80055c6:	3268      	adds	r2, #104	; 0x68
 80055c8:	f7ff f998 	bl	80048fc <memset>
 80055cc:	0020      	movs	r0, r4
 80055ce:	bd70      	pop	{r4, r5, r6, pc}

080055d0 <__sfp_lock_acquire>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <__sfp_lock_acquire+0xc>)
 80055d4:	f000 f8bd 	bl	8005752 <__retarget_lock_acquire_recursive>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	200001a5 	.word	0x200001a5

080055e0 <__sfp_lock_release>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4802      	ldr	r0, [pc, #8]	; (80055ec <__sfp_lock_release+0xc>)
 80055e4:	f000 f8b6 	bl	8005754 <__retarget_lock_release_recursive>
 80055e8:	bd10      	pop	{r4, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	200001a5 	.word	0x200001a5

080055f0 <__sinit_lock_acquire>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	4802      	ldr	r0, [pc, #8]	; (80055fc <__sinit_lock_acquire+0xc>)
 80055f4:	f000 f8ad 	bl	8005752 <__retarget_lock_acquire_recursive>
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	200001a6 	.word	0x200001a6

08005600 <__sinit_lock_release>:
 8005600:	b510      	push	{r4, lr}
 8005602:	4802      	ldr	r0, [pc, #8]	; (800560c <__sinit_lock_release+0xc>)
 8005604:	f000 f8a6 	bl	8005754 <__retarget_lock_release_recursive>
 8005608:	bd10      	pop	{r4, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	200001a6 	.word	0x200001a6

08005610 <__sinit>:
 8005610:	b513      	push	{r0, r1, r4, lr}
 8005612:	0004      	movs	r4, r0
 8005614:	f7ff ffec 	bl	80055f0 <__sinit_lock_acquire>
 8005618:	69a3      	ldr	r3, [r4, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <__sinit+0x14>
 800561e:	f7ff ffef 	bl	8005600 <__sinit_lock_release>
 8005622:	bd13      	pop	{r0, r1, r4, pc}
 8005624:	64a3      	str	r3, [r4, #72]	; 0x48
 8005626:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005628:	6523      	str	r3, [r4, #80]	; 0x50
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <__sinit+0x68>)
 800562c:	4a13      	ldr	r2, [pc, #76]	; (800567c <__sinit+0x6c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	62a2      	str	r2, [r4, #40]	; 0x28
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	42a3      	cmp	r3, r4
 8005636:	d101      	bne.n	800563c <__sinit+0x2c>
 8005638:	2301      	movs	r3, #1
 800563a:	61a3      	str	r3, [r4, #24]
 800563c:	0020      	movs	r0, r4
 800563e:	f000 f81f 	bl	8005680 <__sfp>
 8005642:	6060      	str	r0, [r4, #4]
 8005644:	0020      	movs	r0, r4
 8005646:	f000 f81b 	bl	8005680 <__sfp>
 800564a:	60a0      	str	r0, [r4, #8]
 800564c:	0020      	movs	r0, r4
 800564e:	f000 f817 	bl	8005680 <__sfp>
 8005652:	2200      	movs	r2, #0
 8005654:	2104      	movs	r1, #4
 8005656:	60e0      	str	r0, [r4, #12]
 8005658:	6860      	ldr	r0, [r4, #4]
 800565a:	f7ff ff77 	bl	800554c <std>
 800565e:	2201      	movs	r2, #1
 8005660:	2109      	movs	r1, #9
 8005662:	68a0      	ldr	r0, [r4, #8]
 8005664:	f7ff ff72 	bl	800554c <std>
 8005668:	2202      	movs	r2, #2
 800566a:	2112      	movs	r1, #18
 800566c:	68e0      	ldr	r0, [r4, #12]
 800566e:	f7ff ff6d 	bl	800554c <std>
 8005672:	2301      	movs	r3, #1
 8005674:	61a3      	str	r3, [r4, #24]
 8005676:	e7d2      	b.n	800561e <__sinit+0xe>
 8005678:	08005b14 	.word	0x08005b14
 800567c:	08005595 	.word	0x08005595

08005680 <__sfp>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	0007      	movs	r7, r0
 8005684:	f7ff ffa4 	bl	80055d0 <__sfp_lock_acquire>
 8005688:	4b1f      	ldr	r3, [pc, #124]	; (8005708 <__sfp+0x88>)
 800568a:	681e      	ldr	r6, [r3, #0]
 800568c:	69b3      	ldr	r3, [r6, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <__sfp+0x18>
 8005692:	0030      	movs	r0, r6
 8005694:	f7ff ffbc 	bl	8005610 <__sinit>
 8005698:	3648      	adds	r6, #72	; 0x48
 800569a:	68b4      	ldr	r4, [r6, #8]
 800569c:	6873      	ldr	r3, [r6, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	d504      	bpl.n	80056ac <__sfp+0x2c>
 80056a2:	6833      	ldr	r3, [r6, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d022      	beq.n	80056ee <__sfp+0x6e>
 80056a8:	6836      	ldr	r6, [r6, #0]
 80056aa:	e7f6      	b.n	800569a <__sfp+0x1a>
 80056ac:	220c      	movs	r2, #12
 80056ae:	5ea5      	ldrsh	r5, [r4, r2]
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	d11a      	bne.n	80056ea <__sfp+0x6a>
 80056b4:	0020      	movs	r0, r4
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <__sfp+0x8c>)
 80056b8:	3058      	adds	r0, #88	; 0x58
 80056ba:	60e3      	str	r3, [r4, #12]
 80056bc:	6665      	str	r5, [r4, #100]	; 0x64
 80056be:	f000 f847 	bl	8005750 <__retarget_lock_init_recursive>
 80056c2:	f7ff ff8d 	bl	80055e0 <__sfp_lock_release>
 80056c6:	0020      	movs	r0, r4
 80056c8:	2208      	movs	r2, #8
 80056ca:	0029      	movs	r1, r5
 80056cc:	6025      	str	r5, [r4, #0]
 80056ce:	60a5      	str	r5, [r4, #8]
 80056d0:	6065      	str	r5, [r4, #4]
 80056d2:	6125      	str	r5, [r4, #16]
 80056d4:	6165      	str	r5, [r4, #20]
 80056d6:	61a5      	str	r5, [r4, #24]
 80056d8:	305c      	adds	r0, #92	; 0x5c
 80056da:	f7ff f90f 	bl	80048fc <memset>
 80056de:	6365      	str	r5, [r4, #52]	; 0x34
 80056e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80056e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80056e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80056e6:	0020      	movs	r0, r4
 80056e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ea:	3468      	adds	r4, #104	; 0x68
 80056ec:	e7d7      	b.n	800569e <__sfp+0x1e>
 80056ee:	2104      	movs	r1, #4
 80056f0:	0038      	movs	r0, r7
 80056f2:	f7ff ff57 	bl	80055a4 <__sfmoreglue>
 80056f6:	1e04      	subs	r4, r0, #0
 80056f8:	6030      	str	r0, [r6, #0]
 80056fa:	d1d5      	bne.n	80056a8 <__sfp+0x28>
 80056fc:	f7ff ff70 	bl	80055e0 <__sfp_lock_release>
 8005700:	230c      	movs	r3, #12
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	e7ef      	b.n	80056e6 <__sfp+0x66>
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	08005b14 	.word	0x08005b14
 800570c:	ffff0001 	.word	0xffff0001

08005710 <_fwalk_reent>:
 8005710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005712:	0004      	movs	r4, r0
 8005714:	0006      	movs	r6, r0
 8005716:	2700      	movs	r7, #0
 8005718:	9101      	str	r1, [sp, #4]
 800571a:	3448      	adds	r4, #72	; 0x48
 800571c:	6863      	ldr	r3, [r4, #4]
 800571e:	68a5      	ldr	r5, [r4, #8]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	9b00      	ldr	r3, [sp, #0]
 8005724:	3b01      	subs	r3, #1
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	d504      	bpl.n	8005734 <_fwalk_reent+0x24>
 800572a:	6824      	ldr	r4, [r4, #0]
 800572c:	2c00      	cmp	r4, #0
 800572e:	d1f5      	bne.n	800571c <_fwalk_reent+0xc>
 8005730:	0038      	movs	r0, r7
 8005732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005734:	89ab      	ldrh	r3, [r5, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d908      	bls.n	800574c <_fwalk_reent+0x3c>
 800573a:	220e      	movs	r2, #14
 800573c:	5eab      	ldrsh	r3, [r5, r2]
 800573e:	3301      	adds	r3, #1
 8005740:	d004      	beq.n	800574c <_fwalk_reent+0x3c>
 8005742:	0029      	movs	r1, r5
 8005744:	0030      	movs	r0, r6
 8005746:	9b01      	ldr	r3, [sp, #4]
 8005748:	4798      	blx	r3
 800574a:	4307      	orrs	r7, r0
 800574c:	3568      	adds	r5, #104	; 0x68
 800574e:	e7e8      	b.n	8005722 <_fwalk_reent+0x12>

08005750 <__retarget_lock_init_recursive>:
 8005750:	4770      	bx	lr

08005752 <__retarget_lock_acquire_recursive>:
 8005752:	4770      	bx	lr

08005754 <__retarget_lock_release_recursive>:
 8005754:	4770      	bx	lr
	...

08005758 <__swhatbuf_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	000e      	movs	r6, r1
 800575c:	001d      	movs	r5, r3
 800575e:	230e      	movs	r3, #14
 8005760:	5ec9      	ldrsh	r1, [r1, r3]
 8005762:	0014      	movs	r4, r2
 8005764:	b096      	sub	sp, #88	; 0x58
 8005766:	2900      	cmp	r1, #0
 8005768:	da08      	bge.n	800577c <__swhatbuf_r+0x24>
 800576a:	220c      	movs	r2, #12
 800576c:	5eb3      	ldrsh	r3, [r6, r2]
 800576e:	2200      	movs	r2, #0
 8005770:	602a      	str	r2, [r5, #0]
 8005772:	061b      	lsls	r3, r3, #24
 8005774:	d411      	bmi.n	800579a <__swhatbuf_r+0x42>
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	e00f      	b.n	800579c <__swhatbuf_r+0x44>
 800577c:	466a      	mov	r2, sp
 800577e:	f000 f92f 	bl	80059e0 <_fstat_r>
 8005782:	2800      	cmp	r0, #0
 8005784:	dbf1      	blt.n	800576a <__swhatbuf_r+0x12>
 8005786:	23f0      	movs	r3, #240	; 0xf0
 8005788:	9901      	ldr	r1, [sp, #4]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	4019      	ands	r1, r3
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <__swhatbuf_r+0x4c>)
 8005790:	18c9      	adds	r1, r1, r3
 8005792:	424b      	negs	r3, r1
 8005794:	4159      	adcs	r1, r3
 8005796:	6029      	str	r1, [r5, #0]
 8005798:	e7ed      	b.n	8005776 <__swhatbuf_r+0x1e>
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	2000      	movs	r0, #0
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	b016      	add	sp, #88	; 0x58
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	ffffe000 	.word	0xffffe000

080057a8 <__smakebuf_r>:
 80057a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057aa:	2602      	movs	r6, #2
 80057ac:	898b      	ldrh	r3, [r1, #12]
 80057ae:	0005      	movs	r5, r0
 80057b0:	000c      	movs	r4, r1
 80057b2:	4233      	tst	r3, r6
 80057b4:	d006      	beq.n	80057c4 <__smakebuf_r+0x1c>
 80057b6:	0023      	movs	r3, r4
 80057b8:	3347      	adds	r3, #71	; 0x47
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	6123      	str	r3, [r4, #16]
 80057be:	2301      	movs	r3, #1
 80057c0:	6163      	str	r3, [r4, #20]
 80057c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80057c4:	466a      	mov	r2, sp
 80057c6:	ab01      	add	r3, sp, #4
 80057c8:	f7ff ffc6 	bl	8005758 <__swhatbuf_r>
 80057cc:	9900      	ldr	r1, [sp, #0]
 80057ce:	0007      	movs	r7, r0
 80057d0:	0028      	movs	r0, r5
 80057d2:	f7ff f9ad 	bl	8004b30 <_malloc_r>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d108      	bne.n	80057ec <__smakebuf_r+0x44>
 80057da:	220c      	movs	r2, #12
 80057dc:	5ea3      	ldrsh	r3, [r4, r2]
 80057de:	059a      	lsls	r2, r3, #22
 80057e0:	d4ef      	bmi.n	80057c2 <__smakebuf_r+0x1a>
 80057e2:	2203      	movs	r2, #3
 80057e4:	4393      	bics	r3, r2
 80057e6:	431e      	orrs	r6, r3
 80057e8:	81a6      	strh	r6, [r4, #12]
 80057ea:	e7e4      	b.n	80057b6 <__smakebuf_r+0xe>
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <__smakebuf_r+0x84>)
 80057ee:	62ab      	str	r3, [r5, #40]	; 0x28
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	89a2      	ldrh	r2, [r4, #12]
 80057f4:	6020      	str	r0, [r4, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	9b00      	ldr	r3, [sp, #0]
 80057fc:	6120      	str	r0, [r4, #16]
 80057fe:	6163      	str	r3, [r4, #20]
 8005800:	9b01      	ldr	r3, [sp, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <__smakebuf_r+0x7a>
 8005806:	0028      	movs	r0, r5
 8005808:	230e      	movs	r3, #14
 800580a:	5ee1      	ldrsh	r1, [r4, r3]
 800580c:	f000 f8fa 	bl	8005a04 <_isatty_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	d006      	beq.n	8005822 <__smakebuf_r+0x7a>
 8005814:	2203      	movs	r2, #3
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	4393      	bics	r3, r2
 800581a:	001a      	movs	r2, r3
 800581c:	2301      	movs	r3, #1
 800581e:	4313      	orrs	r3, r2
 8005820:	81a3      	strh	r3, [r4, #12]
 8005822:	89a0      	ldrh	r0, [r4, #12]
 8005824:	4307      	orrs	r7, r0
 8005826:	81a7      	strh	r7, [r4, #12]
 8005828:	e7cb      	b.n	80057c2 <__smakebuf_r+0x1a>
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	08005595 	.word	0x08005595

08005830 <memchr>:
 8005830:	b2c9      	uxtb	r1, r1
 8005832:	1882      	adds	r2, r0, r2
 8005834:	4290      	cmp	r0, r2
 8005836:	d101      	bne.n	800583c <memchr+0xc>
 8005838:	2000      	movs	r0, #0
 800583a:	4770      	bx	lr
 800583c:	7803      	ldrb	r3, [r0, #0]
 800583e:	428b      	cmp	r3, r1
 8005840:	d0fb      	beq.n	800583a <memchr+0xa>
 8005842:	3001      	adds	r0, #1
 8005844:	e7f6      	b.n	8005834 <memchr+0x4>
	...

08005848 <__malloc_lock>:
 8005848:	b510      	push	{r4, lr}
 800584a:	4802      	ldr	r0, [pc, #8]	; (8005854 <__malloc_lock+0xc>)
 800584c:	f7ff ff81 	bl	8005752 <__retarget_lock_acquire_recursive>
 8005850:	bd10      	pop	{r4, pc}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	200001a4 	.word	0x200001a4

08005858 <__malloc_unlock>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4802      	ldr	r0, [pc, #8]	; (8005864 <__malloc_unlock+0xc>)
 800585c:	f7ff ff7a 	bl	8005754 <__retarget_lock_release_recursive>
 8005860:	bd10      	pop	{r4, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	200001a4 	.word	0x200001a4

08005868 <_raise_r>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	0004      	movs	r4, r0
 800586c:	000d      	movs	r5, r1
 800586e:	291f      	cmp	r1, #31
 8005870:	d904      	bls.n	800587c <_raise_r+0x14>
 8005872:	2316      	movs	r3, #22
 8005874:	6003      	str	r3, [r0, #0]
 8005876:	2001      	movs	r0, #1
 8005878:	4240      	negs	r0, r0
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <_raise_r+0x24>
 8005882:	008a      	lsls	r2, r1, #2
 8005884:	189b      	adds	r3, r3, r2
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	2a00      	cmp	r2, #0
 800588a:	d108      	bne.n	800589e <_raise_r+0x36>
 800588c:	0020      	movs	r0, r4
 800588e:	f000 f831 	bl	80058f4 <_getpid_r>
 8005892:	002a      	movs	r2, r5
 8005894:	0001      	movs	r1, r0
 8005896:	0020      	movs	r0, r4
 8005898:	f000 f81a 	bl	80058d0 <_kill_r>
 800589c:	e7ed      	b.n	800587a <_raise_r+0x12>
 800589e:	2000      	movs	r0, #0
 80058a0:	2a01      	cmp	r2, #1
 80058a2:	d0ea      	beq.n	800587a <_raise_r+0x12>
 80058a4:	1c51      	adds	r1, r2, #1
 80058a6:	d103      	bne.n	80058b0 <_raise_r+0x48>
 80058a8:	2316      	movs	r3, #22
 80058aa:	3001      	adds	r0, #1
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	e7e4      	b.n	800587a <_raise_r+0x12>
 80058b0:	2400      	movs	r4, #0
 80058b2:	0028      	movs	r0, r5
 80058b4:	601c      	str	r4, [r3, #0]
 80058b6:	4790      	blx	r2
 80058b8:	0020      	movs	r0, r4
 80058ba:	e7de      	b.n	800587a <_raise_r+0x12>

080058bc <raise>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	4b03      	ldr	r3, [pc, #12]	; (80058cc <raise+0x10>)
 80058c0:	0001      	movs	r1, r0
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	f7ff ffd0 	bl	8005868 <_raise_r>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	2000000c 	.word	0x2000000c

080058d0 <_kill_r>:
 80058d0:	2300      	movs	r3, #0
 80058d2:	b570      	push	{r4, r5, r6, lr}
 80058d4:	4d06      	ldr	r5, [pc, #24]	; (80058f0 <_kill_r+0x20>)
 80058d6:	0004      	movs	r4, r0
 80058d8:	0008      	movs	r0, r1
 80058da:	0011      	movs	r1, r2
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	f7fc f85f 	bl	80019a0 <_kill>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d103      	bne.n	80058ee <_kill_r+0x1e>
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d000      	beq.n	80058ee <_kill_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	200001a8 	.word	0x200001a8

080058f4 <_getpid_r>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	f7fc f84d 	bl	8001994 <_getpid>
 80058fa:	bd10      	pop	{r4, pc}

080058fc <__sread>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	000c      	movs	r4, r1
 8005900:	250e      	movs	r5, #14
 8005902:	5f49      	ldrsh	r1, [r1, r5]
 8005904:	f000 f8a4 	bl	8005a50 <_read_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	db03      	blt.n	8005914 <__sread+0x18>
 800590c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800590e:	181b      	adds	r3, r3, r0
 8005910:	6563      	str	r3, [r4, #84]	; 0x54
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	4a02      	ldr	r2, [pc, #8]	; (8005920 <__sread+0x24>)
 8005918:	4013      	ands	r3, r2
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	e7f9      	b.n	8005912 <__sread+0x16>
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	ffffefff 	.word	0xffffefff

08005924 <__swrite>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	001f      	movs	r7, r3
 8005928:	898b      	ldrh	r3, [r1, #12]
 800592a:	0005      	movs	r5, r0
 800592c:	000c      	movs	r4, r1
 800592e:	0016      	movs	r6, r2
 8005930:	05db      	lsls	r3, r3, #23
 8005932:	d505      	bpl.n	8005940 <__swrite+0x1c>
 8005934:	230e      	movs	r3, #14
 8005936:	5ec9      	ldrsh	r1, [r1, r3]
 8005938:	2200      	movs	r2, #0
 800593a:	2302      	movs	r3, #2
 800593c:	f000 f874 	bl	8005a28 <_lseek_r>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	4a05      	ldr	r2, [pc, #20]	; (8005958 <__swrite+0x34>)
 8005944:	0028      	movs	r0, r5
 8005946:	4013      	ands	r3, r2
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	0032      	movs	r2, r6
 800594c:	230e      	movs	r3, #14
 800594e:	5ee1      	ldrsh	r1, [r4, r3]
 8005950:	003b      	movs	r3, r7
 8005952:	f000 f81f 	bl	8005994 <_write_r>
 8005956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005958:	ffffefff 	.word	0xffffefff

0800595c <__sseek>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	000c      	movs	r4, r1
 8005960:	250e      	movs	r5, #14
 8005962:	5f49      	ldrsh	r1, [r1, r5]
 8005964:	f000 f860 	bl	8005a28 <_lseek_r>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	1c42      	adds	r2, r0, #1
 800596c:	d103      	bne.n	8005976 <__sseek+0x1a>
 800596e:	4a05      	ldr	r2, [pc, #20]	; (8005984 <__sseek+0x28>)
 8005970:	4013      	ands	r3, r2
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	0152      	lsls	r2, r2, #5
 800597a:	4313      	orrs	r3, r2
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	6560      	str	r0, [r4, #84]	; 0x54
 8005980:	e7f8      	b.n	8005974 <__sseek+0x18>
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	ffffefff 	.word	0xffffefff

08005988 <__sclose>:
 8005988:	b510      	push	{r4, lr}
 800598a:	230e      	movs	r3, #14
 800598c:	5ec9      	ldrsh	r1, [r1, r3]
 800598e:	f000 f815 	bl	80059bc <_close_r>
 8005992:	bd10      	pop	{r4, pc}

08005994 <_write_r>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	0004      	movs	r4, r0
 8005998:	0008      	movs	r0, r1
 800599a:	0011      	movs	r1, r2
 800599c:	001a      	movs	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	4d05      	ldr	r5, [pc, #20]	; (80059b8 <_write_r+0x24>)
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fc f835 	bl	8001a12 <_write>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d103      	bne.n	80059b4 <_write_r+0x20>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d000      	beq.n	80059b4 <_write_r+0x20>
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	200001a8 	.word	0x200001a8

080059bc <_close_r>:
 80059bc:	2300      	movs	r3, #0
 80059be:	b570      	push	{r4, r5, r6, lr}
 80059c0:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_close_r+0x20>)
 80059c2:	0004      	movs	r4, r0
 80059c4:	0008      	movs	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fc f83f 	bl	8001a4a <_close>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d103      	bne.n	80059d8 <_close_r+0x1c>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d000      	beq.n	80059d8 <_close_r+0x1c>
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	200001a8 	.word	0x200001a8

080059e0 <_fstat_r>:
 80059e0:	2300      	movs	r3, #0
 80059e2:	b570      	push	{r4, r5, r6, lr}
 80059e4:	4d06      	ldr	r5, [pc, #24]	; (8005a00 <_fstat_r+0x20>)
 80059e6:	0004      	movs	r4, r0
 80059e8:	0008      	movs	r0, r1
 80059ea:	0011      	movs	r1, r2
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	f7fc f836 	bl	8001a5e <_fstat>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d103      	bne.n	80059fe <_fstat_r+0x1e>
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d000      	beq.n	80059fe <_fstat_r+0x1e>
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	200001a8 	.word	0x200001a8

08005a04 <_isatty_r>:
 8005a04:	2300      	movs	r3, #0
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	4d06      	ldr	r5, [pc, #24]	; (8005a24 <_isatty_r+0x20>)
 8005a0a:	0004      	movs	r4, r0
 8005a0c:	0008      	movs	r0, r1
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	f7fc f833 	bl	8001a7a <_isatty>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d103      	bne.n	8005a20 <_isatty_r+0x1c>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d000      	beq.n	8005a20 <_isatty_r+0x1c>
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	200001a8 	.word	0x200001a8

08005a28 <_lseek_r>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	0004      	movs	r4, r0
 8005a2c:	0008      	movs	r0, r1
 8005a2e:	0011      	movs	r1, r2
 8005a30:	001a      	movs	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	4d05      	ldr	r5, [pc, #20]	; (8005a4c <_lseek_r+0x24>)
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	f7fc f828 	bl	8001a8c <_lseek>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d103      	bne.n	8005a48 <_lseek_r+0x20>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d000      	beq.n	8005a48 <_lseek_r+0x20>
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	bd70      	pop	{r4, r5, r6, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	200001a8 	.word	0x200001a8

08005a50 <_read_r>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	0004      	movs	r4, r0
 8005a54:	0008      	movs	r0, r1
 8005a56:	0011      	movs	r1, r2
 8005a58:	001a      	movs	r2, r3
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4d05      	ldr	r5, [pc, #20]	; (8005a74 <_read_r+0x24>)
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	f7fb ffba 	bl	80019d8 <_read>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d103      	bne.n	8005a70 <_read_r+0x20>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d000      	beq.n	8005a70 <_read_r+0x20>
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	200001a8 	.word	0x200001a8

08005a78 <_init>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr

08005a84 <_fini>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr
