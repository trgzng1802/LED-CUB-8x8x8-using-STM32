
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005230  08005230  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005230  08005230  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005230  08005230  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000014  0800524c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  0800524c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa3c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caf  00000000  00000000  0002fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d5c  00000000  00000000  00033b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b0a  00000000  00000000  0004d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aec5  00000000  00000000  0005f3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea2bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002418  00000000  00000000  000ea30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005180 	.word	0x08005180

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08005180 	.word	0x08005180

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa89 	bl	800073c <HAL_Init>

  /* USER CODE BEGIN Init */

  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 800022a:	2390      	movs	r3, #144	; 0x90
 800022c:	05d9      	lsls	r1, r3, #23
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <main+0x54>)
 8000230:	2202      	movs	r2, #2
 8000232:	0018      	movs	r0, r3
 8000234:	f002 ffab 	bl	800318e <Btn_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f822 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f8ee 	bl	800041c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000240:	f000 f87e 	bl	8000340 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f8ba 	bl	80003bc <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Btn_Handle(&button1);
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <main+0x54>)
 800024a:	0018      	movs	r0, r3
 800024c:	f002 ff11 	bl	8003072 <Btn_Handle>
	  Led_cube_Handle(currentEffect, hspi1);
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <main+0x58>)
 8000252:	781d      	ldrb	r5, [r3, #0]
 8000254:	4c09      	ldr	r4, [pc, #36]	; (800027c <main+0x5c>)
 8000256:	466b      	mov	r3, sp
 8000258:	0018      	movs	r0, r3
 800025a:	0023      	movs	r3, r4
 800025c:	330c      	adds	r3, #12
 800025e:	2258      	movs	r2, #88	; 0x58
 8000260:	0019      	movs	r1, r3
 8000262:	f004 ff7b 	bl	800515c <memcpy>
 8000266:	6821      	ldr	r1, [r4, #0]
 8000268:	6862      	ldr	r2, [r4, #4]
 800026a:	68a3      	ldr	r3, [r4, #8]
 800026c:	0028      	movs	r0, r5
 800026e:	f004 fbf3 	bl	8004a58 <Led_cube_Handle>
	  Btn_Handle(&button1);
 8000272:	e7e9      	b.n	8000248 <main+0x28>
 8000274:	20000118 	.word	0x20000118
 8000278:	20000010 	.word	0x20000010
 800027c:	20000030 	.word	0x20000030

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b099      	sub	sp, #100	; 0x64
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	242c      	movs	r4, #44	; 0x2c
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2334      	movs	r3, #52	; 0x34
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f004 ff6c 	bl	800516e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	231c      	movs	r3, #28
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	0018      	movs	r0, r3
 800029c:	2310      	movs	r3, #16
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f004 ff64 	bl	800516e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	0018      	movs	r0, r3
 80002aa:	2318      	movs	r3, #24
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f004 ff5d 	bl	800516e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2201      	movs	r2, #1
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	0252      	lsls	r2, r2, #9
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2280      	movs	r2, #128	; 0x80
 80002d4:	0352      	lsls	r2, r2, #13
 80002d6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fd8d 	bl	8000e00 <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ea:	f000 f8ef 	bl	80004cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	211c      	movs	r1, #28
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2202      	movs	r2, #2
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f8fd 	bl	800150c <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000316:	f000 f8d9 	bl	80004cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fa69 	bl	8001800 <HAL_RCCEx_PeriphCLKConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000332:	f000 f8cb 	bl	80004cc <Error_Handler>
  }
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b019      	add	sp, #100	; 0x64
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <MX_SPI1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_SPI1_Init+0x74>)
 800034c:	2282      	movs	r2, #130	; 0x82
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_SPI1_Init+0x74>)
 800035a:	22e0      	movs	r2, #224	; 0xe0
 800035c:	00d2      	lsls	r2, r2, #3
 800035e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_SPI1_Init+0x74>)
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000376:	2220      	movs	r2, #32
 8000378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_SPI1_Init+0x74>)
 800038e:	2207      	movs	r2, #7
 8000390:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_SPI1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MX_SPI1_Init+0x74>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fb1b 	bl	80019dc <HAL_SPI_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 f88f 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000030 	.word	0x20000030
 80003b8:	40013000 	.word	0x40013000

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <MX_USART1_UART_Init+0x5c>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c8:	22e1      	movs	r2, #225	; 0xe1
 80003ca:	0252      	lsls	r2, r2, #9
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <MX_USART1_UART_Init+0x58>)
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fe71 	bl	80020e8 <HAL_UART_Init>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800040a:	f000 f85f 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000094 	.word	0x20000094
 8000418:	40013800 	.word	0x40013800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	240c      	movs	r4, #12
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2314      	movs	r3, #20
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f004 fe9e 	bl	800516e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b25      	ldr	r3, [pc, #148]	; (80004c8 <MX_GPIO_Init+0xac>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <MX_GPIO_Init+0xac>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	03c9      	lsls	r1, r1, #15
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_GPIO_Init+0xac>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	03db      	lsls	r3, r3, #15
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_GPIO_Init+0xac>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_GPIO_Init+0xac>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0289      	lsls	r1, r1, #10
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_GPIO_Init+0xac>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	029b      	lsls	r3, r3, #10
 8000464:	4013      	ands	r3, r2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	2200      	movs	r2, #0
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fca7 	bl	8000dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2202      	movs	r2, #2
 800047c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2201      	movs	r2, #1
 8000488:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	193a      	adds	r2, r7, r4
 800048c:	2390      	movs	r3, #144	; 0x90
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fb12 	bl	8000abc <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 8000498:	0021      	movs	r1, r4
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2240      	movs	r2, #64	; 0x40
 800049e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2201      	movs	r2, #1
 80004a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2203      	movs	r2, #3
 80004b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 80004b2:	187a      	adds	r2, r7, r1
 80004b4:	2390      	movs	r3, #144	; 0x90
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	0011      	movs	r1, r2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fafe 	bl	8000abc <HAL_GPIO_Init>

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b009      	add	sp, #36	; 0x24
 80004c6:	bd90      	pop	{r4, r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <Error_Handler+0x8>
	...

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_MspInit+0x44>)
 80004e0:	699a      	ldr	r2, [r3, #24]
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_MspInit+0x44>)
 80004e4:	2101      	movs	r1, #1
 80004e6:	430a      	orrs	r2, r1
 80004e8:	619a      	str	r2, [r3, #24]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <HAL_MspInit+0x44>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	2201      	movs	r2, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <HAL_MspInit+0x44>)
 80004f8:	69da      	ldr	r2, [r3, #28]
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_MspInit+0x44>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0549      	lsls	r1, r1, #21
 8000500:	430a      	orrs	r2, r1
 8000502:	61da      	str	r2, [r3, #28]
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_MspInit+0x44>)
 8000506:	69da      	ldr	r2, [r3, #28]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	055b      	lsls	r3, r3, #21
 800050c:	4013      	ands	r3, r2
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	40021000 	.word	0x40021000

08000520 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b08b      	sub	sp, #44	; 0x2c
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	2414      	movs	r4, #20
 800052a:	193b      	adds	r3, r7, r4
 800052c:	0018      	movs	r0, r3
 800052e:	2314      	movs	r3, #20
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f004 fe1b 	bl	800516e <memset>
  if(hspi->Instance==SPI1)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <HAL_SPI_MspInit+0x90>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d132      	bne.n	80005a8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <HAL_SPI_MspInit+0x94>)
 8000544:	699a      	ldr	r2, [r3, #24]
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <HAL_SPI_MspInit+0x94>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0149      	lsls	r1, r1, #5
 800054c:	430a      	orrs	r2, r1
 800054e:	619a      	str	r2, [r3, #24]
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <HAL_SPI_MspInit+0x94>)
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	015b      	lsls	r3, r3, #5
 8000558:	4013      	ands	r3, r2
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_SPI_MspInit+0x94>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_SPI_MspInit+0x94>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0289      	lsls	r1, r1, #10
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_SPI_MspInit+0x94>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	22a0      	movs	r2, #160	; 0xa0
 8000580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2202      	movs	r2, #2
 8000586:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2203      	movs	r2, #3
 8000592:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	187a      	adds	r2, r7, r1
 800059c:	2390      	movs	r3, #144	; 0x90
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fa8a 	bl	8000abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b00b      	add	sp, #44	; 0x2c
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	40013000 	.word	0x40013000
 80005b4:	40021000 	.word	0x40021000

080005b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b08b      	sub	sp, #44	; 0x2c
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	2414      	movs	r4, #20
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	0018      	movs	r0, r3
 80005c6:	2314      	movs	r3, #20
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f004 fdcf 	bl	800516e <memset>
  if(huart->Instance==USART1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <HAL_UART_MspInit+0xa4>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d13b      	bne.n	8000652 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <HAL_UART_MspInit+0xa8>)
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <HAL_UART_MspInit+0xa8>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	01c9      	lsls	r1, r1, #7
 80005e4:	430a      	orrs	r2, r1
 80005e6:	619a      	str	r2, [r3, #24]
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <HAL_UART_MspInit+0xa8>)
 80005ea:	699a      	ldr	r2, [r3, #24]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	01db      	lsls	r3, r3, #7
 80005f0:	4013      	ands	r3, r2
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <HAL_UART_MspInit+0xa8>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <HAL_UART_MspInit+0xa8>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0289      	lsls	r1, r1, #10
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <HAL_UART_MspInit+0xa8>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	029b      	lsls	r3, r3, #10
 800060c:	4013      	ands	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	22c0      	movs	r2, #192	; 0xc0
 8000616:	00d2      	lsls	r2, r2, #3
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2202      	movs	r2, #2
 8000620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2203      	movs	r2, #3
 800062c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	187a      	adds	r2, r7, r1
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fa3d 	bl	8000abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	201b      	movs	r0, #27
 8000648:	f000 f988 	bl	800095c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800064c:	201b      	movs	r0, #27
 800064e:	f000 f99a 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b00b      	add	sp, #44	; 0x2c
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40013800 	.word	0x40013800
 8000660:	40021000 	.word	0x40021000

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 f8a0 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <USART1_IRQHandler+0x14>)
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fd78 	bl	8002190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000094 	.word	0x20000094

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ba:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <LoopForever+0x6>)
    LDR R1, [R0]
 80006be:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006c0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <LoopForever+0xa>)
    CMP R1, R2
 80006c4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006c6:	d105      	bne.n	80006d4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006ca:	4913      	ldr	r1, [pc, #76]	; (8000718 <LoopForever+0x12>)
    STR R1, [R0]
 80006cc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80006d0:	4913      	ldr	r1, [pc, #76]	; (8000720 <LoopForever+0x1a>)
    STR R1, [R0]
 80006d2:	6001      	str	r1, [r0, #0]

080006d4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <LoopForever+0x1e>)
  ldr r1, =_edata
 80006d6:	4914      	ldr	r1, [pc, #80]	; (8000728 <LoopForever+0x22>)
  ldr r2, =_sidata
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <LoopForever+0x26>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80006ec:	4c11      	ldr	r4, [pc, #68]	; (8000734 <LoopForever+0x2e>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006fa:	f7ff ffd7 	bl	80006ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006fe:	f004 fd09 	bl	8005114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fd8d 	bl	8000220 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800070c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000710:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000714:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000718:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800071c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000720:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800072c:	08005238 	.word	0x08005238
  ldr r2, =_sbss
 8000730:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000734:	200001a8 	.word	0x200001a8

08000738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_IRQHandler>
	...

0800073c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <HAL_Init+0x24>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_Init+0x24>)
 8000746:	2110      	movs	r1, #16
 8000748:	430a      	orrs	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 f809 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000752:	f7ff fec1 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_InitTick+0x5c>)
 800076e:	681c      	ldr	r4, [r3, #0]
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_InitTick+0x60>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	0019      	movs	r1, r3
 8000776:	23fa      	movs	r3, #250	; 0xfa
 8000778:	0098      	lsls	r0, r3, #2
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0003      	movs	r3, r0
 8000780:	0019      	movs	r1, r3
 8000782:	0020      	movs	r0, r4
 8000784:	f7ff fcc0 	bl	8000108 <__udivsi3>
 8000788:	0003      	movs	r3, r0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f90b 	bl	80009a6 <HAL_SYSTICK_Config>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e00f      	b.n	80007b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d80b      	bhi.n	80007b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2301      	movs	r3, #1
 80007a2:	425b      	negs	r3, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 f8d8 	bl	800095c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_InitTick+0x64>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b003      	add	sp, #12
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	18d2      	adds	r2, r2, r3
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_IncTick+0x20>)
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000130 	.word	0x20000130

080007f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000130 	.word	0x20000130

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	0002      	movs	r2, r0
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b7f      	cmp	r3, #127	; 0x7f
 8000816:	d809      	bhi.n	800082c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	001a      	movs	r2, r3
 800081e:	231f      	movs	r3, #31
 8000820:	401a      	ands	r2, r3
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_EnableIRQ+0x30>)
 8000824:	2101      	movs	r1, #1
 8000826:	4091      	lsls	r1, r2
 8000828:	000a      	movs	r2, r1
 800082a:	601a      	str	r2, [r3, #0]
  }
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b7f      	cmp	r3, #127	; 0x7f
 800084c:	d828      	bhi.n	80008a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <__NVIC_SetPriority+0xd4>)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25b      	sxtb	r3, r3
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	33c0      	adds	r3, #192	; 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	589b      	ldr	r3, [r3, r2]
 800085e:	1dfa      	adds	r2, r7, #7
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	0011      	movs	r1, r2
 8000864:	2203      	movs	r2, #3
 8000866:	400a      	ands	r2, r1
 8000868:	00d2      	lsls	r2, r2, #3
 800086a:	21ff      	movs	r1, #255	; 0xff
 800086c:	4091      	lsls	r1, r2
 800086e:	000a      	movs	r2, r1
 8000870:	43d2      	mvns	r2, r2
 8000872:	401a      	ands	r2, r3
 8000874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	401a      	ands	r2, r3
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	0018      	movs	r0, r3
 8000884:	2303      	movs	r3, #3
 8000886:	4003      	ands	r3, r0
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	481f      	ldr	r0, [pc, #124]	; (800090c <__NVIC_SetPriority+0xd4>)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b25b      	sxtb	r3, r3
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	430a      	orrs	r2, r1
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800089e:	e031      	b.n	8000904 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <__NVIC_SetPriority+0xd8>)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0019      	movs	r1, r3
 80008a8:	230f      	movs	r3, #15
 80008aa:	400b      	ands	r3, r1
 80008ac:	3b08      	subs	r3, #8
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	3306      	adds	r3, #6
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	3304      	adds	r3, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	2203      	movs	r2, #3
 80008c2:	400a      	ands	r2, r1
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	21ff      	movs	r1, #255	; 0xff
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	22ff      	movs	r2, #255	; 0xff
 80008d8:	401a      	ands	r2, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	2303      	movs	r3, #3
 80008e2:	4003      	ands	r3, r0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <__NVIC_SetPriority+0xd8>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001c      	movs	r4, r3
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	3b08      	subs	r3, #8
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	430a      	orrs	r2, r1
 80008fa:	3306      	adds	r3, #6
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	18c3      	adds	r3, r0, r3
 8000900:	3304      	adds	r3, #4
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b003      	add	sp, #12
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	045b      	lsls	r3, r3, #17
 8000924:	429a      	cmp	r2, r3
 8000926:	d301      	bcc.n	800092c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000928:	2301      	movs	r3, #1
 800092a:	e010      	b.n	800094e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <SysTick_Config+0x44>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	3a01      	subs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	2103      	movs	r1, #3
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff ff7c 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SysTick_Config+0x44>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x44>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	210f      	movs	r1, #15
 8000968:	187b      	adds	r3, r7, r1
 800096a:	1c02      	adds	r2, r0, #0
 800096c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	187b      	adds	r3, r7, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	0002      	movs	r2, r0
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ff33 	bl	8000804 <__NVIC_EnableIRQ>
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ffaf 	bl	8000914 <SysTick_Config>
 80009b6:	0003      	movs	r3, r0
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2221      	movs	r2, #33	; 0x21
 80009cc:	5c9b      	ldrb	r3, [r3, r2]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d008      	beq.n	80009e6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2204      	movs	r2, #4
 80009d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2220      	movs	r2, #32
 80009de:	2100      	movs	r1, #0
 80009e0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e020      	b.n	8000a28 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	210e      	movs	r1, #14
 80009f2:	438a      	bics	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	438a      	bics	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4091      	lsls	r1, r2
 8000a12:	000a      	movs	r2, r1
 8000a14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2221      	movs	r2, #33	; 0x21
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2220      	movs	r2, #32
 8000a22:	2100      	movs	r1, #0
 8000a24:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a38:	210f      	movs	r1, #15
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2221      	movs	r2, #33	; 0x21
 8000a44:	5c9b      	ldrb	r3, [r3, r2]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d006      	beq.n	8000a5a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e028      	b.n	8000aac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	210e      	movs	r1, #14
 8000a66:	438a      	bics	r2, r1
 8000a68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	438a      	bics	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	2101      	movs	r1, #1
 8000a84:	4091      	lsls	r1, r2
 8000a86:	000a      	movs	r2, r1
 8000a88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2221      	movs	r2, #33	; 0x21
 8000a8e:	2101      	movs	r1, #1
 8000a90:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2220      	movs	r2, #32
 8000a96:	2100      	movs	r1, #0
 8000a98:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	4798      	blx	r3
    } 
  }
  return status;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	e149      	b.n	8000d60 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d100      	bne.n	8000ae4 <HAL_GPIO_Init+0x28>
 8000ae2:	e13a      	b.n	8000d5a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d005      	beq.n	8000afc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2203      	movs	r2, #3
 8000af6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d130      	bne.n	8000b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b32:	2201      	movs	r2, #1
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	091b      	lsrs	r3, r3, #4
 8000b48:	2201      	movs	r2, #1
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2203      	movs	r2, #3
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d017      	beq.n	8000b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d123      	bne.n	8000bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	08da      	lsrs	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3208      	adds	r2, #8
 8000bae:	0092      	lsls	r2, r2, #2
 8000bb0:	58d3      	ldr	r3, [r2, r3]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	2207      	movs	r2, #7
 8000bb8:	4013      	ands	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	6939      	ldr	r1, [r7, #16]
 8000bec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	23c0      	movs	r3, #192	; 0xc0
 8000c28:	029b      	lsls	r3, r3, #10
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d100      	bne.n	8000c30 <HAL_GPIO_Init+0x174>
 8000c2e:	e094      	b.n	8000d5a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000c32:	699a      	ldr	r2, [r3, #24]
 8000c34:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	619a      	str	r2, [r3, #24]
 8000c3c:	4b4e      	ldr	r3, [pc, #312]	; (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	2201      	movs	r2, #1
 8000c42:	4013      	ands	r3, r2
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c48:	4a4c      	ldr	r2, [pc, #304]	; (8000d7c <HAL_GPIO_Init+0x2c0>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	589b      	ldr	r3, [r3, r2]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2203      	movs	r2, #3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	2390      	movs	r3, #144	; 0x90
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x1d6>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a41      	ldr	r2, [pc, #260]	; (8000d80 <HAL_GPIO_Init+0x2c4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x1d2>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a40      	ldr	r2, [pc, #256]	; (8000d84 <HAL_GPIO_Init+0x2c8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x1ce>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e004      	b.n	8000c94 <HAL_GPIO_Init+0x1d8>
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_Init+0x1d8>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <HAL_GPIO_Init+0x1d8>
 8000c92:	2300      	movs	r3, #0
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	2103      	movs	r1, #3
 8000c98:	400a      	ands	r2, r1
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca4:	4935      	ldr	r1, [pc, #212]	; (8000d7c <HAL_GPIO_Init+0x2c0>)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	025b      	lsls	r3, r3, #9
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	029b      	lsls	r3, r3, #10
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	035b      	lsls	r3, r3, #13
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	039b      	lsls	r3, r3, #14
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	40da      	lsrs	r2, r3
 8000d68:	1e13      	subs	r3, r2, #0
 8000d6a:	d000      	beq.n	8000d6e <HAL_GPIO_Init+0x2b2>
 8000d6c:	e6ae      	b.n	8000acc <HAL_GPIO_Init+0x10>
  } 
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b006      	add	sp, #24
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	48000800 	.word	0x48000800
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	000a      	movs	r2, r1
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	1cba      	adds	r2, r7, #2
 8000da0:	8812      	ldrh	r2, [r2, #0]
 8000da2:	4013      	ands	r3, r2
 8000da4:	d004      	beq.n	8000db0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000da6:	230f      	movs	r3, #15
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e003      	b.n	8000db8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
  }
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	0008      	movs	r0, r1
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	1cbb      	adds	r3, r7, #2
 8000dd4:	1c02      	adds	r2, r0, #0
 8000dd6:	801a      	strh	r2, [r3, #0]
 8000dd8:	1c7b      	adds	r3, r7, #1
 8000dda:	1c0a      	adds	r2, r1, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dde:	1c7b      	adds	r3, r7, #1
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de6:	1cbb      	adds	r3, r7, #2
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dee:	e003      	b.n	8000df8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000df0:	1cbb      	adds	r3, r7, #2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f000 fb76 	bl	8001500 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d100      	bne.n	8000e20 <HAL_RCC_OscConfig+0x20>
 8000e1e:	e08e      	b.n	8000f3e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e20:	4bc5      	ldr	r3, [pc, #788]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	220c      	movs	r2, #12
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d00e      	beq.n	8000e4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2c:	4bc2      	ldr	r3, [pc, #776]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	220c      	movs	r2, #12
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d117      	bne.n	8000e68 <HAL_RCC_OscConfig+0x68>
 8000e38:	4bbf      	ldr	r3, [pc, #764]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	23c0      	movs	r3, #192	; 0xc0
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	401a      	ands	r2, r3
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	025b      	lsls	r3, r3, #9
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d10e      	bne.n	8000e68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4a:	4bbb      	ldr	r3, [pc, #748]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	d100      	bne.n	8000e58 <HAL_RCC_OscConfig+0x58>
 8000e56:	e071      	b.n	8000f3c <HAL_RCC_OscConfig+0x13c>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d000      	beq.n	8000e62 <HAL_RCC_OscConfig+0x62>
 8000e60:	e06c      	b.n	8000f3c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f000 fb4c 	bl	8001500 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d107      	bne.n	8000e80 <HAL_RCC_OscConfig+0x80>
 8000e70:	4bb1      	ldr	r3, [pc, #708]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4bb0      	ldr	r3, [pc, #704]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	0249      	lsls	r1, r1, #9
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e02f      	b.n	8000ee0 <HAL_RCC_OscConfig+0xe0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10c      	bne.n	8000ea2 <HAL_RCC_OscConfig+0xa2>
 8000e88:	4bab      	ldr	r3, [pc, #684]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4baa      	ldr	r3, [pc, #680]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	49ab      	ldr	r1, [pc, #684]	; (800113c <HAL_RCC_OscConfig+0x33c>)
 8000e90:	400a      	ands	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	4ba8      	ldr	r3, [pc, #672]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4ba7      	ldr	r3, [pc, #668]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	49a9      	ldr	r1, [pc, #676]	; (8001140 <HAL_RCC_OscConfig+0x340>)
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e01e      	b.n	8000ee0 <HAL_RCC_OscConfig+0xe0>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d10e      	bne.n	8000ec8 <HAL_RCC_OscConfig+0xc8>
 8000eaa:	4ba3      	ldr	r3, [pc, #652]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4ba2      	ldr	r3, [pc, #648]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	02c9      	lsls	r1, r1, #11
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	4b9f      	ldr	r3, [pc, #636]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b9e      	ldr	r3, [pc, #632]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0249      	lsls	r1, r1, #9
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0xe0>
 8000ec8:	4b9b      	ldr	r3, [pc, #620]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b9a      	ldr	r3, [pc, #616]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000ece:	499b      	ldr	r1, [pc, #620]	; (800113c <HAL_RCC_OscConfig+0x33c>)
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	4b98      	ldr	r3, [pc, #608]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b97      	ldr	r3, [pc, #604]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000eda:	4999      	ldr	r1, [pc, #612]	; (8001140 <HAL_RCC_OscConfig+0x340>)
 8000edc:	400a      	ands	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d014      	beq.n	8000f12 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc82 	bl	80007f0 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fc7d 	bl	80007f0 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e2fd      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f04:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	029b      	lsls	r3, r3, #10
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0xf2>
 8000f10:	e015      	b.n	8000f3e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fc6d 	bl	80007f0 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc68 	bl	80007f0 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e2e8      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	4b82      	ldr	r3, [pc, #520]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	029b      	lsls	r3, r3, #10
 8000f36:	4013      	ands	r3, r2
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x11c>
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d100      	bne.n	8000f4a <HAL_RCC_OscConfig+0x14a>
 8000f48:	e06c      	b.n	8001024 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f4a:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	220c      	movs	r2, #12
 8000f50:	4013      	ands	r3, r2
 8000f52:	d00e      	beq.n	8000f72 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f54:	4b78      	ldr	r3, [pc, #480]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	220c      	movs	r2, #12
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d11f      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1a0>
 8000f60:	4b75      	ldr	r3, [pc, #468]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	23c0      	movs	r3, #192	; 0xc0
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	401a      	ands	r2, r3
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d116      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	4b71      	ldr	r3, [pc, #452]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2202      	movs	r2, #2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_OscConfig+0x188>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d001      	beq.n	8000f88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e2bb      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	22f8      	movs	r2, #248	; 0xf8
 8000f8e:	4393      	bics	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	00da      	lsls	r2, r3, #3
 8000f98:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9e:	e041      	b.n	8001024 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d024      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa8:	4b63      	ldr	r3, [pc, #396]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b62      	ldr	r3, [pc, #392]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fc1c 	bl	80007f0 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fc17 	bl	80007f0 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e297      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd0:	4b59      	ldr	r3, [pc, #356]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d0f1      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4b57      	ldr	r3, [pc, #348]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	22f8      	movs	r2, #248	; 0xf8
 8000fe0:	4393      	bics	r3, r2
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	00da      	lsls	r2, r3, #3
 8000fea:	4b53      	ldr	r3, [pc, #332]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e018      	b.n	8001024 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff2:	4b51      	ldr	r3, [pc, #324]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b50      	ldr	r3, [pc, #320]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fbf7 	bl	80007f0 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fbf2 	bl	80007f0 <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e272      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	4b47      	ldr	r3, [pc, #284]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d1f1      	bne.n	8001008 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2208      	movs	r2, #8
 800102a:	4013      	ands	r3, r2
 800102c:	d036      	beq.n	800109c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d019      	beq.n	800106a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001036:	4b40      	ldr	r3, [pc, #256]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8001038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800103a:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 800103c:	2101      	movs	r1, #1
 800103e:	430a      	orrs	r2, r1
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fbd5 	bl	80007f0 <HAL_GetTick>
 8001046:	0003      	movs	r3, r0
 8001048:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104c:	f7ff fbd0 	bl	80007f0 <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e250      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	2202      	movs	r2, #2
 8001064:	4013      	ands	r3, r2
 8001066:	d0f1      	beq.n	800104c <HAL_RCC_OscConfig+0x24c>
 8001068:	e018      	b.n	800109c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 800106c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8001070:	2101      	movs	r1, #1
 8001072:	438a      	bics	r2, r1
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fbbb 	bl	80007f0 <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fbb6 	bl	80007f0 <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e236      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d1f1      	bne.n	8001080 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2204      	movs	r2, #4
 80010a2:	4013      	ands	r3, r2
 80010a4:	d100      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2a8>
 80010a6:	e0b5      	b.n	8001214 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a8:	201f      	movs	r0, #31
 80010aa:	183b      	adds	r3, r7, r0
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 80010b2:	69da      	ldr	r2, [r3, #28]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	055b      	lsls	r3, r3, #21
 80010b8:	4013      	ands	r3, r2
 80010ba:	d110      	bne.n	80010de <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	0549      	lsls	r1, r1, #21
 80010c6:	430a      	orrs	r2, r1
 80010c8:	61da      	str	r2, [r3, #28]
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 80010cc:	69da      	ldr	r2, [r3, #28]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	055b      	lsls	r3, r3, #21
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010d8:	183b      	adds	r3, r7, r0
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_RCC_OscConfig+0x344>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4013      	ands	r3, r2
 80010e8:	d11a      	bne.n	8001120 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_RCC_OscConfig+0x344>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_RCC_OscConfig+0x344>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	0049      	lsls	r1, r1, #1
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fb7a 	bl	80007f0 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001102:	f7ff fb75 	bl	80007f0 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1f5      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_RCC_OscConfig+0x344>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d10f      	bne.n	8001148 <HAL_RCC_OscConfig+0x348>
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	4b02      	ldr	r3, [pc, #8]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 800112e:	2101      	movs	r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	621a      	str	r2, [r3, #32]
 8001134:	e036      	b.n	80011a4 <HAL_RCC_OscConfig+0x3a4>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40021000 	.word	0x40021000
 800113c:	fffeffff 	.word	0xfffeffff
 8001140:	fffbffff 	.word	0xfffbffff
 8001144:	40007000 	.word	0x40007000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10c      	bne.n	800116a <HAL_RCC_OscConfig+0x36a>
 8001150:	4bca      	ldr	r3, [pc, #808]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	4bc9      	ldr	r3, [pc, #804]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001156:	2101      	movs	r1, #1
 8001158:	438a      	bics	r2, r1
 800115a:	621a      	str	r2, [r3, #32]
 800115c:	4bc7      	ldr	r3, [pc, #796]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	4bc6      	ldr	r3, [pc, #792]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001162:	2104      	movs	r1, #4
 8001164:	438a      	bics	r2, r1
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	e01c      	b.n	80011a4 <HAL_RCC_OscConfig+0x3a4>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x38c>
 8001172:	4bc2      	ldr	r3, [pc, #776]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001174:	6a1a      	ldr	r2, [r3, #32]
 8001176:	4bc1      	ldr	r3, [pc, #772]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001178:	2104      	movs	r1, #4
 800117a:	430a      	orrs	r2, r1
 800117c:	621a      	str	r2, [r3, #32]
 800117e:	4bbf      	ldr	r3, [pc, #764]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001180:	6a1a      	ldr	r2, [r3, #32]
 8001182:	4bbe      	ldr	r3, [pc, #760]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001184:	2101      	movs	r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	621a      	str	r2, [r3, #32]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0x3a4>
 800118c:	4bbb      	ldr	r3, [pc, #748]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800118e:	6a1a      	ldr	r2, [r3, #32]
 8001190:	4bba      	ldr	r3, [pc, #744]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001192:	2101      	movs	r1, #1
 8001194:	438a      	bics	r2, r1
 8001196:	621a      	str	r2, [r3, #32]
 8001198:	4bb8      	ldr	r3, [pc, #736]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800119a:	6a1a      	ldr	r2, [r3, #32]
 800119c:	4bb7      	ldr	r3, [pc, #732]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800119e:	2104      	movs	r1, #4
 80011a0:	438a      	bics	r2, r1
 80011a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d014      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fb20 	bl	80007f0 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b4:	e009      	b.n	80011ca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff fb1b 	bl	80007f0 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4aaf      	ldr	r2, [pc, #700]	; (8001480 <HAL_RCC_OscConfig+0x680>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e19a      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ca:	4bac      	ldr	r3, [pc, #688]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	2202      	movs	r2, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x3b6>
 80011d4:	e013      	b.n	80011fe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fb0b 	bl	80007f0 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011de:	e009      	b.n	80011f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e0:	f7ff fb06 	bl	80007f0 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4aa5      	ldr	r2, [pc, #660]	; (8001480 <HAL_RCC_OscConfig+0x680>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e185      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	4ba1      	ldr	r3, [pc, #644]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011fe:	231f      	movs	r3, #31
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001208:	4b9c      	ldr	r3, [pc, #624]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	4b9b      	ldr	r3, [pc, #620]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800120e:	499d      	ldr	r1, [pc, #628]	; (8001484 <HAL_RCC_OscConfig+0x684>)
 8001210:	400a      	ands	r2, r1
 8001212:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2210      	movs	r2, #16
 800121a:	4013      	ands	r3, r2
 800121c:	d063      	beq.n	80012e6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d12a      	bne.n	800127c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001226:	4b95      	ldr	r3, [pc, #596]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122a:	4b94      	ldr	r3, [pc, #592]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800122c:	2104      	movs	r1, #4
 800122e:	430a      	orrs	r2, r1
 8001230:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001232:	4b92      	ldr	r3, [pc, #584]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001236:	4b91      	ldr	r3, [pc, #580]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001238:	2101      	movs	r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fad7 	bl	80007f0 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001248:	f7ff fad2 	bl	80007f0 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e152      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	d0f1      	beq.n	8001248 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001264:	4b85      	ldr	r3, [pc, #532]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001268:	22f8      	movs	r2, #248	; 0xf8
 800126a:	4393      	bics	r3, r2
 800126c:	0019      	movs	r1, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	00da      	lsls	r2, r3, #3
 8001274:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001276:	430a      	orrs	r2, r1
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
 800127a:	e034      	b.n	80012e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	3305      	adds	r3, #5
 8001282:	d111      	bne.n	80012a8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001284:	4b7d      	ldr	r3, [pc, #500]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001288:	4b7c      	ldr	r3, [pc, #496]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800128a:	2104      	movs	r1, #4
 800128c:	438a      	bics	r2, r1
 800128e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001290:	4b7a      	ldr	r3, [pc, #488]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001294:	22f8      	movs	r2, #248	; 0xf8
 8001296:	4393      	bics	r3, r2
 8001298:	0019      	movs	r1, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	00da      	lsls	r2, r3, #3
 80012a0:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012a2:	430a      	orrs	r2, r1
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
 80012a6:	e01e      	b.n	80012e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012a8:	4b74      	ldr	r3, [pc, #464]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ac:	4b73      	ldr	r3, [pc, #460]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012ae:	2104      	movs	r1, #4
 80012b0:	430a      	orrs	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012b4:	4b71      	ldr	r3, [pc, #452]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b8:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	438a      	bics	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fa96 	bl	80007f0 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012ca:	f7ff fa91 	bl	80007f0 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e111      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012dc:	4b67      	ldr	r3, [pc, #412]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	2202      	movs	r2, #2
 80012e2:	4013      	ands	r3, r2
 80012e4:	d1f1      	bne.n	80012ca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2220      	movs	r2, #32
 80012ec:	4013      	ands	r3, r2
 80012ee:	d05c      	beq.n	80013aa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012f0:	4b62      	ldr	r3, [pc, #392]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	220c      	movs	r2, #12
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d00e      	beq.n	800131a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012fc:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	220c      	movs	r2, #12
 8001302:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001304:	2b08      	cmp	r3, #8
 8001306:	d114      	bne.n	8001332 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001308:	4b5c      	ldr	r3, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	23c0      	movs	r3, #192	; 0xc0
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	401a      	ands	r2, r3
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	025b      	lsls	r3, r3, #9
 8001316:	429a      	cmp	r2, r3
 8001318:	d10b      	bne.n	8001332 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800131a:	4b58      	ldr	r3, [pc, #352]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800131c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	4013      	ands	r3, r2
 8001324:	d040      	beq.n	80013a8 <HAL_RCC_OscConfig+0x5a8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d03c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0e6      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01b      	beq.n	8001372 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800133a:	4b50      	ldr	r3, [pc, #320]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800133c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133e:	4b4f      	ldr	r3, [pc, #316]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0249      	lsls	r1, r1, #9
 8001344:	430a      	orrs	r2, r1
 8001346:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fa52 	bl	80007f0 <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001352:	f7ff fa4d 	bl	80007f0 <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e0cd      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	4013      	ands	r3, r2
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x552>
 8001370:	e01b      	b.n	80013aa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001372:	4b42      	ldr	r3, [pc, #264]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001378:	4943      	ldr	r1, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x688>)
 800137a:	400a      	ands	r2, r1
 800137c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fa37 	bl	80007f0 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001388:	f7ff fa32 	bl	80007f0 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0b2      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800139c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	025b      	lsls	r3, r3, #9
 80013a2:	4013      	ands	r3, r2
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x588>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013a8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d100      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5b4>
 80013b2:	e0a4      	b.n	80014fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	220c      	movs	r2, #12
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5c2>
 80013c0:	e078      	b.n	80014b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d14c      	bne.n	8001464 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	4b2c      	ldr	r3, [pc, #176]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80013d0:	492e      	ldr	r1, [pc, #184]	; (800148c <HAL_RCC_OscConfig+0x68c>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fa0b 	bl	80007f0 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fa06 	bl	80007f0 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e086      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	049b      	lsls	r3, r3, #18
 80013fa:	4013      	ands	r3, r2
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	220f      	movs	r2, #15
 8001404:	4393      	bics	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800140e:	430a      	orrs	r2, r1
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_RCC_OscConfig+0x690>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	431a      	orrs	r2, r3
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0449      	lsls	r1, r1, #17
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff f9d9 	bl	80007f0 <HAL_GetTick>
 800143e:	0003      	movs	r3, r0
 8001440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f9d4 	bl	80007f0 <HAL_GetTick>
 8001448:	0002      	movs	r2, r0
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e054      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	049b      	lsls	r3, r3, #18
 800145e:	4013      	ands	r3, r2
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x644>
 8001462:	e04c      	b.n	80014fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_RCC_OscConfig+0x67c>)
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <HAL_RCC_OscConfig+0x68c>)
 800146c:	400a      	ands	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff f9be 	bl	80007f0 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x6a6>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	40021000 	.word	0x40021000
 8001480:	00001388 	.word	0x00001388
 8001484:	efffffff 	.word	0xefffffff
 8001488:	fffeffff 	.word	0xfffeffff
 800148c:	feffffff 	.word	0xfeffffff
 8001490:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff f9ac 	bl	80007f0 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e02c      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_RCC_OscConfig+0x708>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	049b      	lsls	r3, r3, #18
 80014ae:	4013      	ands	r3, r2
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x694>
 80014b2:	e024      	b.n	80014fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e01f      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_RCC_OscConfig+0x708>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x708>)
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	23c0      	movs	r3, #192	; 0xc0
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	401a      	ands	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	429a      	cmp	r2, r3
 80014da:	d10e      	bne.n	80014fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	220f      	movs	r2, #15
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	23f0      	movs	r3, #240	; 0xf0
 80014ee:	039b      	lsls	r3, r3, #14
 80014f0:	401a      	ands	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b008      	add	sp, #32
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0bf      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d911      	bls.n	8001552 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4393      	bics	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001540:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d001      	beq.n	8001552 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0a6      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d015      	beq.n	8001588 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2204      	movs	r2, #4
 8001562:	4013      	ands	r3, r2
 8001564:	d006      	beq.n	8001574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 800156c:	21e0      	movs	r1, #224	; 0xe0
 800156e:	00c9      	lsls	r1, r1, #3
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	22f0      	movs	r2, #240	; 0xf0
 800157a:	4393      	bics	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	4013      	ands	r3, r2
 8001590:	d04c      	beq.n	800162c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b44      	ldr	r3, [pc, #272]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d120      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07a      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	049b      	lsls	r3, r3, #18
 80015ba:	4013      	ands	r3, r2
 80015bc:	d114      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e06e      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 80015cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4013      	ands	r3, r2
 80015d4:	d108      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e062      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e05b      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4393      	bics	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015fc:	f7ff f8f8 	bl	80007f0 <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001604:	e009      	b.n	800161a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001606:	f7ff f8f3 	bl	80007f0 <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_RCC_ClockConfig+0x1a4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e042      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	220c      	movs	r2, #12
 8001620:	401a      	ands	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d1ec      	bne.n	8001606 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4013      	ands	r3, r2
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d211      	bcs.n	800165e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	4393      	bics	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_RCC_ClockConfig+0x19c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e020      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2204      	movs	r2, #4
 8001664:	4013      	ands	r3, r2
 8001666:	d009      	beq.n	800167c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_RCC_ClockConfig+0x1a8>)
 800166e:	4013      	ands	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800167c:	f000 f820 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8001680:	0001      	movs	r1, r0
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_RCC_ClockConfig+0x1a0>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	220f      	movs	r2, #15
 800168a:	4013      	ands	r3, r2
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1ac>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	000a      	movs	r2, r1
 8001692:	40da      	lsrs	r2, r3
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1b0>)
 8001696:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff f863 	bl	8000764 <HAL_InitTick>
  
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	00001388 	.word	0x00001388
 80016b4:	fffff8ff 	.word	0xfffff8ff
 80016b8:	080051b8 	.word	0x080051b8
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b08f      	sub	sp, #60	; 0x3c
 80016c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016c6:	2314      	movs	r3, #20
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_RCC_GetSysClockFreq+0xec>)
 80016cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016ce:	c313      	stmia	r3!, {r0, r1, r4}
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80016d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016da:	c313      	stmia	r3!, {r0, r1, r4}
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016f4:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	220c      	movs	r2, #12
 80016fe:	4013      	ands	r3, r2
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d047      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0xd4>
 8001704:	d849      	bhi.n	800179a <HAL_RCC_GetSysClockFreq+0xda>
 8001706:	2b04      	cmp	r3, #4
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x50>
 800170a:	2b08      	cmp	r3, #8
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x56>
 800170e:	e044      	b.n	800179a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001714:	e044      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	220f      	movs	r2, #15
 800171c:	4013      	ands	r3, r2
 800171e:	2214      	movs	r2, #20
 8001720:	18ba      	adds	r2, r7, r2
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	220f      	movs	r2, #15
 800172c:	4013      	ands	r3, r2
 800172e:	1d3a      	adds	r2, r7, #4
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001736:	23c0      	movs	r3, #192	; 0xc0
 8001738:	025b      	lsls	r3, r3, #9
 800173a:	401a      	ands	r2, r3
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	025b      	lsls	r3, r3, #9
 8001740:	429a      	cmp	r2, r3
 8001742:	d109      	bne.n	8001758 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001746:	481c      	ldr	r0, [pc, #112]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001748:	f7fe fcde 	bl	8000108 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	001a      	movs	r2, r3
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	4353      	muls	r3, r2
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
 8001756:	e01a      	b.n	800178e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175a:	23c0      	movs	r3, #192	; 0xc0
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	401a      	ands	r2, r3
 8001760:	23c0      	movs	r3, #192	; 0xc0
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	429a      	cmp	r2, r3
 8001766:	d109      	bne.n	800177c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800176c:	f7fe fccc 	bl	8000108 <__udivsi3>
 8001770:	0003      	movs	r3, r0
 8001772:	001a      	movs	r2, r3
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	4353      	muls	r3, r2
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
 800177a:	e008      	b.n	800178e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800177c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001780:	f7fe fcc2 	bl	8000108 <__udivsi3>
 8001784:	0003      	movs	r3, r0
 8001786:	001a      	movs	r2, r3
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	4353      	muls	r3, r2
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001792:	e005      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001798:	e002      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800179e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b00f      	add	sp, #60	; 0x3c
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	08005198 	.word	0x08005198
 80017b0:	080051a8 	.word	0x080051a8
 80017b4:	40021000 	.word	0x40021000
 80017b8:	007a1200 	.word	0x007a1200
 80017bc:	02dc6c00 	.word	0x02dc6c00

080017c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	20000000 	.word	0x20000000

080017d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017d8:	f7ff fff2 	bl	80017c0 <HAL_RCC_GetHCLKFreq>
 80017dc:	0001      	movs	r1, r0
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	2207      	movs	r2, #7
 80017e6:	4013      	ands	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	40d9      	lsrs	r1, r3
 80017ee:	000b      	movs	r3, r1
}    
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	40021000 	.word	0x40021000
 80017fc:	080051c8 	.word	0x080051c8

08001800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	025b      	lsls	r3, r3, #9
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800181c:	e08e      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2017      	movs	r0, #23
 8001820:	183b      	adds	r3, r7, r0
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001826:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	055b      	lsls	r3, r3, #21
 800182e:	4013      	ands	r3, r2
 8001830:	d110      	bne.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0549      	lsls	r1, r1, #21
 800183c:	430a      	orrs	r2, r1
 800183e:	61da      	str	r2, [r3, #28]
 8001840:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	055b      	lsls	r3, r3, #21
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184e:	183b      	adds	r3, r7, r0
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4013      	ands	r3, r2
 800185e:	d11a      	bne.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0049      	lsls	r1, r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7fe ffbf 	bl	80007f0 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	e008      	b.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001878:	f7fe ffba 	bl	80007f0 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e097      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4013      	ands	r3, r2
 8001894:	d0f0      	beq.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001896:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001898:	6a1a      	ldr	r2, [r3, #32]
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d034      	beq.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	23c0      	movs	r3, #192	; 0xc0
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d02c      	beq.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018b8:	4b42      	ldr	r3, [pc, #264]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a43      	ldr	r2, [pc, #268]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018c2:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0249      	lsls	r1, r1, #9
 80018cc:	430a      	orrs	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018d0:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018d6:	493e      	ldr	r1, [pc, #248]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018d8:	400a      	ands	r2, r1
 80018da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018dc:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7fe ff81 	bl	80007f0 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	e009      	b.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7fe ff7c 	bl	80007f0 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e058      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001922:	430a      	orrs	r2, r1
 8001924:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001926:	2317      	movs	r3, #23
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001936:	4928      	ldr	r1, [pc, #160]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001938:	400a      	ands	r2, r1
 800193a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d009      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	2203      	movs	r2, #3
 800194c:	4393      	bics	r3, r2
 800194e:	0019      	movs	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001956:	430a      	orrs	r2, r1
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2220      	movs	r2, #32
 8001960:	4013      	ands	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	2210      	movs	r2, #16
 800196a:	4393      	bics	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001974:	430a      	orrs	r2, r1
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	029b      	lsls	r3, r3, #10
 8001980:	4013      	ands	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	4393      	bics	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001994:	430a      	orrs	r2, r1
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4013      	ands	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	4393      	bics	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b006      	add	sp, #24
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
 80019cc:	fffffcff 	.word	0xfffffcff
 80019d0:	fffeffff 	.word	0xfffeffff
 80019d4:	00001388 	.word	0x00001388
 80019d8:	efffffff 	.word	0xefffffff

080019dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0a8      	b.n	8001b40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	2382      	movs	r3, #130	; 0x82
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d009      	beq.n	8001a16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
 8001a08:	e005      	b.n	8001a16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	225d      	movs	r2, #93	; 0x5d
 8001a20:	5c9b      	ldrb	r3, [r3, r2]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	225c      	movs	r2, #92	; 0x5c
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7fe fd74 	bl	8000520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	225d      	movs	r2, #93	; 0x5d
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	23e0      	movs	r3, #224	; 0xe0
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d902      	bls.n	8001a62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e002      	b.n	8001a68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	23f0      	movs	r3, #240	; 0xf0
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d008      	beq.n	8001a86 <HAL_SPI_Init+0xaa>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	23e0      	movs	r3, #224	; 0xe0
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d002      	beq.n	8001a86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	2382      	movs	r3, #130	; 0x82
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	2384      	movs	r3, #132	; 0x84
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	400b      	ands	r3, r1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	400b      	ands	r3, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6999      	ldr	r1, [r3, #24]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	400b      	ands	r3, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2138      	movs	r1, #56	; 0x38
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	400b      	ands	r3, r1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	0011      	movs	r1, r2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	2204      	movs	r2, #4
 8001aec:	401a      	ands	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	2110      	movs	r1, #16
 8001af4:	400b      	ands	r3, r1
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	2108      	movs	r1, #8
 8001afe:	400b      	ands	r3, r1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68d9      	ldr	r1, [r3, #12]
 8001b06:	23f0      	movs	r3, #240	; 0xf0
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	0011      	movs	r1, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4907      	ldr	r1, [pc, #28]	; (8001b48 <HAL_SPI_Init+0x16c>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	225d      	movs	r2, #93	; 0x5d
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	fffff7ff 	.word	0xfffff7ff

08001b4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	1dbb      	adds	r3, r7, #6
 8001b5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b5c:	231f      	movs	r3, #31
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	225c      	movs	r2, #92	; 0x5c
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_SPI_Transmit+0x26>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e140      	b.n	8001df4 <HAL_SPI_Transmit+0x2a8>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	225c      	movs	r2, #92	; 0x5c
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b7a:	f7fe fe39 	bl	80007f0 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001b82:	2316      	movs	r3, #22
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	1dba      	adds	r2, r7, #6
 8001b88:	8812      	ldrh	r2, [r2, #0]
 8001b8a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	225d      	movs	r2, #93	; 0x5d
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d004      	beq.n	8001ba2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001b98:	231f      	movs	r3, #31
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ba0:	e11d      	b.n	8001dde <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_SPI_Transmit+0x64>
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d104      	bne.n	8001bba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001bb0:	231f      	movs	r3, #31
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bb8:	e111      	b.n	8001dde <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	225d      	movs	r2, #93	; 0x5d
 8001bbe:	2103      	movs	r1, #3
 8001bc0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1dba      	adds	r2, r7, #6
 8001bd2:	8812      	ldrh	r2, [r2, #0]
 8001bd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1dba      	adds	r2, r7, #6
 8001bda:	8812      	ldrh	r2, [r2, #0]
 8001bdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2244      	movs	r2, #68	; 0x44
 8001be8:	2100      	movs	r1, #0
 8001bea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2246      	movs	r2, #70	; 0x46
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d110      	bne.n	8001c2e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	438a      	bics	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2180      	movs	r1, #128	; 0x80
 8001c28:	01c9      	lsls	r1, r1, #7
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d007      	beq.n	8001c4c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	23e0      	movs	r3, #224	; 0xe0
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d94e      	bls.n	8001cf6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_SPI_Transmit+0x11e>
 8001c60:	2316      	movs	r3, #22
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d13f      	bne.n	8001cea <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	1c9a      	adds	r2, r3, #2
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c8e:	e02c      	b.n	8001cea <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d112      	bne.n	8001cc4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	1c9a      	adds	r2, r3, #2
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cc2:	e012      	b.n	8001cea <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cc4:	f7fe fd94 	bl	80007f0 <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d802      	bhi.n	8001cda <HAL_SPI_Transmit+0x18e>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_SPI_Transmit+0x194>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d104      	bne.n	8001cea <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001ce0:	231f      	movs	r3, #31
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	701a      	strb	r2, [r3, #0]
          goto error;
 8001ce8:	e079      	b.n	8001dde <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1cd      	bne.n	8001c90 <HAL_SPI_Transmit+0x144>
 8001cf4:	e04f      	b.n	8001d96 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <HAL_SPI_Transmit+0x1bc>
 8001cfe:	2316      	movs	r3, #22
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d141      	bne.n	8001d8c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	330c      	adds	r3, #12
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001d2e:	e02d      	b.n	8001d8c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d113      	bne.n	8001d66 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	330c      	adds	r3, #12
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d64:	e012      	b.n	8001d8c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d66:	f7fe fd43 	bl	80007f0 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d802      	bhi.n	8001d7c <HAL_SPI_Transmit+0x230>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	d102      	bne.n	8001d82 <HAL_SPI_Transmit+0x236>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001d82:	231f      	movs	r3, #31
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	2203      	movs	r2, #3
 8001d88:	701a      	strb	r2, [r3, #0]
          goto error;
 8001d8a:	e028      	b.n	8001dde <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1cc      	bne.n	8001d30 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 f95d 	bl	800205c <SPI_EndRxTxTransaction>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d002      	beq.n	8001dac <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001dd2:	231f      	movs	r3, #31
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e000      	b.n	8001dde <HAL_SPI_Transmit+0x292>
  }

error:
 8001ddc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	225d      	movs	r2, #93	; 0x5d
 8001de2:	2101      	movs	r1, #1
 8001de4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	225c      	movs	r2, #92	; 0x5c
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001dee:	231f      	movs	r3, #31
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	781b      	ldrb	r3, [r3, #0]
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b008      	add	sp, #32
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e0c:	f7fe fcf0 	bl	80007f0 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	18d3      	adds	r3, r2, r3
 8001e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e1c:	f7fe fce8 	bl	80007f0 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	015b      	lsls	r3, r3, #5
 8001e2a:	0d1b      	lsrs	r3, r3, #20
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	4353      	muls	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e32:	e058      	b.n	8001ee6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	d055      	beq.n	8001ee6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e3a:	f7fe fcd9 	bl	80007f0 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d902      	bls.n	8001e50 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d142      	bne.n	8001ed6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	21e0      	movs	r1, #224	; 0xe0
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	2382      	movs	r3, #130	; 0x82
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d113      	bne.n	8001e94 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d005      	beq.n	8001e84 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2140      	movs	r1, #64	; 0x40
 8001e90:	438a      	bics	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	019b      	lsls	r3, r3, #6
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d110      	bne.n	8001ec2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	491a      	ldr	r1, [pc, #104]	; (8001f14 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0189      	lsls	r1, r1, #6
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	225d      	movs	r2, #93	; 0x5d
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	225c      	movs	r2, #92	; 0x5c
 8001ece:	2100      	movs	r1, #0
 8001ed0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e017      	b.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	425a      	negs	r2, r3
 8001ef6:	4153      	adcs	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	001a      	movs	r2, r3
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d197      	bne.n	8001e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b008      	add	sp, #32
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	20000000 	.word	0x20000000
 8001f14:	ffffdfff 	.word	0xffffdfff

08001f18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f26:	2317      	movs	r3, #23
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f2e:	f7fe fc5f 	bl	80007f0 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	18d3      	adds	r3, r2, r3
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001f3e:	f7fe fc57 	bl	80007f0 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	0013      	movs	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	00da      	lsls	r2, r3, #3
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	0d1b      	lsrs	r3, r3, #20
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	4353      	muls	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f64:	e068      	b.n	8002038 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10a      	bne.n	8001f86 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	2117      	movs	r1, #23
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	d055      	beq.n	8002038 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f8c:	f7fe fc30 	bl	80007f0 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d902      	bls.n	8001fa2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d142      	bne.n	8002028 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	21e0      	movs	r1, #224	; 0xe0
 8001fae:	438a      	bics	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	2382      	movs	r3, #130	; 0x82
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d113      	bne.n	8001fe6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d005      	beq.n	8001fd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d107      	bne.n	8001fe6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	438a      	bics	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d110      	bne.n	8002014 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4916      	ldr	r1, [pc, #88]	; (8002058 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001ffe:	400a      	ands	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	0189      	lsls	r1, r1, #6
 8002010:	430a      	orrs	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	225d      	movs	r2, #93	; 0x5d
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	225c      	movs	r2, #92	; 0x5c
 8002020:	2100      	movs	r1, #0
 8002022:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e010      	b.n	800204a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	3b01      	subs	r3, #1
 8002036:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d18e      	bne.n	8001f66 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b00a      	add	sp, #40	; 0x28
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	20000000 	.word	0x20000000
 8002058:	ffffdfff 	.word	0xffffdfff

0800205c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	23c0      	movs	r3, #192	; 0xc0
 800206c:	0159      	lsls	r1, r3, #5
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	0013      	movs	r3, r2
 8002076:	2200      	movs	r2, #0
 8002078:	f7ff ff4e 	bl	8001f18 <SPI_WaitFifoStateUntilTimeout>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d007      	beq.n	8002090 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002084:	2220      	movs	r2, #32
 8002086:	431a      	orrs	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e027      	b.n	80020e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	0013      	movs	r3, r2
 800209a:	2200      	movs	r2, #0
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	f7ff fead 	bl	8001dfc <SPI_WaitFlagStateUntilTimeout>
 80020a2:	1e03      	subs	r3, r0, #0
 80020a4:	d007      	beq.n	80020b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	2220      	movs	r2, #32
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e014      	b.n	80020e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	23c0      	movs	r3, #192	; 0xc0
 80020ba:	00d9      	lsls	r1, r3, #3
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	0013      	movs	r3, r2
 80020c4:	2200      	movs	r2, #0
 80020c6:	f7ff ff27 	bl	8001f18 <SPI_WaitFifoStateUntilTimeout>
 80020ca:	1e03      	subs	r3, r0, #0
 80020cc:	d007      	beq.n	80020de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	2220      	movs	r2, #32
 80020d4:	431a      	orrs	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e000      	b.n	80020e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b004      	add	sp, #16
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e044      	b.n	8002184 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2274      	movs	r2, #116	; 0x74
 8002106:	2100      	movs	r1, #0
 8002108:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f7fe fa53 	bl	80005b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2224      	movs	r2, #36	; 0x24
 8002116:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2101      	movs	r1, #1
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fb24 	bl	8002778 <UART_SetConfig>
 8002130:	0003      	movs	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e024      	b.n	8002184 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fc57 	bl	80029f8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	490d      	ldr	r1, [pc, #52]	; (800218c <HAL_UART_Init+0xa4>)
 8002156:	400a      	ands	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	212a      	movs	r1, #42	; 0x2a
 8002166:	438a      	bics	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fcef 	bl	8002b60 <UART_CheckIdleState>
 8002182:	0003      	movs	r3, r0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}
 800218c:	ffffb7ff 	.word	0xffffb7ff

08002190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b0ab      	sub	sp, #172	; 0xac
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	22a4      	movs	r2, #164	; 0xa4
 80021a0:	18b9      	adds	r1, r7, r2
 80021a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	20a0      	movs	r0, #160	; 0xa0
 80021ac:	1839      	adds	r1, r7, r0
 80021ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	219c      	movs	r1, #156	; 0x9c
 80021b8:	1879      	adds	r1, r7, r1
 80021ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80021bc:	0011      	movs	r1, r2
 80021be:	18bb      	adds	r3, r7, r2
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a99      	ldr	r2, [pc, #612]	; (8002428 <HAL_UART_IRQHandler+0x298>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	2298      	movs	r2, #152	; 0x98
 80021c8:	18bc      	adds	r4, r7, r2
 80021ca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80021cc:	18bb      	adds	r3, r7, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d114      	bne.n	80021fe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2220      	movs	r2, #32
 80021da:	4013      	ands	r3, r2
 80021dc:	d00f      	beq.n	80021fe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021de:	183b      	adds	r3, r7, r0
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2220      	movs	r2, #32
 80021e4:	4013      	ands	r3, r2
 80021e6:	d00a      	beq.n	80021fe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d100      	bne.n	80021f2 <HAL_UART_IRQHandler+0x62>
 80021f0:	e296      	b.n	8002720 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	0010      	movs	r0, r2
 80021fa:	4798      	blx	r3
      }
      return;
 80021fc:	e290      	b.n	8002720 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80021fe:	2398      	movs	r3, #152	; 0x98
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d100      	bne.n	800220a <HAL_UART_IRQHandler+0x7a>
 8002208:	e114      	b.n	8002434 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800220a:	239c      	movs	r3, #156	; 0x9c
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d106      	bne.n	8002224 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002216:	23a0      	movs	r3, #160	; 0xa0
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a83      	ldr	r2, [pc, #524]	; (800242c <HAL_UART_IRQHandler+0x29c>)
 800221e:	4013      	ands	r3, r2
 8002220:	d100      	bne.n	8002224 <HAL_UART_IRQHandler+0x94>
 8002222:	e107      	b.n	8002434 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002224:	23a4      	movs	r3, #164	; 0xa4
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d012      	beq.n	8002256 <HAL_UART_IRQHandler+0xc6>
 8002230:	23a0      	movs	r3, #160	; 0xa0
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4013      	ands	r3, r2
 800223c:	d00b      	beq.n	8002256 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2201      	movs	r2, #1
 8002244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	589b      	ldr	r3, [r3, r2]
 800224c:	2201      	movs	r2, #1
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002256:	23a4      	movs	r3, #164	; 0xa4
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2202      	movs	r2, #2
 800225e:	4013      	ands	r3, r2
 8002260:	d011      	beq.n	8002286 <HAL_UART_IRQHandler+0xf6>
 8002262:	239c      	movs	r3, #156	; 0x9c
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d00b      	beq.n	8002286 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2202      	movs	r2, #2
 8002274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	589b      	ldr	r3, [r3, r2]
 800227c:	2204      	movs	r2, #4
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002286:	23a4      	movs	r3, #164	; 0xa4
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2204      	movs	r2, #4
 800228e:	4013      	ands	r3, r2
 8002290:	d011      	beq.n	80022b6 <HAL_UART_IRQHandler+0x126>
 8002292:	239c      	movs	r3, #156	; 0x9c
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	d00b      	beq.n	80022b6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2204      	movs	r2, #4
 80022a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	589b      	ldr	r3, [r3, r2]
 80022ac:	2202      	movs	r2, #2
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022b6:	23a4      	movs	r3, #164	; 0xa4
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2208      	movs	r2, #8
 80022be:	4013      	ands	r3, r2
 80022c0:	d017      	beq.n	80022f2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022c2:	23a0      	movs	r3, #160	; 0xa0
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2220      	movs	r2, #32
 80022ca:	4013      	ands	r3, r2
 80022cc:	d105      	bne.n	80022da <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022ce:	239c      	movs	r3, #156	; 0x9c
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2201      	movs	r2, #1
 80022d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022d8:	d00b      	beq.n	80022f2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2208      	movs	r2, #8
 80022e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	589b      	ldr	r3, [r3, r2]
 80022e8:	2208      	movs	r2, #8
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80022f2:	23a4      	movs	r3, #164	; 0xa4
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	4013      	ands	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_UART_IRQHandler+0x198>
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	04db      	lsls	r3, r3, #19
 800230a:	4013      	ands	r3, r2
 800230c:	d00c      	beq.n	8002328 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	589b      	ldr	r3, [r3, r2]
 800231e:	2220      	movs	r2, #32
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	589b      	ldr	r3, [r3, r2]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <HAL_UART_IRQHandler+0x1a4>
 8002332:	e1f7      	b.n	8002724 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002334:	23a4      	movs	r3, #164	; 0xa4
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2220      	movs	r2, #32
 800233c:	4013      	ands	r3, r2
 800233e:	d00e      	beq.n	800235e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002340:	23a0      	movs	r3, #160	; 0xa0
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2220      	movs	r2, #32
 8002348:	4013      	ands	r3, r2
 800234a:	d008      	beq.n	800235e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	0010      	movs	r0, r2
 800235c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	589b      	ldr	r3, [r3, r2]
 8002364:	2194      	movs	r1, #148	; 0x94
 8002366:	187a      	adds	r2, r7, r1
 8002368:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	4013      	ands	r3, r2
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d004      	beq.n	8002382 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002378:	187b      	adds	r3, r7, r1
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2228      	movs	r2, #40	; 0x28
 800237e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002380:	d047      	beq.n	8002412 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fcf7 	bl	8002d78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	4013      	ands	r3, r2
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d137      	bne.n	8002408 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002398:	f3ef 8310 	mrs	r3, PRIMASK
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800239e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a0:	2090      	movs	r0, #144	; 0x90
 80023a2:	183a      	adds	r2, r7, r0
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	2301      	movs	r3, #1
 80023a8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ac:	f383 8810 	msr	PRIMASK, r3
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2140      	movs	r1, #64	; 0x40
 80023be:	438a      	bics	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ca:	f383 8810 	msr	PRIMASK, r3
}
 80023ce:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d012      	beq.n	80023fe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_UART_IRQHandler+0x2a0>)
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe fb23 	bl	8000a30 <HAL_DMA_Abort_IT>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d01a      	beq.n	8002424 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	0018      	movs	r0, r3
 80023fa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fc:	e012      	b.n	8002424 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f9a5 	bl	8002750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002406:	e00d      	b.n	8002424 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f9a0 	bl	8002750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002410:	e008      	b.n	8002424 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f99b 	bl	8002750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	2100      	movs	r1, #0
 8002420:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002422:	e17f      	b.n	8002724 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	46c0      	nop			; (mov r8, r8)
    return;
 8002426:	e17d      	b.n	8002724 <HAL_UART_IRQHandler+0x594>
 8002428:	0000080f 	.word	0x0000080f
 800242c:	04000120 	.word	0x04000120
 8002430:	08002e3d 	.word	0x08002e3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002438:	2b01      	cmp	r3, #1
 800243a:	d000      	beq.n	800243e <HAL_UART_IRQHandler+0x2ae>
 800243c:	e131      	b.n	80026a2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800243e:	23a4      	movs	r3, #164	; 0xa4
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2210      	movs	r2, #16
 8002446:	4013      	ands	r3, r2
 8002448:	d100      	bne.n	800244c <HAL_UART_IRQHandler+0x2bc>
 800244a:	e12a      	b.n	80026a2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800244c:	23a0      	movs	r3, #160	; 0xa0
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2210      	movs	r2, #16
 8002454:	4013      	ands	r3, r2
 8002456:	d100      	bne.n	800245a <HAL_UART_IRQHandler+0x2ca>
 8002458:	e123      	b.n	80026a2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	4013      	ands	r3, r2
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d000      	beq.n	8002472 <HAL_UART_IRQHandler+0x2e2>
 8002470:	e09b      	b.n	80025aa <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	217e      	movs	r1, #126	; 0x7e
 800247c:	187b      	adds	r3, r7, r1
 800247e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002480:	187b      	adds	r3, r7, r1
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d100      	bne.n	800248a <HAL_UART_IRQHandler+0x2fa>
 8002488:	e14e      	b.n	8002728 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2258      	movs	r2, #88	; 0x58
 800248e:	5a9b      	ldrh	r3, [r3, r2]
 8002490:	187a      	adds	r2, r7, r1
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d300      	bcc.n	800249a <HAL_UART_IRQHandler+0x30a>
 8002498:	e146      	b.n	8002728 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	187a      	adds	r2, r7, r1
 800249e:	215a      	movs	r1, #90	; 0x5a
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d06e      	beq.n	800258c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ae:	f3ef 8310 	mrs	r3, PRIMASK
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80024b8:	2301      	movs	r3, #1
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	f383 8810 	msr	PRIMASK, r3
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	499a      	ldr	r1, [pc, #616]	; (8002738 <HAL_UART_IRQHandler+0x5a8>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	f383 8810 	msr	PRIMASK, r3
}
 80024de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e0:	f3ef 8310 	mrs	r3, PRIMASK
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80024e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e8:	677b      	str	r3, [r7, #116]	; 0x74
 80024ea:	2301      	movs	r3, #1
 80024ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f0:	f383 8810 	msr	PRIMASK, r3
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	438a      	bics	r2, r1
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002508:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250c:	f383 8810 	msr	PRIMASK, r3
}
 8002510:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002512:	f3ef 8310 	mrs	r3, PRIMASK
 8002516:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800251a:	673b      	str	r3, [r7, #112]	; 0x70
 800251c:	2301      	movs	r3, #1
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002522:	f383 8810 	msr	PRIMASK, r3
}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	438a      	bics	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800253a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002550:	f3ef 8310 	mrs	r3, PRIMASK
 8002554:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800255a:	2301      	movs	r3, #1
 800255c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002560:	f383 8810 	msr	PRIMASK, r3
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2110      	movs	r1, #16
 8002572:	438a      	bics	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257c:	f383 8810 	msr	PRIMASK, r3
}
 8002580:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	0018      	movs	r0, r3
 8002588:	f7fe fa1a 	bl	80009c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2258      	movs	r2, #88	; 0x58
 8002590:	5a9a      	ldrh	r2, [r3, r2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	215a      	movs	r1, #90	; 0x5a
 8002596:	5a5b      	ldrh	r3, [r3, r1]
 8002598:	b29b      	uxth	r3, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0011      	movs	r1, r2
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f8dc 	bl	8002760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80025a8:	e0be      	b.n	8002728 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2258      	movs	r2, #88	; 0x58
 80025ae:	5a99      	ldrh	r1, [r3, r2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	225a      	movs	r2, #90	; 0x5a
 80025b4:	5a9b      	ldrh	r3, [r3, r2]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	208e      	movs	r0, #142	; 0x8e
 80025ba:	183b      	adds	r3, r7, r0
 80025bc:	1a8a      	subs	r2, r1, r2
 80025be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	225a      	movs	r2, #90	; 0x5a
 80025c4:	5a9b      	ldrh	r3, [r3, r2]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d100      	bne.n	80025ce <HAL_UART_IRQHandler+0x43e>
 80025cc:	e0ae      	b.n	800272c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80025ce:	183b      	adds	r3, r7, r0
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d100      	bne.n	80025d8 <HAL_UART_IRQHandler+0x448>
 80025d6:	e0a9      	b.n	800272c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d8:	f3ef 8310 	mrs	r3, PRIMASK
 80025dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80025de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e0:	2488      	movs	r4, #136	; 0x88
 80025e2:	193a      	adds	r2, r7, r4
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	2301      	movs	r3, #1
 80025e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	494f      	ldr	r1, [pc, #316]	; (800273c <HAL_UART_IRQHandler+0x5ac>)
 80025fe:	400a      	ands	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	193b      	adds	r3, r7, r4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f383 8810 	msr	PRIMASK, r3
}
 800260e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002610:	f3ef 8310 	mrs	r3, PRIMASK
 8002614:	61bb      	str	r3, [r7, #24]
  return(result);
 8002616:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002618:	2484      	movs	r4, #132	; 0x84
 800261a:	193a      	adds	r2, r7, r4
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f383 8810 	msr	PRIMASK, r3
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	438a      	bics	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	193b      	adds	r3, r7, r4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	f383 8810 	msr	PRIMASK, r3
}
 8002646:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265a:	f3ef 8310 	mrs	r3, PRIMASK
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002662:	2480      	movs	r4, #128	; 0x80
 8002664:	193a      	adds	r2, r7, r4
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	2301      	movs	r3, #1
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	f383 8810 	msr	PRIMASK, r3
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2110      	movs	r1, #16
 8002680:	438a      	bics	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	193b      	adds	r3, r7, r4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	f383 8810 	msr	PRIMASK, r3
}
 8002690:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002692:	183b      	adds	r3, r7, r0
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0011      	movs	r1, r2
 800269a:	0018      	movs	r0, r3
 800269c:	f000 f860 	bl	8002760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026a0:	e044      	b.n	800272c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80026a2:	23a4      	movs	r3, #164	; 0xa4
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	035b      	lsls	r3, r3, #13
 80026ac:	4013      	ands	r3, r2
 80026ae:	d010      	beq.n	80026d2 <HAL_UART_IRQHandler+0x542>
 80026b0:	239c      	movs	r3, #156	; 0x9c
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	03db      	lsls	r3, r3, #15
 80026ba:	4013      	ands	r3, r2
 80026bc:	d009      	beq.n	80026d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	0352      	lsls	r2, r2, #13
 80026c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fbf8 	bl	8002ec0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80026d0:	e02f      	b.n	8002732 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80026d2:	23a4      	movs	r3, #164	; 0xa4
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	4013      	ands	r3, r2
 80026dc:	d00f      	beq.n	80026fe <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80026de:	23a0      	movs	r3, #160	; 0xa0
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	4013      	ands	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01e      	beq.n	8002730 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	0010      	movs	r0, r2
 80026fa:	4798      	blx	r3
    }
    return;
 80026fc:	e018      	b.n	8002730 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80026fe:	23a4      	movs	r3, #164	; 0xa4
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	4013      	ands	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_UART_IRQHandler+0x5a2>
 800270a:	23a0      	movs	r3, #160	; 0xa0
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	4013      	ands	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fba6 	bl	8002e6a <UART_EndTransmit_IT>
    return;
 800271e:	e008      	b.n	8002732 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	e006      	b.n	8002732 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	e004      	b.n	8002732 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	e002      	b.n	8002732 <HAL_UART_IRQHandler+0x5a2>
      return;
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	e000      	b.n	8002732 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002730:	46c0      	nop			; (mov r8, r8)
  }

}
 8002732:	46bd      	mov	sp, r7
 8002734:	b02b      	add	sp, #172	; 0xac
 8002736:	bd90      	pop	{r4, r7, pc}
 8002738:	fffffeff 	.word	0xfffffeff
 800273c:	fffffedf 	.word	0xfffffedf

08002740 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	000a      	movs	r2, r1
 800276a:	1cbb      	adds	r3, r7, #2
 800276c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b002      	add	sp, #8
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002780:	231e      	movs	r3, #30
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a8d      	ldr	r2, [pc, #564]	; (80029dc <UART_SetConfig+0x264>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a88      	ldr	r2, [pc, #544]	; (80029e0 <UART_SetConfig+0x268>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a7f      	ldr	r2, [pc, #508]	; (80029e4 <UART_SetConfig+0x26c>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a7b      	ldr	r2, [pc, #492]	; (80029e8 <UART_SetConfig+0x270>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d127      	bne.n	800284e <UART_SetConfig+0xd6>
 80027fe:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <UART_SetConfig+0x274>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	2b03      	cmp	r3, #3
 8002808:	d00d      	beq.n	8002826 <UART_SetConfig+0xae>
 800280a:	d81b      	bhi.n	8002844 <UART_SetConfig+0xcc>
 800280c:	2b02      	cmp	r3, #2
 800280e:	d014      	beq.n	800283a <UART_SetConfig+0xc2>
 8002810:	d818      	bhi.n	8002844 <UART_SetConfig+0xcc>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <UART_SetConfig+0xa4>
 8002816:	2b01      	cmp	r3, #1
 8002818:	d00a      	beq.n	8002830 <UART_SetConfig+0xb8>
 800281a:	e013      	b.n	8002844 <UART_SetConfig+0xcc>
 800281c:	231f      	movs	r3, #31
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e021      	b.n	800286a <UART_SetConfig+0xf2>
 8002826:	231f      	movs	r3, #31
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e01c      	b.n	800286a <UART_SetConfig+0xf2>
 8002830:	231f      	movs	r3, #31
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	2204      	movs	r2, #4
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e017      	b.n	800286a <UART_SetConfig+0xf2>
 800283a:	231f      	movs	r3, #31
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2208      	movs	r2, #8
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e012      	b.n	800286a <UART_SetConfig+0xf2>
 8002844:	231f      	movs	r3, #31
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2210      	movs	r2, #16
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e00d      	b.n	800286a <UART_SetConfig+0xf2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <UART_SetConfig+0x278>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d104      	bne.n	8002862 <UART_SetConfig+0xea>
 8002858:	231f      	movs	r3, #31
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e003      	b.n	800286a <UART_SetConfig+0xf2>
 8002862:	231f      	movs	r3, #31
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2210      	movs	r2, #16
 8002868:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	429a      	cmp	r2, r3
 8002874:	d15d      	bne.n	8002932 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002876:	231f      	movs	r3, #31
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d015      	beq.n	80028ac <UART_SetConfig+0x134>
 8002880:	dc18      	bgt.n	80028b4 <UART_SetConfig+0x13c>
 8002882:	2b04      	cmp	r3, #4
 8002884:	d00d      	beq.n	80028a2 <UART_SetConfig+0x12a>
 8002886:	dc15      	bgt.n	80028b4 <UART_SetConfig+0x13c>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <UART_SetConfig+0x11a>
 800288c:	2b02      	cmp	r3, #2
 800288e:	d005      	beq.n	800289c <UART_SetConfig+0x124>
 8002890:	e010      	b.n	80028b4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002892:	f7fe ff9f 	bl	80017d4 <HAL_RCC_GetPCLK1Freq>
 8002896:	0003      	movs	r3, r0
 8002898:	61bb      	str	r3, [r7, #24]
        break;
 800289a:	e012      	b.n	80028c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800289c:	4b55      	ldr	r3, [pc, #340]	; (80029f4 <UART_SetConfig+0x27c>)
 800289e:	61bb      	str	r3, [r7, #24]
        break;
 80028a0:	e00f      	b.n	80028c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028a2:	f7fe ff0d 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 80028a6:	0003      	movs	r3, r0
 80028a8:	61bb      	str	r3, [r7, #24]
        break;
 80028aa:	e00a      	b.n	80028c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	61bb      	str	r3, [r7, #24]
        break;
 80028b2:	e006      	b.n	80028c2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028b8:	231e      	movs	r3, #30
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
        break;
 80028c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d100      	bne.n	80028ca <UART_SetConfig+0x152>
 80028c8:	e07b      	b.n	80029c2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	005a      	lsls	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	18d2      	adds	r2, r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	0019      	movs	r1, r3
 80028dc:	0010      	movs	r0, r2
 80028de:	f7fd fc13 	bl	8000108 <__udivsi3>
 80028e2:	0003      	movs	r3, r0
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	d91c      	bls.n	8002928 <UART_SetConfig+0x1b0>
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	025b      	lsls	r3, r3, #9
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d217      	bcs.n	8002928 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	200e      	movs	r0, #14
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	210f      	movs	r1, #15
 8002902:	438a      	bics	r2, r1
 8002904:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	b29b      	uxth	r3, r3
 800290c:	2207      	movs	r2, #7
 800290e:	4013      	ands	r3, r2
 8002910:	b299      	uxth	r1, r3
 8002912:	183b      	adds	r3, r7, r0
 8002914:	183a      	adds	r2, r7, r0
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	183a      	adds	r2, r7, r0
 8002922:	8812      	ldrh	r2, [r2, #0]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	e04c      	b.n	80029c2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002928:	231e      	movs	r3, #30
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e047      	b.n	80029c2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002932:	231f      	movs	r3, #31
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d015      	beq.n	8002968 <UART_SetConfig+0x1f0>
 800293c:	dc18      	bgt.n	8002970 <UART_SetConfig+0x1f8>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d00d      	beq.n	800295e <UART_SetConfig+0x1e6>
 8002942:	dc15      	bgt.n	8002970 <UART_SetConfig+0x1f8>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <UART_SetConfig+0x1d6>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d005      	beq.n	8002958 <UART_SetConfig+0x1e0>
 800294c:	e010      	b.n	8002970 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7fe ff41 	bl	80017d4 <HAL_RCC_GetPCLK1Freq>
 8002952:	0003      	movs	r3, r0
 8002954:	61bb      	str	r3, [r7, #24]
        break;
 8002956:	e012      	b.n	800297e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002958:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <UART_SetConfig+0x27c>)
 800295a:	61bb      	str	r3, [r7, #24]
        break;
 800295c:	e00f      	b.n	800297e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800295e:	f7fe feaf 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8002962:	0003      	movs	r3, r0
 8002964:	61bb      	str	r3, [r7, #24]
        break;
 8002966:	e00a      	b.n	800297e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	61bb      	str	r3, [r7, #24]
        break;
 800296e:	e006      	b.n	800297e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002974:	231e      	movs	r3, #30
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
        break;
 800297c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01e      	beq.n	80029c2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	085a      	lsrs	r2, r3, #1
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	18d2      	adds	r2, r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	0019      	movs	r1, r3
 8002994:	0010      	movs	r0, r2
 8002996:	f7fd fbb7 	bl	8000108 <__udivsi3>
 800299a:	0003      	movs	r3, r0
 800299c:	b29b      	uxth	r3, r3
 800299e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	d909      	bls.n	80029ba <UART_SetConfig+0x242>
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	025b      	lsls	r3, r3, #9
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d204      	bcs.n	80029ba <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	e003      	b.n	80029c2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80029ba:	231e      	movs	r3, #30
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80029ce:	231e      	movs	r3, #30
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b008      	add	sp, #32
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	efff69f3 	.word	0xefff69f3
 80029e0:	ffffcfff 	.word	0xffffcfff
 80029e4:	fffff4ff 	.word	0xfffff4ff
 80029e8:	40013800 	.word	0x40013800
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40004400 	.word	0x40004400
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <UART_AdvFeatureConfig+0x144>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2202      	movs	r2, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <UART_AdvFeatureConfig+0x148>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2204      	movs	r2, #4
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <UART_AdvFeatureConfig+0x14c>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <UART_AdvFeatureConfig+0x150>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <UART_AdvFeatureConfig+0x154>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	2220      	movs	r2, #32
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <UART_AdvFeatureConfig+0x158>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <UART_AdvFeatureConfig+0x15c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	035b      	lsls	r3, r3, #13
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d10b      	bne.n	8002b12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <UART_AdvFeatureConfig+0x160>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <UART_AdvFeatureConfig+0x164>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
  }
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	fffdffff 	.word	0xfffdffff
 8002b40:	fffeffff 	.word	0xfffeffff
 8002b44:	fffbffff 	.word	0xfffbffff
 8002b48:	ffff7fff 	.word	0xffff7fff
 8002b4c:	ffffefff 	.word	0xffffefff
 8002b50:	ffffdfff 	.word	0xffffdfff
 8002b54:	ffefffff 	.word	0xffefffff
 8002b58:	ff9fffff 	.word	0xff9fffff
 8002b5c:	fff7ffff 	.word	0xfff7ffff

08002b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b70:	f7fd fe3e 	bl	80007f0 <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2208      	movs	r2, #8
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d10c      	bne.n	8002ba0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	0391      	lsls	r1, r2, #14
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <UART_CheckIdleState+0x8c>)
 8002b90:	9200      	str	r2, [sp, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f000 f82c 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e021      	b.n	8002be4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d10c      	bne.n	8002bc8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	03d1      	lsls	r1, r2, #15
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <UART_CheckIdleState+0x8c>)
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f000 f818 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d001      	beq.n	8002bc8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e00d      	b.n	8002be4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2274      	movs	r2, #116	; 0x74
 8002bde:	2100      	movs	r1, #0
 8002be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	01ffffff 	.word	0x01ffffff

08002bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b094      	sub	sp, #80	; 0x50
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c00:	e0a3      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c04:	3301      	adds	r3, #1
 8002c06:	d100      	bne.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002c08:	e09f      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fd fdf1 	bl	80007f0 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13d      	bne.n	8002c9c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c20:	f3ef 8310 	mrs	r3, PRIMASK
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c28:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	f383 8810 	msr	PRIMASK, r3
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	494c      	ldr	r1, [pc, #304]	; (8002d74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c52:	f3ef 8310 	mrs	r3, PRIMASK
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	f383 8810 	msr	PRIMASK, r3
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2101      	movs	r1, #1
 8002c74:	438a      	bics	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7e:	f383 8810 	msr	PRIMASK, r3
}
 8002c82:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2274      	movs	r2, #116	; 0x74
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e067      	b.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d050      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d146      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cca:	613b      	str	r3, [r7, #16]
  return(result);
 8002ccc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f383 8810 	msr	PRIMASK, r3
}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4923      	ldr	r1, [pc, #140]	; (8002d74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f383 8810 	msr	PRIMASK, r3
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d02:	2301      	movs	r3, #1
 8002d04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2274      	movs	r2, #116	; 0x74
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e010      	b.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	425a      	negs	r2, r3
 8002d5a:	4153      	adcs	r3, r2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	001a      	movs	r2, r3
 8002d60:	1dfb      	adds	r3, r7, #7
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d100      	bne.n	8002d6a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002d68:	e74b      	b.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b014      	add	sp, #80	; 0x50
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	fffffe5f 	.word	0xfffffe5f

08002d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	617b      	str	r3, [r7, #20]
  return(result);
 8002d86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f383 8810 	msr	PRIMASK, r3
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4925      	ldr	r1, [pc, #148]	; (8002e38 <UART_EndRxTransfer+0xc0>)
 8002da2:	400a      	ands	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db2:	f3ef 8310 	mrs	r3, PRIMASK
 8002db6:	623b      	str	r3, [r7, #32]
  return(result);
 8002db8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f383 8810 	msr	PRIMASK, r3
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	f383 8810 	msr	PRIMASK, r3
}
 8002de2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d118      	bne.n	8002e1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dec:	f3ef 8310 	mrs	r3, PRIMASK
 8002df0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002df2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df6:	2301      	movs	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f383 8810 	msr	PRIMASK, r3
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2110      	movs	r1, #16
 8002e0e:	438a      	bics	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b00e      	add	sp, #56	; 0x38
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	fffffedf 	.word	0xfffffedf

08002e3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	225a      	movs	r2, #90	; 0x5a
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2252      	movs	r2, #82	; 0x52
 8002e56:	2100      	movs	r1, #0
 8002e58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f7ff fc77 	bl	8002750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b004      	add	sp, #16
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e72:	f3ef 8310 	mrs	r3, PRIMASK
 8002e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	438a      	bics	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff fc44 	bl	8002740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b006      	add	sp, #24
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle(SPI_HandleTypeDef hspi1)
{
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed4:	b09d      	sub	sp, #116	; 0x74
 8002ed6:	af18      	add	r7, sp, #96	; 0x60
 8002ed8:	2428      	movs	r4, #40	; 0x28
 8002eda:	193c      	adds	r4, r7, r4
 8002edc:	6020      	str	r0, [r4, #0]
 8002ede:	6061      	str	r1, [r4, #4]
 8002ee0:	60a2      	str	r2, [r4, #8]
 8002ee2:	60e3      	str	r3, [r4, #12]
	for (int i = 0; i < 8; i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e007      	b.n	8002efa <AroundEdgeCube_Handle+0x2a>
	{
		column_around_edge[i] = 0;
 8002eea:	4a3d      	ldr	r2, [pc, #244]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	18d3      	adds	r3, r2, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b07      	cmp	r3, #7
 8002efe:	ddf4      	ble.n	8002eea <AroundEdgeCube_Handle+0x1a>
	}
	layer_around_edge = 0;
 8002f00:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <AroundEdgeCube_Handle+0x114>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 8002f06:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <AroundEdgeCube_Handle+0x118>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <AroundEdgeCube_Handle+0x44>
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d02f      	beq.n	8002f72 <AroundEdgeCube_Handle+0xa2>
				column_around_edge[i] = 0;
			}
			TransmitData(column_around_edge, layer_around_edge, hspi1);
			position_layer = TOP_N_BOTTOM_CUBE;
		default:
			break;
 8002f12:	e05c      	b.n	8002fce <AroundEdgeCube_Handle+0xfe>
			layer_around_edge = 0x81;
 8002f14:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <AroundEdgeCube_Handle+0x114>)
 8002f16:	2281      	movs	r2, #129	; 0x81
 8002f18:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f1c:	22ff      	movs	r2, #255	; 0xff
 8002f1e:	71da      	strb	r2, [r3, #7]
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f22:	79da      	ldrb	r2, [r3, #7]
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f26:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8002f28:	2301      	movs	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	e007      	b.n	8002f3e <AroundEdgeCube_Handle+0x6e>
				column_around_edge[i] = 0x81;
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	2281      	movs	r2, #129	; 0x81
 8002f36:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	ddf4      	ble.n	8002f2e <AroundEdgeCube_Handle+0x5e>
			TransmitData(column_around_edge, layer_around_edge, hspi1);
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <AroundEdgeCube_Handle+0x114>)
 8002f46:	781e      	ldrb	r6, [r3, #0]
 8002f48:	2328      	movs	r3, #40	; 0x28
 8002f4a:	18fc      	adds	r4, r7, r3
 8002f4c:	4d24      	ldr	r5, [pc, #144]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f4e:	466b      	mov	r3, sp
 8002f50:	0018      	movs	r0, r3
 8002f52:	0023      	movs	r3, r4
 8002f54:	3308      	adds	r3, #8
 8002f56:	225c      	movs	r2, #92	; 0x5c
 8002f58:	0019      	movs	r1, r3
 8002f5a:	f002 f8ff 	bl	800515c <memcpy>
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	6863      	ldr	r3, [r4, #4]
 8002f62:	0031      	movs	r1, r6
 8002f64:	0028      	movs	r0, r5
 8002f66:	f002 f891 	bl	800508c <TransmitData>
			position_layer = MIDDLE_CUBE;
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <AroundEdgeCube_Handle+0x118>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
			break;
 8002f70:	e02e      	b.n	8002fd0 <AroundEdgeCube_Handle+0x100>
			layer_around_edge = 0x7e;
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <AroundEdgeCube_Handle+0x114>)
 8002f74:	227e      	movs	r2, #126	; 0x7e
 8002f76:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f7a:	2281      	movs	r2, #129	; 0x81
 8002f7c:	71da      	strb	r2, [r3, #7]
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f80:	79da      	ldrb	r2, [r3, #7]
 8002f82:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f84:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8002f86:	2301      	movs	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	e007      	b.n	8002f9c <AroundEdgeCube_Handle+0xcc>
				column_around_edge[i] = 0;
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	18d3      	adds	r3, r2, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	ddf4      	ble.n	8002f8c <AroundEdgeCube_Handle+0xbc>
			TransmitData(column_around_edge, layer_around_edge, hspi1);
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <AroundEdgeCube_Handle+0x114>)
 8002fa4:	781e      	ldrb	r6, [r3, #0]
 8002fa6:	2328      	movs	r3, #40	; 0x28
 8002fa8:	18fc      	adds	r4, r7, r3
 8002faa:	4d0d      	ldr	r5, [pc, #52]	; (8002fe0 <AroundEdgeCube_Handle+0x110>)
 8002fac:	466b      	mov	r3, sp
 8002fae:	0018      	movs	r0, r3
 8002fb0:	0023      	movs	r3, r4
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	225c      	movs	r2, #92	; 0x5c
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	f002 f8d0 	bl	800515c <memcpy>
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	6863      	ldr	r3, [r4, #4]
 8002fc0:	0031      	movs	r1, r6
 8002fc2:	0028      	movs	r0, r5
 8002fc4:	f002 f862 	bl	800508c <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <AroundEdgeCube_Handle+0x118>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
			break;
 8002fce:	46c0      	nop			; (mov r8, r8)
	}
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b005      	add	sp, #20
 8002fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8002fd8:	bc08      	pop	{r3}
 8002fda:	b004      	add	sp, #16
 8002fdc:	4718      	bx	r3
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	20000138 	.word	0x20000138
 8002fe4:	20000134 	.word	0x20000134
 8002fe8:	20000140 	.word	0x20000140

08002fec <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <AroundEdgeCube_Set_State+0x38>)
 8002ff4:	2205      	movs	r2, #5
 8002ff6:	701a      	strb	r2, [r3, #0]
	layer_around_edge = 0;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <AroundEdgeCube_Set_State+0x3c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	e007      	b.n	8003014 <AroundEdgeCube_Set_State+0x28>
	{
		column_around_edge[i] = 0;
 8003004:	4a09      	ldr	r2, [pc, #36]	; (800302c <AroundEdgeCube_Set_State+0x40>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	18d3      	adds	r3, r2, r3
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3301      	adds	r3, #1
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b07      	cmp	r3, #7
 8003018:	ddf4      	ble.n	8003004 <AroundEdgeCube_Set_State+0x18>
	}
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000010 	.word	0x20000010
 8003028:	20000134 	.word	0x20000134
 800302c:	20000138 	.word	0x20000138

08003030 <Btn_press_short_Callback>:
{

}

__weak void Btn_press_short_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	000a      	movs	r2, r1
 800303a:	1cbb      	adds	r3, r7, #2
 800303c:	801a      	strh	r2, [r3, #0]

}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}

08003046 <Btn_release_Callback>:

__weak void Btn_release_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	000a      	movs	r2, r1
 8003050:	1cbb      	adds	r3, r7, #2
 8003052:	801a      	strh	r2, [r3, #0]

}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <Btn_press_timeout_Callback>:

__weak void Btn_press_timeout_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	000a      	movs	r2, r1
 8003066:	1cbb      	adds	r3, r7, #2
 8003068:	801a      	strh	r2, [r3, #0]

}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}

08003072 <Btn_Handle>:

void Btn_Handle(Btn_Typedef *BtnX)
{
 8003072:	b5b0      	push	{r4, r5, r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
//*****************Loc nhieu******************//
	uint8_t status = HAL_GPIO_ReadPin(BtnX->GPIOx, BtnX->GPIO_Pin);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8a9b      	ldrh	r3, [r3, #20]
 8003082:	250f      	movs	r5, #15
 8003084:	197c      	adds	r4, r7, r5
 8003086:	0019      	movs	r1, r3
 8003088:	0010      	movs	r0, r2
 800308a:	f7fd fe7f 	bl	8000d8c <HAL_GPIO_ReadPin>
 800308e:	0003      	movs	r3, r0
 8003090:	7023      	strb	r3, [r4, #0]
	if (status != BtnX->Btn_filter)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	789b      	ldrb	r3, [r3, #2]
 8003096:	197a      	adds	r2, r7, r5
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d00b      	beq.n	80030b6 <Btn_Handle+0x44>
	{
		BtnX->Btn_filter = status;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	197a      	adds	r2, r7, r5
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	709a      	strb	r2, [r3, #2]
		BtnX->Is_debouncing = 1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	70da      	strb	r2, [r3, #3]
		BtnX->Time_debounce = HAL_GetTick();
 80030ac:	f7fd fba0 	bl	80007f0 <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]
	}

//*****************Xac nhan tin hieu******************//
	if (BtnX->Is_debouncing && (HAL_GetTick()-BtnX->Time_debounce >= 15))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	78db      	ldrb	r3, [r3, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00e      	beq.n	80030dc <Btn_Handle+0x6a>
 80030be:	f7fd fb97 	bl	80007f0 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b0e      	cmp	r3, #14
 80030cc:	d906      	bls.n	80030dc <Btn_Handle+0x6a>
	{
		BtnX->Btn_current = BtnX->Btn_filter;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	789a      	ldrb	r2, [r3, #2]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	701a      	strb	r2, [r3, #0]
		BtnX->Is_debouncing = 0;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	70da      	strb	r2, [r3, #3]
	}

//*****************Nhan nha******************//
	if (BtnX->Btn_current != BtnX->Btn_last)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d035      	beq.n	8003154 <Btn_Handle+0xe2>
	{
		if (BtnX->Btn_current == 0)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d110      	bne.n	8003112 <Btn_Handle+0xa0>
		{
			BtnX->Is_press_timeout = 1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	711a      	strb	r2, [r3, #4]
			Btn_press_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8a9b      	ldrh	r3, [r3, #20]
 80030fe:	0019      	movs	r1, r3
 8003100:	0010      	movs	r0, r2
 8003102:	f001 fc79 	bl	80049f8 <Btn_press_Callback>
			BtnX->Time_start_press = HAL_GetTick();
 8003106:	f7fd fb73 	bl	80007f0 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e01c      	b.n	800314c <Btn_Handle+0xda>
		} else
		{
			if (HAL_GetTick() - BtnX->Time_start_press <= 1000)
 8003112:	f7fd fb6d 	bl	80007f0 <HAL_GetTick>
 8003116:	0002      	movs	r2, r0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	23fa      	movs	r3, #250	; 0xfa
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	429a      	cmp	r2, r3
 8003124:	d807      	bhi.n	8003136 <Btn_Handle+0xc4>
			{
				Btn_press_short_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8a9b      	ldrh	r3, [r3, #20]
 800312e:	0019      	movs	r1, r3
 8003130:	0010      	movs	r0, r2
 8003132:	f7ff ff7d 	bl	8003030 <Btn_press_short_Callback>
			}
			Btn_release_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8a9b      	ldrh	r3, [r3, #20]
 800313e:	0019      	movs	r1, r3
 8003140:	0010      	movs	r0, r2
 8003142:	f7ff ff80 	bl	8003046 <Btn_release_Callback>
			BtnX->Is_press_timeout = 0;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	711a      	strb	r2, [r3, #4]
		}
		BtnX->Btn_last = BtnX->Btn_current;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	705a      	strb	r2, [r3, #1]
	}
	//*****************Nhan giu******************//
	if (BtnX->Is_press_timeout && (HAL_GetTick() - BtnX->Time_start_press >= 2000))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d014      	beq.n	8003186 <Btn_Handle+0x114>
 800315c:	f7fd fb48 	bl	80007f0 <HAL_GetTick>
 8003160:	0002      	movs	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	23fa      	movs	r3, #250	; 0xfa
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	429a      	cmp	r2, r3
 800316e:	d30a      	bcc.n	8003186 <Btn_Handle+0x114>
	{
		Btn_press_timeout_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8a9b      	ldrh	r3, [r3, #20]
 8003178:	0019      	movs	r1, r3
 800317a:	0010      	movs	r0, r2
 800317c:	f7ff ff6e 	bl	800305c <Btn_press_timeout_Callback>
		BtnX->Is_press_timeout = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	711a      	strb	r2, [r3, #4]
	}
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b004      	add	sp, #16
 800318c:	bdb0      	pop	{r4, r5, r7, pc}

0800318e <Btn_Init>:

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	1dbb      	adds	r3, r7, #6
 800319a:	801a      	strh	r2, [r3, #0]
	BtnX->GPIOx = GPIOx;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1dba      	adds	r2, r7, #6
 80031a6:	8812      	ldrh	r2, [r2, #0]
 80031a8:	829a      	strh	r2, [r3, #20]

}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube(SPI_HandleTypeDef hspi1)
{
 80031b2:	b084      	sub	sp, #16
 80031b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b6:	b09d      	sub	sp, #116	; 0x74
 80031b8:	af18      	add	r7, sp, #96	; 0x60
 80031ba:	2428      	movs	r4, #40	; 0x28
 80031bc:	193c      	adds	r4, r7, r4
 80031be:	6020      	str	r0, [r4, #0]
 80031c0:	6061      	str	r1, [r4, #4]
 80031c2:	60a2      	str	r2, [r4, #8]
 80031c4:	60e3      	str	r3, [r4, #12]
	uint8_t column[8], layer;
	layer = 0x00;
 80031c6:	230b      	movs	r3, #11
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e007      	b.n	80031e4 <clearCube+0x32>
	{
		column[i] = 0x00;
 80031d4:	003a      	movs	r2, r7
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	18d3      	adds	r3, r2, r3
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3301      	adds	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	ddf4      	ble.n	80031d4 <clearCube+0x22>
	}
	TransmitData(column, layer, hspi1);
 80031ea:	2328      	movs	r3, #40	; 0x28
 80031ec:	18fc      	adds	r4, r7, r3
 80031ee:	230b      	movs	r3, #11
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781e      	ldrb	r6, [r3, #0]
 80031f4:	003d      	movs	r5, r7
 80031f6:	466b      	mov	r3, sp
 80031f8:	0018      	movs	r0, r3
 80031fa:	0023      	movs	r3, r4
 80031fc:	3308      	adds	r3, #8
 80031fe:	225c      	movs	r2, #92	; 0x5c
 8003200:	0019      	movs	r1, r3
 8003202:	f001 ffab 	bl	800515c <memcpy>
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	6863      	ldr	r3, [r4, #4]
 800320a:	0031      	movs	r1, r6
 800320c:	0028      	movs	r0, r5
 800320e:	f001 ff3d 	bl	800508c <TransmitData>
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b005      	add	sp, #20
 8003218:	bcf0      	pop	{r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	b004      	add	sp, #16
 800321e:	4718      	bx	r3

08003220 <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle(SPI_HandleTypeDef hspi1)
{
 8003220:	b084      	sub	sp, #16
 8003222:	b5b0      	push	{r4, r5, r7, lr}
 8003224:	b096      	sub	sp, #88	; 0x58
 8003226:	af16      	add	r7, sp, #88	; 0x58
 8003228:	2410      	movs	r4, #16
 800322a:	193c      	adds	r4, r7, r4
 800322c:	6020      	str	r0, [r4, #0]
 800322e:	6061      	str	r1, [r4, #4]
 8003230:	60a2      	str	r2, [r4, #8]
 8003232:	60e3      	str	r3, [r4, #12]
	switch (w_number)
 8003234:	4bc2      	ldr	r3, [pc, #776]	; (8003540 <CountDownCube_Handle+0x320>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b09      	cmp	r3, #9
 800323a:	d900      	bls.n	800323e <CountDownCube_Handle+0x1e>
 800323c:	e306      	b.n	800384c <CountDownCube_Handle+0x62c>
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	4bc0      	ldr	r3, [pc, #768]	; (8003544 <CountDownCube_Handle+0x324>)
 8003242:	18d3      	adds	r3, r2, r3
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	469f      	mov	pc, r3
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003248:	f7fd fad2 	bl	80007f0 <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	4bbe      	ldr	r3, [pc, #760]	; (8003548 <CountDownCube_Handle+0x328>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2246      	movs	r2, #70	; 0x46
 8003256:	4293      	cmp	r3, r2
 8003258:	d32f      	bcc.n	80032ba <CountDownCube_Handle+0x9a>
			{
				if (direction == 1 && (i < 8))  i++;
 800325a:	4bbc      	ldr	r3, [pc, #752]	; (800354c <CountDownCube_Handle+0x32c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d108      	bne.n	8003274 <CountDownCube_Handle+0x54>
 8003262:	4bbb      	ldr	r3, [pc, #748]	; (8003550 <CountDownCube_Handle+0x330>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b07      	cmp	r3, #7
 8003268:	dc04      	bgt.n	8003274 <CountDownCube_Handle+0x54>
 800326a:	4bb9      	ldr	r3, [pc, #740]	; (8003550 <CountDownCube_Handle+0x330>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	4bb7      	ldr	r3, [pc, #732]	; (8003550 <CountDownCube_Handle+0x330>)
 8003272:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003274:	4bb6      	ldr	r3, [pc, #728]	; (8003550 <CountDownCube_Handle+0x330>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b07      	cmp	r3, #7
 800327a:	dd02      	ble.n	8003282 <CountDownCube_Handle+0x62>
 800327c:	4bb3      	ldr	r3, [pc, #716]	; (800354c <CountDownCube_Handle+0x32c>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003282:	4bb2      	ldr	r3, [pc, #712]	; (800354c <CountDownCube_Handle+0x32c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <CountDownCube_Handle+0x7c>
 800328a:	4bb1      	ldr	r3, [pc, #708]	; (8003550 <CountDownCube_Handle+0x330>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	dd04      	ble.n	800329c <CountDownCube_Handle+0x7c>
 8003292:	4baf      	ldr	r3, [pc, #700]	; (8003550 <CountDownCube_Handle+0x330>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	1e5a      	subs	r2, r3, #1
 8003298:	4bad      	ldr	r3, [pc, #692]	; (8003550 <CountDownCube_Handle+0x330>)
 800329a:	601a      	str	r2, [r3, #0]
				if (i == 0)
 800329c:	4bac      	ldr	r3, [pc, #688]	; (8003550 <CountDownCube_Handle+0x330>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <CountDownCube_Handle+0x90>
				{
					direction = 1;
 80032a4:	4ba9      	ldr	r3, [pc, #676]	; (800354c <CountDownCube_Handle+0x32c>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 80032aa:	4ba5      	ldr	r3, [pc, #660]	; (8003540 <CountDownCube_Handle+0x320>)
 80032ac:	2208      	movs	r2, #8
 80032ae:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80032b0:	f7fd fa9e 	bl	80007f0 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	4ba4      	ldr	r3, [pc, #656]	; (8003548 <CountDownCube_Handle+0x328>)
 80032b8:	601a      	str	r2, [r3, #0]
			}

			DigitNine(i, hspi1);
 80032ba:	4ba5      	ldr	r3, [pc, #660]	; (8003550 <CountDownCube_Handle+0x330>)
 80032bc:	681d      	ldr	r5, [r3, #0]
 80032be:	2310      	movs	r3, #16
 80032c0:	18fc      	adds	r4, r7, r3
 80032c2:	466b      	mov	r3, sp
 80032c4:	0018      	movs	r0, r3
 80032c6:	0023      	movs	r3, r4
 80032c8:	330c      	adds	r3, #12
 80032ca:	2258      	movs	r2, #88	; 0x58
 80032cc:	0019      	movs	r1, r3
 80032ce:	f001 ff45 	bl	800515c <memcpy>
 80032d2:	6821      	ldr	r1, [r4, #0]
 80032d4:	6862      	ldr	r2, [r4, #4]
 80032d6:	68a3      	ldr	r3, [r4, #8]
 80032d8:	0028      	movs	r0, r5
 80032da:	f000 faef 	bl	80038bc <DigitNine>
		break;
 80032de:	e2b6      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80032e0:	f7fd fa86 	bl	80007f0 <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	4b98      	ldr	r3, [pc, #608]	; (8003548 <CountDownCube_Handle+0x328>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2246      	movs	r2, #70	; 0x46
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d32f      	bcc.n	8003352 <CountDownCube_Handle+0x132>
			{

				if (direction == 1 && (i < 8))  i++;
 80032f2:	4b96      	ldr	r3, [pc, #600]	; (800354c <CountDownCube_Handle+0x32c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <CountDownCube_Handle+0xec>
 80032fa:	4b95      	ldr	r3, [pc, #596]	; (8003550 <CountDownCube_Handle+0x330>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b07      	cmp	r3, #7
 8003300:	dc04      	bgt.n	800330c <CountDownCube_Handle+0xec>
 8003302:	4b93      	ldr	r3, [pc, #588]	; (8003550 <CountDownCube_Handle+0x330>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	4b91      	ldr	r3, [pc, #580]	; (8003550 <CountDownCube_Handle+0x330>)
 800330a:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 800330c:	4b90      	ldr	r3, [pc, #576]	; (8003550 <CountDownCube_Handle+0x330>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b07      	cmp	r3, #7
 8003312:	dd02      	ble.n	800331a <CountDownCube_Handle+0xfa>
 8003314:	4b8d      	ldr	r3, [pc, #564]	; (800354c <CountDownCube_Handle+0x32c>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800331a:	4b8c      	ldr	r3, [pc, #560]	; (800354c <CountDownCube_Handle+0x32c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d108      	bne.n	8003334 <CountDownCube_Handle+0x114>
 8003322:	4b8b      	ldr	r3, [pc, #556]	; (8003550 <CountDownCube_Handle+0x330>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	dd04      	ble.n	8003334 <CountDownCube_Handle+0x114>
 800332a:	4b89      	ldr	r3, [pc, #548]	; (8003550 <CountDownCube_Handle+0x330>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1e5a      	subs	r2, r3, #1
 8003330:	4b87      	ldr	r3, [pc, #540]	; (8003550 <CountDownCube_Handle+0x330>)
 8003332:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003334:	4b86      	ldr	r3, [pc, #536]	; (8003550 <CountDownCube_Handle+0x330>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <CountDownCube_Handle+0x128>
				{
					direction = 1;
 800333c:	4b83      	ldr	r3, [pc, #524]	; (800354c <CountDownCube_Handle+0x32c>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 8003342:	4b7f      	ldr	r3, [pc, #508]	; (8003540 <CountDownCube_Handle+0x320>)
 8003344:	2207      	movs	r2, #7
 8003346:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003348:	f7fd fa52 	bl	80007f0 <HAL_GetTick>
 800334c:	0002      	movs	r2, r0
 800334e:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <CountDownCube_Handle+0x328>)
 8003350:	601a      	str	r2, [r3, #0]
			}

			DigitEight(i, hspi1);
 8003352:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <CountDownCube_Handle+0x330>)
 8003354:	681d      	ldr	r5, [r3, #0]
 8003356:	2310      	movs	r3, #16
 8003358:	18fc      	adds	r4, r7, r3
 800335a:	466b      	mov	r3, sp
 800335c:	0018      	movs	r0, r3
 800335e:	0023      	movs	r3, r4
 8003360:	330c      	adds	r3, #12
 8003362:	2258      	movs	r2, #88	; 0x58
 8003364:	0019      	movs	r1, r3
 8003366:	f001 fef9 	bl	800515c <memcpy>
 800336a:	6821      	ldr	r1, [r4, #0]
 800336c:	6862      	ldr	r2, [r4, #4]
 800336e:	68a3      	ldr	r3, [r4, #8]
 8003370:	0028      	movs	r0, r5
 8003372:	f000 fb3d 	bl	80039f0 <DigitEight>
		break;
 8003376:	e26a      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003378:	f7fd fa3a 	bl	80007f0 <HAL_GetTick>
 800337c:	0002      	movs	r2, r0
 800337e:	4b72      	ldr	r3, [pc, #456]	; (8003548 <CountDownCube_Handle+0x328>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2246      	movs	r2, #70	; 0x46
 8003386:	4293      	cmp	r3, r2
 8003388:	d32f      	bcc.n	80033ea <CountDownCube_Handle+0x1ca>
			{

				if (direction == 1 && (i < 8))  i++;
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <CountDownCube_Handle+0x32c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <CountDownCube_Handle+0x184>
 8003392:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <CountDownCube_Handle+0x330>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b07      	cmp	r3, #7
 8003398:	dc04      	bgt.n	80033a4 <CountDownCube_Handle+0x184>
 800339a:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <CountDownCube_Handle+0x330>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <CountDownCube_Handle+0x330>)
 80033a2:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <CountDownCube_Handle+0x330>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	dd02      	ble.n	80033b2 <CountDownCube_Handle+0x192>
 80033ac:	4b67      	ldr	r3, [pc, #412]	; (800354c <CountDownCube_Handle+0x32c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80033b2:	4b66      	ldr	r3, [pc, #408]	; (800354c <CountDownCube_Handle+0x32c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <CountDownCube_Handle+0x1ac>
 80033ba:	4b65      	ldr	r3, [pc, #404]	; (8003550 <CountDownCube_Handle+0x330>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	dd04      	ble.n	80033cc <CountDownCube_Handle+0x1ac>
 80033c2:	4b63      	ldr	r3, [pc, #396]	; (8003550 <CountDownCube_Handle+0x330>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	4b61      	ldr	r3, [pc, #388]	; (8003550 <CountDownCube_Handle+0x330>)
 80033ca:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80033cc:	4b60      	ldr	r3, [pc, #384]	; (8003550 <CountDownCube_Handle+0x330>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <CountDownCube_Handle+0x1c0>
				{
					direction = 1;
 80033d4:	4b5d      	ldr	r3, [pc, #372]	; (800354c <CountDownCube_Handle+0x32c>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 80033da:	4b59      	ldr	r3, [pc, #356]	; (8003540 <CountDownCube_Handle+0x320>)
 80033dc:	2206      	movs	r2, #6
 80033de:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80033e0:	f7fd fa06 	bl	80007f0 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	4b58      	ldr	r3, [pc, #352]	; (8003548 <CountDownCube_Handle+0x328>)
 80033e8:	601a      	str	r2, [r3, #0]
			}

			DigitSeven(i, hspi1);
 80033ea:	4b59      	ldr	r3, [pc, #356]	; (8003550 <CountDownCube_Handle+0x330>)
 80033ec:	681d      	ldr	r5, [r3, #0]
 80033ee:	2310      	movs	r3, #16
 80033f0:	18fc      	adds	r4, r7, r3
 80033f2:	466b      	mov	r3, sp
 80033f4:	0018      	movs	r0, r3
 80033f6:	0023      	movs	r3, r4
 80033f8:	330c      	adds	r3, #12
 80033fa:	2258      	movs	r2, #88	; 0x58
 80033fc:	0019      	movs	r1, r3
 80033fe:	f001 fead 	bl	800515c <memcpy>
 8003402:	6821      	ldr	r1, [r4, #0]
 8003404:	6862      	ldr	r2, [r4, #4]
 8003406:	68a3      	ldr	r3, [r4, #8]
 8003408:	0028      	movs	r0, r5
 800340a:	f000 fb41 	bl	8003a90 <DigitSeven>

			break;
 800340e:	e21e      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003410:	f7fd f9ee 	bl	80007f0 <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <CountDownCube_Handle+0x328>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2246      	movs	r2, #70	; 0x46
 800341e:	4293      	cmp	r3, r2
 8003420:	d32f      	bcc.n	8003482 <CountDownCube_Handle+0x262>
			{

				if (direction == 1 && (i < 8))  i++;
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <CountDownCube_Handle+0x32c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d108      	bne.n	800343c <CountDownCube_Handle+0x21c>
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <CountDownCube_Handle+0x330>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b07      	cmp	r3, #7
 8003430:	dc04      	bgt.n	800343c <CountDownCube_Handle+0x21c>
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <CountDownCube_Handle+0x330>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	4b45      	ldr	r3, [pc, #276]	; (8003550 <CountDownCube_Handle+0x330>)
 800343a:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <CountDownCube_Handle+0x330>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b07      	cmp	r3, #7
 8003442:	dd02      	ble.n	800344a <CountDownCube_Handle+0x22a>
 8003444:	4b41      	ldr	r3, [pc, #260]	; (800354c <CountDownCube_Handle+0x32c>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800344a:	4b40      	ldr	r3, [pc, #256]	; (800354c <CountDownCube_Handle+0x32c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <CountDownCube_Handle+0x244>
 8003452:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <CountDownCube_Handle+0x330>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	dd04      	ble.n	8003464 <CountDownCube_Handle+0x244>
 800345a:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <CountDownCube_Handle+0x330>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <CountDownCube_Handle+0x330>)
 8003462:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003464:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <CountDownCube_Handle+0x330>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <CountDownCube_Handle+0x258>
				{
					direction = 1;
 800346c:	4b37      	ldr	r3, [pc, #220]	; (800354c <CountDownCube_Handle+0x32c>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <CountDownCube_Handle+0x320>)
 8003474:	2205      	movs	r2, #5
 8003476:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003478:	f7fd f9ba 	bl	80007f0 <HAL_GetTick>
 800347c:	0002      	movs	r2, r0
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <CountDownCube_Handle+0x328>)
 8003480:	601a      	str	r2, [r3, #0]
			}

			DigitSix(i, hspi1);
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <CountDownCube_Handle+0x330>)
 8003484:	681d      	ldr	r5, [r3, #0]
 8003486:	2310      	movs	r3, #16
 8003488:	18fc      	adds	r4, r7, r3
 800348a:	466b      	mov	r3, sp
 800348c:	0018      	movs	r0, r3
 800348e:	0023      	movs	r3, r4
 8003490:	330c      	adds	r3, #12
 8003492:	2258      	movs	r2, #88	; 0x58
 8003494:	0019      	movs	r1, r3
 8003496:	f001 fe61 	bl	800515c <memcpy>
 800349a:	6821      	ldr	r1, [r4, #0]
 800349c:	6862      	ldr	r2, [r4, #4]
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	0028      	movs	r0, r5
 80034a2:	f000 fb51 	bl	8003b48 <DigitSix>

			break;
 80034a6:	e1d2      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80034a8:	f7fd f9a2 	bl	80007f0 <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <CountDownCube_Handle+0x328>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2246      	movs	r2, #70	; 0x46
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d32f      	bcc.n	800351a <CountDownCube_Handle+0x2fa>
			{

				if (direction == 1 && (i < 8))  i++;
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <CountDownCube_Handle+0x32c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d108      	bne.n	80034d4 <CountDownCube_Handle+0x2b4>
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <CountDownCube_Handle+0x330>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b07      	cmp	r3, #7
 80034c8:	dc04      	bgt.n	80034d4 <CountDownCube_Handle+0x2b4>
 80034ca:	4b21      	ldr	r3, [pc, #132]	; (8003550 <CountDownCube_Handle+0x330>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <CountDownCube_Handle+0x330>)
 80034d2:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <CountDownCube_Handle+0x330>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b07      	cmp	r3, #7
 80034da:	dd02      	ble.n	80034e2 <CountDownCube_Handle+0x2c2>
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <CountDownCube_Handle+0x32c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <CountDownCube_Handle+0x32c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <CountDownCube_Handle+0x2dc>
 80034ea:	4b19      	ldr	r3, [pc, #100]	; (8003550 <CountDownCube_Handle+0x330>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dd04      	ble.n	80034fc <CountDownCube_Handle+0x2dc>
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <CountDownCube_Handle+0x330>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <CountDownCube_Handle+0x330>)
 80034fa:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <CountDownCube_Handle+0x330>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <CountDownCube_Handle+0x2f0>
				{
					direction = 1;
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <CountDownCube_Handle+0x32c>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <CountDownCube_Handle+0x320>)
 800350c:	2204      	movs	r2, #4
 800350e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003510:	f7fd f96e 	bl	80007f0 <HAL_GetTick>
 8003514:	0002      	movs	r2, r0
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <CountDownCube_Handle+0x328>)
 8003518:	601a      	str	r2, [r3, #0]
			}

			DigitFive(i, hspi1);
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <CountDownCube_Handle+0x330>)
 800351c:	681d      	ldr	r5, [r3, #0]
 800351e:	2310      	movs	r3, #16
 8003520:	18fc      	adds	r4, r7, r3
 8003522:	466b      	mov	r3, sp
 8003524:	0018      	movs	r0, r3
 8003526:	0023      	movs	r3, r4
 8003528:	330c      	adds	r3, #12
 800352a:	2258      	movs	r2, #88	; 0x58
 800352c:	0019      	movs	r1, r3
 800352e:	f001 fe15 	bl	800515c <memcpy>
 8003532:	6821      	ldr	r1, [r4, #0]
 8003534:	6862      	ldr	r2, [r4, #4]
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	0028      	movs	r0, r5
 800353a:	f000 fbb9 	bl	8003cb0 <DigitFive>
			break;
 800353e:	e186      	b.n	800384e <CountDownCube_Handle+0x62e>
 8003540:	20000009 	.word	0x20000009
 8003544:	080051d0 	.word	0x080051d0
 8003548:	2000014c 	.word	0x2000014c
 800354c:	2000000c 	.word	0x2000000c
 8003550:	20000150 	.word	0x20000150

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003554:	f7fd f94c 	bl	80007f0 <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	4bc0      	ldr	r3, [pc, #768]	; (800385c <CountDownCube_Handle+0x63c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2246      	movs	r2, #70	; 0x46
 8003562:	4293      	cmp	r3, r2
 8003564:	d32f      	bcc.n	80035c6 <CountDownCube_Handle+0x3a6>
			{

				if (direction == 1 && (i < 8))  i++;
 8003566:	4bbe      	ldr	r3, [pc, #760]	; (8003860 <CountDownCube_Handle+0x640>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d108      	bne.n	8003580 <CountDownCube_Handle+0x360>
 800356e:	4bbd      	ldr	r3, [pc, #756]	; (8003864 <CountDownCube_Handle+0x644>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b07      	cmp	r3, #7
 8003574:	dc04      	bgt.n	8003580 <CountDownCube_Handle+0x360>
 8003576:	4bbb      	ldr	r3, [pc, #748]	; (8003864 <CountDownCube_Handle+0x644>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	4bb9      	ldr	r3, [pc, #740]	; (8003864 <CountDownCube_Handle+0x644>)
 800357e:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003580:	4bb8      	ldr	r3, [pc, #736]	; (8003864 <CountDownCube_Handle+0x644>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b07      	cmp	r3, #7
 8003586:	dd02      	ble.n	800358e <CountDownCube_Handle+0x36e>
 8003588:	4bb5      	ldr	r3, [pc, #724]	; (8003860 <CountDownCube_Handle+0x640>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800358e:	4bb4      	ldr	r3, [pc, #720]	; (8003860 <CountDownCube_Handle+0x640>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <CountDownCube_Handle+0x388>
 8003596:	4bb3      	ldr	r3, [pc, #716]	; (8003864 <CountDownCube_Handle+0x644>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	dd04      	ble.n	80035a8 <CountDownCube_Handle+0x388>
 800359e:	4bb1      	ldr	r3, [pc, #708]	; (8003864 <CountDownCube_Handle+0x644>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	4baf      	ldr	r3, [pc, #700]	; (8003864 <CountDownCube_Handle+0x644>)
 80035a6:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80035a8:	4bae      	ldr	r3, [pc, #696]	; (8003864 <CountDownCube_Handle+0x644>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <CountDownCube_Handle+0x39c>
				{
					direction = 1;
 80035b0:	4bab      	ldr	r3, [pc, #684]	; (8003860 <CountDownCube_Handle+0x640>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 80035b6:	4bac      	ldr	r3, [pc, #688]	; (8003868 <CountDownCube_Handle+0x648>)
 80035b8:	2203      	movs	r2, #3
 80035ba:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80035bc:	f7fd f918 	bl	80007f0 <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	4ba6      	ldr	r3, [pc, #664]	; (800385c <CountDownCube_Handle+0x63c>)
 80035c4:	601a      	str	r2, [r3, #0]
			}

			DigitFour(i, hspi1);
 80035c6:	4ba7      	ldr	r3, [pc, #668]	; (8003864 <CountDownCube_Handle+0x644>)
 80035c8:	681d      	ldr	r5, [r3, #0]
 80035ca:	2310      	movs	r3, #16
 80035cc:	18fc      	adds	r4, r7, r3
 80035ce:	466b      	mov	r3, sp
 80035d0:	0018      	movs	r0, r3
 80035d2:	0023      	movs	r3, r4
 80035d4:	330c      	adds	r3, #12
 80035d6:	2258      	movs	r2, #88	; 0x58
 80035d8:	0019      	movs	r1, r3
 80035da:	f001 fdbf 	bl	800515c <memcpy>
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	6862      	ldr	r2, [r4, #4]
 80035e2:	68a3      	ldr	r3, [r4, #8]
 80035e4:	0028      	movs	r0, r5
 80035e6:	f000 fc17 	bl	8003e18 <DigitFour>
			break;
 80035ea:	e130      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80035ec:	f7fd f900 	bl	80007f0 <HAL_GetTick>
 80035f0:	0002      	movs	r2, r0
 80035f2:	4b9a      	ldr	r3, [pc, #616]	; (800385c <CountDownCube_Handle+0x63c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2246      	movs	r2, #70	; 0x46
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d32f      	bcc.n	800365e <CountDownCube_Handle+0x43e>
			{

				if (direction == 1 && (i < 8))  i++;
 80035fe:	4b98      	ldr	r3, [pc, #608]	; (8003860 <CountDownCube_Handle+0x640>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d108      	bne.n	8003618 <CountDownCube_Handle+0x3f8>
 8003606:	4b97      	ldr	r3, [pc, #604]	; (8003864 <CountDownCube_Handle+0x644>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b07      	cmp	r3, #7
 800360c:	dc04      	bgt.n	8003618 <CountDownCube_Handle+0x3f8>
 800360e:	4b95      	ldr	r3, [pc, #596]	; (8003864 <CountDownCube_Handle+0x644>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	4b93      	ldr	r3, [pc, #588]	; (8003864 <CountDownCube_Handle+0x644>)
 8003616:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003618:	4b92      	ldr	r3, [pc, #584]	; (8003864 <CountDownCube_Handle+0x644>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b07      	cmp	r3, #7
 800361e:	dd02      	ble.n	8003626 <CountDownCube_Handle+0x406>
 8003620:	4b8f      	ldr	r3, [pc, #572]	; (8003860 <CountDownCube_Handle+0x640>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003626:	4b8e      	ldr	r3, [pc, #568]	; (8003860 <CountDownCube_Handle+0x640>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <CountDownCube_Handle+0x420>
 800362e:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <CountDownCube_Handle+0x644>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	dd04      	ble.n	8003640 <CountDownCube_Handle+0x420>
 8003636:	4b8b      	ldr	r3, [pc, #556]	; (8003864 <CountDownCube_Handle+0x644>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1e5a      	subs	r2, r3, #1
 800363c:	4b89      	ldr	r3, [pc, #548]	; (8003864 <CountDownCube_Handle+0x644>)
 800363e:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003640:	4b88      	ldr	r3, [pc, #544]	; (8003864 <CountDownCube_Handle+0x644>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <CountDownCube_Handle+0x434>
				{
					direction = 1;
 8003648:	4b85      	ldr	r3, [pc, #532]	; (8003860 <CountDownCube_Handle+0x640>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 800364e:	4b86      	ldr	r3, [pc, #536]	; (8003868 <CountDownCube_Handle+0x648>)
 8003650:	2202      	movs	r2, #2
 8003652:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003654:	f7fd f8cc 	bl	80007f0 <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	4b80      	ldr	r3, [pc, #512]	; (800385c <CountDownCube_Handle+0x63c>)
 800365c:	601a      	str	r2, [r3, #0]
			}

			DigitThree(i, hspi1);
 800365e:	4b81      	ldr	r3, [pc, #516]	; (8003864 <CountDownCube_Handle+0x644>)
 8003660:	681d      	ldr	r5, [r3, #0]
 8003662:	2310      	movs	r3, #16
 8003664:	18fc      	adds	r4, r7, r3
 8003666:	466b      	mov	r3, sp
 8003668:	0018      	movs	r0, r3
 800366a:	0023      	movs	r3, r4
 800366c:	330c      	adds	r3, #12
 800366e:	2258      	movs	r2, #88	; 0x58
 8003670:	0019      	movs	r1, r3
 8003672:	f001 fd73 	bl	800515c <memcpy>
 8003676:	6821      	ldr	r1, [r4, #0]
 8003678:	6862      	ldr	r2, [r4, #4]
 800367a:	68a3      	ldr	r3, [r4, #8]
 800367c:	0028      	movs	r0, r5
 800367e:	f000 fc45 	bl	8003f0c <DigitThree>
			break;
 8003682:	e0e4      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003684:	f7fd f8b4 	bl	80007f0 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	4b74      	ldr	r3, [pc, #464]	; (800385c <CountDownCube_Handle+0x63c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2246      	movs	r2, #70	; 0x46
 8003692:	4293      	cmp	r3, r2
 8003694:	d32f      	bcc.n	80036f6 <CountDownCube_Handle+0x4d6>
			{

				if (direction == 1 && (i < 8))  i++;
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <CountDownCube_Handle+0x640>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <CountDownCube_Handle+0x490>
 800369e:	4b71      	ldr	r3, [pc, #452]	; (8003864 <CountDownCube_Handle+0x644>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b07      	cmp	r3, #7
 80036a4:	dc04      	bgt.n	80036b0 <CountDownCube_Handle+0x490>
 80036a6:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <CountDownCube_Handle+0x644>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	4b6d      	ldr	r3, [pc, #436]	; (8003864 <CountDownCube_Handle+0x644>)
 80036ae:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 80036b0:	4b6c      	ldr	r3, [pc, #432]	; (8003864 <CountDownCube_Handle+0x644>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	dd02      	ble.n	80036be <CountDownCube_Handle+0x49e>
 80036b8:	4b69      	ldr	r3, [pc, #420]	; (8003860 <CountDownCube_Handle+0x640>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80036be:	4b68      	ldr	r3, [pc, #416]	; (8003860 <CountDownCube_Handle+0x640>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <CountDownCube_Handle+0x4b8>
 80036c6:	4b67      	ldr	r3, [pc, #412]	; (8003864 <CountDownCube_Handle+0x644>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	dd04      	ble.n	80036d8 <CountDownCube_Handle+0x4b8>
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <CountDownCube_Handle+0x644>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	1e5a      	subs	r2, r3, #1
 80036d4:	4b63      	ldr	r3, [pc, #396]	; (8003864 <CountDownCube_Handle+0x644>)
 80036d6:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80036d8:	4b62      	ldr	r3, [pc, #392]	; (8003864 <CountDownCube_Handle+0x644>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <CountDownCube_Handle+0x4cc>
				{
					direction = 1;
 80036e0:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <CountDownCube_Handle+0x640>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 80036e6:	4b60      	ldr	r3, [pc, #384]	; (8003868 <CountDownCube_Handle+0x648>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80036ec:	f7fd f880 	bl	80007f0 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	4b5a      	ldr	r3, [pc, #360]	; (800385c <CountDownCube_Handle+0x63c>)
 80036f4:	601a      	str	r2, [r3, #0]
			}

			DigitTwo(i, hspi1);
 80036f6:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <CountDownCube_Handle+0x644>)
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	2310      	movs	r3, #16
 80036fc:	18fc      	adds	r4, r7, r3
 80036fe:	466b      	mov	r3, sp
 8003700:	0018      	movs	r0, r3
 8003702:	0023      	movs	r3, r4
 8003704:	330c      	adds	r3, #12
 8003706:	2258      	movs	r2, #88	; 0x58
 8003708:	0019      	movs	r1, r3
 800370a:	f001 fd27 	bl	800515c <memcpy>
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	6862      	ldr	r2, [r4, #4]
 8003712:	68a3      	ldr	r3, [r4, #8]
 8003714:	0028      	movs	r0, r5
 8003716:	f000 fc7b 	bl	8004010 <DigitTwo>
			break;
 800371a:	e098      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 800371c:	f7fd f868 	bl	80007f0 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	4b4e      	ldr	r3, [pc, #312]	; (800385c <CountDownCube_Handle+0x63c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2246      	movs	r2, #70	; 0x46
 800372a:	4293      	cmp	r3, r2
 800372c:	d32f      	bcc.n	800378e <CountDownCube_Handle+0x56e>
			{

				if (direction == 1 && (i < 8))  i++;
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <CountDownCube_Handle+0x640>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <CountDownCube_Handle+0x528>
 8003736:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <CountDownCube_Handle+0x644>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b07      	cmp	r3, #7
 800373c:	dc04      	bgt.n	8003748 <CountDownCube_Handle+0x528>
 800373e:	4b49      	ldr	r3, [pc, #292]	; (8003864 <CountDownCube_Handle+0x644>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	4b47      	ldr	r3, [pc, #284]	; (8003864 <CountDownCube_Handle+0x644>)
 8003746:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003748:	4b46      	ldr	r3, [pc, #280]	; (8003864 <CountDownCube_Handle+0x644>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b07      	cmp	r3, #7
 800374e:	dd02      	ble.n	8003756 <CountDownCube_Handle+0x536>
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <CountDownCube_Handle+0x640>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003756:	4b42      	ldr	r3, [pc, #264]	; (8003860 <CountDownCube_Handle+0x640>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <CountDownCube_Handle+0x550>
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <CountDownCube_Handle+0x644>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	dd04      	ble.n	8003770 <CountDownCube_Handle+0x550>
 8003766:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <CountDownCube_Handle+0x644>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1e5a      	subs	r2, r3, #1
 800376c:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <CountDownCube_Handle+0x644>)
 800376e:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003770:	4b3c      	ldr	r3, [pc, #240]	; (8003864 <CountDownCube_Handle+0x644>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <CountDownCube_Handle+0x564>
				{
					direction = 1;
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <CountDownCube_Handle+0x640>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 800377e:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <CountDownCube_Handle+0x648>)
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003784:	f7fd f834 	bl	80007f0 <HAL_GetTick>
 8003788:	0002      	movs	r2, r0
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <CountDownCube_Handle+0x63c>)
 800378c:	601a      	str	r2, [r3, #0]
			}

			DigitOne(i, hspi1);
 800378e:	4b35      	ldr	r3, [pc, #212]	; (8003864 <CountDownCube_Handle+0x644>)
 8003790:	681d      	ldr	r5, [r3, #0]
 8003792:	2310      	movs	r3, #16
 8003794:	18fc      	adds	r4, r7, r3
 8003796:	466b      	mov	r3, sp
 8003798:	0018      	movs	r0, r3
 800379a:	0023      	movs	r3, r4
 800379c:	330c      	adds	r3, #12
 800379e:	2258      	movs	r2, #88	; 0x58
 80037a0:	0019      	movs	r1, r3
 80037a2:	f001 fcdb 	bl	800515c <memcpy>
 80037a6:	6821      	ldr	r1, [r4, #0]
 80037a8:	6862      	ldr	r2, [r4, #4]
 80037aa:	68a3      	ldr	r3, [r4, #8]
 80037ac:	0028      	movs	r0, r5
 80037ae:	f000 fcfb 	bl	80041a8 <DigitOne>
			break;
 80037b2:	e04c      	b.n	800384e <CountDownCube_Handle+0x62e>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80037b4:	f7fd f81c 	bl	80007f0 <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	4b28      	ldr	r3, [pc, #160]	; (800385c <CountDownCube_Handle+0x63c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2246      	movs	r2, #70	; 0x46
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d32f      	bcc.n	8003826 <CountDownCube_Handle+0x606>
			{

				if (direction == 1 && (i < 8))  i++;
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <CountDownCube_Handle+0x640>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d108      	bne.n	80037e0 <CountDownCube_Handle+0x5c0>
 80037ce:	4b25      	ldr	r3, [pc, #148]	; (8003864 <CountDownCube_Handle+0x644>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b07      	cmp	r3, #7
 80037d4:	dc04      	bgt.n	80037e0 <CountDownCube_Handle+0x5c0>
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <CountDownCube_Handle+0x644>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <CountDownCube_Handle+0x644>)
 80037de:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 80037e0:	4b20      	ldr	r3, [pc, #128]	; (8003864 <CountDownCube_Handle+0x644>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	dd02      	ble.n	80037ee <CountDownCube_Handle+0x5ce>
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <CountDownCube_Handle+0x640>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80037ee:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <CountDownCube_Handle+0x640>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <CountDownCube_Handle+0x5e8>
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <CountDownCube_Handle+0x644>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	dd04      	ble.n	8003808 <CountDownCube_Handle+0x5e8>
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <CountDownCube_Handle+0x644>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1e5a      	subs	r2, r3, #1
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <CountDownCube_Handle+0x644>)
 8003806:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <CountDownCube_Handle+0x644>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <CountDownCube_Handle+0x5fc>
				{
					direction = 1;
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <CountDownCube_Handle+0x640>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <CountDownCube_Handle+0x648>)
 8003818:	2209      	movs	r2, #9
 800381a:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800381c:	f7fc ffe8 	bl	80007f0 <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <CountDownCube_Handle+0x63c>)
 8003824:	601a      	str	r2, [r3, #0]
			}

			DigitZero(i, hspi1);
 8003826:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <CountDownCube_Handle+0x644>)
 8003828:	681d      	ldr	r5, [r3, #0]
 800382a:	2310      	movs	r3, #16
 800382c:	18fc      	adds	r4, r7, r3
 800382e:	466b      	mov	r3, sp
 8003830:	0018      	movs	r0, r3
 8003832:	0023      	movs	r3, r4
 8003834:	330c      	adds	r3, #12
 8003836:	2258      	movs	r2, #88	; 0x58
 8003838:	0019      	movs	r1, r3
 800383a:	f001 fc8f 	bl	800515c <memcpy>
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	6862      	ldr	r2, [r4, #4]
 8003842:	68a3      	ldr	r3, [r4, #8]
 8003844:	0028      	movs	r0, r5
 8003846:	f000 fd63 	bl	8004310 <DigitZero>
			break;
 800384a:	e000      	b.n	800384e <CountDownCube_Handle+0x62e>

		default:
			break;
 800384c:	46c0      	nop			; (mov r8, r8)
	}
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bcb0      	pop	{r4, r5, r7}
 8003854:	bc08      	pop	{r3}
 8003856:	b004      	add	sp, #16
 8003858:	4718      	bx	r3
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	2000014c 	.word	0x2000014c
 8003860:	2000000c 	.word	0x2000000c
 8003864:	20000150 	.word	0x20000150
 8003868:	20000009 	.word	0x20000009

0800386c <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <CountDownCube_Set_Sate+0x40>)
 8003874:	2206      	movs	r2, #6
 8003876:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <CountDownCube_Set_Sate+0x44>)
 800387a:	2209      	movs	r2, #9
 800387c:	701a      	strb	r2, [r3, #0]
	direction = 1;
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <CountDownCube_Set_Sate+0x48>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003884:	2300      	movs	r3, #0
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	e007      	b.n	800389a <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 800388a:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <CountDownCube_Set_Sate+0x4c>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3301      	adds	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b07      	cmp	r3, #7
 800389e:	ddf4      	ble.n	800388a <CountDownCube_Set_Sate+0x1e>
	}
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b002      	add	sp, #8
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	20000010 	.word	0x20000010
 80038b0:	20000009 	.word	0x20000009
 80038b4:	2000000c 	.word	0x2000000c
 80038b8:	20000144 	.word	0x20000144

080038bc <DigitNine>:

void DigitNine(int i,SPI_HandleTypeDef hspi1)
{
 80038bc:	b084      	sub	sp, #16
 80038be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c0:	b09b      	sub	sp, #108	; 0x6c
 80038c2:	af18      	add	r7, sp, #96	; 0x60
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	2004      	movs	r0, #4
 80038c8:	2618      	movs	r6, #24
 80038ca:	1980      	adds	r0, r0, r6
 80038cc:	2408      	movs	r4, #8
 80038ce:	46a4      	mov	ip, r4
 80038d0:	44bc      	add	ip, r7
 80038d2:	4460      	add	r0, ip
 80038d4:	6001      	str	r1, [r0, #0]
 80038d6:	6042      	str	r2, [r0, #4]
 80038d8:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x7e;
 80038da:	4a44      	ldr	r2, [pc, #272]	; (80039ec <DigitNine+0x130>)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	18d3      	adds	r3, r2, r3
 80038e0:	227e      	movs	r2, #126	; 0x7e
 80038e2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81, hspi1);
 80038e4:	2304      	movs	r3, #4
 80038e6:	199b      	adds	r3, r3, r6
 80038e8:	2208      	movs	r2, #8
 80038ea:	18b9      	adds	r1, r7, r2
 80038ec:	185c      	adds	r4, r3, r1
 80038ee:	4d3f      	ldr	r5, [pc, #252]	; (80039ec <DigitNine+0x130>)
 80038f0:	466b      	mov	r3, sp
 80038f2:	0018      	movs	r0, r3
 80038f4:	0023      	movs	r3, r4
 80038f6:	3308      	adds	r3, #8
 80038f8:	225c      	movs	r2, #92	; 0x5c
 80038fa:	0019      	movs	r1, r3
 80038fc:	f001 fc2e 	bl	800515c <memcpy>
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	2181      	movs	r1, #129	; 0x81
 8003906:	0028      	movs	r0, r5
 8003908:	f001 fbc0 	bl	800508c <TransmitData>

	column_countdown[i] = 0xc3;
 800390c:	4a37      	ldr	r2, [pc, #220]	; (80039ec <DigitNine+0x130>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	22c3      	movs	r2, #195	; 0xc3
 8003914:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60, hspi1);
 8003916:	2304      	movs	r3, #4
 8003918:	199b      	adds	r3, r3, r6
 800391a:	2208      	movs	r2, #8
 800391c:	18b9      	adds	r1, r7, r2
 800391e:	185c      	adds	r4, r3, r1
 8003920:	4d32      	ldr	r5, [pc, #200]	; (80039ec <DigitNine+0x130>)
 8003922:	466b      	mov	r3, sp
 8003924:	0018      	movs	r0, r3
 8003926:	0023      	movs	r3, r4
 8003928:	3308      	adds	r3, #8
 800392a:	225c      	movs	r2, #92	; 0x5c
 800392c:	0019      	movs	r1, r3
 800392e:	f001 fc15 	bl	800515c <memcpy>
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	2160      	movs	r1, #96	; 0x60
 8003938:	0028      	movs	r0, r5
 800393a:	f001 fba7 	bl	800508c <TransmitData>

	column_countdown[i] = 0x03;
 800393e:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <DigitNine+0x130>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	18d3      	adds	r3, r2, r3
 8003944:	2203      	movs	r2, #3
 8003946:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c, hspi1);
 8003948:	2304      	movs	r3, #4
 800394a:	199b      	adds	r3, r3, r6
 800394c:	2208      	movs	r2, #8
 800394e:	18b9      	adds	r1, r7, r2
 8003950:	185c      	adds	r4, r3, r1
 8003952:	4d26      	ldr	r5, [pc, #152]	; (80039ec <DigitNine+0x130>)
 8003954:	466b      	mov	r3, sp
 8003956:	0018      	movs	r0, r3
 8003958:	0023      	movs	r3, r4
 800395a:	3308      	adds	r3, #8
 800395c:	225c      	movs	r2, #92	; 0x5c
 800395e:	0019      	movs	r1, r3
 8003960:	f001 fbfc 	bl	800515c <memcpy>
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	210c      	movs	r1, #12
 800396a:	0028      	movs	r0, r5
 800396c:	f001 fb8e 	bl	800508c <TransmitData>

	column_countdown[i] = 0xff;
 8003970:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <DigitNine+0x130>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	18d3      	adds	r3, r2, r3
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02, hspi1);
 800397a:	2304      	movs	r3, #4
 800397c:	199b      	adds	r3, r3, r6
 800397e:	2208      	movs	r2, #8
 8003980:	18b9      	adds	r1, r7, r2
 8003982:	185c      	adds	r4, r3, r1
 8003984:	4d19      	ldr	r5, [pc, #100]	; (80039ec <DigitNine+0x130>)
 8003986:	466b      	mov	r3, sp
 8003988:	0018      	movs	r0, r3
 800398a:	0023      	movs	r3, r4
 800398c:	3308      	adds	r3, #8
 800398e:	225c      	movs	r2, #92	; 0x5c
 8003990:	0019      	movs	r1, r3
 8003992:	f001 fbe3 	bl	800515c <memcpy>
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	6863      	ldr	r3, [r4, #4]
 800399a:	2102      	movs	r1, #2
 800399c:	0028      	movs	r0, r5
 800399e:	f001 fb75 	bl	800508c <TransmitData>

	column_countdown[i] = 0x7f;
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <DigitNine+0x130>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	18d3      	adds	r3, r2, r3
 80039a8:	227f      	movs	r2, #127	; 0x7f
 80039aa:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 80039ac:	2304      	movs	r3, #4
 80039ae:	199b      	adds	r3, r3, r6
 80039b0:	2208      	movs	r2, #8
 80039b2:	18ba      	adds	r2, r7, r2
 80039b4:	189c      	adds	r4, r3, r2
 80039b6:	4d0d      	ldr	r5, [pc, #52]	; (80039ec <DigitNine+0x130>)
 80039b8:	466b      	mov	r3, sp
 80039ba:	0018      	movs	r0, r3
 80039bc:	0023      	movs	r3, r4
 80039be:	3308      	adds	r3, #8
 80039c0:	225c      	movs	r2, #92	; 0x5c
 80039c2:	0019      	movs	r1, r3
 80039c4:	f001 fbca 	bl	800515c <memcpy>
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	2110      	movs	r1, #16
 80039ce:	0028      	movs	r0, r5
 80039d0:	f001 fb5c 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 80039d4:	4a05      	ldr	r2, [pc, #20]	; (80039ec <DigitNine+0x130>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	18d3      	adds	r3, r2, r3
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b003      	add	sp, #12
 80039e4:	bcf0      	pop	{r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	b004      	add	sp, #16
 80039ea:	4718      	bx	r3
 80039ec:	20000144 	.word	0x20000144

080039f0 <DigitEight>:

void DigitEight(int i,SPI_HandleTypeDef hspi1)
{
 80039f0:	b084      	sub	sp, #16
 80039f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f4:	b09b      	sub	sp, #108	; 0x6c
 80039f6:	af18      	add	r7, sp, #96	; 0x60
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	2004      	movs	r0, #4
 80039fc:	2618      	movs	r6, #24
 80039fe:	1980      	adds	r0, r0, r6
 8003a00:	2408      	movs	r4, #8
 8003a02:	46a4      	mov	ip, r4
 8003a04:	44bc      	add	ip, r7
 8003a06:	4460      	add	r0, ip
 8003a08:	6001      	str	r1, [r0, #0]
 8003a0a:	6042      	str	r2, [r0, #4]
 8003a0c:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xc3;
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <DigitEight+0x9c>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	18d3      	adds	r3, r2, r3
 8003a14:	22c3      	movs	r2, #195	; 0xc3
 8003a16:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66, hspi1);
 8003a18:	2304      	movs	r3, #4
 8003a1a:	199b      	adds	r3, r3, r6
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	18b9      	adds	r1, r7, r2
 8003a20:	185c      	adds	r4, r3, r1
 8003a22:	4d1a      	ldr	r5, [pc, #104]	; (8003a8c <DigitEight+0x9c>)
 8003a24:	466b      	mov	r3, sp
 8003a26:	0018      	movs	r0, r3
 8003a28:	0023      	movs	r3, r4
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	225c      	movs	r2, #92	; 0x5c
 8003a2e:	0019      	movs	r1, r3
 8003a30:	f001 fb94 	bl	800515c <memcpy>
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	2166      	movs	r1, #102	; 0x66
 8003a3a:	0028      	movs	r0, r5
 8003a3c:	f001 fb26 	bl	800508c <TransmitData>

	column_countdown[i] = 0x7e;
 8003a40:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <DigitEight+0x9c>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	18d3      	adds	r3, r2, r3
 8003a46:	227e      	movs	r2, #126	; 0x7e
 8003a48:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99, hspi1);
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	199b      	adds	r3, r3, r6
 8003a4e:	2208      	movs	r2, #8
 8003a50:	18ba      	adds	r2, r7, r2
 8003a52:	189c      	adds	r4, r3, r2
 8003a54:	4d0d      	ldr	r5, [pc, #52]	; (8003a8c <DigitEight+0x9c>)
 8003a56:	466b      	mov	r3, sp
 8003a58:	0018      	movs	r0, r3
 8003a5a:	0023      	movs	r3, r4
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	225c      	movs	r2, #92	; 0x5c
 8003a60:	0019      	movs	r1, r3
 8003a62:	f001 fb7b 	bl	800515c <memcpy>
 8003a66:	6822      	ldr	r2, [r4, #0]
 8003a68:	6863      	ldr	r3, [r4, #4]
 8003a6a:	2199      	movs	r1, #153	; 0x99
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	f001 fb0d 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 8003a72:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <DigitEight+0x9c>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	18d3      	adds	r3, r2, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b003      	add	sp, #12
 8003a82:	bcf0      	pop	{r4, r5, r6, r7}
 8003a84:	bc08      	pop	{r3}
 8003a86:	b004      	add	sp, #16
 8003a88:	4718      	bx	r3
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	20000144 	.word	0x20000144

08003a90 <DigitSeven>:

void DigitSeven(int i,SPI_HandleTypeDef hspi1)
{
 8003a90:	b084      	sub	sp, #16
 8003a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a94:	b09d      	sub	sp, #116	; 0x74
 8003a96:	af18      	add	r7, sp, #96	; 0x60
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	2004      	movs	r0, #4
 8003a9c:	2428      	movs	r4, #40	; 0x28
 8003a9e:	1900      	adds	r0, r0, r4
 8003aa0:	19c0      	adds	r0, r0, r7
 8003aa2:	6001      	str	r1, [r0, #0]
 8003aa4:	6042      	str	r2, [r0, #4]
 8003aa6:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xff;
 8003aa8:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <DigitSeven+0xb4>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	18d3      	adds	r3, r2, r3
 8003aae:	22ff      	movs	r2, #255	; 0xff
 8003ab0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0, hspi1);
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	191b      	adds	r3, r3, r4
 8003ab6:	19dc      	adds	r4, r3, r7
 8003ab8:	4d22      	ldr	r5, [pc, #136]	; (8003b44 <DigitSeven+0xb4>)
 8003aba:	466b      	mov	r3, sp
 8003abc:	0018      	movs	r0, r3
 8003abe:	0023      	movs	r3, r4
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	225c      	movs	r2, #92	; 0x5c
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	f001 fb49 	bl	800515c <memcpy>
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	6863      	ldr	r3, [r4, #4]
 8003ace:	21c0      	movs	r1, #192	; 0xc0
 8003ad0:	0028      	movs	r0, r5
 8003ad2:	f001 fadb 	bl	800508c <TransmitData>

	for (int j = 0; j < 6; j++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e024      	b.n	8003b26 <DigitSeven+0x96>
	{
		column_countdown[i] = 0x03 << j;
 8003adc:	2203      	movs	r2, #3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	0013      	movs	r3, r2
 8003ae4:	b2d9      	uxtb	r1, r3
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <DigitSeven+0xb4>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	1c0a      	adds	r2, r1, #0
 8003aee:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j, hspi1);
 8003af0:	2220      	movs	r2, #32
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	411a      	asrs	r2, r3
 8003af6:	0013      	movs	r3, r2
 8003af8:	b2de      	uxtb	r6, r3
 8003afa:	2304      	movs	r3, #4
 8003afc:	2228      	movs	r2, #40	; 0x28
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	19dc      	adds	r4, r3, r7
 8003b02:	4d10      	ldr	r5, [pc, #64]	; (8003b44 <DigitSeven+0xb4>)
 8003b04:	466b      	mov	r3, sp
 8003b06:	0018      	movs	r0, r3
 8003b08:	0023      	movs	r3, r4
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	225c      	movs	r2, #92	; 0x5c
 8003b0e:	0019      	movs	r1, r3
 8003b10:	f001 fb24 	bl	800515c <memcpy>
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	6863      	ldr	r3, [r4, #4]
 8003b18:	0031      	movs	r1, r6
 8003b1a:	0028      	movs	r0, r5
 8003b1c:	f001 fab6 	bl	800508c <TransmitData>
	for (int j = 0; j < 6; j++)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	ddd7      	ble.n	8003adc <DigitSeven+0x4c>
	}

	column_countdown[i] = 0;
 8003b2c:	4a05      	ldr	r2, [pc, #20]	; (8003b44 <DigitSeven+0xb4>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b005      	add	sp, #20
 8003b3c:	bcf0      	pop	{r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	b004      	add	sp, #16
 8003b42:	4718      	bx	r3
 8003b44:	20000144 	.word	0x20000144

08003b48 <DigitSix>:

void DigitSix(int i,SPI_HandleTypeDef hspi1)
{
 8003b48:	b084      	sub	sp, #16
 8003b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4c:	b09b      	sub	sp, #108	; 0x6c
 8003b4e:	af18      	add	r7, sp, #96	; 0x60
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	2004      	movs	r0, #4
 8003b54:	2618      	movs	r6, #24
 8003b56:	1980      	adds	r0, r0, r6
 8003b58:	2408      	movs	r4, #8
 8003b5a:	46a4      	mov	ip, r4
 8003b5c:	44bc      	add	ip, r7
 8003b5e:	4460      	add	r0, ip
 8003b60:	6001      	str	r1, [r0, #0]
 8003b62:	6042      	str	r2, [r0, #4]
 8003b64:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xff;
 8003b66:	4a51      	ldr	r2, [pc, #324]	; (8003cac <DigitSix+0x164>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	18d3      	adds	r3, r2, r3
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42, hspi1);
 8003b70:	2304      	movs	r3, #4
 8003b72:	199b      	adds	r3, r3, r6
 8003b74:	2208      	movs	r2, #8
 8003b76:	18b9      	adds	r1, r7, r2
 8003b78:	185c      	adds	r4, r3, r1
 8003b7a:	4d4c      	ldr	r5, [pc, #304]	; (8003cac <DigitSix+0x164>)
 8003b7c:	466b      	mov	r3, sp
 8003b7e:	0018      	movs	r0, r3
 8003b80:	0023      	movs	r3, r4
 8003b82:	3308      	adds	r3, #8
 8003b84:	225c      	movs	r2, #92	; 0x5c
 8003b86:	0019      	movs	r1, r3
 8003b88:	f001 fae8 	bl	800515c <memcpy>
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	2142      	movs	r1, #66	; 0x42
 8003b92:	0028      	movs	r0, r5
 8003b94:	f001 fa7a 	bl	800508c <TransmitData>

	column_countdown[i] = 0xc3;
 8003b98:	4a44      	ldr	r2, [pc, #272]	; (8003cac <DigitSix+0x164>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	18d3      	adds	r3, r2, r3
 8003b9e:	22c3      	movs	r2, #195	; 0xc3
 8003ba0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c, hspi1);
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	199b      	adds	r3, r3, r6
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	18b9      	adds	r1, r7, r2
 8003baa:	185c      	adds	r4, r3, r1
 8003bac:	4d3f      	ldr	r5, [pc, #252]	; (8003cac <DigitSix+0x164>)
 8003bae:	466b      	mov	r3, sp
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	0023      	movs	r3, r4
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	225c      	movs	r2, #92	; 0x5c
 8003bb8:	0019      	movs	r1, r3
 8003bba:	f001 facf 	bl	800515c <memcpy>
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	210c      	movs	r1, #12
 8003bc4:	0028      	movs	r0, r5
 8003bc6:	f001 fa61 	bl	800508c <TransmitData>

	column_countdown[i] = 0x7f;
 8003bca:	4a38      	ldr	r2, [pc, #224]	; (8003cac <DigitSix+0x164>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	18d3      	adds	r3, r2, r3
 8003bd0:	227f      	movs	r2, #127	; 0x7f
 8003bd2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80, hspi1);
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	199b      	adds	r3, r3, r6
 8003bd8:	2208      	movs	r2, #8
 8003bda:	18b9      	adds	r1, r7, r2
 8003bdc:	185c      	adds	r4, r3, r1
 8003bde:	4d33      	ldr	r5, [pc, #204]	; (8003cac <DigitSix+0x164>)
 8003be0:	466b      	mov	r3, sp
 8003be2:	0018      	movs	r0, r3
 8003be4:	0023      	movs	r3, r4
 8003be6:	3308      	adds	r3, #8
 8003be8:	225c      	movs	r2, #92	; 0x5c
 8003bea:	0019      	movs	r1, r3
 8003bec:	f001 fab6 	bl	800515c <memcpy>
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	0028      	movs	r0, r5
 8003bf8:	f001 fa48 	bl	800508c <TransmitData>

	column_countdown[i] = 0xc0;
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <DigitSix+0x164>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	22c0      	movs	r2, #192	; 0xc0
 8003c04:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20, hspi1);
 8003c06:	2304      	movs	r3, #4
 8003c08:	199b      	adds	r3, r3, r6
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	18b9      	adds	r1, r7, r2
 8003c0e:	185c      	adds	r4, r3, r1
 8003c10:	4d26      	ldr	r5, [pc, #152]	; (8003cac <DigitSix+0x164>)
 8003c12:	466b      	mov	r3, sp
 8003c14:	0018      	movs	r0, r3
 8003c16:	0023      	movs	r3, r4
 8003c18:	3308      	adds	r3, #8
 8003c1a:	225c      	movs	r2, #92	; 0x5c
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	f001 fa9d 	bl	800515c <memcpy>
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	6863      	ldr	r3, [r4, #4]
 8003c26:	2120      	movs	r1, #32
 8003c28:	0028      	movs	r0, r5
 8003c2a:	f001 fa2f 	bl	800508c <TransmitData>

	column_countdown[i] = 0xfe;
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <DigitSix+0x164>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	22fe      	movs	r2, #254	; 0xfe
 8003c36:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 8003c38:	2304      	movs	r3, #4
 8003c3a:	199b      	adds	r3, r3, r6
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	18b9      	adds	r1, r7, r2
 8003c40:	185c      	adds	r4, r3, r1
 8003c42:	4d1a      	ldr	r5, [pc, #104]	; (8003cac <DigitSix+0x164>)
 8003c44:	466b      	mov	r3, sp
 8003c46:	0018      	movs	r0, r3
 8003c48:	0023      	movs	r3, r4
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	225c      	movs	r2, #92	; 0x5c
 8003c4e:	0019      	movs	r1, r3
 8003c50:	f001 fa84 	bl	800515c <memcpy>
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	6863      	ldr	r3, [r4, #4]
 8003c58:	2110      	movs	r1, #16
 8003c5a:	0028      	movs	r0, r5
 8003c5c:	f001 fa16 	bl	800508c <TransmitData>

	column_countdown[i] = 0x7e;
 8003c60:	4a12      	ldr	r2, [pc, #72]	; (8003cac <DigitSix+0x164>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	227e      	movs	r2, #126	; 0x7e
 8003c68:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01, hspi1);
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	199b      	adds	r3, r3, r6
 8003c6e:	2208      	movs	r2, #8
 8003c70:	18ba      	adds	r2, r7, r2
 8003c72:	189c      	adds	r4, r3, r2
 8003c74:	4d0d      	ldr	r5, [pc, #52]	; (8003cac <DigitSix+0x164>)
 8003c76:	466b      	mov	r3, sp
 8003c78:	0018      	movs	r0, r3
 8003c7a:	0023      	movs	r3, r4
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	225c      	movs	r2, #92	; 0x5c
 8003c80:	0019      	movs	r1, r3
 8003c82:	f001 fa6b 	bl	800515c <memcpy>
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	0028      	movs	r0, r5
 8003c8e:	f001 f9fd 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 8003c92:	4a06      	ldr	r2, [pc, #24]	; (8003cac <DigitSix+0x164>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b003      	add	sp, #12
 8003ca2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ca4:	bc08      	pop	{r3}
 8003ca6:	b004      	add	sp, #16
 8003ca8:	4718      	bx	r3
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	20000144 	.word	0x20000144

08003cb0 <DigitFive>:

void DigitFive(int i,SPI_HandleTypeDef hspi1)
{
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb4:	b09b      	sub	sp, #108	; 0x6c
 8003cb6:	af18      	add	r7, sp, #96	; 0x60
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	2004      	movs	r0, #4
 8003cbc:	2618      	movs	r6, #24
 8003cbe:	1980      	adds	r0, r0, r6
 8003cc0:	2408      	movs	r4, #8
 8003cc2:	46a4      	mov	ip, r4
 8003cc4:	44bc      	add	ip, r7
 8003cc6:	4460      	add	r0, ip
 8003cc8:	6001      	str	r1, [r0, #0]
 8003cca:	6042      	str	r2, [r0, #4]
 8003ccc:	6083      	str	r3, [r0, #8]

	column_countdown[i] = 0xff;
 8003cce:	4a51      	ldr	r2, [pc, #324]	; (8003e14 <DigitFive+0x164>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	18d3      	adds	r3, r2, r3
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0,hspi1);
 8003cd8:	2304      	movs	r3, #4
 8003cda:	199b      	adds	r3, r3, r6
 8003cdc:	2208      	movs	r2, #8
 8003cde:	18b9      	adds	r1, r7, r2
 8003ce0:	185c      	adds	r4, r3, r1
 8003ce2:	4d4c      	ldr	r5, [pc, #304]	; (8003e14 <DigitFive+0x164>)
 8003ce4:	466b      	mov	r3, sp
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	0023      	movs	r3, r4
 8003cea:	3308      	adds	r3, #8
 8003cec:	225c      	movs	r2, #92	; 0x5c
 8003cee:	0019      	movs	r1, r3
 8003cf0:	f001 fa34 	bl	800515c <memcpy>
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	21c0      	movs	r1, #192	; 0xc0
 8003cfa:	0028      	movs	r0, r5
 8003cfc:	f001 f9c6 	bl	800508c <TransmitData>

	column_countdown[i] = 0xc0;
 8003d00:	4a44      	ldr	r2, [pc, #272]	; (8003e14 <DigitFive+0x164>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	18d3      	adds	r3, r2, r3
 8003d06:	22c0      	movs	r2, #192	; 0xc0
 8003d08:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20,hspi1);
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	199b      	adds	r3, r3, r6
 8003d0e:	2208      	movs	r2, #8
 8003d10:	18b9      	adds	r1, r7, r2
 8003d12:	185c      	adds	r4, r3, r1
 8003d14:	4d3f      	ldr	r5, [pc, #252]	; (8003e14 <DigitFive+0x164>)
 8003d16:	466b      	mov	r3, sp
 8003d18:	0018      	movs	r0, r3
 8003d1a:	0023      	movs	r3, r4
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	225c      	movs	r2, #92	; 0x5c
 8003d20:	0019      	movs	r1, r3
 8003d22:	f001 fa1b 	bl	800515c <memcpy>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	6863      	ldr	r3, [r4, #4]
 8003d2a:	2120      	movs	r1, #32
 8003d2c:	0028      	movs	r0, r5
 8003d2e:	f001 f9ad 	bl	800508c <TransmitData>

	column_countdown[i] = 0xfe;
 8003d32:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <DigitFive+0x164>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	18d3      	adds	r3, r2, r3
 8003d38:	22fe      	movs	r2, #254	; 0xfe
 8003d3a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10,hspi1);
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	199b      	adds	r3, r3, r6
 8003d40:	2208      	movs	r2, #8
 8003d42:	18b9      	adds	r1, r7, r2
 8003d44:	185c      	adds	r4, r3, r1
 8003d46:	4d33      	ldr	r5, [pc, #204]	; (8003e14 <DigitFive+0x164>)
 8003d48:	466b      	mov	r3, sp
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	0023      	movs	r3, r4
 8003d4e:	3308      	adds	r3, #8
 8003d50:	225c      	movs	r2, #92	; 0x5c
 8003d52:	0019      	movs	r1, r3
 8003d54:	f001 fa02 	bl	800515c <memcpy>
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	6863      	ldr	r3, [r4, #4]
 8003d5c:	2110      	movs	r1, #16
 8003d5e:	0028      	movs	r0, r5
 8003d60:	f001 f994 	bl	800508c <TransmitData>

	column_countdown[i] = 0x03;
 8003d64:	4a2b      	ldr	r2, [pc, #172]	; (8003e14 <DigitFive+0x164>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c,hspi1);
 8003d6e:	2304      	movs	r3, #4
 8003d70:	199b      	adds	r3, r3, r6
 8003d72:	2208      	movs	r2, #8
 8003d74:	18b9      	adds	r1, r7, r2
 8003d76:	185c      	adds	r4, r3, r1
 8003d78:	4d26      	ldr	r5, [pc, #152]	; (8003e14 <DigitFive+0x164>)
 8003d7a:	466b      	mov	r3, sp
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	0023      	movs	r3, r4
 8003d80:	3308      	adds	r3, #8
 8003d82:	225c      	movs	r2, #92	; 0x5c
 8003d84:	0019      	movs	r1, r3
 8003d86:	f001 f9e9 	bl	800515c <memcpy>
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	210c      	movs	r1, #12
 8003d90:	0028      	movs	r0, r5
 8003d92:	f001 f97b 	bl	800508c <TransmitData>

	column_countdown[i] = 0x83;
 8003d96:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <DigitFive+0x164>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	18d3      	adds	r3, r2, r3
 8003d9c:	2283      	movs	r2, #131	; 0x83
 8003d9e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02,hspi1);
 8003da0:	2304      	movs	r3, #4
 8003da2:	199b      	adds	r3, r3, r6
 8003da4:	2208      	movs	r2, #8
 8003da6:	18b9      	adds	r1, r7, r2
 8003da8:	185c      	adds	r4, r3, r1
 8003daa:	4d1a      	ldr	r5, [pc, #104]	; (8003e14 <DigitFive+0x164>)
 8003dac:	466b      	mov	r3, sp
 8003dae:	0018      	movs	r0, r3
 8003db0:	0023      	movs	r3, r4
 8003db2:	3308      	adds	r3, #8
 8003db4:	225c      	movs	r2, #92	; 0x5c
 8003db6:	0019      	movs	r1, r3
 8003db8:	f001 f9d0 	bl	800515c <memcpy>
 8003dbc:	6822      	ldr	r2, [r4, #0]
 8003dbe:	6863      	ldr	r3, [r4, #4]
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	0028      	movs	r0, r5
 8003dc4:	f001 f962 	bl	800508c <TransmitData>

	column_countdown[i] = 0x7e;
 8003dc8:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <DigitFive+0x164>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	18d3      	adds	r3, r2, r3
 8003dce:	227e      	movs	r2, #126	; 0x7e
 8003dd0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01,hspi1);
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	199b      	adds	r3, r3, r6
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	18ba      	adds	r2, r7, r2
 8003dda:	189c      	adds	r4, r3, r2
 8003ddc:	4d0d      	ldr	r5, [pc, #52]	; (8003e14 <DigitFive+0x164>)
 8003dde:	466b      	mov	r3, sp
 8003de0:	0018      	movs	r0, r3
 8003de2:	0023      	movs	r3, r4
 8003de4:	3308      	adds	r3, #8
 8003de6:	225c      	movs	r2, #92	; 0x5c
 8003de8:	0019      	movs	r1, r3
 8003dea:	f001 f9b7 	bl	800515c <memcpy>
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	2101      	movs	r1, #1
 8003df4:	0028      	movs	r0, r5
 8003df6:	f001 f949 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 8003dfa:	4a06      	ldr	r2, [pc, #24]	; (8003e14 <DigitFive+0x164>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b003      	add	sp, #12
 8003e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8003e0c:	bc08      	pop	{r3}
 8003e0e:	b004      	add	sp, #16
 8003e10:	4718      	bx	r3
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	20000144 	.word	0x20000144

08003e18 <DigitFour>:

void DigitFour(int i,SPI_HandleTypeDef hspi1)
{
 8003e18:	b084      	sub	sp, #16
 8003e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1c:	b09d      	sub	sp, #116	; 0x74
 8003e1e:	af18      	add	r7, sp, #96	; 0x60
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	2004      	movs	r0, #4
 8003e24:	2628      	movs	r6, #40	; 0x28
 8003e26:	1980      	adds	r0, r0, r6
 8003e28:	19c0      	adds	r0, r0, r7
 8003e2a:	6001      	str	r1, [r0, #0]
 8003e2c:	6042      	str	r2, [r0, #4]
 8003e2e:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x06;
 8003e30:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <DigitFour+0xec>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	18d3      	adds	r3, r2, r3
 8003e36:	2206      	movs	r2, #6
 8003e38:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3, hspi1);
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	199b      	adds	r3, r3, r6
 8003e3e:	19dc      	adds	r4, r3, r7
 8003e40:	4d30      	ldr	r5, [pc, #192]	; (8003f04 <DigitFour+0xec>)
 8003e42:	466b      	mov	r3, sp
 8003e44:	0018      	movs	r0, r3
 8003e46:	0023      	movs	r3, r4
 8003e48:	3308      	adds	r3, #8
 8003e4a:	225c      	movs	r2, #92	; 0x5c
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	f001 f985 	bl	800515c <memcpy>
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	21f3      	movs	r1, #243	; 0xf3
 8003e58:	0028      	movs	r0, r5
 8003e5a:	f001 f917 	bl	800508c <TransmitData>

	column_countdown[i] = 0xff;
 8003e5e:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <DigitFour+0xec>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	18d3      	adds	r3, r2, r3
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c, hspi1);
 8003e68:	2304      	movs	r3, #4
 8003e6a:	199b      	adds	r3, r3, r6
 8003e6c:	19dc      	adds	r4, r3, r7
 8003e6e:	4d25      	ldr	r5, [pc, #148]	; (8003f04 <DigitFour+0xec>)
 8003e70:	466b      	mov	r3, sp
 8003e72:	0018      	movs	r0, r3
 8003e74:	0023      	movs	r3, r4
 8003e76:	3308      	adds	r3, #8
 8003e78:	225c      	movs	r2, #92	; 0x5c
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	f001 f96e 	bl	800515c <memcpy>
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	6863      	ldr	r3, [r4, #4]
 8003e84:	210c      	movs	r1, #12
 8003e86:	0028      	movs	r0, r5
 8003e88:	f001 f900 	bl	800508c <TransmitData>

	for (int j = 0; j < 4; j++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e028      	b.n	8003ee4 <DigitFour+0xcc>
	{
	column_countdown[i] = 0x08 << j;
 8003e92:	2208      	movs	r2, #8
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	409a      	lsls	r2, r3
 8003e98:	0013      	movs	r3, r2
 8003e9a:	b2d9      	uxtb	r1, r3
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <DigitFour+0xec>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	1c0a      	adds	r2, r1, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	411a      	asrs	r2, r3
 8003eac:	0013      	movs	r3, r2
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <DigitFour+0xf0>)
 8003eb2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown, hspi1);
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <DigitFour+0xf0>)
 8003eb6:	781e      	ldrb	r6, [r3, #0]
 8003eb8:	2304      	movs	r3, #4
 8003eba:	2228      	movs	r2, #40	; 0x28
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	19dc      	adds	r4, r3, r7
 8003ec0:	4d10      	ldr	r5, [pc, #64]	; (8003f04 <DigitFour+0xec>)
 8003ec2:	466b      	mov	r3, sp
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	0023      	movs	r3, r4
 8003ec8:	3308      	adds	r3, #8
 8003eca:	225c      	movs	r2, #92	; 0x5c
 8003ecc:	0019      	movs	r1, r3
 8003ece:	f001 f945 	bl	800515c <memcpy>
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	0031      	movs	r1, r6
 8003ed8:	0028      	movs	r0, r5
 8003eda:	f001 f8d7 	bl	800508c <TransmitData>
	for (int j = 0; j < 4; j++)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	ddd3      	ble.n	8003e92 <DigitFour+0x7a>
	}

	column_countdown[i] = 0;
 8003eea:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <DigitFour+0xec>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	18d3      	adds	r3, r2, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b005      	add	sp, #20
 8003efa:	bcf0      	pop	{r4, r5, r6, r7}
 8003efc:	bc08      	pop	{r3}
 8003efe:	b004      	add	sp, #16
 8003f00:	4718      	bx	r3
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	20000144 	.word	0x20000144
 8003f08:	20000141 	.word	0x20000141

08003f0c <DigitThree>:

void DigitThree(int i, SPI_HandleTypeDef hspi1)
{
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f10:	b09b      	sub	sp, #108	; 0x6c
 8003f12:	af18      	add	r7, sp, #96	; 0x60
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	2004      	movs	r0, #4
 8003f18:	2618      	movs	r6, #24
 8003f1a:	1980      	adds	r0, r0, r6
 8003f1c:	2408      	movs	r4, #8
 8003f1e:	46a4      	mov	ip, r4
 8003f20:	44bc      	add	ip, r7
 8003f22:	4460      	add	r0, ip
 8003f24:	6001      	str	r1, [r0, #0]
 8003f26:	6042      	str	r2, [r0, #4]
 8003f28:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x7e;
 8003f2a:	4a38      	ldr	r2, [pc, #224]	; (800400c <DigitThree+0x100>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	18d3      	adds	r3, r2, r3
 8003f30:	227e      	movs	r2, #126	; 0x7e
 8003f32:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81, hspi1);
 8003f34:	2304      	movs	r3, #4
 8003f36:	199b      	adds	r3, r3, r6
 8003f38:	2208      	movs	r2, #8
 8003f3a:	18b9      	adds	r1, r7, r2
 8003f3c:	185c      	adds	r4, r3, r1
 8003f3e:	4d33      	ldr	r5, [pc, #204]	; (800400c <DigitThree+0x100>)
 8003f40:	466b      	mov	r3, sp
 8003f42:	0018      	movs	r0, r3
 8003f44:	0023      	movs	r3, r4
 8003f46:	3308      	adds	r3, #8
 8003f48:	225c      	movs	r2, #92	; 0x5c
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	f001 f906 	bl	800515c <memcpy>
 8003f50:	6822      	ldr	r2, [r4, #0]
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	2181      	movs	r1, #129	; 0x81
 8003f56:	0028      	movs	r0, r5
 8003f58:	f001 f898 	bl	800508c <TransmitData>

	column_countdown[i] = 0xe7;
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	; (800400c <DigitThree+0x100>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	18d3      	adds	r3, r2, r3
 8003f62:	22e7      	movs	r2, #231	; 0xe7
 8003f64:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42, hspi1);
 8003f66:	2304      	movs	r3, #4
 8003f68:	199b      	adds	r3, r3, r6
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	18b9      	adds	r1, r7, r2
 8003f6e:	185c      	adds	r4, r3, r1
 8003f70:	4d26      	ldr	r5, [pc, #152]	; (800400c <DigitThree+0x100>)
 8003f72:	466b      	mov	r3, sp
 8003f74:	0018      	movs	r0, r3
 8003f76:	0023      	movs	r3, r4
 8003f78:	3308      	adds	r3, #8
 8003f7a:	225c      	movs	r2, #92	; 0x5c
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	f001 f8ed 	bl	800515c <memcpy>
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	6863      	ldr	r3, [r4, #4]
 8003f86:	2142      	movs	r1, #66	; 0x42
 8003f88:	0028      	movs	r0, r5
 8003f8a:	f001 f87f 	bl	800508c <TransmitData>

	column_countdown[i] = 0xc3;
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	; (800400c <DigitThree+0x100>)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	18d3      	adds	r3, r2, r3
 8003f94:	22c3      	movs	r2, #195	; 0xc3
 8003f96:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24, hspi1);
 8003f98:	2304      	movs	r3, #4
 8003f9a:	199b      	adds	r3, r3, r6
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	18b9      	adds	r1, r7, r2
 8003fa0:	185c      	adds	r4, r3, r1
 8003fa2:	4d1a      	ldr	r5, [pc, #104]	; (800400c <DigitThree+0x100>)
 8003fa4:	466b      	mov	r3, sp
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	0023      	movs	r3, r4
 8003faa:	3308      	adds	r3, #8
 8003fac:	225c      	movs	r2, #92	; 0x5c
 8003fae:	0019      	movs	r1, r3
 8003fb0:	f001 f8d4 	bl	800515c <memcpy>
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	2124      	movs	r1, #36	; 0x24
 8003fba:	0028      	movs	r0, r5
 8003fbc:	f001 f866 	bl	800508c <TransmitData>

	column_countdown[i] = 0x06;
 8003fc0:	4a12      	ldr	r2, [pc, #72]	; (800400c <DigitThree+0x100>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	2206      	movs	r2, #6
 8003fc8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18, hspi1);
 8003fca:	2304      	movs	r3, #4
 8003fcc:	199b      	adds	r3, r3, r6
 8003fce:	2208      	movs	r2, #8
 8003fd0:	18ba      	adds	r2, r7, r2
 8003fd2:	189c      	adds	r4, r3, r2
 8003fd4:	4d0d      	ldr	r5, [pc, #52]	; (800400c <DigitThree+0x100>)
 8003fd6:	466b      	mov	r3, sp
 8003fd8:	0018      	movs	r0, r3
 8003fda:	0023      	movs	r3, r4
 8003fdc:	3308      	adds	r3, #8
 8003fde:	225c      	movs	r2, #92	; 0x5c
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	f001 f8bb 	bl	800515c <memcpy>
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	2118      	movs	r1, #24
 8003fec:	0028      	movs	r0, r5
 8003fee:	f001 f84d 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 8003ff2:	4a06      	ldr	r2, [pc, #24]	; (800400c <DigitThree+0x100>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	18d3      	adds	r3, r2, r3
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b003      	add	sp, #12
 8004002:	bcf0      	pop	{r4, r5, r6, r7}
 8004004:	bc08      	pop	{r3}
 8004006:	b004      	add	sp, #16
 8004008:	4718      	bx	r3
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	20000144 	.word	0x20000144

08004010 <DigitTwo>:

void DigitTwo(int i, SPI_HandleTypeDef hspi1)
{
 8004010:	b084      	sub	sp, #16
 8004012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004014:	b09b      	sub	sp, #108	; 0x6c
 8004016:	af18      	add	r7, sp, #96	; 0x60
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	2004      	movs	r0, #4
 800401c:	2618      	movs	r6, #24
 800401e:	1980      	adds	r0, r0, r6
 8004020:	2408      	movs	r4, #8
 8004022:	46a4      	mov	ip, r4
 8004024:	44bc      	add	ip, r7
 8004026:	4460      	add	r0, ip
 8004028:	6001      	str	r1, [r0, #0]
 800402a:	6042      	str	r2, [r0, #4]
 800402c:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x7e;
 800402e:	4a5d      	ldr	r2, [pc, #372]	; (80041a4 <DigitTwo+0x194>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	18d3      	adds	r3, r2, r3
 8004034:	227e      	movs	r2, #126	; 0x7e
 8004036:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80, hspi1);
 8004038:	2304      	movs	r3, #4
 800403a:	199b      	adds	r3, r3, r6
 800403c:	2208      	movs	r2, #8
 800403e:	18b9      	adds	r1, r7, r2
 8004040:	185c      	adds	r4, r3, r1
 8004042:	4d58      	ldr	r5, [pc, #352]	; (80041a4 <DigitTwo+0x194>)
 8004044:	466b      	mov	r3, sp
 8004046:	0018      	movs	r0, r3
 8004048:	0023      	movs	r3, r4
 800404a:	3308      	adds	r3, #8
 800404c:	225c      	movs	r2, #92	; 0x5c
 800404e:	0019      	movs	r1, r3
 8004050:	f001 f884 	bl	800515c <memcpy>
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	6863      	ldr	r3, [r4, #4]
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	0028      	movs	r0, r5
 800405c:	f001 f816 	bl	800508c <TransmitData>

	column_countdown[i] = 0xc3;
 8004060:	4a50      	ldr	r2, [pc, #320]	; (80041a4 <DigitTwo+0x194>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	18d3      	adds	r3, r2, r3
 8004066:	22c3      	movs	r2, #195	; 0xc3
 8004068:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40, hspi1);
 800406a:	2304      	movs	r3, #4
 800406c:	199b      	adds	r3, r3, r6
 800406e:	2208      	movs	r2, #8
 8004070:	18b9      	adds	r1, r7, r2
 8004072:	185c      	adds	r4, r3, r1
 8004074:	4d4b      	ldr	r5, [pc, #300]	; (80041a4 <DigitTwo+0x194>)
 8004076:	466b      	mov	r3, sp
 8004078:	0018      	movs	r0, r3
 800407a:	0023      	movs	r3, r4
 800407c:	3308      	adds	r3, #8
 800407e:	225c      	movs	r2, #92	; 0x5c
 8004080:	0019      	movs	r1, r3
 8004082:	f001 f86b 	bl	800515c <memcpy>
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	2140      	movs	r1, #64	; 0x40
 800408c:	0028      	movs	r0, r5
 800408e:	f000 fffd 	bl	800508c <TransmitData>

	column_countdown[i] = 0x83;
 8004092:	4a44      	ldr	r2, [pc, #272]	; (80041a4 <DigitTwo+0x194>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	2283      	movs	r2, #131	; 0x83
 800409a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20, hspi1);
 800409c:	2304      	movs	r3, #4
 800409e:	199b      	adds	r3, r3, r6
 80040a0:	2208      	movs	r2, #8
 80040a2:	18b9      	adds	r1, r7, r2
 80040a4:	185c      	adds	r4, r3, r1
 80040a6:	4d3f      	ldr	r5, [pc, #252]	; (80041a4 <DigitTwo+0x194>)
 80040a8:	466b      	mov	r3, sp
 80040aa:	0018      	movs	r0, r3
 80040ac:	0023      	movs	r3, r4
 80040ae:	3308      	adds	r3, #8
 80040b0:	225c      	movs	r2, #92	; 0x5c
 80040b2:	0019      	movs	r1, r3
 80040b4:	f001 f852 	bl	800515c <memcpy>
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	6863      	ldr	r3, [r4, #4]
 80040bc:	2120      	movs	r1, #32
 80040be:	0028      	movs	r0, r5
 80040c0:	f000 ffe4 	bl	800508c <TransmitData>

	column_countdown[i] = 0x0e;
 80040c4:	4a37      	ldr	r2, [pc, #220]	; (80041a4 <DigitTwo+0x194>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	18d3      	adds	r3, r2, r3
 80040ca:	220e      	movs	r2, #14
 80040cc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 80040ce:	2304      	movs	r3, #4
 80040d0:	199b      	adds	r3, r3, r6
 80040d2:	2208      	movs	r2, #8
 80040d4:	18b9      	adds	r1, r7, r2
 80040d6:	185c      	adds	r4, r3, r1
 80040d8:	4d32      	ldr	r5, [pc, #200]	; (80041a4 <DigitTwo+0x194>)
 80040da:	466b      	mov	r3, sp
 80040dc:	0018      	movs	r0, r3
 80040de:	0023      	movs	r3, r4
 80040e0:	3308      	adds	r3, #8
 80040e2:	225c      	movs	r2, #92	; 0x5c
 80040e4:	0019      	movs	r1, r3
 80040e6:	f001 f839 	bl	800515c <memcpy>
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	6863      	ldr	r3, [r4, #4]
 80040ee:	2110      	movs	r1, #16
 80040f0:	0028      	movs	r0, r5
 80040f2:	f000 ffcb 	bl	800508c <TransmitData>

	column_countdown[i] = 0x1c;
 80040f6:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <DigitTwo+0x194>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	18d3      	adds	r3, r2, r3
 80040fc:	221c      	movs	r2, #28
 80040fe:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08, hspi1);
 8004100:	2304      	movs	r3, #4
 8004102:	199b      	adds	r3, r3, r6
 8004104:	2208      	movs	r2, #8
 8004106:	18b9      	adds	r1, r7, r2
 8004108:	185c      	adds	r4, r3, r1
 800410a:	4d26      	ldr	r5, [pc, #152]	; (80041a4 <DigitTwo+0x194>)
 800410c:	466b      	mov	r3, sp
 800410e:	0018      	movs	r0, r3
 8004110:	0023      	movs	r3, r4
 8004112:	3308      	adds	r3, #8
 8004114:	225c      	movs	r2, #92	; 0x5c
 8004116:	0019      	movs	r1, r3
 8004118:	f001 f820 	bl	800515c <memcpy>
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	2108      	movs	r1, #8
 8004122:	0028      	movs	r0, r5
 8004124:	f000 ffb2 	bl	800508c <TransmitData>

	column_countdown[i] = 0x70;
 8004128:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <DigitTwo+0x194>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	18d3      	adds	r3, r2, r3
 800412e:	2270      	movs	r2, #112	; 0x70
 8004130:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04, hspi1);
 8004132:	2304      	movs	r3, #4
 8004134:	199b      	adds	r3, r3, r6
 8004136:	2208      	movs	r2, #8
 8004138:	18b9      	adds	r1, r7, r2
 800413a:	185c      	adds	r4, r3, r1
 800413c:	4d19      	ldr	r5, [pc, #100]	; (80041a4 <DigitTwo+0x194>)
 800413e:	466b      	mov	r3, sp
 8004140:	0018      	movs	r0, r3
 8004142:	0023      	movs	r3, r4
 8004144:	3308      	adds	r3, #8
 8004146:	225c      	movs	r2, #92	; 0x5c
 8004148:	0019      	movs	r1, r3
 800414a:	f001 f807 	bl	800515c <memcpy>
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	2104      	movs	r1, #4
 8004154:	0028      	movs	r0, r5
 8004156:	f000 ff99 	bl	800508c <TransmitData>

	column_countdown[i] = 0xff;
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <DigitTwo+0x194>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	18d3      	adds	r3, r2, r3
 8004160:	22ff      	movs	r2, #255	; 0xff
 8004162:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03, hspi1);
 8004164:	2304      	movs	r3, #4
 8004166:	199b      	adds	r3, r3, r6
 8004168:	2208      	movs	r2, #8
 800416a:	18ba      	adds	r2, r7, r2
 800416c:	189c      	adds	r4, r3, r2
 800416e:	4d0d      	ldr	r5, [pc, #52]	; (80041a4 <DigitTwo+0x194>)
 8004170:	466b      	mov	r3, sp
 8004172:	0018      	movs	r0, r3
 8004174:	0023      	movs	r3, r4
 8004176:	3308      	adds	r3, #8
 8004178:	225c      	movs	r2, #92	; 0x5c
 800417a:	0019      	movs	r1, r3
 800417c:	f000 ffee 	bl	800515c <memcpy>
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	6863      	ldr	r3, [r4, #4]
 8004184:	2103      	movs	r1, #3
 8004186:	0028      	movs	r0, r5
 8004188:	f000 ff80 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 800418c:	4a05      	ldr	r2, [pc, #20]	; (80041a4 <DigitTwo+0x194>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b003      	add	sp, #12
 800419c:	bcf0      	pop	{r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	b004      	add	sp, #16
 80041a2:	4718      	bx	r3
 80041a4:	20000144 	.word	0x20000144

080041a8 <DigitOne>:

void DigitOne(int i, SPI_HandleTypeDef hspi1)
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ac:	b09b      	sub	sp, #108	; 0x6c
 80041ae:	af18      	add	r7, sp, #96	; 0x60
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	2004      	movs	r0, #4
 80041b4:	2618      	movs	r6, #24
 80041b6:	1980      	adds	r0, r0, r6
 80041b8:	2408      	movs	r4, #8
 80041ba:	46a4      	mov	ip, r4
 80041bc:	44bc      	add	ip, r7
 80041be:	4460      	add	r0, ip
 80041c0:	6001      	str	r1, [r0, #0]
 80041c2:	6042      	str	r2, [r0, #4]
 80041c4:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xff;
 80041c6:	4a51      	ldr	r2, [pc, #324]	; (800430c <DigitOne+0x164>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01, hspi1);
 80041d0:	2304      	movs	r3, #4
 80041d2:	199b      	adds	r3, r3, r6
 80041d4:	2208      	movs	r2, #8
 80041d6:	18b9      	adds	r1, r7, r2
 80041d8:	185c      	adds	r4, r3, r1
 80041da:	4d4c      	ldr	r5, [pc, #304]	; (800430c <DigitOne+0x164>)
 80041dc:	466b      	mov	r3, sp
 80041de:	0018      	movs	r0, r3
 80041e0:	0023      	movs	r3, r4
 80041e2:	3308      	adds	r3, #8
 80041e4:	225c      	movs	r2, #92	; 0x5c
 80041e6:	0019      	movs	r1, r3
 80041e8:	f000 ffb8 	bl	800515c <memcpy>
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	2101      	movs	r1, #1
 80041f2:	0028      	movs	r0, r5
 80041f4:	f000 ff4a 	bl	800508c <TransmitData>

	column_countdown[i] = 0x98;
 80041f8:	4a44      	ldr	r2, [pc, #272]	; (800430c <DigitOne+0x164>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	2298      	movs	r2, #152	; 0x98
 8004200:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08, hspi1);
 8004202:	2304      	movs	r3, #4
 8004204:	199b      	adds	r3, r3, r6
 8004206:	2208      	movs	r2, #8
 8004208:	18b9      	adds	r1, r7, r2
 800420a:	185c      	adds	r4, r3, r1
 800420c:	4d3f      	ldr	r5, [pc, #252]	; (800430c <DigitOne+0x164>)
 800420e:	466b      	mov	r3, sp
 8004210:	0018      	movs	r0, r3
 8004212:	0023      	movs	r3, r4
 8004214:	3308      	adds	r3, #8
 8004216:	225c      	movs	r2, #92	; 0x5c
 8004218:	0019      	movs	r1, r3
 800421a:	f000 ff9f 	bl	800515c <memcpy>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	2108      	movs	r1, #8
 8004224:	0028      	movs	r0, r5
 8004226:	f000 ff31 	bl	800508c <TransmitData>

	column_countdown[i] = 0xd8;
 800422a:	4a38      	ldr	r2, [pc, #224]	; (800430c <DigitOne+0x164>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	18d3      	adds	r3, r2, r3
 8004230:	22d8      	movs	r2, #216	; 0xd8
 8004232:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 8004234:	2304      	movs	r3, #4
 8004236:	199b      	adds	r3, r3, r6
 8004238:	2208      	movs	r2, #8
 800423a:	18b9      	adds	r1, r7, r2
 800423c:	185c      	adds	r4, r3, r1
 800423e:	4d33      	ldr	r5, [pc, #204]	; (800430c <DigitOne+0x164>)
 8004240:	466b      	mov	r3, sp
 8004242:	0018      	movs	r0, r3
 8004244:	0023      	movs	r3, r4
 8004246:	3308      	adds	r3, #8
 8004248:	225c      	movs	r2, #92	; 0x5c
 800424a:	0019      	movs	r1, r3
 800424c:	f000 ff86 	bl	800515c <memcpy>
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	2110      	movs	r1, #16
 8004256:	0028      	movs	r0, r5
 8004258:	f000 ff18 	bl	800508c <TransmitData>

	column_countdown[i] = 0x78;
 800425c:	4a2b      	ldr	r2, [pc, #172]	; (800430c <DigitOne+0x164>)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	18d3      	adds	r3, r2, r3
 8004262:	2278      	movs	r2, #120	; 0x78
 8004264:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20, hspi1);
 8004266:	2304      	movs	r3, #4
 8004268:	199b      	adds	r3, r3, r6
 800426a:	2208      	movs	r2, #8
 800426c:	18b9      	adds	r1, r7, r2
 800426e:	185c      	adds	r4, r3, r1
 8004270:	4d26      	ldr	r5, [pc, #152]	; (800430c <DigitOne+0x164>)
 8004272:	466b      	mov	r3, sp
 8004274:	0018      	movs	r0, r3
 8004276:	0023      	movs	r3, r4
 8004278:	3308      	adds	r3, #8
 800427a:	225c      	movs	r2, #92	; 0x5c
 800427c:	0019      	movs	r1, r3
 800427e:	f000 ff6d 	bl	800515c <memcpy>
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	6863      	ldr	r3, [r4, #4]
 8004286:	2120      	movs	r1, #32
 8004288:	0028      	movs	r0, r5
 800428a:	f000 feff 	bl	800508c <TransmitData>

	column_countdown[i] = 0x38;
 800428e:	4a1f      	ldr	r2, [pc, #124]	; (800430c <DigitOne+0x164>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	2238      	movs	r2, #56	; 0x38
 8004296:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40, hspi1);
 8004298:	2304      	movs	r3, #4
 800429a:	199b      	adds	r3, r3, r6
 800429c:	2208      	movs	r2, #8
 800429e:	18b9      	adds	r1, r7, r2
 80042a0:	185c      	adds	r4, r3, r1
 80042a2:	4d1a      	ldr	r5, [pc, #104]	; (800430c <DigitOne+0x164>)
 80042a4:	466b      	mov	r3, sp
 80042a6:	0018      	movs	r0, r3
 80042a8:	0023      	movs	r3, r4
 80042aa:	3308      	adds	r3, #8
 80042ac:	225c      	movs	r2, #92	; 0x5c
 80042ae:	0019      	movs	r1, r3
 80042b0:	f000 ff54 	bl	800515c <memcpy>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	6863      	ldr	r3, [r4, #4]
 80042b8:	2140      	movs	r1, #64	; 0x40
 80042ba:	0028      	movs	r0, r5
 80042bc:	f000 fee6 	bl	800508c <TransmitData>

	column_countdown[i] = 0x18;
 80042c0:	4a12      	ldr	r2, [pc, #72]	; (800430c <DigitOne+0x164>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	18d3      	adds	r3, r2, r3
 80042c6:	2218      	movs	r2, #24
 80042c8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86, hspi1);
 80042ca:	2304      	movs	r3, #4
 80042cc:	199b      	adds	r3, r3, r6
 80042ce:	2208      	movs	r2, #8
 80042d0:	18ba      	adds	r2, r7, r2
 80042d2:	189c      	adds	r4, r3, r2
 80042d4:	4d0d      	ldr	r5, [pc, #52]	; (800430c <DigitOne+0x164>)
 80042d6:	466b      	mov	r3, sp
 80042d8:	0018      	movs	r0, r3
 80042da:	0023      	movs	r3, r4
 80042dc:	3308      	adds	r3, #8
 80042de:	225c      	movs	r2, #92	; 0x5c
 80042e0:	0019      	movs	r1, r3
 80042e2:	f000 ff3b 	bl	800515c <memcpy>
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	2186      	movs	r1, #134	; 0x86
 80042ec:	0028      	movs	r0, r5
 80042ee:	f000 fecd 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 80042f2:	4a06      	ldr	r2, [pc, #24]	; (800430c <DigitOne+0x164>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b003      	add	sp, #12
 8004302:	bcf0      	pop	{r4, r5, r6, r7}
 8004304:	bc08      	pop	{r3}
 8004306:	b004      	add	sp, #16
 8004308:	4718      	bx	r3
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	20000144 	.word	0x20000144

08004310 <DigitZero>:

void DigitZero(int i, SPI_HandleTypeDef hspi1)
{
 8004310:	b084      	sub	sp, #16
 8004312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004314:	b09b      	sub	sp, #108	; 0x6c
 8004316:	af18      	add	r7, sp, #96	; 0x60
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	2004      	movs	r0, #4
 800431c:	2618      	movs	r6, #24
 800431e:	1980      	adds	r0, r0, r6
 8004320:	2408      	movs	r4, #8
 8004322:	46a4      	mov	ip, r4
 8004324:	44bc      	add	ip, r7
 8004326:	4460      	add	r0, ip
 8004328:	6001      	str	r1, [r0, #0]
 800432a:	6042      	str	r2, [r0, #4]
 800432c:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x3c;
 800432e:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <DigitZero+0xcc>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	18d3      	adds	r3, r2, r3
 8004334:	223c      	movs	r2, #60	; 0x3c
 8004336:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81, hspi1);
 8004338:	2304      	movs	r3, #4
 800433a:	199b      	adds	r3, r3, r6
 800433c:	2208      	movs	r2, #8
 800433e:	18b9      	adds	r1, r7, r2
 8004340:	185c      	adds	r4, r3, r1
 8004342:	4d26      	ldr	r5, [pc, #152]	; (80043dc <DigitZero+0xcc>)
 8004344:	466b      	mov	r3, sp
 8004346:	0018      	movs	r0, r3
 8004348:	0023      	movs	r3, r4
 800434a:	3308      	adds	r3, #8
 800434c:	225c      	movs	r2, #92	; 0x5c
 800434e:	0019      	movs	r1, r3
 8004350:	f000 ff04 	bl	800515c <memcpy>
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	2181      	movs	r1, #129	; 0x81
 800435a:	0028      	movs	r0, r5
 800435c:	f000 fe96 	bl	800508c <TransmitData>

	column_countdown[i] = 0x66;
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <DigitZero+0xcc>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	18d3      	adds	r3, r2, r3
 8004366:	2266      	movs	r2, #102	; 0x66
 8004368:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42, hspi1);
 800436a:	2304      	movs	r3, #4
 800436c:	199b      	adds	r3, r3, r6
 800436e:	2208      	movs	r2, #8
 8004370:	18b9      	adds	r1, r7, r2
 8004372:	185c      	adds	r4, r3, r1
 8004374:	4d19      	ldr	r5, [pc, #100]	; (80043dc <DigitZero+0xcc>)
 8004376:	466b      	mov	r3, sp
 8004378:	0018      	movs	r0, r3
 800437a:	0023      	movs	r3, r4
 800437c:	3308      	adds	r3, #8
 800437e:	225c      	movs	r2, #92	; 0x5c
 8004380:	0019      	movs	r1, r3
 8004382:	f000 feeb 	bl	800515c <memcpy>
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	2142      	movs	r1, #66	; 0x42
 800438c:	0028      	movs	r0, r5
 800438e:	f000 fe7d 	bl	800508c <TransmitData>

	column_countdown[i] = 0xc3;
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <DigitZero+0xcc>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	18d3      	adds	r3, r2, r3
 8004398:	22c3      	movs	r2, #195	; 0xc3
 800439a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c, hspi1);
 800439c:	2304      	movs	r3, #4
 800439e:	199b      	adds	r3, r3, r6
 80043a0:	2208      	movs	r2, #8
 80043a2:	18ba      	adds	r2, r7, r2
 80043a4:	189c      	adds	r4, r3, r2
 80043a6:	4d0d      	ldr	r5, [pc, #52]	; (80043dc <DigitZero+0xcc>)
 80043a8:	466b      	mov	r3, sp
 80043aa:	0018      	movs	r0, r3
 80043ac:	0023      	movs	r3, r4
 80043ae:	3308      	adds	r3, #8
 80043b0:	225c      	movs	r2, #92	; 0x5c
 80043b2:	0019      	movs	r1, r3
 80043b4:	f000 fed2 	bl	800515c <memcpy>
 80043b8:	6822      	ldr	r2, [r4, #0]
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	213c      	movs	r1, #60	; 0x3c
 80043be:	0028      	movs	r0, r5
 80043c0:	f000 fe64 	bl	800508c <TransmitData>

	column_countdown[i] = 0;
 80043c4:	4a05      	ldr	r2, [pc, #20]	; (80043dc <DigitZero+0xcc>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b003      	add	sp, #12
 80043d4:	bcf0      	pop	{r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	b004      	add	sp, #16
 80043da:	4718      	bx	r3
 80043dc:	20000144 	.word	0x20000144

080043e0 <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle(SPI_HandleTypeDef hspi1)
{
 80043e0:	b084      	sub	sp, #16
 80043e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e4:	b0a1      	sub	sp, #132	; 0x84
 80043e6:	af18      	add	r7, sp, #96	; 0x60
 80043e8:	2438      	movs	r4, #56	; 0x38
 80043ea:	193c      	adds	r4, r7, r4
 80043ec:	6020      	str	r0, [r4, #0]
 80043ee:	6061      	str	r1, [r4, #4]
 80043f0:	60a2      	str	r2, [r4, #8]
 80043f2:	60e3      	str	r3, [r4, #12]

	switch (size_layer)
 80043f4:	4b99      	ldr	r3, [pc, #612]	; (800465c <DiagonalCube_Handle+0x27c>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d100      	bne.n	80043fe <DiagonalCube_Handle+0x1e>
 80043fc:	e0da      	b.n	80045b4 <DiagonalCube_Handle+0x1d4>
 80043fe:	dd00      	ble.n	8004402 <DiagonalCube_Handle+0x22>
 8004400:	e11c      	b.n	800463c <DiagonalCube_Handle+0x25c>
 8004402:	2b02      	cmp	r3, #2
 8004404:	d100      	bne.n	8004408 <DiagonalCube_Handle+0x28>
 8004406:	e090      	b.n	800452a <DiagonalCube_Handle+0x14a>
 8004408:	dd00      	ble.n	800440c <DiagonalCube_Handle+0x2c>
 800440a:	e117      	b.n	800463c <DiagonalCube_Handle+0x25c>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <DiagonalCube_Handle+0x36>
 8004410:	2b01      	cmp	r3, #1
 8004412:	d045      	beq.n	80044a0 <DiagonalCube_Handle+0xc0>
				size_layer = SMALLEST;
				time_start = HAL_GetTick();
			}
			break;
		default:
			break;
 8004414:	e112      	b.n	800463c <DiagonalCube_Handle+0x25c>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004416:	f7fc f9eb 	bl	80007f0 <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	4b90      	ldr	r3, [pc, #576]	; (8004660 <DiagonalCube_Handle+0x280>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2296      	movs	r2, #150	; 0x96
 8004424:	4293      	cmp	r3, r2
 8004426:	d200      	bcs.n	800442a <DiagonalCube_Handle+0x4a>
 8004428:	e10a      	b.n	8004640 <DiagonalCube_Handle+0x260>
				layer_diagonal = 0x18;
 800442a:	4b8e      	ldr	r3, [pc, #568]	; (8004664 <DiagonalCube_Handle+0x284>)
 800442c:	2218      	movs	r2, #24
 800442e:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 8004430:	2303      	movs	r3, #3
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	e007      	b.n	8004446 <DiagonalCube_Handle+0x66>
					column_diagonal[i] = 0x18;
 8004436:	4a8c      	ldr	r2, [pc, #560]	; (8004668 <DiagonalCube_Handle+0x288>)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	18d3      	adds	r3, r2, r3
 800443c:	2218      	movs	r2, #24
 800443e:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	3301      	adds	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2b04      	cmp	r3, #4
 800444a:	ddf4      	ble.n	8004436 <DiagonalCube_Handle+0x56>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 800444c:	4b85      	ldr	r3, [pc, #532]	; (8004664 <DiagonalCube_Handle+0x284>)
 800444e:	781e      	ldrb	r6, [r3, #0]
 8004450:	2338      	movs	r3, #56	; 0x38
 8004452:	18fc      	adds	r4, r7, r3
 8004454:	4d84      	ldr	r5, [pc, #528]	; (8004668 <DiagonalCube_Handle+0x288>)
 8004456:	466b      	mov	r3, sp
 8004458:	0018      	movs	r0, r3
 800445a:	0023      	movs	r3, r4
 800445c:	3308      	adds	r3, #8
 800445e:	225c      	movs	r2, #92	; 0x5c
 8004460:	0019      	movs	r1, r3
 8004462:	f000 fe7b 	bl	800515c <memcpy>
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	0031      	movs	r1, r6
 800446c:	0028      	movs	r0, r5
 800446e:	f000 fe0d 	bl	800508c <TransmitData>
				for (int i = 0; i < 8; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e007      	b.n	8004488 <DiagonalCube_Handle+0xa8>
					column_diagonal[i] = 0;
 8004478:	4a7b      	ldr	r2, [pc, #492]	; (8004668 <DiagonalCube_Handle+0x288>)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	18d3      	adds	r3, r2, r3
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3301      	adds	r3, #1
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b07      	cmp	r3, #7
 800448c:	ddf4      	ble.n	8004478 <DiagonalCube_Handle+0x98>
				size_layer = MEDIUM;
 800448e:	4b73      	ldr	r3, [pc, #460]	; (800465c <DiagonalCube_Handle+0x27c>)
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004494:	f7fc f9ac 	bl	80007f0 <HAL_GetTick>
 8004498:	0002      	movs	r2, r0
 800449a:	4b71      	ldr	r3, [pc, #452]	; (8004660 <DiagonalCube_Handle+0x280>)
 800449c:	601a      	str	r2, [r3, #0]
			break;
 800449e:	e0cf      	b.n	8004640 <DiagonalCube_Handle+0x260>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80044a0:	f7fc f9a6 	bl	80007f0 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	4b6e      	ldr	r3, [pc, #440]	; (8004660 <DiagonalCube_Handle+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2296      	movs	r2, #150	; 0x96
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d200      	bcs.n	80044b4 <DiagonalCube_Handle+0xd4>
 80044b2:	e0c7      	b.n	8004644 <DiagonalCube_Handle+0x264>
				layer_diagonal = 0x24;
 80044b4:	4b6b      	ldr	r3, [pc, #428]	; (8004664 <DiagonalCube_Handle+0x284>)
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 80044ba:	2302      	movs	r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e007      	b.n	80044d0 <DiagonalCube_Handle+0xf0>
					column_diagonal[i] = 0x3c;
 80044c0:	4a69      	ldr	r2, [pc, #420]	; (8004668 <DiagonalCube_Handle+0x288>)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	18d3      	adds	r3, r2, r3
 80044c6:	223c      	movs	r2, #60	; 0x3c
 80044c8:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	3301      	adds	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	ddf4      	ble.n	80044c0 <DiagonalCube_Handle+0xe0>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <DiagonalCube_Handle+0x284>)
 80044d8:	781e      	ldrb	r6, [r3, #0]
 80044da:	2338      	movs	r3, #56	; 0x38
 80044dc:	18fc      	adds	r4, r7, r3
 80044de:	4d62      	ldr	r5, [pc, #392]	; (8004668 <DiagonalCube_Handle+0x288>)
 80044e0:	466b      	mov	r3, sp
 80044e2:	0018      	movs	r0, r3
 80044e4:	0023      	movs	r3, r4
 80044e6:	3308      	adds	r3, #8
 80044e8:	225c      	movs	r2, #92	; 0x5c
 80044ea:	0019      	movs	r1, r3
 80044ec:	f000 fe36 	bl	800515c <memcpy>
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	0031      	movs	r1, r6
 80044f6:	0028      	movs	r0, r5
 80044f8:	f000 fdc8 	bl	800508c <TransmitData>
				for (int i = 0; i < 8; i++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	e007      	b.n	8004512 <DiagonalCube_Handle+0x132>
					column_diagonal[i] = 0;
 8004502:	4a59      	ldr	r2, [pc, #356]	; (8004668 <DiagonalCube_Handle+0x288>)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	18d3      	adds	r3, r2, r3
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	3301      	adds	r3, #1
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b07      	cmp	r3, #7
 8004516:	ddf4      	ble.n	8004502 <DiagonalCube_Handle+0x122>
				size_layer = LARGE;
 8004518:	4b50      	ldr	r3, [pc, #320]	; (800465c <DiagonalCube_Handle+0x27c>)
 800451a:	2202      	movs	r2, #2
 800451c:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 800451e:	f7fc f967 	bl	80007f0 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	4b4e      	ldr	r3, [pc, #312]	; (8004660 <DiagonalCube_Handle+0x280>)
 8004526:	601a      	str	r2, [r3, #0]
			break;
 8004528:	e08c      	b.n	8004644 <DiagonalCube_Handle+0x264>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 800452a:	f7fc f961 	bl	80007f0 <HAL_GetTick>
 800452e:	0002      	movs	r2, r0
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <DiagonalCube_Handle+0x280>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2296      	movs	r2, #150	; 0x96
 8004538:	4293      	cmp	r3, r2
 800453a:	d200      	bcs.n	800453e <DiagonalCube_Handle+0x15e>
 800453c:	e084      	b.n	8004648 <DiagonalCube_Handle+0x268>
				layer_diagonal = 0x42;
 800453e:	4b49      	ldr	r3, [pc, #292]	; (8004664 <DiagonalCube_Handle+0x284>)
 8004540:	2242      	movs	r2, #66	; 0x42
 8004542:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004544:	2301      	movs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e007      	b.n	800455a <DiagonalCube_Handle+0x17a>
					column_diagonal[i] = 0x7e;
 800454a:	4a47      	ldr	r2, [pc, #284]	; (8004668 <DiagonalCube_Handle+0x288>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	18d3      	adds	r3, r2, r3
 8004550:	227e      	movs	r2, #126	; 0x7e
 8004552:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b06      	cmp	r3, #6
 800455e:	ddf4      	ble.n	800454a <DiagonalCube_Handle+0x16a>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 8004560:	4b40      	ldr	r3, [pc, #256]	; (8004664 <DiagonalCube_Handle+0x284>)
 8004562:	781e      	ldrb	r6, [r3, #0]
 8004564:	2338      	movs	r3, #56	; 0x38
 8004566:	18fc      	adds	r4, r7, r3
 8004568:	4d3f      	ldr	r5, [pc, #252]	; (8004668 <DiagonalCube_Handle+0x288>)
 800456a:	466b      	mov	r3, sp
 800456c:	0018      	movs	r0, r3
 800456e:	0023      	movs	r3, r4
 8004570:	3308      	adds	r3, #8
 8004572:	225c      	movs	r2, #92	; 0x5c
 8004574:	0019      	movs	r1, r3
 8004576:	f000 fdf1 	bl	800515c <memcpy>
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	0031      	movs	r1, r6
 8004580:	0028      	movs	r0, r5
 8004582:	f000 fd83 	bl	800508c <TransmitData>
				for (int i = 0; i < 8; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	e007      	b.n	800459c <DiagonalCube_Handle+0x1bc>
					column_diagonal[i] = 0;
 800458c:	4a36      	ldr	r2, [pc, #216]	; (8004668 <DiagonalCube_Handle+0x288>)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	18d3      	adds	r3, r2, r3
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b07      	cmp	r3, #7
 80045a0:	ddf4      	ble.n	800458c <DiagonalCube_Handle+0x1ac>
				size_layer = LARGEST;
 80045a2:	4b2e      	ldr	r3, [pc, #184]	; (800465c <DiagonalCube_Handle+0x27c>)
 80045a4:	2203      	movs	r2, #3
 80045a6:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80045a8:	f7fc f922 	bl	80007f0 <HAL_GetTick>
 80045ac:	0002      	movs	r2, r0
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <DiagonalCube_Handle+0x280>)
 80045b0:	601a      	str	r2, [r3, #0]
			break;
 80045b2:	e049      	b.n	8004648 <DiagonalCube_Handle+0x268>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80045b4:	f7fc f91c 	bl	80007f0 <HAL_GetTick>
 80045b8:	0002      	movs	r2, r0
 80045ba:	4b29      	ldr	r3, [pc, #164]	; (8004660 <DiagonalCube_Handle+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2296      	movs	r2, #150	; 0x96
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d342      	bcc.n	800464c <DiagonalCube_Handle+0x26c>
				layer_diagonal= 0x81;
 80045c6:	4b27      	ldr	r3, [pc, #156]	; (8004664 <DiagonalCube_Handle+0x284>)
 80045c8:	2281      	movs	r2, #129	; 0x81
 80045ca:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e007      	b.n	80045e2 <DiagonalCube_Handle+0x202>
					column_diagonal[i] = 0xff;
 80045d2:	4a25      	ldr	r2, [pc, #148]	; (8004668 <DiagonalCube_Handle+0x288>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	18d3      	adds	r3, r2, r3
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3301      	adds	r3, #1
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b07      	cmp	r3, #7
 80045e6:	ddf4      	ble.n	80045d2 <DiagonalCube_Handle+0x1f2>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <DiagonalCube_Handle+0x284>)
 80045ea:	781e      	ldrb	r6, [r3, #0]
 80045ec:	2338      	movs	r3, #56	; 0x38
 80045ee:	18fc      	adds	r4, r7, r3
 80045f0:	4d1d      	ldr	r5, [pc, #116]	; (8004668 <DiagonalCube_Handle+0x288>)
 80045f2:	466b      	mov	r3, sp
 80045f4:	0018      	movs	r0, r3
 80045f6:	0023      	movs	r3, r4
 80045f8:	3308      	adds	r3, #8
 80045fa:	225c      	movs	r2, #92	; 0x5c
 80045fc:	0019      	movs	r1, r3
 80045fe:	f000 fdad 	bl	800515c <memcpy>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	0031      	movs	r1, r6
 8004608:	0028      	movs	r0, r5
 800460a:	f000 fd3f 	bl	800508c <TransmitData>
				for (int i = 0; i < 8; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	e007      	b.n	8004624 <DiagonalCube_Handle+0x244>
					column_diagonal[i] = 0;
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <DiagonalCube_Handle+0x288>)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b07      	cmp	r3, #7
 8004628:	ddf4      	ble.n	8004614 <DiagonalCube_Handle+0x234>
				size_layer = SMALLEST;
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <DiagonalCube_Handle+0x27c>)
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004630:	f7fc f8de 	bl	80007f0 <HAL_GetTick>
 8004634:	0002      	movs	r2, r0
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <DiagonalCube_Handle+0x280>)
 8004638:	601a      	str	r2, [r3, #0]
			break;
 800463a:	e007      	b.n	800464c <DiagonalCube_Handle+0x26c>
			break;
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	e006      	b.n	800464e <DiagonalCube_Handle+0x26e>
			break;
 8004640:	46c0      	nop			; (mov r8, r8)
 8004642:	e004      	b.n	800464e <DiagonalCube_Handle+0x26e>
			break;
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	e002      	b.n	800464e <DiagonalCube_Handle+0x26e>
			break;
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	e000      	b.n	800464e <DiagonalCube_Handle+0x26e>
			break;
 800464c:	46c0      	nop			; (mov r8, r8)
	}
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b009      	add	sp, #36	; 0x24
 8004654:	bcf0      	pop	{r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	b004      	add	sp, #16
 800465a:	4718      	bx	r3
 800465c:	20000154 	.word	0x20000154
 8004660:	20000160 	.word	0x20000160
 8004664:	20000155 	.word	0x20000155
 8004668:	20000158 	.word	0x20000158

0800466c <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <DiagonalCube_Set_State+0x3c>)
 8004674:	2204      	movs	r2, #4
 8004676:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e007      	b.n	800468e <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 800467e:	4a0b      	ldr	r2, [pc, #44]	; (80046ac <DiagonalCube_Set_State+0x40>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	18d3      	adds	r3, r2, r3
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3301      	adds	r3, #1
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b07      	cmp	r3, #7
 8004692:	ddf4      	ble.n	800467e <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <DiagonalCube_Set_State+0x44>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <DiagonalCube_Set_State+0x48>)
 800469c:	2203      	movs	r2, #3
 800469e:	701a      	strb	r2, [r3, #0]
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b002      	add	sp, #8
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000010 	.word	0x20000010
 80046ac:	20000158 	.word	0x20000158
 80046b0:	20000155 	.word	0x20000155
 80046b4:	20000154 	.word	0x20000154

080046b8 <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle(SPI_HandleTypeDef hspi1) //ok
{
 80046b8:	b084      	sub	sp, #16
 80046ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046bc:	b09f      	sub	sp, #124	; 0x7c
 80046be:	af18      	add	r7, sp, #96	; 0x60
 80046c0:	2430      	movs	r4, #48	; 0x30
 80046c2:	193c      	adds	r4, r7, r4
 80046c4:	6020      	str	r0, [r4, #0]
 80046c6:	6061      	str	r1, [r4, #4]
 80046c8:	60a2      	str	r2, [r4, #8]
 80046ca:	60e3      	str	r3, [r4, #12]
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 80046cc:	4bac      	ldr	r3, [pc, #688]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046ce:	22ff      	movs	r2, #255	; 0xff
 80046d0:	71da      	strb	r2, [r3, #7]
 80046d2:	4bab      	ldr	r3, [pc, #684]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046d4:	79da      	ldrb	r2, [r3, #7]
 80046d6:	4baa      	ldr	r3, [pc, #680]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046d8:	719a      	strb	r2, [r3, #6]
 80046da:	4ba9      	ldr	r3, [pc, #676]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046dc:	799a      	ldrb	r2, [r3, #6]
 80046de:	4ba8      	ldr	r3, [pc, #672]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046e0:	715a      	strb	r2, [r3, #5]
 80046e2:	4ba7      	ldr	r3, [pc, #668]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046e4:	795a      	ldrb	r2, [r3, #5]
 80046e6:	4ba6      	ldr	r3, [pc, #664]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046e8:	711a      	strb	r2, [r3, #4]
 80046ea:	4ba5      	ldr	r3, [pc, #660]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046ec:	791a      	ldrb	r2, [r3, #4]
 80046ee:	4ba4      	ldr	r3, [pc, #656]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046f0:	70da      	strb	r2, [r3, #3]
 80046f2:	4ba3      	ldr	r3, [pc, #652]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046f4:	78da      	ldrb	r2, [r3, #3]
 80046f6:	4ba2      	ldr	r3, [pc, #648]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046f8:	709a      	strb	r2, [r3, #2]
 80046fa:	4ba1      	ldr	r3, [pc, #644]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80046fc:	789a      	ldrb	r2, [r3, #2]
 80046fe:	4ba0      	ldr	r3, [pc, #640]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004700:	705a      	strb	r2, [r3, #1]
 8004702:	4b9f      	ldr	r3, [pc, #636]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004704:	785a      	ldrb	r2, [r3, #1]
 8004706:	4b9e      	ldr	r3, [pc, #632]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004708:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 800470a:	4b9d      	ldr	r3, [pc, #628]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800470c:	227e      	movs	r2, #126	; 0x7e
 800470e:	739a      	strb	r2, [r3, #14]
 8004710:	4b9b      	ldr	r3, [pc, #620]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004712:	7b9a      	ldrb	r2, [r3, #14]
 8004714:	4b9a      	ldr	r3, [pc, #616]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004716:	735a      	strb	r2, [r3, #13]
 8004718:	4b99      	ldr	r3, [pc, #612]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800471a:	7b5a      	ldrb	r2, [r3, #13]
 800471c:	4b98      	ldr	r3, [pc, #608]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800471e:	731a      	strb	r2, [r3, #12]
 8004720:	4b97      	ldr	r3, [pc, #604]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004722:	7b1a      	ldrb	r2, [r3, #12]
 8004724:	4b96      	ldr	r3, [pc, #600]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004726:	72da      	strb	r2, [r3, #11]
 8004728:	4b95      	ldr	r3, [pc, #596]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800472a:	7ada      	ldrb	r2, [r3, #11]
 800472c:	4b94      	ldr	r3, [pc, #592]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800472e:	729a      	strb	r2, [r3, #10]
 8004730:	4b93      	ldr	r3, [pc, #588]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004732:	7a9a      	ldrb	r2, [r3, #10]
 8004734:	4b92      	ldr	r3, [pc, #584]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004736:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 8004738:	4b91      	ldr	r3, [pc, #580]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800473a:	223c      	movs	r2, #60	; 0x3c
 800473c:	755a      	strb	r2, [r3, #21]
 800473e:	4b90      	ldr	r3, [pc, #576]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004740:	7d5a      	ldrb	r2, [r3, #21]
 8004742:	4b8f      	ldr	r3, [pc, #572]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004744:	751a      	strb	r2, [r3, #20]
 8004746:	4b8e      	ldr	r3, [pc, #568]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004748:	7d1a      	ldrb	r2, [r3, #20]
 800474a:	4b8d      	ldr	r3, [pc, #564]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800474c:	74da      	strb	r2, [r3, #19]
 800474e:	4b8c      	ldr	r3, [pc, #560]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004750:	7cda      	ldrb	r2, [r3, #19]
 8004752:	4b8b      	ldr	r3, [pc, #556]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004754:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 8004756:	4b8a      	ldr	r3, [pc, #552]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004758:	2218      	movs	r2, #24
 800475a:	771a      	strb	r2, [r3, #28]
 800475c:	4b88      	ldr	r3, [pc, #544]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800475e:	7f1a      	ldrb	r2, [r3, #28]
 8004760:	4b87      	ldr	r3, [pc, #540]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 8004762:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 8004764:	4b87      	ldr	r3, [pc, #540]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 8004766:	22ff      	movs	r2, #255	; 0xff
 8004768:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 800476a:	4b86      	ldr	r3, [pc, #536]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 800476c:	227e      	movs	r2, #126	; 0x7e
 800476e:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 8004770:	4b84      	ldr	r3, [pc, #528]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 8004772:	223c      	movs	r2, #60	; 0x3c
 8004774:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 8004776:	4b83      	ldr	r3, [pc, #524]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 8004778:	2218      	movs	r2, #24
 800477a:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 800477c:	4b82      	ldr	r3, [pc, #520]	; (8004988 <GrowShrinkCube_Handle+0x2d0>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d100      	bne.n	8004786 <GrowShrinkCube_Handle+0xce>
 8004784:	e0b5      	b.n	80048f2 <GrowShrinkCube_Handle+0x23a>
 8004786:	dd00      	ble.n	800478a <GrowShrinkCube_Handle+0xd2>
 8004788:	e0ea      	b.n	8004960 <GrowShrinkCube_Handle+0x2a8>
 800478a:	2b02      	cmp	r3, #2
 800478c:	d100      	bne.n	8004790 <GrowShrinkCube_Handle+0xd8>
 800478e:	e078      	b.n	8004882 <GrowShrinkCube_Handle+0x1ca>
 8004790:	dd00      	ble.n	8004794 <GrowShrinkCube_Handle+0xdc>
 8004792:	e0e5      	b.n	8004960 <GrowShrinkCube_Handle+0x2a8>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <GrowShrinkCube_Handle+0xe6>
 8004798:	2b01      	cmp	r3, #1
 800479a:	d039      	beq.n	8004810 <GrowShrinkCube_Handle+0x158>
				time_start = HAL_GetTick();
				size_cube = TWO_X_TWO_CUBE;
			}
			break;
		default:
			break;
 800479c:	e0e0      	b.n	8004960 <GrowShrinkCube_Handle+0x2a8>
			if (HAL_GetTick() - time_start >= time_todo2)
 800479e:	f7fc f827 	bl	80007f0 <HAL_GetTick>
 80047a2:	0002      	movs	r2, r0
 80047a4:	4b79      	ldr	r3, [pc, #484]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	22c8      	movs	r2, #200	; 0xc8
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d200      	bcs.n	80047b2 <GrowShrinkCube_Handle+0xfa>
 80047b0:	e0d8      	b.n	8004964 <GrowShrinkCube_Handle+0x2ac>
				for (int j = 0; j < 8; j++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e01f      	b.n	80047f8 <GrowShrinkCube_Handle+0x140>
					temp[j] = column_growshrink[3][j];
 80047b8:	4a71      	ldr	r2, [pc, #452]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	18d3      	adds	r3, r2, r3
 80047be:	3318      	adds	r3, #24
 80047c0:	7819      	ldrb	r1, [r3, #0]
 80047c2:	003a      	movs	r2, r7
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	18d3      	adds	r3, r2, r3
 80047c8:	1c0a      	adds	r2, r1, #0
 80047ca:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3], hspi1);
 80047cc:	4b6d      	ldr	r3, [pc, #436]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 80047ce:	78de      	ldrb	r6, [r3, #3]
 80047d0:	2330      	movs	r3, #48	; 0x30
 80047d2:	18fc      	adds	r4, r7, r3
 80047d4:	003d      	movs	r5, r7
 80047d6:	466b      	mov	r3, sp
 80047d8:	0018      	movs	r0, r3
 80047da:	0023      	movs	r3, r4
 80047dc:	3308      	adds	r3, #8
 80047de:	225c      	movs	r2, #92	; 0x5c
 80047e0:	0019      	movs	r1, r3
 80047e2:	f000 fcbb 	bl	800515c <memcpy>
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	0031      	movs	r1, r6
 80047ec:	0028      	movs	r0, r5
 80047ee:	f000 fc4d 	bl	800508c <TransmitData>
				for (int j = 0; j < 8; j++)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3301      	adds	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b07      	cmp	r3, #7
 80047fc:	dddc      	ble.n	80047b8 <GrowShrinkCube_Handle+0x100>
				time_start = HAL_GetTick();
 80047fe:	f7fb fff7 	bl	80007f0 <HAL_GetTick>
 8004802:	0002      	movs	r2, r0
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 8004806:	601a      	str	r2, [r3, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 8004808:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <GrowShrinkCube_Handle+0x2d0>)
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
			break;
 800480e:	e0a9      	b.n	8004964 <GrowShrinkCube_Handle+0x2ac>
			if (HAL_GetTick() - time_start >= time_todo2)
 8004810:	f7fb ffee 	bl	80007f0 <HAL_GetTick>
 8004814:	0002      	movs	r2, r0
 8004816:	4b5d      	ldr	r3, [pc, #372]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	22c8      	movs	r2, #200	; 0xc8
 800481e:	4293      	cmp	r3, r2
 8004820:	d200      	bcs.n	8004824 <GrowShrinkCube_Handle+0x16c>
 8004822:	e0a1      	b.n	8004968 <GrowShrinkCube_Handle+0x2b0>
				for (int j = 0; j < 8; j++)
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e01f      	b.n	800486a <GrowShrinkCube_Handle+0x1b2>
					temp[j] = column_growshrink[2][j];
 800482a:	4a55      	ldr	r2, [pc, #340]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	18d3      	adds	r3, r2, r3
 8004830:	3310      	adds	r3, #16
 8004832:	7819      	ldrb	r1, [r3, #0]
 8004834:	003a      	movs	r2, r7
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	18d3      	adds	r3, r2, r3
 800483a:	1c0a      	adds	r2, r1, #0
 800483c:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2], hspi1);
 800483e:	4b51      	ldr	r3, [pc, #324]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 8004840:	789e      	ldrb	r6, [r3, #2]
 8004842:	2330      	movs	r3, #48	; 0x30
 8004844:	18fc      	adds	r4, r7, r3
 8004846:	003d      	movs	r5, r7
 8004848:	466b      	mov	r3, sp
 800484a:	0018      	movs	r0, r3
 800484c:	0023      	movs	r3, r4
 800484e:	3308      	adds	r3, #8
 8004850:	225c      	movs	r2, #92	; 0x5c
 8004852:	0019      	movs	r1, r3
 8004854:	f000 fc82 	bl	800515c <memcpy>
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	6863      	ldr	r3, [r4, #4]
 800485c:	0031      	movs	r1, r6
 800485e:	0028      	movs	r0, r5
 8004860:	f000 fc14 	bl	800508c <TransmitData>
				for (int j = 0; j < 8; j++)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3301      	adds	r3, #1
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b07      	cmp	r3, #7
 800486e:	dddc      	ble.n	800482a <GrowShrinkCube_Handle+0x172>
				time_start = HAL_GetTick();
 8004870:	f7fb ffbe 	bl	80007f0 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	4b45      	ldr	r3, [pc, #276]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 8004878:	601a      	str	r2, [r3, #0]
				size_cube = SIX_X_SIX_CUBE;
 800487a:	4b43      	ldr	r3, [pc, #268]	; (8004988 <GrowShrinkCube_Handle+0x2d0>)
 800487c:	2202      	movs	r2, #2
 800487e:	701a      	strb	r2, [r3, #0]
			break;
 8004880:	e072      	b.n	8004968 <GrowShrinkCube_Handle+0x2b0>
			if (HAL_GetTick() - time_start >= time_todo2)
 8004882:	f7fb ffb5 	bl	80007f0 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	4b40      	ldr	r3, [pc, #256]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	22c8      	movs	r2, #200	; 0xc8
 8004890:	4293      	cmp	r3, r2
 8004892:	d36b      	bcc.n	800496c <GrowShrinkCube_Handle+0x2b4>
				for (int j = 0; j < 8; j++)
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e01f      	b.n	80048da <GrowShrinkCube_Handle+0x222>
					temp[j] = column_growshrink[1][j];
 800489a:	4a39      	ldr	r2, [pc, #228]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	3308      	adds	r3, #8
 80048a2:	7819      	ldrb	r1, [r3, #0]
 80048a4:	003a      	movs	r2, r7
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	18d3      	adds	r3, r2, r3
 80048aa:	1c0a      	adds	r2, r1, #0
 80048ac:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1], hspi1);
 80048ae:	4b35      	ldr	r3, [pc, #212]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 80048b0:	785e      	ldrb	r6, [r3, #1]
 80048b2:	2330      	movs	r3, #48	; 0x30
 80048b4:	18fc      	adds	r4, r7, r3
 80048b6:	003d      	movs	r5, r7
 80048b8:	466b      	mov	r3, sp
 80048ba:	0018      	movs	r0, r3
 80048bc:	0023      	movs	r3, r4
 80048be:	3308      	adds	r3, #8
 80048c0:	225c      	movs	r2, #92	; 0x5c
 80048c2:	0019      	movs	r1, r3
 80048c4:	f000 fc4a 	bl	800515c <memcpy>
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	0031      	movs	r1, r6
 80048ce:	0028      	movs	r0, r5
 80048d0:	f000 fbdc 	bl	800508c <TransmitData>
				for (int j = 0; j < 8; j++)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b07      	cmp	r3, #7
 80048de:	dddc      	ble.n	800489a <GrowShrinkCube_Handle+0x1e2>
				time_start = HAL_GetTick();
 80048e0:	f7fb ff86 	bl	80007f0 <HAL_GetTick>
 80048e4:	0002      	movs	r2, r0
 80048e6:	4b29      	ldr	r3, [pc, #164]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 80048e8:	601a      	str	r2, [r3, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 80048ea:	4b27      	ldr	r3, [pc, #156]	; (8004988 <GrowShrinkCube_Handle+0x2d0>)
 80048ec:	2203      	movs	r2, #3
 80048ee:	701a      	strb	r2, [r3, #0]
			break;
 80048f0:	e03c      	b.n	800496c <GrowShrinkCube_Handle+0x2b4>
			if (HAL_GetTick() - time_start >= time_todo2)
 80048f2:	f7fb ff7d 	bl	80007f0 <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	4b24      	ldr	r3, [pc, #144]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	22c8      	movs	r2, #200	; 0xc8
 8004900:	4293      	cmp	r3, r2
 8004902:	d335      	bcc.n	8004970 <GrowShrinkCube_Handle+0x2b8>
				for (int j = 0; j < 8; j++)
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	e01e      	b.n	8004948 <GrowShrinkCube_Handle+0x290>
					temp[j] = column_growshrink[0][j];
 800490a:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <GrowShrinkCube_Handle+0x2c8>)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	18d3      	adds	r3, r2, r3
 8004910:	7819      	ldrb	r1, [r3, #0]
 8004912:	003a      	movs	r2, r7
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	18d3      	adds	r3, r2, r3
 8004918:	1c0a      	adds	r2, r1, #0
 800491a:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0], hspi1);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <GrowShrinkCube_Handle+0x2cc>)
 800491e:	781e      	ldrb	r6, [r3, #0]
 8004920:	2330      	movs	r3, #48	; 0x30
 8004922:	18fc      	adds	r4, r7, r3
 8004924:	003d      	movs	r5, r7
 8004926:	466b      	mov	r3, sp
 8004928:	0018      	movs	r0, r3
 800492a:	0023      	movs	r3, r4
 800492c:	3308      	adds	r3, #8
 800492e:	225c      	movs	r2, #92	; 0x5c
 8004930:	0019      	movs	r1, r3
 8004932:	f000 fc13 	bl	800515c <memcpy>
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	0031      	movs	r1, r6
 800493c:	0028      	movs	r0, r5
 800493e:	f000 fba5 	bl	800508c <TransmitData>
				for (int j = 0; j < 8; j++)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3301      	adds	r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b07      	cmp	r3, #7
 800494c:	dddd      	ble.n	800490a <GrowShrinkCube_Handle+0x252>
				time_start = HAL_GetTick();
 800494e:	f7fb ff4f 	bl	80007f0 <HAL_GetTick>
 8004952:	0002      	movs	r2, r0
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <GrowShrinkCube_Handle+0x2d4>)
 8004956:	601a      	str	r2, [r3, #0]
				size_cube = TWO_X_TWO_CUBE;
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <GrowShrinkCube_Handle+0x2d0>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
			break;
 800495e:	e007      	b.n	8004970 <GrowShrinkCube_Handle+0x2b8>
			break;
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	e006      	b.n	8004972 <GrowShrinkCube_Handle+0x2ba>
			break;
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	e004      	b.n	8004972 <GrowShrinkCube_Handle+0x2ba>
			break;
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	e002      	b.n	8004972 <GrowShrinkCube_Handle+0x2ba>
			break;
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	e000      	b.n	8004972 <GrowShrinkCube_Handle+0x2ba>
			break;
 8004970:	46c0      	nop			; (mov r8, r8)
	}
}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b007      	add	sp, #28
 8004978:	bcf0      	pop	{r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	b004      	add	sp, #16
 800497e:	4718      	bx	r3
 8004980:	2000016c 	.word	0x2000016c
 8004984:	2000018c 	.word	0x2000018c
 8004988:	20000164 	.word	0x20000164
 800498c:	20000168 	.word	0x20000168

08004990 <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <GrowShrinkCube_Set_State+0x58>)
 8004998:	2203      	movs	r2, #3
 800499a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 800499c:	2300      	movs	r3, #0
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	e018      	b.n	80049d4 <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 80049a2:	4a12      	ldr	r2, [pc, #72]	; (80049ec <GrowShrinkCube_Set_State+0x5c>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	18d3      	adds	r3, r2, r3
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	e00a      	b.n	80049c8 <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 80049b2:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <GrowShrinkCube_Set_State+0x60>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	18d2      	adds	r2, r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	18d3      	adds	r3, r2, r3
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	ddf1      	ble.n	80049b2 <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3301      	adds	r3, #1
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	dde3      	ble.n	80049a2 <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <GrowShrinkCube_Set_State+0x64>)
 80049dc:	2203      	movs	r2, #3
 80049de:	701a      	strb	r2, [r3, #0]
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000010 	.word	0x20000010
 80049ec:	2000018c 	.word	0x2000018c
 80049f0:	2000016c 	.word	0x2000016c
 80049f4:	20000164 	.word	0x20000164

080049f8 <Btn_press_Callback>:
#include "led_cube_handle.h"

Cube_Status currentEffect = SWEEP_ALL_LEDS;

void Btn_press_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	000a      	movs	r2, r1
 8004a02:	1cbb      	adds	r3, r7, #2
 8004a04:	801a      	strh	r2, [r3, #0]
	switch(currentEffect){
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <Btn_press_Callback+0x58>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d81b      	bhi.n	8004a46 <Btn_press_Callback+0x4e>
 8004a0e:	009a      	lsls	r2, r3, #2
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <Btn_press_Callback+0x5c>)
 8004a12:	18d3      	adds	r3, r2, r3
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	469f      	mov	pc, r3
	case TURN_OFF_ALL_LEDS:
		currentEffect = TURN_ON_ALL_LEDS;
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <Btn_press_Callback+0x58>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
		break;
 8004a1e:	e013      	b.n	8004a48 <Btn_press_Callback+0x50>
	case TURN_ON_ALL_LEDS:
		PlaneCube_Set_State();
 8004a20:	f000 fb04 	bl	800502c <PlaneCube_Set_State>
		break;
 8004a24:	e010      	b.n	8004a48 <Btn_press_Callback+0x50>
	case SWEEP_ALL_LEDS:
		GrowShrinkCube_Set_State();
 8004a26:	f7ff ffb3 	bl	8004990 <GrowShrinkCube_Set_State>
		break;
 8004a2a:	e00d      	b.n	8004a48 <Btn_press_Callback+0x50>
	case GROW_SHRINK_CUBE:
		DiagonalCube_Set_State();
 8004a2c:	f7ff fe1e 	bl	800466c <DiagonalCube_Set_State>
		break;
 8004a30:	e00a      	b.n	8004a48 <Btn_press_Callback+0x50>
	case DIAGONAL_CUBE:
		AroundEdgeCube_Set_State();
 8004a32:	f7fe fadb 	bl	8002fec <AroundEdgeCube_Set_State>
		break;
 8004a36:	e007      	b.n	8004a48 <Btn_press_Callback+0x50>
	case AROUND_EDGE_CUBE:
		CountDownCube_Set_Sate();
 8004a38:	f7fe ff18 	bl	800386c <CountDownCube_Set_Sate>
		break;
 8004a3c:	e004      	b.n	8004a48 <Btn_press_Callback+0x50>
	case COUNT_DOWN_CUBE:
		currentEffect = TURN_OFF_ALL_LEDS;
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <Btn_press_Callback+0x58>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
		break;
 8004a44:	e000      	b.n	8004a48 <Btn_press_Callback+0x50>
//	case RANDOM_RAIN_CUBE:
//		currentEffect = TURN_OFF_ALL_LEDS;
//		break;
	default:
		break;
 8004a46:	46c0      	nop			; (mov r8, r8)
	}
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000010 	.word	0x20000010
 8004a54:	080051f8 	.word	0x080051f8

08004a58 <Led_cube_Handle>:

void Led_cube_Handle(Cube_Status cube_state,SPI_HandleTypeDef hspi1)
{
 8004a58:	b084      	sub	sp, #16
 8004a5a:	b5b0      	push	{r4, r5, r7, lr}
 8004a5c:	b098      	sub	sp, #96	; 0x60
 8004a5e:	af16      	add	r7, sp, #88	; 0x58
 8004a60:	0004      	movs	r4, r0
 8004a62:	2004      	movs	r0, #4
 8004a64:	2518      	movs	r5, #24
 8004a66:	1940      	adds	r0, r0, r5
 8004a68:	19c0      	adds	r0, r0, r7
 8004a6a:	6001      	str	r1, [r0, #0]
 8004a6c:	6042      	str	r2, [r0, #4]
 8004a6e:	6083      	str	r3, [r0, #8]
 8004a70:	1dfb      	adds	r3, r7, #7
 8004a72:	1c22      	adds	r2, r4, #0
 8004a74:	701a      	strb	r2, [r3, #0]
	switch (cube_state) {
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d900      	bls.n	8004a80 <Led_cube_Handle+0x28>
 8004a7e:	e089      	b.n	8004b94 <Led_cube_Handle+0x13c>
 8004a80:	009a      	lsls	r2, r3, #2
 8004a82:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <Led_cube_Handle+0x14c>)
 8004a84:	18d3      	adds	r3, r2, r3
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	469f      	mov	pc, r3
		case TURN_OFF_ALL_LEDS:
			clearCube(hspi1);
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	2218      	movs	r2, #24
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	19dc      	adds	r4, r3, r7
 8004a92:	466b      	mov	r3, sp
 8004a94:	0018      	movs	r0, r3
 8004a96:	0023      	movs	r3, r4
 8004a98:	3310      	adds	r3, #16
 8004a9a:	2254      	movs	r2, #84	; 0x54
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	f000 fb5d 	bl	800515c <memcpy>
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	6861      	ldr	r1, [r4, #4]
 8004aa6:	68a2      	ldr	r2, [r4, #8]
 8004aa8:	68e3      	ldr	r3, [r4, #12]
 8004aaa:	f7fe fb82 	bl	80031b2 <clearCube>
			break;
 8004aae:	e072      	b.n	8004b96 <Led_cube_Handle+0x13e>
		case TURN_ON_ALL_LEDS:
			lightCube(hspi1);
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	2218      	movs	r2, #24
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	19dc      	adds	r4, r3, r7
 8004ab8:	466b      	mov	r3, sp
 8004aba:	0018      	movs	r0, r3
 8004abc:	0023      	movs	r3, r4
 8004abe:	3310      	adds	r3, #16
 8004ac0:	2254      	movs	r2, #84	; 0x54
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	f000 fb4a 	bl	800515c <memcpy>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	6861      	ldr	r1, [r4, #4]
 8004acc:	68a2      	ldr	r2, [r4, #8]
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	f000 f86a 	bl	8004ba8 <lightCube>
			break;
 8004ad4:	e05f      	b.n	8004b96 <Led_cube_Handle+0x13e>
		case SWEEP_ALL_LEDS:
			PlaneCube_Handle(hspi1);
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	2218      	movs	r2, #24
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	19dc      	adds	r4, r3, r7
 8004ade:	466b      	mov	r3, sp
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	0023      	movs	r3, r4
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	2254      	movs	r2, #84	; 0x54
 8004ae8:	0019      	movs	r1, r3
 8004aea:	f000 fb37 	bl	800515c <memcpy>
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	6861      	ldr	r1, [r4, #4]
 8004af2:	68a2      	ldr	r2, [r4, #8]
 8004af4:	68e3      	ldr	r3, [r4, #12]
 8004af6:	f000 f899 	bl	8004c2c <PlaneCube_Handle>
			break;
 8004afa:	e04c      	b.n	8004b96 <Led_cube_Handle+0x13e>
		case GROW_SHRINK_CUBE:
			GrowShrinkCube_Handle(hspi1);
 8004afc:	2304      	movs	r3, #4
 8004afe:	2218      	movs	r2, #24
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	19dc      	adds	r4, r3, r7
 8004b04:	466b      	mov	r3, sp
 8004b06:	0018      	movs	r0, r3
 8004b08:	0023      	movs	r3, r4
 8004b0a:	3310      	adds	r3, #16
 8004b0c:	2254      	movs	r2, #84	; 0x54
 8004b0e:	0019      	movs	r1, r3
 8004b10:	f000 fb24 	bl	800515c <memcpy>
 8004b14:	6820      	ldr	r0, [r4, #0]
 8004b16:	6861      	ldr	r1, [r4, #4]
 8004b18:	68a2      	ldr	r2, [r4, #8]
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	f7ff fdcc 	bl	80046b8 <GrowShrinkCube_Handle>
			break;
 8004b20:	e039      	b.n	8004b96 <Led_cube_Handle+0x13e>
		case DIAGONAL_CUBE:
			DiagonalCube_Handle(hspi1);
 8004b22:	2304      	movs	r3, #4
 8004b24:	2218      	movs	r2, #24
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	19dc      	adds	r4, r3, r7
 8004b2a:	466b      	mov	r3, sp
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	0023      	movs	r3, r4
 8004b30:	3310      	adds	r3, #16
 8004b32:	2254      	movs	r2, #84	; 0x54
 8004b34:	0019      	movs	r1, r3
 8004b36:	f000 fb11 	bl	800515c <memcpy>
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	6861      	ldr	r1, [r4, #4]
 8004b3e:	68a2      	ldr	r2, [r4, #8]
 8004b40:	68e3      	ldr	r3, [r4, #12]
 8004b42:	f7ff fc4d 	bl	80043e0 <DiagonalCube_Handle>
			break;
 8004b46:	e026      	b.n	8004b96 <Led_cube_Handle+0x13e>
		case AROUND_EDGE_CUBE:
			AroundEdgeCube_Handle(hspi1);
 8004b48:	2304      	movs	r3, #4
 8004b4a:	2218      	movs	r2, #24
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	19dc      	adds	r4, r3, r7
 8004b50:	466b      	mov	r3, sp
 8004b52:	0018      	movs	r0, r3
 8004b54:	0023      	movs	r3, r4
 8004b56:	3310      	adds	r3, #16
 8004b58:	2254      	movs	r2, #84	; 0x54
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	f000 fafe 	bl	800515c <memcpy>
 8004b60:	6820      	ldr	r0, [r4, #0]
 8004b62:	6861      	ldr	r1, [r4, #4]
 8004b64:	68a2      	ldr	r2, [r4, #8]
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	f7fe f9b2 	bl	8002ed0 <AroundEdgeCube_Handle>
			break;
 8004b6c:	e013      	b.n	8004b96 <Led_cube_Handle+0x13e>
		case COUNT_DOWN_CUBE:
			CountDownCube_Handle(hspi1);
 8004b6e:	2304      	movs	r3, #4
 8004b70:	2218      	movs	r2, #24
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	19dc      	adds	r4, r3, r7
 8004b76:	466b      	mov	r3, sp
 8004b78:	0018      	movs	r0, r3
 8004b7a:	0023      	movs	r3, r4
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	2254      	movs	r2, #84	; 0x54
 8004b80:	0019      	movs	r1, r3
 8004b82:	f000 faeb 	bl	800515c <memcpy>
 8004b86:	6820      	ldr	r0, [r4, #0]
 8004b88:	6861      	ldr	r1, [r4, #4]
 8004b8a:	68a2      	ldr	r2, [r4, #8]
 8004b8c:	68e3      	ldr	r3, [r4, #12]
 8004b8e:	f7fe fb47 	bl	8003220 <CountDownCube_Handle>
			break;
 8004b92:	e000      	b.n	8004b96 <Led_cube_Handle+0x13e>
//		case RANDOM_RAIN_CUBE:
//			RandomRainCube_Handle(hspi1);
//			break;
		default:
			break;
 8004b94:	46c0      	nop			; (mov r8, r8)
	}
}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b002      	add	sp, #8
 8004b9c:	bcb0      	pop	{r4, r5, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	b004      	add	sp, #16
 8004ba2:	4718      	bx	r3
 8004ba4:	08005214 	.word	0x08005214

08004ba8 <lightCube>:
#include "light_cube.h"

void lightCube(SPI_HandleTypeDef hspi1)
{
 8004ba8:	b084      	sub	sp, #16
 8004baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bac:	b09f      	sub	sp, #124	; 0x7c
 8004bae:	af18      	add	r7, sp, #96	; 0x60
 8004bb0:	2430      	movs	r4, #48	; 0x30
 8004bb2:	193c      	adds	r4, r7, r4
 8004bb4:	6020      	str	r0, [r4, #0]
 8004bb6:	6061      	str	r1, [r4, #4]
 8004bb8:	60a2      	str	r2, [r4, #8]
 8004bba:	60e3      	str	r3, [r4, #12]
	uint8_t column[8], layer;
	for (int i = 0;  i < 8; i++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e029      	b.n	8004c16 <lightCube+0x6e>
	{
		for (int j = 0; j < 8; j++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e007      	b.n	8004bd8 <lightCube+0x30>
		{
			column[i] = 0xff;
 8004bc8:	1d3a      	adds	r2, r7, #4
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	18d3      	adds	r3, r2, r3
 8004bce:	22ff      	movs	r2, #255	; 0xff
 8004bd0:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b07      	cmp	r3, #7
 8004bdc:	ddf4      	ble.n	8004bc8 <lightCube+0x20>
		}
		layer = 0x80 >> i;
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	411a      	asrs	r2, r3
 8004be4:	210f      	movs	r1, #15
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	701a      	strb	r2, [r3, #0]
		TransmitData(column, layer,hspi1);
 8004bea:	2330      	movs	r3, #48	; 0x30
 8004bec:	18fc      	adds	r4, r7, r3
 8004bee:	187b      	adds	r3, r7, r1
 8004bf0:	781e      	ldrb	r6, [r3, #0]
 8004bf2:	1d3d      	adds	r5, r7, #4
 8004bf4:	466b      	mov	r3, sp
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	0023      	movs	r3, r4
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	225c      	movs	r2, #92	; 0x5c
 8004bfe:	0019      	movs	r1, r3
 8004c00:	f000 faac 	bl	800515c <memcpy>
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	6863      	ldr	r3, [r4, #4]
 8004c08:	0031      	movs	r1, r6
 8004c0a:	0028      	movs	r0, r5
 8004c0c:	f000 fa3e 	bl	800508c <TransmitData>
	for (int i = 0;  i < 8; i++)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3301      	adds	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b07      	cmp	r3, #7
 8004c1a:	ddd2      	ble.n	8004bc2 <lightCube+0x1a>
	}
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b007      	add	sp, #28
 8004c24:	bcf0      	pop	{r4, r5, r6, r7}
 8004c26:	bc08      	pop	{r3}
 8004c28:	b004      	add	sp, #16
 8004c2a:	4718      	bx	r3

08004c2c <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(SPI_HandleTypeDef hspi1){
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c30:	b0a1      	sub	sp, #132	; 0x84
 8004c32:	af18      	add	r7, sp, #96	; 0x60
 8004c34:	2438      	movs	r4, #56	; 0x38
 8004c36:	193c      	adds	r4, r7, r4
 8004c38:	6020      	str	r0, [r4, #0]
 8004c3a:	6061      	str	r1, [r4, #4]
 8004c3c:	60a2      	str	r2, [r4, #8]
 8004c3e:	60e3      	str	r3, [r4, #12]
	switch(way_state){
 8004c40:	4bd8      	ldr	r3, [pc, #864]	; (8004fa4 <PlaneCube_Handle+0x378>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d100      	bne.n	8004c4a <PlaneCube_Handle+0x1e>
 8004c48:	e13d      	b.n	8004ec6 <PlaneCube_Handle+0x29a>
 8004c4a:	dd00      	ble.n	8004c4e <PlaneCube_Handle+0x22>
 8004c4c:	e1d3      	b.n	8004ff6 <PlaneCube_Handle+0x3ca>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <PlaneCube_Handle+0x2e>
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d100      	bne.n	8004c58 <PlaneCube_Handle+0x2c>
 8004c56:	e084      	b.n	8004d62 <PlaneCube_Handle+0x136>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 8004c58:	e1cd      	b.n	8004ff6 <PlaneCube_Handle+0x3ca>
		layer_plane = 0xff;
 8004c5a:	4bd3      	ldr	r3, [pc, #844]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004c5c:	22ff      	movs	r2, #255	; 0xff
 8004c5e:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004c60:	f7fb fdc6 	bl	80007f0 <HAL_GetTick>
 8004c64:	0002      	movs	r2, r0
 8004c66:	4bd1      	ldr	r3, [pc, #836]	; (8004fac <PlaneCube_Handle+0x380>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2264      	movs	r2, #100	; 0x64
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d200      	bcs.n	8004c74 <PlaneCube_Handle+0x48>
 8004c72:	e1c2      	b.n	8004ffa <PlaneCube_Handle+0x3ce>
			if (way)
 8004c74:	4bce      	ldr	r3, [pc, #824]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d033      	beq.n	8004ce4 <PlaneCube_Handle+0xb8>
				column_plane[i] = 0xff;
 8004c7c:	4bcd      	ldr	r3, [pc, #820]	; (8004fb4 <PlaneCube_Handle+0x388>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4acd      	ldr	r2, [pc, #820]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004c82:	21ff      	movs	r1, #255	; 0xff
 8004c84:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane, hspi1);
 8004c86:	4bc8      	ldr	r3, [pc, #800]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004c88:	781e      	ldrb	r6, [r3, #0]
 8004c8a:	2338      	movs	r3, #56	; 0x38
 8004c8c:	18fc      	adds	r4, r7, r3
 8004c8e:	4dca      	ldr	r5, [pc, #808]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004c90:	466b      	mov	r3, sp
 8004c92:	0018      	movs	r0, r3
 8004c94:	0023      	movs	r3, r4
 8004c96:	3308      	adds	r3, #8
 8004c98:	225c      	movs	r2, #92	; 0x5c
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	f000 fa5e 	bl	800515c <memcpy>
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	6863      	ldr	r3, [r4, #4]
 8004ca4:	0031      	movs	r1, r6
 8004ca6:	0028      	movs	r0, r5
 8004ca8:	f000 f9f0 	bl	800508c <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 8004cac:	4bc2      	ldr	r3, [pc, #776]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004cae:	79db      	ldrb	r3, [r3, #7]
 8004cb0:	2bff      	cmp	r3, #255	; 0xff
 8004cb2:	d103      	bne.n	8004cbc <PlaneCube_Handle+0x90>
 8004cb4:	4bbe      	ldr	r3, [pc, #760]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e004      	b.n	8004cc6 <PlaneCube_Handle+0x9a>
				else i++;
 8004cbc:	4bbd      	ldr	r3, [pc, #756]	; (8004fb4 <PlaneCube_Handle+0x388>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	4bbc      	ldr	r3, [pc, #752]	; (8004fb4 <PlaneCube_Handle+0x388>)
 8004cc4:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e007      	b.n	8004cdc <PlaneCube_Handle+0xb0>
					column_plane[j] = 0;
 8004ccc:	4aba      	ldr	r2, [pc, #744]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	18d3      	adds	r3, r2, r3
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b07      	cmp	r3, #7
 8004ce0:	ddf4      	ble.n	8004ccc <PlaneCube_Handle+0xa0>
 8004ce2:	e038      	b.n	8004d56 <PlaneCube_Handle+0x12a>
				column_plane[i] = 0xff;
 8004ce4:	4bb3      	ldr	r3, [pc, #716]	; (8004fb4 <PlaneCube_Handle+0x388>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4ab3      	ldr	r2, [pc, #716]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004cea:	21ff      	movs	r1, #255	; 0xff
 8004cec:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane, hspi1);
 8004cee:	4bae      	ldr	r3, [pc, #696]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004cf0:	781e      	ldrb	r6, [r3, #0]
 8004cf2:	2338      	movs	r3, #56	; 0x38
 8004cf4:	18fc      	adds	r4, r7, r3
 8004cf6:	4db0      	ldr	r5, [pc, #704]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004cf8:	466b      	mov	r3, sp
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	0023      	movs	r3, r4
 8004cfe:	3308      	adds	r3, #8
 8004d00:	225c      	movs	r2, #92	; 0x5c
 8004d02:	0019      	movs	r1, r3
 8004d04:	f000 fa2a 	bl	800515c <memcpy>
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	6863      	ldr	r3, [r4, #4]
 8004d0c:	0031      	movs	r1, r6
 8004d0e:	0028      	movs	r0, r5
 8004d10:	f000 f9bc 	bl	800508c <TransmitData>
				if (column_plane[0] == 0xff)
 8004d14:	4ba8      	ldr	r3, [pc, #672]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2bff      	cmp	r3, #255	; 0xff
 8004d1a:	d109      	bne.n	8004d30 <PlaneCube_Handle+0x104>
						way = 1;
 8004d1c:	4ba4      	ldr	r3, [pc, #656]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
						i = 0;
 8004d22:	4ba4      	ldr	r3, [pc, #656]	; (8004fb4 <PlaneCube_Handle+0x388>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
						way_state = OY;
 8004d28:	4b9e      	ldr	r3, [pc, #632]	; (8004fa4 <PlaneCube_Handle+0x378>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e004      	b.n	8004d3a <PlaneCube_Handle+0x10e>
				else i--;
 8004d30:	4ba0      	ldr	r3, [pc, #640]	; (8004fb4 <PlaneCube_Handle+0x388>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	1e5a      	subs	r2, r3, #1
 8004d36:	4b9f      	ldr	r3, [pc, #636]	; (8004fb4 <PlaneCube_Handle+0x388>)
 8004d38:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e007      	b.n	8004d50 <PlaneCube_Handle+0x124>
					column_plane[j] = 0;
 8004d40:	4a9d      	ldr	r2, [pc, #628]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	18d3      	adds	r3, r2, r3
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b07      	cmp	r3, #7
 8004d54:	ddf4      	ble.n	8004d40 <PlaneCube_Handle+0x114>
			timer = HAL_GetTick();
 8004d56:	f7fb fd4b 	bl	80007f0 <HAL_GetTick>
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	4b93      	ldr	r3, [pc, #588]	; (8004fac <PlaneCube_Handle+0x380>)
 8004d5e:	601a      	str	r2, [r3, #0]
		break;
 8004d60:	e14b      	b.n	8004ffa <PlaneCube_Handle+0x3ce>
		layer_plane = 0xff;
 8004d62:	4b91      	ldr	r3, [pc, #580]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 8004d68:	4b93      	ldr	r3, [pc, #588]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d125      	bne.n	8004dbc <PlaneCube_Handle+0x190>
			for (int j = 0; j < 8; j++)
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e007      	b.n	8004d86 <PlaneCube_Handle+0x15a>
				column_plane[j] = 1;
 8004d76:	4a90      	ldr	r2, [pc, #576]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	18d3      	adds	r3, r2, r3
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3301      	adds	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b07      	cmp	r3, #7
 8004d8a:	ddf4      	ble.n	8004d76 <PlaneCube_Handle+0x14a>
			TransmitData(column_plane, layer_plane, hspi1);
 8004d8c:	4b86      	ldr	r3, [pc, #536]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004d8e:	781e      	ldrb	r6, [r3, #0]
 8004d90:	2338      	movs	r3, #56	; 0x38
 8004d92:	18fc      	adds	r4, r7, r3
 8004d94:	4d88      	ldr	r5, [pc, #544]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004d96:	466b      	mov	r3, sp
 8004d98:	0018      	movs	r0, r3
 8004d9a:	0023      	movs	r3, r4
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	225c      	movs	r2, #92	; 0x5c
 8004da0:	0019      	movs	r1, r3
 8004da2:	f000 f9db 	bl	800515c <memcpy>
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	0031      	movs	r1, r6
 8004dac:	0028      	movs	r0, r5
 8004dae:	f000 f96d 	bl	800508c <TransmitData>
			timer = HAL_GetTick();
 8004db2:	f7fb fd1d 	bl	80007f0 <HAL_GetTick>
 8004db6:	0002      	movs	r2, r0
 8004db8:	4b7c      	ldr	r3, [pc, #496]	; (8004fac <PlaneCube_Handle+0x380>)
 8004dba:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004dbc:	f7fb fd18 	bl	80007f0 <HAL_GetTick>
 8004dc0:	0002      	movs	r2, r0
 8004dc2:	4b7a      	ldr	r3, [pc, #488]	; (8004fac <PlaneCube_Handle+0x380>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2264      	movs	r2, #100	; 0x64
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d200      	bcs.n	8004dd0 <PlaneCube_Handle+0x1a4>
 8004dce:	e116      	b.n	8004ffe <PlaneCube_Handle+0x3d2>
			if (way)
 8004dd0:	4b77      	ldr	r3, [pc, #476]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02e      	beq.n	8004e36 <PlaneCube_Handle+0x20a>
				for (int j = 0; j < 8; j++)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e00d      	b.n	8004dfa <PlaneCube_Handle+0x1ce>
					column_plane[j] <<= 1;
 8004dde:	4a76      	ldr	r2, [pc, #472]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	b2d9      	uxtb	r1, r3
 8004dea:	4a73      	ldr	r2, [pc, #460]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	18d3      	adds	r3, r2, r3
 8004df0:	1c0a      	adds	r2, r1, #0
 8004df2:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	3301      	adds	r3, #1
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b07      	cmp	r3, #7
 8004dfe:	ddee      	ble.n	8004dde <PlaneCube_Handle+0x1b2>
				TransmitData(column_plane, layer_plane, hspi1);
 8004e00:	4b69      	ldr	r3, [pc, #420]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004e02:	781e      	ldrb	r6, [r3, #0]
 8004e04:	2338      	movs	r3, #56	; 0x38
 8004e06:	18fc      	adds	r4, r7, r3
 8004e08:	4d6b      	ldr	r5, [pc, #428]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004e0a:	466b      	mov	r3, sp
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	0023      	movs	r3, r4
 8004e10:	3308      	adds	r3, #8
 8004e12:	225c      	movs	r2, #92	; 0x5c
 8004e14:	0019      	movs	r1, r3
 8004e16:	f000 f9a1 	bl	800515c <memcpy>
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	0031      	movs	r1, r6
 8004e20:	0028      	movs	r0, r5
 8004e22:	f000 f933 	bl	800508c <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 8004e26:	4b64      	ldr	r3, [pc, #400]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b80      	cmp	r3, #128	; 0x80
 8004e2c:	d145      	bne.n	8004eba <PlaneCube_Handle+0x28e>
 8004e2e:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e041      	b.n	8004eba <PlaneCube_Handle+0x28e>
				for (int j = 0; j < 8; j++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e00d      	b.n	8004e58 <PlaneCube_Handle+0x22c>
					column_plane[j] >>= 1;
 8004e3c:	4a5e      	ldr	r2, [pc, #376]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	18d3      	adds	r3, r2, r3
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	b2d9      	uxtb	r1, r3
 8004e48:	4a5b      	ldr	r2, [pc, #364]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	18d3      	adds	r3, r2, r3
 8004e4e:	1c0a      	adds	r2, r1, #0
 8004e50:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b07      	cmp	r3, #7
 8004e5c:	ddee      	ble.n	8004e3c <PlaneCube_Handle+0x210>
				TransmitData(column_plane, layer_plane, hspi1);
 8004e5e:	4b52      	ldr	r3, [pc, #328]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004e60:	781e      	ldrb	r6, [r3, #0]
 8004e62:	2338      	movs	r3, #56	; 0x38
 8004e64:	18fc      	adds	r4, r7, r3
 8004e66:	4d54      	ldr	r5, [pc, #336]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004e68:	466b      	mov	r3, sp
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	0023      	movs	r3, r4
 8004e6e:	3308      	adds	r3, #8
 8004e70:	225c      	movs	r2, #92	; 0x5c
 8004e72:	0019      	movs	r1, r3
 8004e74:	f000 f972 	bl	800515c <memcpy>
 8004e78:	6822      	ldr	r2, [r4, #0]
 8004e7a:	6863      	ldr	r3, [r4, #4]
 8004e7c:	0031      	movs	r1, r6
 8004e7e:	0028      	movs	r0, r5
 8004e80:	f000 f904 	bl	800508c <TransmitData>
				if (column_plane[0] == 0x00)
 8004e84:	4b4c      	ldr	r3, [pc, #304]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d116      	bne.n	8004eba <PlaneCube_Handle+0x28e>
					for (int j = 0; j < 8; j++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	e007      	b.n	8004ea2 <PlaneCube_Handle+0x276>
						column_plane[j] = 0xff;
 8004e92:	4a49      	ldr	r2, [pc, #292]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b07      	cmp	r3, #7
 8004ea6:	ddf4      	ble.n	8004e92 <PlaneCube_Handle+0x266>
					layer_plane = 0;
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
					way = 1;
 8004eae:	4b40      	ldr	r3, [pc, #256]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8004eb4:	4b3b      	ldr	r3, [pc, #236]	; (8004fa4 <PlaneCube_Handle+0x378>)
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8004eba:	f7fb fc99 	bl	80007f0 <HAL_GetTick>
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <PlaneCube_Handle+0x380>)
 8004ec2:	601a      	str	r2, [r3, #0]
		break;
 8004ec4:	e09b      	b.n	8004ffe <PlaneCube_Handle+0x3d2>
		if(layer_plane == 0)
 8004ec6:	4b38      	ldr	r3, [pc, #224]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11a      	bne.n	8004f04 <PlaneCube_Handle+0x2d8>
			layer_plane = 1;
 8004ece:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane, hspi1);
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004ed6:	781e      	ldrb	r6, [r3, #0]
 8004ed8:	2338      	movs	r3, #56	; 0x38
 8004eda:	18fc      	adds	r4, r7, r3
 8004edc:	4d36      	ldr	r5, [pc, #216]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004ede:	466b      	mov	r3, sp
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	0023      	movs	r3, r4
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	225c      	movs	r2, #92	; 0x5c
 8004ee8:	0019      	movs	r1, r3
 8004eea:	f000 f937 	bl	800515c <memcpy>
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	6863      	ldr	r3, [r4, #4]
 8004ef2:	0031      	movs	r1, r6
 8004ef4:	0028      	movs	r0, r5
 8004ef6:	f000 f8c9 	bl	800508c <TransmitData>
			timer = HAL_GetTick();
 8004efa:	f7fb fc79 	bl	80007f0 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <PlaneCube_Handle+0x380>)
 8004f02:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8004f04:	f7fb fc74 	bl	80007f0 <HAL_GetTick>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	4b28      	ldr	r3, [pc, #160]	; (8004fac <PlaneCube_Handle+0x380>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2264      	movs	r2, #100	; 0x64
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d200      	bcs.n	8004f18 <PlaneCube_Handle+0x2ec>
 8004f16:	e074      	b.n	8005002 <PlaneCube_Handle+0x3d6>
			if(way)
 8004f18:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d020      	beq.n	8004f62 <PlaneCube_Handle+0x336>
				layer_plane <<= 1;
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	18db      	adds	r3, r3, r3
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f2a:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane, hspi1);
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f2e:	781e      	ldrb	r6, [r3, #0]
 8004f30:	2338      	movs	r3, #56	; 0x38
 8004f32:	18fc      	adds	r4, r7, r3
 8004f34:	4d20      	ldr	r5, [pc, #128]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004f36:	466b      	mov	r3, sp
 8004f38:	0018      	movs	r0, r3
 8004f3a:	0023      	movs	r3, r4
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	225c      	movs	r2, #92	; 0x5c
 8004f40:	0019      	movs	r1, r3
 8004f42:	f000 f90b 	bl	800515c <memcpy>
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	0031      	movs	r1, r6
 8004f4c:	0028      	movs	r0, r5
 8004f4e:	f000 f89d 	bl	800508c <TransmitData>
				if(layer_plane == 0x80) way = 0;
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d147      	bne.n	8004fea <PlaneCube_Handle+0x3be>
 8004f5a:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <PlaneCube_Handle+0x384>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e043      	b.n	8004fea <PlaneCube_Handle+0x3be>
				layer_plane >>= 1;
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f6c:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane, hspi1);
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f70:	781e      	ldrb	r6, [r3, #0]
 8004f72:	2338      	movs	r3, #56	; 0x38
 8004f74:	18fc      	adds	r4, r7, r3
 8004f76:	4d10      	ldr	r5, [pc, #64]	; (8004fb8 <PlaneCube_Handle+0x38c>)
 8004f78:	466b      	mov	r3, sp
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	0023      	movs	r3, r4
 8004f7e:	3308      	adds	r3, #8
 8004f80:	225c      	movs	r2, #92	; 0x5c
 8004f82:	0019      	movs	r1, r3
 8004f84:	f000 f8ea 	bl	800515c <memcpy>
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	6863      	ldr	r3, [r4, #4]
 8004f8c:	0031      	movs	r1, r6
 8004f8e:	0028      	movs	r0, r5
 8004f90:	f000 f87c 	bl	800508c <TransmitData>
				if(layer_plane == 0x01)
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <PlaneCube_Handle+0x37c>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d126      	bne.n	8004fea <PlaneCube_Handle+0x3be>
					for (int j = 0; j < 8; j++)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	e014      	b.n	8004fcc <PlaneCube_Handle+0x3a0>
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	20000190 	.word	0x20000190
 8004fa8:	20000198 	.word	0x20000198
 8004fac:	20000194 	.word	0x20000194
 8004fb0:	20000191 	.word	0x20000191
 8004fb4:	200001a4 	.word	0x200001a4
 8004fb8:	2000019c 	.word	0x2000019c
						column_plane[j] = 0;
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <PlaneCube_Handle+0x3e8>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	18d3      	adds	r3, r2, r3
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b07      	cmp	r3, #7
 8004fd0:	ddf4      	ble.n	8004fbc <PlaneCube_Handle+0x390>
					i = 0;
 8004fd2:	4b11      	ldr	r3, [pc, #68]	; (8005018 <PlaneCube_Handle+0x3ec>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
					way = 1;
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <PlaneCube_Handle+0x3f0>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 8004fde:	4b10      	ldr	r3, [pc, #64]	; (8005020 <PlaneCube_Handle+0x3f4>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <PlaneCube_Handle+0x3f8>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8004fea:	f7fb fc01 	bl	80007f0 <HAL_GetTick>
 8004fee:	0002      	movs	r2, r0
 8004ff0:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <PlaneCube_Handle+0x3fc>)
 8004ff2:	601a      	str	r2, [r3, #0]
		break;
 8004ff4:	e005      	b.n	8005002 <PlaneCube_Handle+0x3d6>
		break;
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	e004      	b.n	8005004 <PlaneCube_Handle+0x3d8>
		break;
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	e002      	b.n	8005004 <PlaneCube_Handle+0x3d8>
		break;
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	e000      	b.n	8005004 <PlaneCube_Handle+0x3d8>
		break;
 8005002:	46c0      	nop			; (mov r8, r8)
	}
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b009      	add	sp, #36	; 0x24
 800500a:	bcf0      	pop	{r4, r5, r6, r7}
 800500c:	bc08      	pop	{r3}
 800500e:	b004      	add	sp, #16
 8005010:	4718      	bx	r3
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	2000019c 	.word	0x2000019c
 8005018:	200001a4 	.word	0x200001a4
 800501c:	20000191 	.word	0x20000191
 8005020:	20000190 	.word	0x20000190
 8005024:	20000198 	.word	0x20000198
 8005028:	20000194 	.word	0x20000194

0800502c <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <PlaneCube_Set_State+0x48>)
 8005034:	2202      	movs	r2, #2
 8005036:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005038:	2300      	movs	r3, #0
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	e007      	b.n	800504e <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 800503e:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <PlaneCube_Set_State+0x4c>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	18d3      	adds	r3, r2, r3
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3301      	adds	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b07      	cmp	r3, #7
 8005052:	ddf4      	ble.n	800503e <PlaneCube_Set_State+0x12>
	}
	i = 0;
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <PlaneCube_Set_State+0x50>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
	way = 1;
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <PlaneCube_Set_State+0x54>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <PlaneCube_Set_State+0x58>)
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <PlaneCube_Set_State+0x5c>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
}
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b002      	add	sp, #8
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000010 	.word	0x20000010
 8005078:	2000019c 	.word	0x2000019c
 800507c:	200001a4 	.word	0x200001a4
 8005080:	20000191 	.word	0x20000191
 8005084:	20000198 	.word	0x20000198
 8005088:	20000190 	.word	0x20000190

0800508c <TransmitData>:
#include "transmit_data.h"


void TransmitData(uint8_t column_data[], uint8_t layer_data,SPI_HandleTypeDef hspi1) //ok
{
 800508c:	b082      	sub	sp, #8
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	0008      	movs	r0, r1
 8005098:	2120      	movs	r1, #32
 800509a:	1879      	adds	r1, r7, r1
 800509c:	600a      	str	r2, [r1, #0]
 800509e:	604b      	str	r3, [r1, #4]
 80050a0:	1cfb      	adds	r3, r7, #3
 80050a2:	1c02      	adds	r2, r0, #0
 80050a4:	701a      	strb	r2, [r3, #0]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 80050a6:	2308      	movs	r3, #8
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	1cfa      	adds	r2, r7, #3
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 80050b0:	2301      	movs	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e00d      	b.n	80050d2 <TransmitData+0x46>
	{
		dataOut[i] = column_data[i-1];
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	18d3      	adds	r3, r2, r3
 80050be:	7819      	ldrb	r1, [r3, #0]
 80050c0:	2308      	movs	r3, #8
 80050c2:	18fa      	adds	r2, r7, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	18d3      	adds	r3, r2, r3
 80050c8:	1c0a      	adds	r2, r1, #0
 80050ca:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	3301      	adds	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	ddee      	ble.n	80050b6 <TransmitData+0x2a>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80050d8:	2390      	movs	r3, #144	; 0x90
 80050da:	05db      	lsls	r3, r3, #23
 80050dc:	2200      	movs	r2, #0
 80050de:	2140      	movs	r1, #64	; 0x40
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7fb fe70 	bl	8000dc6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 80050e6:	2308      	movs	r3, #8
 80050e8:	18f9      	adds	r1, r7, r3
 80050ea:	2320      	movs	r3, #32
 80050ec:	18f8      	adds	r0, r7, r3
 80050ee:	2364      	movs	r3, #100	; 0x64
 80050f0:	2209      	movs	r2, #9
 80050f2:	f7fc fd2b 	bl	8001b4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 80050f6:	2390      	movs	r3, #144	; 0x90
 80050f8:	05db      	lsls	r3, r3, #23
 80050fa:	2201      	movs	r2, #1
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	0018      	movs	r0, r3
 8005100:	f7fb fe61 	bl	8000dc6 <HAL_GPIO_WritePin>
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b006      	add	sp, #24
 800510a:	bc80      	pop	{r7}
 800510c:	bc08      	pop	{r3}
 800510e:	b002      	add	sp, #8
 8005110:	4718      	bx	r3
	...

08005114 <__libc_init_array>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	2600      	movs	r6, #0
 8005118:	4d0c      	ldr	r5, [pc, #48]	; (800514c <__libc_init_array+0x38>)
 800511a:	4c0d      	ldr	r4, [pc, #52]	; (8005150 <__libc_init_array+0x3c>)
 800511c:	1b64      	subs	r4, r4, r5
 800511e:	10a4      	asrs	r4, r4, #2
 8005120:	42a6      	cmp	r6, r4
 8005122:	d109      	bne.n	8005138 <__libc_init_array+0x24>
 8005124:	2600      	movs	r6, #0
 8005126:	f000 f82b 	bl	8005180 <_init>
 800512a:	4d0a      	ldr	r5, [pc, #40]	; (8005154 <__libc_init_array+0x40>)
 800512c:	4c0a      	ldr	r4, [pc, #40]	; (8005158 <__libc_init_array+0x44>)
 800512e:	1b64      	subs	r4, r4, r5
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	42a6      	cmp	r6, r4
 8005134:	d105      	bne.n	8005142 <__libc_init_array+0x2e>
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	00b3      	lsls	r3, r6, #2
 800513a:	58eb      	ldr	r3, [r5, r3]
 800513c:	4798      	blx	r3
 800513e:	3601      	adds	r6, #1
 8005140:	e7ee      	b.n	8005120 <__libc_init_array+0xc>
 8005142:	00b3      	lsls	r3, r6, #2
 8005144:	58eb      	ldr	r3, [r5, r3]
 8005146:	4798      	blx	r3
 8005148:	3601      	adds	r6, #1
 800514a:	e7f2      	b.n	8005132 <__libc_init_array+0x1e>
 800514c:	08005230 	.word	0x08005230
 8005150:	08005230 	.word	0x08005230
 8005154:	08005230 	.word	0x08005230
 8005158:	08005234 	.word	0x08005234

0800515c <memcpy>:
 800515c:	2300      	movs	r3, #0
 800515e:	b510      	push	{r4, lr}
 8005160:	429a      	cmp	r2, r3
 8005162:	d100      	bne.n	8005166 <memcpy+0xa>
 8005164:	bd10      	pop	{r4, pc}
 8005166:	5ccc      	ldrb	r4, [r1, r3]
 8005168:	54c4      	strb	r4, [r0, r3]
 800516a:	3301      	adds	r3, #1
 800516c:	e7f8      	b.n	8005160 <memcpy+0x4>

0800516e <memset>:
 800516e:	0003      	movs	r3, r0
 8005170:	1882      	adds	r2, r0, r2
 8005172:	4293      	cmp	r3, r2
 8005174:	d100      	bne.n	8005178 <memset+0xa>
 8005176:	4770      	bx	lr
 8005178:	7019      	strb	r1, [r3, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	e7f9      	b.n	8005172 <memset+0x4>
	...

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
