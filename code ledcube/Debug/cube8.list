
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004424  08004424  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004424  08004424  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004424  08004424  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800442c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  0800449c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  0800449c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005acd  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001434  00000000  00000000  00025b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00026fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  00027618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185f3  00000000  00000000  00027bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008050  00000000  00000000  000401cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881bc  00000000  00000000  0004821b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d03d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fcc  00000000  00000000  000d0428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800423c 	.word	0x0800423c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800423c 	.word	0x0800423c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	801a      	strh	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800029c:	2390      	movs	r3, #144	; 0x90
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2102      	movs	r1, #2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fe56 	bl	8001f54 <HAL_GPIO_ReadPin>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d10c      	bne.n	80002c6 <HAL_GPIO_EXTI_Callback+0x36>
  {
	  if (currentEffect < 9) currentEffect++;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b08      	cmp	r3, #8
 80002b2:	dc05      	bgt.n	80002c0 <HAL_GPIO_EXTI_Callback+0x30>
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	1c5a      	adds	r2, r3, #1
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	e002      	b.n	80002c6 <HAL_GPIO_EXTI_Callback+0x36>
	  else currentEffect = 0;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
  }
  HAL_Delay(200);
 80002c6:	20c8      	movs	r0, #200	; 0xc8
 80002c8:	f001 fbda 	bl	8001a80 <HAL_Delay>
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000108 	.word	0x20000108

080002d8 <TransmitData>:

void TransmitData(uint8_t* data) //ok
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80002e0:	2390      	movs	r3, #144	; 0x90
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2200      	movs	r2, #0
 80002e6:	2140      	movs	r1, #64	; 0x40
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fe50 	bl	8001f8e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data, 9, 10);
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <TransmitData+0x38>)
 80002f2:	230a      	movs	r3, #10
 80002f4:	2209      	movs	r2, #9
 80002f6:	f002 fc1b 	bl	8002b30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 80002fa:	2390      	movs	r3, #144	; 0x90
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fe43 	bl	8001f8e <HAL_GPIO_WritePin>
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000008c 	.word	0x2000008c

08000314 <mergeData>:

void mergeData(uint8_t column_data[], uint8_t layer_data) //ok
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	000a      	movs	r2, r1
 800031e:	1cfb      	adds	r3, r7, #3
 8000320:	701a      	strb	r2, [r3, #0]
	dataOut[0] = layer_data;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <mergeData+0x48>)
 8000324:	1cfa      	adds	r2, r7, #3
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 800032a:	2301      	movs	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e00c      	b.n	800034a <mergeData+0x36>
	{
		dataOut[i] = column_data[i-1];
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b01      	subs	r3, #1
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	18d3      	adds	r3, r2, r3
 8000338:	7819      	ldrb	r1, [r3, #0]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <mergeData+0x48>)
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	1c0a      	adds	r2, r1, #0
 8000342:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3301      	adds	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	2b08      	cmp	r3, #8
 800034e:	ddef      	ble.n	8000330 <mergeData+0x1c>
	}
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b004      	add	sp, #16
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	200000fc 	.word	0x200000fc

08000360 <lightCube>:

void lightCube() //ok
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
	layer = 0xff;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <lightCube+0x48>)
 8000368:	22ff      	movs	r2, #255	; 0xff
 800036a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	e007      	b.n	8000382 <lightCube+0x22>
	{
		column[i] = 0xff;
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <lightCube+0x4c>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	18d3      	adds	r3, r2, r3
 8000378:	22ff      	movs	r2, #255	; 0xff
 800037a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b07      	cmp	r3, #7
 8000386:	ddf4      	ble.n	8000372 <lightCube+0x12>
	}
	mergeData(column, layer);
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <lightCube+0x48>)
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <lightCube+0x4c>)
 800038e:	0011      	movs	r1, r2
 8000390:	0018      	movs	r0, r3
 8000392:	f7ff ffbf 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <lightCube+0x50>)
 8000398:	0018      	movs	r0, r3
 800039a:	f7ff ff9d 	bl	80002d8 <TransmitData>
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b002      	add	sp, #8
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	200000f0 	.word	0x200000f0
 80003ac:	200000f4 	.word	0x200000f4
 80003b0:	200000fc 	.word	0x200000fc

080003b4 <clearCube>:

void clearCube() //ok
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
	layer = 0x00;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <clearCube+0x48>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	e007      	b.n	80003d6 <clearCube+0x22>
	{
		column[i] = 0x00;
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <clearCube+0x4c>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	18d3      	adds	r3, r2, r3
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3301      	adds	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b07      	cmp	r3, #7
 80003da:	ddf4      	ble.n	80003c6 <clearCube+0x12>
	}
	mergeData(column, layer);
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <clearCube+0x48>)
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <clearCube+0x4c>)
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f7ff ff95 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <clearCube+0x50>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f7ff ff73 	bl	80002d8 <TransmitData>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	200000f0 	.word	0x200000f0
 8000400:	200000f4 	.word	0x200000f4
 8000404:	200000fc 	.word	0x200000fc

08000408 <upperCube>:

void upperCube() //ok
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	e007      	b.n	8000424 <upperCube+0x1c>
	{
		column[i] = 0xff;
 8000414:	4a17      	ldr	r2, [pc, #92]	; (8000474 <upperCube+0x6c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	18d3      	adds	r3, r2, r3
 800041a:	22ff      	movs	r2, #255	; 0xff
 800041c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3301      	adds	r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b07      	cmp	r3, #7
 8000428:	ddf4      	ble.n	8000414 <upperCube+0xc>
	}
	for (int i = 0; i < 8; i++)
 800042a:	2300      	movs	r3, #0
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	e019      	b.n	8000464 <upperCube+0x5c>
	{
		layer = 0x01 << i;
 8000430:	2201      	movs	r2, #1
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	409a      	lsls	r2, r3
 8000436:	0013      	movs	r3, r2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <upperCube+0x70>)
 800043c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <upperCube+0x70>)
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <upperCube+0x6c>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff ff64 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <upperCube+0x74>)
 800044e:	0018      	movs	r0, r3
 8000450:	f7ff ff42 	bl	80002d8 <TransmitData>
		HAL_Delay(delay);
 8000454:	23fa      	movs	r3, #250	; 0xfa
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fb11 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	2b07      	cmp	r3, #7
 8000468:	dde2      	ble.n	8000430 <upperCube+0x28>
	}
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200000f4 	.word	0x200000f4
 8000478:	200000f0 	.word	0x200000f0
 800047c:	200000fc 	.word	0x200000fc

08000480 <diagonalCube>:

void diagonalCube() //ok
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
	layer = 0x18;
 8000486:	4b44      	ldr	r3, [pc, #272]	; (8000598 <diagonalCube+0x118>)
 8000488:	2218      	movs	r2, #24
 800048a:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 800048c:	2303      	movs	r3, #3
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	e007      	b.n	80004a2 <diagonalCube+0x22>
	{
		column[i] = 0x18;
 8000492:	4a42      	ldr	r2, [pc, #264]	; (800059c <diagonalCube+0x11c>)
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	18d3      	adds	r3, r2, r3
 8000498:	2218      	movs	r2, #24
 800049a:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < 5; i++)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3301      	adds	r3, #1
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	ddf4      	ble.n	8000492 <diagonalCube+0x12>
	}
	mergeData(column, layer);
 80004a8:	4b3b      	ldr	r3, [pc, #236]	; (8000598 <diagonalCube+0x118>)
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b3b      	ldr	r3, [pc, #236]	; (800059c <diagonalCube+0x11c>)
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff2f 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80004b6:	4b3a      	ldr	r3, [pc, #232]	; (80005a0 <diagonalCube+0x120>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff ff0d 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 80004be:	20fa      	movs	r0, #250	; 0xfa
 80004c0:	f001 fade 	bl	8001a80 <HAL_Delay>
	clearCube();
 80004c4:	f7ff ff76 	bl	80003b4 <clearCube>

	layer = 0x24;
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <diagonalCube+0x118>)
 80004ca:	2224      	movs	r2, #36	; 0x24
 80004cc:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 80004ce:	2302      	movs	r3, #2
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	e007      	b.n	80004e4 <diagonalCube+0x64>
	{
		column[i] = 0x3c;
 80004d4:	4a31      	ldr	r2, [pc, #196]	; (800059c <diagonalCube+0x11c>)
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	223c      	movs	r2, #60	; 0x3c
 80004dc:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++)
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	3301      	adds	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	2b05      	cmp	r3, #5
 80004e8:	ddf4      	ble.n	80004d4 <diagonalCube+0x54>
	}
	mergeData(column, layer);
 80004ea:	4b2b      	ldr	r3, [pc, #172]	; (8000598 <diagonalCube+0x118>)
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <diagonalCube+0x11c>)
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff ff0e 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <diagonalCube+0x120>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff feec 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 8000500:	20fa      	movs	r0, #250	; 0xfa
 8000502:	f001 fabd 	bl	8001a80 <HAL_Delay>
	clearCube();
 8000506:	f7ff ff55 	bl	80003b4 <clearCube>

	layer = 0x42;
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <diagonalCube+0x118>)
 800050c:	2242      	movs	r2, #66	; 0x42
 800050e:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 8000510:	2301      	movs	r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e007      	b.n	8000526 <diagonalCube+0xa6>
	{
		column[i] = 0x7e;
 8000516:	4a21      	ldr	r2, [pc, #132]	; (800059c <diagonalCube+0x11c>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	227e      	movs	r2, #126	; 0x7e
 800051e:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3301      	adds	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b06      	cmp	r3, #6
 800052a:	ddf4      	ble.n	8000516 <diagonalCube+0x96>
	}
	mergeData(column, layer);
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <diagonalCube+0x118>)
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <diagonalCube+0x11c>)
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f7ff feed 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <diagonalCube+0x120>)
 800053c:	0018      	movs	r0, r3
 800053e:	f7ff fecb 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 8000542:	20fa      	movs	r0, #250	; 0xfa
 8000544:	f001 fa9c 	bl	8001a80 <HAL_Delay>
	clearCube();
 8000548:	f7ff ff34 	bl	80003b4 <clearCube>

	layer = 0x81;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <diagonalCube+0x118>)
 800054e:	2281      	movs	r2, #129	; 0x81
 8000550:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	e007      	b.n	8000568 <diagonalCube+0xe8>
	{
		column[i]=  0xff;
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <diagonalCube+0x11c>)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	18d3      	adds	r3, r2, r3
 800055e:	22ff      	movs	r2, #255	; 0xff
 8000560:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2b07      	cmp	r3, #7
 800056c:	ddf4      	ble.n	8000558 <diagonalCube+0xd8>
	}
	mergeData(column, layer);
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <diagonalCube+0x118>)
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <diagonalCube+0x11c>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff fecc 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <diagonalCube+0x120>)
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff feaa 	bl	80002d8 <TransmitData>
	HAL_Delay(delay/2);
 8000584:	20fa      	movs	r0, #250	; 0xfa
 8000586:	f001 fa7b 	bl	8001a80 <HAL_Delay>
	clearCube();
 800058a:	f7ff ff13 	bl	80003b4 <clearCube>
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b004      	add	sp, #16
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	200000f0 	.word	0x200000f0
 800059c:	200000f4 	.word	0x200000f4
 80005a0:	200000fc 	.word	0x200000fc

080005a4 <sliderCube>:

void sliderCube() //ok
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	layer = 0xff;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <sliderCube+0x70>)
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e025      	b.n	8000602 <sliderCube+0x5e>
	{
		for (int j = 0; j < 8; j++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	e00c      	b.n	80005d6 <sliderCube+0x32>
		{
			column[j] = 0x01 << i;
 80005bc:	2201      	movs	r2, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0013      	movs	r3, r2
 80005c4:	b2d9      	uxtb	r1, r3
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <sliderCube+0x74>)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	18d3      	adds	r3, r2, r3
 80005cc:	1c0a      	adds	r2, r1, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	ddef      	ble.n	80005bc <sliderCube+0x18>
		}
		mergeData(column, layer);
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <sliderCube+0x70>)
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <sliderCube+0x74>)
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff fe95 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <sliderCube+0x78>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff fe73 	bl	80002d8 <TransmitData>
		HAL_Delay(delay);
 80005f2:	23fa      	movs	r3, #250	; 0xfa
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fa42 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b07      	cmp	r3, #7
 8000606:	ddd6      	ble.n	80005b6 <sliderCube+0x12>
	}
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	200000f0 	.word	0x200000f0
 8000618:	200000f4 	.word	0x200000f4
 800061c:	200000fc 	.word	0x200000fc

08000620 <randomRainCube>:

void randomRainCube() //chua duoc
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
	clearCube();
 8000626:	f7ff fec5 	bl	80003b4 <clearCube>
	int tim = 70;
 800062a:	2346      	movs	r3, #70	; 0x46
 800062c:	613b      	str	r3, [r7, #16]
	int randomColumn[3];
		for(int j = 0; j < 3; j++)
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
 8000632:	e01b      	b.n	800066c <randomRainCube+0x4c>
		{
			for (int k = 0; k < 3; k++)
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
 8000638:	e012      	b.n	8000660 <randomRainCube+0x40>
			{
				randomColumn[j] = rand() % 8;
 800063a:	f002 fd79 	bl	8003130 <rand>
 800063e:	0003      	movs	r3, r0
 8000640:	4a39      	ldr	r2, [pc, #228]	; (8000728 <randomRainCube+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	d504      	bpl.n	8000650 <randomRainCube+0x30>
 8000646:	3b01      	subs	r3, #1
 8000648:	2208      	movs	r2, #8
 800064a:	4252      	negs	r2, r2
 800064c:	4313      	orrs	r3, r2
 800064e:	3301      	adds	r3, #1
 8000650:	0019      	movs	r1, r3
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	50d1      	str	r1, [r2, r3]
			for (int k = 0; k < 3; k++)
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	3301      	adds	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	2b02      	cmp	r3, #2
 8000664:	dde9      	ble.n	800063a <randomRainCube+0x1a>
		for(int j = 0; j < 3; j++)
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	3301      	adds	r3, #1
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	2b02      	cmp	r3, #2
 8000670:	dde0      	ble.n	8000634 <randomRainCube+0x14>
			}
		}
		for (int j = 0; j < 3; j++)
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
 8000676:	e014      	b.n	80006a2 <randomRainCube+0x82>
		{
	    column[randomColumn[j]] = rand() % 256;
 8000678:	f002 fd5a 	bl	8003130 <rand>
 800067c:	0003      	movs	r3, r0
 800067e:	4a2b      	ldr	r2, [pc, #172]	; (800072c <randomRainCube+0x10c>)
 8000680:	4013      	ands	r3, r2
 8000682:	d503      	bpl.n	800068c <randomRainCube+0x6c>
 8000684:	3b01      	subs	r3, #1
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <randomRainCube+0x110>)
 8000688:	4313      	orrs	r3, r2
 800068a:	3301      	adds	r3, #1
 800068c:	0019      	movs	r1, r3
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	69fa      	ldr	r2, [r7, #28]
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	58d3      	ldr	r3, [r2, r3]
 8000696:	b2c9      	uxtb	r1, r1
 8000698:	4a26      	ldr	r2, [pc, #152]	; (8000734 <randomRainCube+0x114>)
 800069a:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 3; j++)
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	3301      	adds	r3, #1
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	dde7      	ble.n	8000678 <randomRainCube+0x58>
		}

	    for (int j = 0; j < 8; j++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	e018      	b.n	80006e0 <randomRainCube+0xc0>
	    {
	    	layer = 0x80 >> j;
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	411a      	asrs	r2, r3
 80006b4:	0013      	movs	r3, r2
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <randomRainCube+0x118>)
 80006ba:	701a      	strb	r2, [r3, #0]
	    	mergeData(column, layer);
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <randomRainCube+0x118>)
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <randomRainCube+0x114>)
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fe25 	bl	8000314 <mergeData>
	    	TransmitData(dataOut);
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <randomRainCube+0x11c>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff fe03 	bl	80002d8 <TransmitData>
	    	HAL_Delay(tim);
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 f9d3 	bl	8001a80 <HAL_Delay>
	    for (int j = 0; j < 8; j++)
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	3301      	adds	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	dde3      	ble.n	80006ae <randomRainCube+0x8e>
	    }
	    for (int j = 0; j < 3; j++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e014      	b.n	8000716 <randomRainCube+0xf6>
	    {
	    column[randomColumn[j]] = 0x00;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	58d3      	ldr	r3, [r2, r3]
 80006f4:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <randomRainCube+0x114>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	54d1      	strb	r1, [r2, r3]
	    mergeData(column, layer);
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <randomRainCube+0x118>)
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <randomRainCube+0x114>)
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f7ff fe06 	bl	8000314 <mergeData>
	    TransmitData(dataOut);
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <randomRainCube+0x11c>)
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff fde4 	bl	80002d8 <TransmitData>
	    for (int j = 0; j < 3; j++)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2b02      	cmp	r3, #2
 800071a:	dde7      	ble.n	80006ec <randomRainCube+0xcc>
	    }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b00a      	add	sp, #40	; 0x28
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	80000007 	.word	0x80000007
 800072c:	800000ff 	.word	0x800000ff
 8000730:	ffffff00 	.word	0xffffff00
 8000734:	200000f4 	.word	0x200000f4
 8000738:	200000f0 	.word	0x200000f0
 800073c:	200000fc 	.word	0x200000fc

08000740 <growShrinkCube>:

void growShrinkCube() //ok
{
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	b08d      	sub	sp, #52	; 0x34
 8000744:	af00      	add	r7, sp, #0

	uint8_t data1[9] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 8000746:	2124      	movs	r1, #36	; 0x24
 8000748:	187b      	adds	r3, r7, r1
 800074a:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <growShrinkCube+0xa8>)
 800074c:	ca11      	ldmia	r2!, {r0, r4}
 800074e:	c311      	stmia	r3!, {r0, r4}
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	701a      	strb	r2, [r3, #0]
	uint8_t data2[9] = {0x7e,0x00,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x00};
 8000754:	2518      	movs	r5, #24
 8000756:	197b      	adds	r3, r7, r5
 8000758:	4a24      	ldr	r2, [pc, #144]	; (80007ec <growShrinkCube+0xac>)
 800075a:	ca11      	ldmia	r2!, {r0, r4}
 800075c:	c311      	stmia	r3!, {r0, r4}
 800075e:	7812      	ldrb	r2, [r2, #0]
 8000760:	701a      	strb	r2, [r3, #0]
	uint8_t data3[9] = {0x3c,0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00};
 8000762:	260c      	movs	r6, #12
 8000764:	19bb      	adds	r3, r7, r6
 8000766:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <growShrinkCube+0xb0>)
 8000768:	ca11      	ldmia	r2!, {r0, r4}
 800076a:	c311      	stmia	r3!, {r0, r4}
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	701a      	strb	r2, [r3, #0]
	uint8_t data4[9] = {0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00};
 8000770:	003b      	movs	r3, r7
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <growShrinkCube+0xb4>)
 8000774:	ca11      	ldmia	r2!, {r0, r4}
 8000776:	c311      	stmia	r3!, {r0, r4}
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	701a      	strb	r2, [r3, #0]
	TransmitData(data1);
 800077c:	000c      	movs	r4, r1
 800077e:	187b      	adds	r3, r7, r1
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff fda9 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 8000786:	2096      	movs	r0, #150	; 0x96
 8000788:	f001 f97a 	bl	8001a80 <HAL_Delay>
	TransmitData(data2);
 800078c:	197b      	adds	r3, r7, r5
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff fda2 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 8000794:	2096      	movs	r0, #150	; 0x96
 8000796:	f001 f973 	bl	8001a80 <HAL_Delay>
	TransmitData(data3);
 800079a:	19bb      	adds	r3, r7, r6
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff fd9b 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 80007a2:	2096      	movs	r0, #150	; 0x96
 80007a4:	f001 f96c 	bl	8001a80 <HAL_Delay>
	TransmitData(data4);
 80007a8:	003b      	movs	r3, r7
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff fd94 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 80007b0:	2096      	movs	r0, #150	; 0x96
 80007b2:	f001 f965 	bl	8001a80 <HAL_Delay>
	TransmitData(data3);
 80007b6:	19bb      	adds	r3, r7, r6
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fd8d 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 80007be:	2096      	movs	r0, #150	; 0x96
 80007c0:	f001 f95e 	bl	8001a80 <HAL_Delay>
	TransmitData(data2);
 80007c4:	197b      	adds	r3, r7, r5
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd86 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 80007cc:	2096      	movs	r0, #150	; 0x96
 80007ce:	f001 f957 	bl	8001a80 <HAL_Delay>
	TransmitData(data1);
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff fd7f 	bl	80002d8 <TransmitData>
	HAL_Delay(TIME);
 80007da:	2096      	movs	r0, #150	; 0x96
 80007dc:	f001 f950 	bl	8001a80 <HAL_Delay>
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b00d      	add	sp, #52	; 0x34
 80007e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e8:	08004254 	.word	0x08004254
 80007ec:	08004260 	.word	0x08004260
 80007f0:	0800426c 	.word	0x0800426c
 80007f4:	08004278 	.word	0x08004278

080007f8 <aroundEdgeCube>:

void aroundEdgeCube() //ok
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
		//layer 1
		layer = 0x81;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <aroundEdgeCube+0xa8>)
 8000800:	2281      	movs	r2, #129	; 0x81
 8000802:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0xff;
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <aroundEdgeCube+0xac>)
 8000806:	22ff      	movs	r2, #255	; 0xff
 8000808:	71da      	strb	r2, [r3, #7]
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <aroundEdgeCube+0xac>)
 800080c:	79da      	ldrb	r2, [r3, #7]
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <aroundEdgeCube+0xac>)
 8000810:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 8000812:	2301      	movs	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	e007      	b.n	8000828 <aroundEdgeCube+0x30>
		{
			column[i] = 0x81;
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <aroundEdgeCube+0xac>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	18d3      	adds	r3, r2, r3
 800081e:	2281      	movs	r2, #129	; 0x81
 8000820:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3301      	adds	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b06      	cmp	r3, #6
 800082c:	ddf4      	ble.n	8000818 <aroundEdgeCube+0x20>
		}
		mergeData(column, layer);
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <aroundEdgeCube+0xa8>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <aroundEdgeCube+0xac>)
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff fd6c 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <aroundEdgeCube+0xb0>)
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff fd4a 	bl	80002d8 <TransmitData>
		HAL_Delay(0);
 8000844:	2000      	movs	r0, #0
 8000846:	f001 f91b 	bl	8001a80 <HAL_Delay>
		//layer 2- 7
		layer = 0x7e;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <aroundEdgeCube+0xa8>)
 800084c:	227e      	movs	r2, #126	; 0x7e
 800084e:	701a      	strb	r2, [r3, #0]
		column[0] = column[7] = 0x81;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <aroundEdgeCube+0xac>)
 8000852:	2281      	movs	r2, #129	; 0x81
 8000854:	71da      	strb	r2, [r3, #7]
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <aroundEdgeCube+0xac>)
 8000858:	79da      	ldrb	r2, [r3, #7]
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <aroundEdgeCube+0xac>)
 800085c:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 800085e:	2301      	movs	r3, #1
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	e007      	b.n	8000874 <aroundEdgeCube+0x7c>
		{
			column[i] = 0x00;
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <aroundEdgeCube+0xac>)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 7; i++)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2b06      	cmp	r3, #6
 8000878:	ddf4      	ble.n	8000864 <aroundEdgeCube+0x6c>
		}
		mergeData(column, layer);
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <aroundEdgeCube+0xa8>)
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <aroundEdgeCube+0xac>)
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff fd46 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <aroundEdgeCube+0xb0>)
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fd24 	bl	80002d8 <TransmitData>
		HAL_Delay(0);
 8000890:	2000      	movs	r0, #0
 8000892:	f001 f8f5 	bl	8001a80 <HAL_Delay>
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	200000f0 	.word	0x200000f0
 80008a4:	200000f4 	.word	0x200000f4
 80008a8:	200000fc 	.word	0x200000fc

080008ac <diaedgeCube>:

void diaedgeCube() //ok
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
	int hold = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	607b      	str	r3, [r7, #4]
	//layer 1-8
	layer = 0x81;
 80008b6:	4b5f      	ldr	r3, [pc, #380]	; (8000a34 <diaedgeCube+0x188>)
 80008b8:	2281      	movs	r2, #129	; 0x81
 80008ba:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0xff;
 80008bc:	4b5e      	ldr	r3, [pc, #376]	; (8000a38 <diaedgeCube+0x18c>)
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	71da      	strb	r2, [r3, #7]
 80008c2:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <diaedgeCube+0x18c>)
 80008c4:	79da      	ldrb	r2, [r3, #7]
 80008c6:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <diaedgeCube+0x18c>)
 80008c8:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 80008ca:	2301      	movs	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e007      	b.n	80008e0 <diaedgeCube+0x34>
		column[i] = 0x81;
 80008d0:	4a59      	ldr	r2, [pc, #356]	; (8000a38 <diaedgeCube+0x18c>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	2281      	movs	r2, #129	; 0x81
 80008d8:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 7; i++) {
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	ddf4      	ble.n	80008d0 <diaedgeCube+0x24>
	}
	mergeData(column, layer);
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <diaedgeCube+0x188>)
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <diaedgeCube+0x18c>)
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fd10 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80008f4:	4b51      	ldr	r3, [pc, #324]	; (8000a3c <diaedgeCube+0x190>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff fcee 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 f8be 	bl	8001a80 <HAL_Delay>
	clearCube();
 8000904:	f7ff fd56 	bl	80003b4 <clearCube>

	//layer 2-7
	layer = 0x42;
 8000908:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <diaedgeCube+0x188>)
 800090a:	2242      	movs	r2, #66	; 0x42
 800090c:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 800090e:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <diaedgeCube+0x18c>)
 8000910:	2281      	movs	r2, #129	; 0x81
 8000912:	71da      	strb	r2, [r3, #7]
 8000914:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <diaedgeCube+0x18c>)
 8000916:	79da      	ldrb	r2, [r3, #7]
 8000918:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <diaedgeCube+0x18c>)
 800091a:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = 0x42;
 800091c:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <diaedgeCube+0x18c>)
 800091e:	2242      	movs	r2, #66	; 0x42
 8000920:	719a      	strb	r2, [r3, #6]
 8000922:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <diaedgeCube+0x18c>)
 8000924:	799a      	ldrb	r2, [r3, #6]
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <diaedgeCube+0x18c>)
 8000928:	705a      	strb	r2, [r3, #1]
	for (int i = 2; i < 6; i++) {
 800092a:	2302      	movs	r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	e007      	b.n	8000940 <diaedgeCube+0x94>
		column[i] = 0x00;
 8000930:	4a41      	ldr	r2, [pc, #260]	; (8000a38 <diaedgeCube+0x18c>)
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	18d3      	adds	r3, r2, r3
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 6; i++) {
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2b05      	cmp	r3, #5
 8000944:	ddf4      	ble.n	8000930 <diaedgeCube+0x84>
	}
	mergeData(column, layer);
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <diaedgeCube+0x188>)
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <diaedgeCube+0x18c>)
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f7ff fce0 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000954:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <diaedgeCube+0x190>)
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff fcbe 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	0018      	movs	r0, r3
 8000960:	f001 f88e 	bl	8001a80 <HAL_Delay>
	clearCube();
 8000964:	f7ff fd26 	bl	80003b4 <clearCube>

	//layer 3-6
	layer = 0x24;
 8000968:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <diaedgeCube+0x188>)
 800096a:	2224      	movs	r2, #36	; 0x24
 800096c:	701a      	strb	r2, [r3, #0]
	column[0] = column[7] = 0x81;
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <diaedgeCube+0x18c>)
 8000970:	2281      	movs	r2, #129	; 0x81
 8000972:	71da      	strb	r2, [r3, #7]
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <diaedgeCube+0x18c>)
 8000976:	79da      	ldrb	r2, [r3, #7]
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <diaedgeCube+0x18c>)
 800097a:	701a      	strb	r2, [r3, #0]
	column[1] = column[6] = column[3] = column[4] = 0x00;
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <diaedgeCube+0x18c>)
 800097e:	2200      	movs	r2, #0
 8000980:	711a      	strb	r2, [r3, #4]
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <diaedgeCube+0x18c>)
 8000984:	791a      	ldrb	r2, [r3, #4]
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <diaedgeCube+0x18c>)
 8000988:	70da      	strb	r2, [r3, #3]
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <diaedgeCube+0x18c>)
 800098c:	78da      	ldrb	r2, [r3, #3]
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <diaedgeCube+0x18c>)
 8000990:	719a      	strb	r2, [r3, #6]
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <diaedgeCube+0x18c>)
 8000994:	799a      	ldrb	r2, [r3, #6]
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <diaedgeCube+0x18c>)
 8000998:	705a      	strb	r2, [r3, #1]
	column[2] = column[5] = 0x24;
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <diaedgeCube+0x18c>)
 800099c:	2224      	movs	r2, #36	; 0x24
 800099e:	715a      	strb	r2, [r3, #5]
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <diaedgeCube+0x18c>)
 80009a2:	795a      	ldrb	r2, [r3, #5]
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <diaedgeCube+0x18c>)
 80009a6:	709a      	strb	r2, [r3, #2]
	mergeData(column, layer);
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <diaedgeCube+0x188>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <diaedgeCube+0x18c>)
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fcaf 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <diaedgeCube+0x190>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fc8d 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 f85d 	bl	8001a80 <HAL_Delay>
	clearCube();
 80009c6:	f7ff fcf5 	bl	80003b4 <clearCube>

	//layer 4-5
	layer = 0x18;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <diaedgeCube+0x188>)
 80009cc:	2218      	movs	r2, #24
 80009ce:	701a      	strb	r2, [r3, #0]
	column[3] =column[4] = 0x18;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <diaedgeCube+0x18c>)
 80009d2:	2218      	movs	r2, #24
 80009d4:	711a      	strb	r2, [r3, #4]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <diaedgeCube+0x18c>)
 80009d8:	791a      	ldrb	r2, [r3, #4]
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <diaedgeCube+0x18c>)
 80009dc:	70da      	strb	r2, [r3, #3]
	column[0] = column[7] = 0x81;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <diaedgeCube+0x18c>)
 80009e0:	2281      	movs	r2, #129	; 0x81
 80009e2:	71da      	strb	r2, [r3, #7]
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <diaedgeCube+0x18c>)
 80009e6:	79da      	ldrb	r2, [r3, #7]
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <diaedgeCube+0x18c>)
 80009ea:	701a      	strb	r2, [r3, #0]
	column[1] = column[2] = column[5] = column[6] = 0x00;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <diaedgeCube+0x18c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	719a      	strb	r2, [r3, #6]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <diaedgeCube+0x18c>)
 80009f4:	799a      	ldrb	r2, [r3, #6]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <diaedgeCube+0x18c>)
 80009f8:	715a      	strb	r2, [r3, #5]
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <diaedgeCube+0x18c>)
 80009fc:	795a      	ldrb	r2, [r3, #5]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <diaedgeCube+0x18c>)
 8000a00:	709a      	strb	r2, [r3, #2]
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <diaedgeCube+0x18c>)
 8000a04:	789a      	ldrb	r2, [r3, #2]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <diaedgeCube+0x18c>)
 8000a08:	705a      	strb	r2, [r3, #1]
	mergeData(column, layer);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <diaedgeCube+0x188>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <diaedgeCube+0x18c>)
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fc7e 	bl	8000314 <mergeData>
	TransmitData(dataOut);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <diaedgeCube+0x190>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff fc5c 	bl	80002d8 <TransmitData>
	HAL_Delay(hold);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 f82c 	bl	8001a80 <HAL_Delay>
	clearCube();
 8000a28:	f7ff fcc4 	bl	80003b4 <clearCube>
//				TransmitData(dataOut);
//				clearCube();
//				HAL_Delay(hold);
//			}

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b004      	add	sp, #16
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000f0 	.word	0x200000f0
 8000a38:	200000f4 	.word	0x200000f4
 8000a3c:	200000fc 	.word	0x200000fc

08000a40 <numberingCube>:

void numberingCube() //ok
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
	int x = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
	int y = 40;
 8000a4a:	2328      	movs	r3, #40	; 0x28
 8000a4c:	603b      	str	r3, [r7, #0]
	clearCube();
 8000a4e:	f7ff fcb1 	bl	80003b4 <clearCube>
	//digit 0
	for (int i = 0; i < 8; i++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
 8000a56:	e04d      	b.n	8000af4 <numberingCube+0xb4>
	{
		column[i] = 0x3c;
 8000a58:	4ae0      	ldr	r2, [pc, #896]	; (8000ddc <numberingCube+0x39c>)
 8000a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	223c      	movs	r2, #60	; 0x3c
 8000a60:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000a62:	4bdf      	ldr	r3, [pc, #892]	; (8000de0 <numberingCube+0x3a0>)
 8000a64:	2281      	movs	r2, #129	; 0x81
 8000a66:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000a68:	4bdd      	ldr	r3, [pc, #884]	; (8000de0 <numberingCube+0x3a0>)
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4bdb      	ldr	r3, [pc, #876]	; (8000ddc <numberingCube+0x39c>)
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fc4f 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000a76:	4bdb      	ldr	r3, [pc, #876]	; (8000de4 <numberingCube+0x3a4>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fc2d 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fffd 	bl	8001a80 <HAL_Delay>

		column[i] = 0x66;
 8000a86:	4ad5      	ldr	r2, [pc, #852]	; (8000ddc <numberingCube+0x39c>)
 8000a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8a:	18d3      	adds	r3, r2, r3
 8000a8c:	2266      	movs	r2, #102	; 0x66
 8000a8e:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000a90:	4bd3      	ldr	r3, [pc, #844]	; (8000de0 <numberingCube+0x3a0>)
 8000a92:	2242      	movs	r2, #66	; 0x42
 8000a94:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000a96:	4bd2      	ldr	r3, [pc, #840]	; (8000de0 <numberingCube+0x3a0>)
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4bd0      	ldr	r3, [pc, #832]	; (8000ddc <numberingCube+0x39c>)
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fc38 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000aa4:	4bcf      	ldr	r3, [pc, #828]	; (8000de4 <numberingCube+0x3a4>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fc16 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 ffe6 	bl	8001a80 <HAL_Delay>

		column[i] = 0xc3;
 8000ab4:	4ac9      	ldr	r2, [pc, #804]	; (8000ddc <numberingCube+0x39c>)
 8000ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	22c3      	movs	r2, #195	; 0xc3
 8000abc:	701a      	strb	r2, [r3, #0]
		layer = 0x3c;
 8000abe:	4bc8      	ldr	r3, [pc, #800]	; (8000de0 <numberingCube+0x3a0>)
 8000ac0:	223c      	movs	r2, #60	; 0x3c
 8000ac2:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ac4:	4bc6      	ldr	r3, [pc, #792]	; (8000de0 <numberingCube+0x3a0>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4bc4      	ldr	r3, [pc, #784]	; (8000ddc <numberingCube+0x39c>)
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff fc21 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000ad2:	4bc4      	ldr	r3, [pc, #784]	; (8000de4 <numberingCube+0x3a4>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fbff 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 ffcf 	bl	8001a80 <HAL_Delay>
		clearCube();
 8000ae2:	f7ff fc67 	bl	80003b4 <clearCube>
		HAL_Delay(y);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 ffc9 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	3301      	adds	r3, #1
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
 8000af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af6:	2b07      	cmp	r3, #7
 8000af8:	ddae      	ble.n	8000a58 <numberingCube+0x18>
	}
	HAL_Delay(delay);
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 ffbe 	bl	8001a80 <HAL_Delay>
	//digit 1
	for (int i = 0; i < 8; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
 8000b08:	e092      	b.n	8000c30 <numberingCube+0x1f0>
	{
		column[i] = 0xff;
 8000b0a:	4ab4      	ldr	r2, [pc, #720]	; (8000ddc <numberingCube+0x39c>)
 8000b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0e:	18d3      	adds	r3, r2, r3
 8000b10:	22ff      	movs	r2, #255	; 0xff
 8000b12:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000b14:	4bb2      	ldr	r3, [pc, #712]	; (8000de0 <numberingCube+0x3a0>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b1a:	4bb1      	ldr	r3, [pc, #708]	; (8000de0 <numberingCube+0x3a0>)
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	4baf      	ldr	r3, [pc, #700]	; (8000ddc <numberingCube+0x39c>)
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fbf6 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000b28:	4bae      	ldr	r3, [pc, #696]	; (8000de4 <numberingCube+0x3a4>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff fbd4 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 ffa4 	bl	8001a80 <HAL_Delay>

		column[i] = 0x98;
 8000b38:	4aa8      	ldr	r2, [pc, #672]	; (8000ddc <numberingCube+0x39c>)
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	18d3      	adds	r3, r2, r3
 8000b3e:	2298      	movs	r2, #152	; 0x98
 8000b40:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000b42:	4ba7      	ldr	r3, [pc, #668]	; (8000de0 <numberingCube+0x3a0>)
 8000b44:	2208      	movs	r2, #8
 8000b46:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b48:	4ba5      	ldr	r3, [pc, #660]	; (8000de0 <numberingCube+0x3a0>)
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4ba3      	ldr	r3, [pc, #652]	; (8000ddc <numberingCube+0x39c>)
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fbdf 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000b56:	4ba3      	ldr	r3, [pc, #652]	; (8000de4 <numberingCube+0x3a4>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fbbd 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 ff8d 	bl	8001a80 <HAL_Delay>

		column[i] = 0xd8;
 8000b66:	4a9d      	ldr	r2, [pc, #628]	; (8000ddc <numberingCube+0x39c>)
 8000b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6a:	18d3      	adds	r3, r2, r3
 8000b6c:	22d8      	movs	r2, #216	; 0xd8
 8000b6e:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000b70:	4b9b      	ldr	r3, [pc, #620]	; (8000de0 <numberingCube+0x3a0>)
 8000b72:	2210      	movs	r2, #16
 8000b74:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000b76:	4b9a      	ldr	r3, [pc, #616]	; (8000de0 <numberingCube+0x3a0>)
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	4b98      	ldr	r3, [pc, #608]	; (8000ddc <numberingCube+0x39c>)
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fbc8 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000b84:	4b97      	ldr	r3, [pc, #604]	; (8000de4 <numberingCube+0x3a4>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fba6 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 ff76 	bl	8001a80 <HAL_Delay>

		column[i] = 0x78;
 8000b94:	4a91      	ldr	r2, [pc, #580]	; (8000ddc <numberingCube+0x39c>)
 8000b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	2278      	movs	r2, #120	; 0x78
 8000b9c:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000b9e:	4b90      	ldr	r3, [pc, #576]	; (8000de0 <numberingCube+0x3a0>)
 8000ba0:	2220      	movs	r2, #32
 8000ba2:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ba4:	4b8e      	ldr	r3, [pc, #568]	; (8000de0 <numberingCube+0x3a0>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b8c      	ldr	r3, [pc, #560]	; (8000ddc <numberingCube+0x39c>)
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fbb1 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000bb2:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <numberingCube+0x3a4>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff fb8f 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 ff5f 	bl	8001a80 <HAL_Delay>

		column[i] = 0x38;
 8000bc2:	4a86      	ldr	r2, [pc, #536]	; (8000ddc <numberingCube+0x39c>)
 8000bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc6:	18d3      	adds	r3, r2, r3
 8000bc8:	2238      	movs	r2, #56	; 0x38
 8000bca:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000bcc:	4b84      	ldr	r3, [pc, #528]	; (8000de0 <numberingCube+0x3a0>)
 8000bce:	2240      	movs	r2, #64	; 0x40
 8000bd0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000bd2:	4b83      	ldr	r3, [pc, #524]	; (8000de0 <numberingCube+0x3a0>)
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	4b81      	ldr	r3, [pc, #516]	; (8000ddc <numberingCube+0x39c>)
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fb9a 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000be0:	4b80      	ldr	r3, [pc, #512]	; (8000de4 <numberingCube+0x3a4>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fb78 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 ff48 	bl	8001a80 <HAL_Delay>

		column[i] = 0x18;
 8000bf0:	4a7a      	ldr	r2, [pc, #488]	; (8000ddc <numberingCube+0x39c>)
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf4:	18d3      	adds	r3, r2, r3
 8000bf6:	2218      	movs	r2, #24
 8000bf8:	701a      	strb	r2, [r3, #0]
		layer = 0x86;
 8000bfa:	4b79      	ldr	r3, [pc, #484]	; (8000de0 <numberingCube+0x3a0>)
 8000bfc:	2286      	movs	r2, #134	; 0x86
 8000bfe:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c00:	4b77      	ldr	r3, [pc, #476]	; (8000de0 <numberingCube+0x3a0>)
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	4b75      	ldr	r3, [pc, #468]	; (8000ddc <numberingCube+0x39c>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fb83 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000c0e:	4b75      	ldr	r3, [pc, #468]	; (8000de4 <numberingCube+0x3a4>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fb61 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 ff31 	bl	8001a80 <HAL_Delay>
		clearCube();
 8000c1e:	f7ff fbc9 	bl	80003b4 <clearCube>

		HAL_Delay(y);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 ff2b 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	dc00      	bgt.n	8000c38 <numberingCube+0x1f8>
 8000c36:	e768      	b.n	8000b0a <numberingCube+0xca>
	}
	HAL_Delay(delay);
 8000c38:	23fa      	movs	r3, #250	; 0xfa
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 ff1f 	bl	8001a80 <HAL_Delay>
	//digit 2
	for (int i = 0; i < 8; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c46:	e0bc      	b.n	8000dc2 <numberingCube+0x382>
	{
		column[i] = 0x3c;
 8000c48:	4a64      	ldr	r2, [pc, #400]	; (8000ddc <numberingCube+0x39c>)
 8000c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	223c      	movs	r2, #60	; 0x3c
 8000c50:	701a      	strb	r2, [r3, #0]
		layer = 0x80;
 8000c52:	4b63      	ldr	r3, [pc, #396]	; (8000de0 <numberingCube+0x3a0>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c58:	4b61      	ldr	r3, [pc, #388]	; (8000de0 <numberingCube+0x3a0>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b5f      	ldr	r3, [pc, #380]	; (8000ddc <numberingCube+0x39c>)
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fb57 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000c66:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <numberingCube+0x3a4>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff fb35 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 ff05 	bl	8001a80 <HAL_Delay>

		column[i] = 0x66;
 8000c76:	4a59      	ldr	r2, [pc, #356]	; (8000ddc <numberingCube+0x39c>)
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	2266      	movs	r2, #102	; 0x66
 8000c7e:	701a      	strb	r2, [r3, #0]
		layer = 0x40;
 8000c80:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <numberingCube+0x3a0>)
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000c86:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <numberingCube+0x3a0>)
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <numberingCube+0x39c>)
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff fb40 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000c94:	4b53      	ldr	r3, [pc, #332]	; (8000de4 <numberingCube+0x3a4>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fb1e 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 feee 	bl	8001a80 <HAL_Delay>

		column[i] = 0xc6;
 8000ca4:	4a4d      	ldr	r2, [pc, #308]	; (8000ddc <numberingCube+0x39c>)
 8000ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	22c6      	movs	r2, #198	; 0xc6
 8000cac:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000cae:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <numberingCube+0x3a0>)
 8000cb0:	2220      	movs	r2, #32
 8000cb2:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000cb4:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <numberingCube+0x3a0>)
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <numberingCube+0x39c>)
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fb29 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000cc2:	4b48      	ldr	r3, [pc, #288]	; (8000de4 <numberingCube+0x3a4>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fb07 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 fed7 	bl	8001a80 <HAL_Delay>

		column[i] = 0x06;
 8000cd2:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <numberingCube+0x39c>)
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd6:	18d3      	adds	r3, r2, r3
 8000cd8:	2206      	movs	r2, #6
 8000cda:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8000cdc:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <numberingCube+0x3a0>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <numberingCube+0x3a0>)
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <numberingCube+0x39c>)
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fb12 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000cf0:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <numberingCube+0x3a4>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff faf0 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fec0 	bl	8001a80 <HAL_Delay>

		column[i] = 0x0c;
 8000d00:	4a36      	ldr	r2, [pc, #216]	; (8000ddc <numberingCube+0x39c>)
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	220c      	movs	r2, #12
 8000d08:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <numberingCube+0x3a0>)
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d10:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <numberingCube+0x3a0>)
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <numberingCube+0x39c>)
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff fafb 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <numberingCube+0x3a4>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff fad9 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 fea9 	bl	8001a80 <HAL_Delay>

		column[i] = 0x18;
 8000d2e:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <numberingCube+0x39c>)
 8000d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d32:	18d3      	adds	r3, r2, r3
 8000d34:	2218      	movs	r2, #24
 8000d36:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <numberingCube+0x3a0>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <numberingCube+0x3a0>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <numberingCube+0x39c>)
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fae4 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <numberingCube+0x3a4>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fac2 	bl	80002d8 <TransmitData>

		column[i] = 0x70;
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <numberingCube+0x39c>)
 8000d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	2270      	movs	r2, #112	; 0x70
 8000d5c:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <numberingCube+0x3a0>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <numberingCube+0x3a0>)
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <numberingCube+0x39c>)
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fad1 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <numberingCube+0x3a4>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff faaf 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 fe7f 	bl	8001a80 <HAL_Delay>

		column[i] = 0xff;
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <numberingCube+0x39c>)
 8000d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	22ff      	movs	r2, #255	; 0xff
 8000d8a:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <numberingCube+0x3a0>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <numberingCube+0x3a0>)
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <numberingCube+0x39c>)
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff faba 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <numberingCube+0x3a4>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fa98 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fe68 	bl	8001a80 <HAL_Delay>
		clearCube();
 8000db0:	f7ff fb00 	bl	80003b4 <clearCube>

		HAL_Delay(y);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 fe62 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc4:	2b07      	cmp	r3, #7
 8000dc6:	dc00      	bgt.n	8000dca <numberingCube+0x38a>
 8000dc8:	e73e      	b.n	8000c48 <numberingCube+0x208>
	}
	HAL_Delay(delay);
 8000dca:	23fa      	movs	r3, #250	; 0xfa
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 fe56 	bl	8001a80 <HAL_Delay>
	//digit 3
	for (int i = 0; i < 8; i++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd8:	e06b      	b.n	8000eb2 <numberingCube+0x472>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	200000f4 	.word	0x200000f4
 8000de0:	200000f0 	.word	0x200000f0
 8000de4:	200000fc 	.word	0x200000fc
	{
		column[i] = 0x7e;
 8000de8:	4af4      	ldr	r2, [pc, #976]	; (80011bc <numberingCube+0x77c>)
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	18d3      	adds	r3, r2, r3
 8000dee:	227e      	movs	r2, #126	; 0x7e
 8000df0:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 8000df2:	4bf3      	ldr	r3, [pc, #972]	; (80011c0 <numberingCube+0x780>)
 8000df4:	2281      	movs	r2, #129	; 0x81
 8000df6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000df8:	4bf1      	ldr	r3, [pc, #964]	; (80011c0 <numberingCube+0x780>)
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	4bef      	ldr	r3, [pc, #956]	; (80011bc <numberingCube+0x77c>)
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff fa87 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000e06:	4bef      	ldr	r3, [pc, #956]	; (80011c4 <numberingCube+0x784>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff fa65 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fe35 	bl	8001a80 <HAL_Delay>

		column[i] = 0xe7;
 8000e16:	4ae9      	ldr	r2, [pc, #932]	; (80011bc <numberingCube+0x77c>)
 8000e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1a:	18d3      	adds	r3, r2, r3
 8000e1c:	22e7      	movs	r2, #231	; 0xe7
 8000e1e:	701a      	strb	r2, [r3, #0]
		layer = 0x42;
 8000e20:	4be7      	ldr	r3, [pc, #924]	; (80011c0 <numberingCube+0x780>)
 8000e22:	2242      	movs	r2, #66	; 0x42
 8000e24:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e26:	4be6      	ldr	r3, [pc, #920]	; (80011c0 <numberingCube+0x780>)
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	4be4      	ldr	r3, [pc, #912]	; (80011bc <numberingCube+0x77c>)
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fa70 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000e34:	4be3      	ldr	r3, [pc, #908]	; (80011c4 <numberingCube+0x784>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff fa4e 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fe1e 	bl	8001a80 <HAL_Delay>

		column[i] = 0xc3;
 8000e44:	4add      	ldr	r2, [pc, #884]	; (80011bc <numberingCube+0x77c>)
 8000e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e48:	18d3      	adds	r3, r2, r3
 8000e4a:	22c3      	movs	r2, #195	; 0xc3
 8000e4c:	701a      	strb	r2, [r3, #0]
		layer = 0x24;
 8000e4e:	4bdc      	ldr	r3, [pc, #880]	; (80011c0 <numberingCube+0x780>)
 8000e50:	2224      	movs	r2, #36	; 0x24
 8000e52:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e54:	4bda      	ldr	r3, [pc, #872]	; (80011c0 <numberingCube+0x780>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4bd8      	ldr	r3, [pc, #864]	; (80011bc <numberingCube+0x77c>)
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff fa59 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000e62:	4bd8      	ldr	r3, [pc, #864]	; (80011c4 <numberingCube+0x784>)
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fa37 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f000 fe07 	bl	8001a80 <HAL_Delay>

		column[i] = 0x06;
 8000e72:	4ad2      	ldr	r2, [pc, #840]	; (80011bc <numberingCube+0x77c>)
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	18d3      	adds	r3, r2, r3
 8000e78:	2206      	movs	r2, #6
 8000e7a:	701a      	strb	r2, [r3, #0]
		layer = 0x18;
 8000e7c:	4bd0      	ldr	r3, [pc, #832]	; (80011c0 <numberingCube+0x780>)
 8000e7e:	2218      	movs	r2, #24
 8000e80:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000e82:	4bcf      	ldr	r3, [pc, #828]	; (80011c0 <numberingCube+0x780>)
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	4bcd      	ldr	r3, [pc, #820]	; (80011bc <numberingCube+0x77c>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fa42 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000e90:	4bcc      	ldr	r3, [pc, #816]	; (80011c4 <numberingCube+0x784>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff fa20 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fdf0 	bl	8001a80 <HAL_Delay>
		clearCube();
 8000ea0:	f7ff fa88 	bl	80003b4 <clearCube>

		HAL_Delay(y);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fdea 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eae:	3301      	adds	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	dd97      	ble.n	8000de8 <numberingCube+0x3a8>
	}
	HAL_Delay(delay);
 8000eb8:	23fa      	movs	r3, #250	; 0xfa
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f000 fddf 	bl	8001a80 <HAL_Delay>
	//digit 4
	for (int i = 0; i < 8; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec6:	e05f      	b.n	8000f88 <numberingCube+0x548>
	{
		column[i] = 0x06;
 8000ec8:	4abc      	ldr	r2, [pc, #752]	; (80011bc <numberingCube+0x77c>)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	2206      	movs	r2, #6
 8000ed0:	701a      	strb	r2, [r3, #0]
		layer = 0xf3;
 8000ed2:	4bbb      	ldr	r3, [pc, #748]	; (80011c0 <numberingCube+0x780>)
 8000ed4:	22f3      	movs	r2, #243	; 0xf3
 8000ed6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000ed8:	4bb9      	ldr	r3, [pc, #740]	; (80011c0 <numberingCube+0x780>)
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	4bb7      	ldr	r3, [pc, #732]	; (80011bc <numberingCube+0x77c>)
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fa17 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000ee6:	4bb7      	ldr	r3, [pc, #732]	; (80011c4 <numberingCube+0x784>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff f9f5 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fdc5 	bl	8001a80 <HAL_Delay>

		column[i] = 0xff;
 8000ef6:	4ab1      	ldr	r2, [pc, #708]	; (80011bc <numberingCube+0x77c>)
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	18d3      	adds	r3, r2, r3
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 8000f00:	4baf      	ldr	r3, [pc, #700]	; (80011c0 <numberingCube+0x780>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f06:	4bae      	ldr	r3, [pc, #696]	; (80011c0 <numberingCube+0x780>)
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	4bac      	ldr	r3, [pc, #688]	; (80011bc <numberingCube+0x77c>)
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff fa00 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000f14:	4bab      	ldr	r3, [pc, #684]	; (80011c4 <numberingCube+0x784>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff f9de 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fdae 	bl	8001a80 <HAL_Delay>

		for (int j = 0; j < 4; j++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	e022      	b.n	8000f70 <numberingCube+0x530>
		{
		column[i] = 0x08 << j;
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	b2d9      	uxtb	r1, r3
 8000f34:	4aa1      	ldr	r2, [pc, #644]	; (80011bc <numberingCube+0x77c>)
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	1c0a      	adds	r2, r1, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
		layer = 0x80 >> j;
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	411a      	asrs	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b9d      	ldr	r3, [pc, #628]	; (80011c0 <numberingCube+0x780>)
 8000f4a:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000f4c:	4b9c      	ldr	r3, [pc, #624]	; (80011c0 <numberingCube+0x780>)
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	4b9a      	ldr	r3, [pc, #616]	; (80011bc <numberingCube+0x77c>)
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff f9dd 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000f5a:	4b9a      	ldr	r3, [pc, #616]	; (80011c4 <numberingCube+0x784>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff f9bb 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fd8b 	bl	8001a80 <HAL_Delay>
		for (int j = 0; j < 4; j++)
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	ddd9      	ble.n	8000f2a <numberingCube+0x4ea>
		}
		clearCube();
 8000f76:	f7ff fa1d 	bl	80003b4 <clearCube>
		HAL_Delay(y);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fd7f 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3301      	adds	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	dd9c      	ble.n	8000ec8 <numberingCube+0x488>
	}
	HAL_Delay(delay);
 8000f8e:	23fa      	movs	r3, #250	; 0xfa
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 fd74 	bl	8001a80 <HAL_Delay>
	//digit 5
	for (int i = 0; i < 8; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	e092      	b.n	80010c4 <numberingCube+0x684>
	{
		column[i] = 0xff;
 8000f9e:	4a87      	ldr	r2, [pc, #540]	; (80011bc <numberingCube+0x77c>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	18d3      	adds	r3, r2, r3
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 8000fa8:	4b85      	ldr	r3, [pc, #532]	; (80011c0 <numberingCube+0x780>)
 8000faa:	22c0      	movs	r2, #192	; 0xc0
 8000fac:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000fae:	4b84      	ldr	r3, [pc, #528]	; (80011c0 <numberingCube+0x780>)
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	4b82      	ldr	r3, [pc, #520]	; (80011bc <numberingCube+0x77c>)
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff f9ac 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000fbc:	4b81      	ldr	r3, [pc, #516]	; (80011c4 <numberingCube+0x784>)
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff f98a 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fd5a 	bl	8001a80 <HAL_Delay>

		column[i] = 0xc0;
 8000fcc:	4a7b      	ldr	r2, [pc, #492]	; (80011bc <numberingCube+0x77c>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	22c0      	movs	r2, #192	; 0xc0
 8000fd4:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8000fd6:	4b7a      	ldr	r3, [pc, #488]	; (80011c0 <numberingCube+0x780>)
 8000fd8:	2220      	movs	r2, #32
 8000fda:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8000fdc:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <numberingCube+0x780>)
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	4b76      	ldr	r3, [pc, #472]	; (80011bc <numberingCube+0x77c>)
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f995 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8000fea:	4b76      	ldr	r3, [pc, #472]	; (80011c4 <numberingCube+0x784>)
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff f973 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 fd43 	bl	8001a80 <HAL_Delay>

		column[i] = 0xfe;
 8000ffa:	4a70      	ldr	r2, [pc, #448]	; (80011bc <numberingCube+0x77c>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	22fe      	movs	r2, #254	; 0xfe
 8001002:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8001004:	4b6e      	ldr	r3, [pc, #440]	; (80011c0 <numberingCube+0x780>)
 8001006:	2210      	movs	r2, #16
 8001008:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800100a:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <numberingCube+0x780>)
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <numberingCube+0x77c>)
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff f97e 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001018:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <numberingCube+0x784>)
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff f95c 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fd2c 	bl	8001a80 <HAL_Delay>

		column[i] = 0x03;
 8001028:	4a64      	ldr	r2, [pc, #400]	; (80011bc <numberingCube+0x77c>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	18d3      	adds	r3, r2, r3
 800102e:	2203      	movs	r2, #3
 8001030:	701a      	strb	r2, [r3, #0]
		layer = 0x0c;
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <numberingCube+0x780>)
 8001034:	220c      	movs	r2, #12
 8001036:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <numberingCube+0x780>)
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <numberingCube+0x77c>)
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff f967 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <numberingCube+0x784>)
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff f945 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0018      	movs	r0, r3
 8001052:	f000 fd15 	bl	8001a80 <HAL_Delay>

		column[i] = 0x83;
 8001056:	4a59      	ldr	r2, [pc, #356]	; (80011bc <numberingCube+0x77c>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	18d3      	adds	r3, r2, r3
 800105c:	2283      	movs	r2, #131	; 0x83
 800105e:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 8001060:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <numberingCube+0x780>)
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001066:	4b56      	ldr	r3, [pc, #344]	; (80011c0 <numberingCube+0x780>)
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	4b54      	ldr	r3, [pc, #336]	; (80011bc <numberingCube+0x77c>)
 800106c:	0011      	movs	r1, r2
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff f950 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001074:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <numberingCube+0x784>)
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff f92e 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	0018      	movs	r0, r3
 8001080:	f000 fcfe 	bl	8001a80 <HAL_Delay>

		column[i] = 0x7e;
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <numberingCube+0x77c>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	227e      	movs	r2, #126	; 0x7e
 800108c:	701a      	strb	r2, [r3, #0]
		layer = 0x01;
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <numberingCube+0x780>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001094:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <numberingCube+0x780>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <numberingCube+0x77c>)
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff f939 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80010a2:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <numberingCube+0x784>)
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff f917 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 fce7 	bl	8001a80 <HAL_Delay>
		clearCube();
 80010b2:	f7ff f97f 	bl	80003b4 <clearCube>
		HAL_Delay(y);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 fce1 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	dc00      	bgt.n	80010cc <numberingCube+0x68c>
 80010ca:	e768      	b.n	8000f9e <numberingCube+0x55e>
	}
	HAL_Delay(delay);
 80010cc:	23fa      	movs	r3, #250	; 0xfa
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 fcd5 	bl	8001a80 <HAL_Delay>
	//digit 6
	for (int i = 0; i < 8; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	e064      	b.n	80011a6 <numberingCube+0x766>
	{
		column[i] = 0x7e;
 80010dc:	4a37      	ldr	r2, [pc, #220]	; (80011bc <numberingCube+0x77c>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	18d3      	adds	r3, r2, r3
 80010e2:	227e      	movs	r2, #126	; 0x7e
 80010e4:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <numberingCube+0x780>)
 80010e8:	2281      	movs	r2, #129	; 0x81
 80010ea:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <numberingCube+0x780>)
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <numberingCube+0x77c>)
 80010f2:	0011      	movs	r1, r2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff f90d 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <numberingCube+0x784>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff f8eb 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fcbb 	bl	8001a80 <HAL_Delay>

		column[i] = 0xc3;
 800110a:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <numberingCube+0x77c>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	18d3      	adds	r3, r2, r3
 8001110:	22c3      	movs	r2, #195	; 0xc3
 8001112:	701a      	strb	r2, [r3, #0]
		layer = 0x4e;
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <numberingCube+0x780>)
 8001116:	224e      	movs	r2, #78	; 0x4e
 8001118:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <numberingCube+0x780>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <numberingCube+0x77c>)
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff f8f6 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <numberingCube+0x784>)
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff f8d4 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fca4 	bl	8001a80 <HAL_Delay>

		column[i] = 0xc0;
 8001138:	4a20      	ldr	r2, [pc, #128]	; (80011bc <numberingCube+0x77c>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	18d3      	adds	r3, r2, r3
 800113e:	22c0      	movs	r2, #192	; 0xc0
 8001140:	701a      	strb	r2, [r3, #0]
		layer = 0x20;
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <numberingCube+0x780>)
 8001144:	2220      	movs	r2, #32
 8001146:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <numberingCube+0x780>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <numberingCube+0x77c>)
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff f8df 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <numberingCube+0x784>)
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff f8bd 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fc8d 	bl	8001a80 <HAL_Delay>

		column[i] = 0xfe;
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <numberingCube+0x77c>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	18d3      	adds	r3, r2, r3
 800116c:	22fe      	movs	r2, #254	; 0xfe
 800116e:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <numberingCube+0x780>)
 8001172:	2210      	movs	r2, #16
 8001174:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <numberingCube+0x780>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <numberingCube+0x77c>)
 800117c:	0011      	movs	r1, r2
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff f8c8 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <numberingCube+0x784>)
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff f8a6 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fc76 	bl	8001a80 <HAL_Delay>
		clearCube();
 8001194:	f7ff f90e 	bl	80003b4 <clearCube>
		HAL_Delay(y);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	0018      	movs	r0, r3
 800119c:	f000 fc70 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	dd97      	ble.n	80010dc <numberingCube+0x69c>
	}
	HAL_Delay(delay);
 80011ac:	23fa      	movs	r3, #250	; 0xfa
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 fc65 	bl	8001a80 <HAL_Delay>
	//digit 7
	for (int i = 0; i < 8; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e04e      	b.n	800125a <numberingCube+0x81a>
 80011bc:	200000f4 	.word	0x200000f4
 80011c0:	200000f0 	.word	0x200000f0
 80011c4:	200000fc 	.word	0x200000fc
	{
		column[i] = 0x7f;
 80011c8:	4a9a      	ldr	r2, [pc, #616]	; (8001434 <numberingCube+0x9f4>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	227f      	movs	r2, #127	; 0x7f
 80011d0:	701a      	strb	r2, [r3, #0]
		layer = 0xc0;
 80011d2:	4b99      	ldr	r3, [pc, #612]	; (8001438 <numberingCube+0x9f8>)
 80011d4:	22c0      	movs	r2, #192	; 0xc0
 80011d6:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80011d8:	4b97      	ldr	r3, [pc, #604]	; (8001438 <numberingCube+0x9f8>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b95      	ldr	r3, [pc, #596]	; (8001434 <numberingCube+0x9f4>)
 80011de:	0011      	movs	r1, r2
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff f897 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80011e6:	4b95      	ldr	r3, [pc, #596]	; (800143c <numberingCube+0x9fc>)
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff f875 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f000 fc45 	bl	8001a80 <HAL_Delay>

		for (int j = 0; j < 6; j++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	e022      	b.n	8001242 <numberingCube+0x802>
		{
			column[i] = 0x03 << j;
 80011fc:	2203      	movs	r2, #3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	b2d9      	uxtb	r1, r3
 8001206:	4a8b      	ldr	r2, [pc, #556]	; (8001434 <numberingCube+0x9f4>)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	1c0a      	adds	r2, r1, #0
 800120e:	701a      	strb	r2, [r3, #0]
			layer = 0x20 >> j;
 8001210:	2220      	movs	r2, #32
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	411a      	asrs	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b87      	ldr	r3, [pc, #540]	; (8001438 <numberingCube+0x9f8>)
 800121c:	701a      	strb	r2, [r3, #0]
			mergeData(column, layer);
 800121e:	4b86      	ldr	r3, [pc, #536]	; (8001438 <numberingCube+0x9f8>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b84      	ldr	r3, [pc, #528]	; (8001434 <numberingCube+0x9f4>)
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff f874 	bl	8000314 <mergeData>
			TransmitData(dataOut);
 800122c:	4b83      	ldr	r3, [pc, #524]	; (800143c <numberingCube+0x9fc>)
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff f852 	bl	80002d8 <TransmitData>
			HAL_Delay(x);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	0018      	movs	r0, r3
 8001238:	f000 fc22 	bl	8001a80 <HAL_Delay>
		for (int j = 0; j < 6; j++)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	3301      	adds	r3, #1
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b05      	cmp	r3, #5
 8001246:	ddd9      	ble.n	80011fc <numberingCube+0x7bc>
		}
		clearCube();
 8001248:	f7ff f8b4 	bl	80003b4 <clearCube>
		HAL_Delay(y);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 fc16 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b07      	cmp	r3, #7
 800125e:	ddb3      	ble.n	80011c8 <numberingCube+0x788>
	}
	HAL_Delay(delay);
 8001260:	23fa      	movs	r3, #250	; 0xfa
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	0018      	movs	r0, r3
 8001266:	f000 fc0b 	bl	8001a80 <HAL_Delay>
	//digit 8
	for (int i = 0; i < 8; i++)
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e036      	b.n	80012de <numberingCube+0x89e>
	{
		column[i] = 0xc3;
 8001270:	4a70      	ldr	r2, [pc, #448]	; (8001434 <numberingCube+0x9f4>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	18d3      	adds	r3, r2, r3
 8001276:	22c3      	movs	r2, #195	; 0xc3
 8001278:	701a      	strb	r2, [r3, #0]
		layer = 0x66;
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <numberingCube+0x9f8>)
 800127c:	2266      	movs	r2, #102	; 0x66
 800127e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001280:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <numberingCube+0x9f8>)
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <numberingCube+0x9f4>)
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff f843 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800128e:	4b6b      	ldr	r3, [pc, #428]	; (800143c <numberingCube+0x9fc>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff f821 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f000 fbf1 	bl	8001a80 <HAL_Delay>

		column[i] = 0x7e;
 800129e:	4a65      	ldr	r2, [pc, #404]	; (8001434 <numberingCube+0x9f4>)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	18d3      	adds	r3, r2, r3
 80012a4:	227e      	movs	r2, #126	; 0x7e
 80012a6:	701a      	strb	r2, [r3, #0]
		layer = 0x99;
 80012a8:	4b63      	ldr	r3, [pc, #396]	; (8001438 <numberingCube+0x9f8>)
 80012aa:	2299      	movs	r2, #153	; 0x99
 80012ac:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <numberingCube+0x9f8>)
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	4b60      	ldr	r3, [pc, #384]	; (8001434 <numberingCube+0x9f4>)
 80012b4:	0011      	movs	r1, r2
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff f82c 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80012bc:	4b5f      	ldr	r3, [pc, #380]	; (800143c <numberingCube+0x9fc>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff f80a 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fbda 	bl	8001a80 <HAL_Delay>
		clearCube();
 80012cc:	f7ff f872 	bl	80003b4 <clearCube>
		HAL_Delay(y);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fbd4 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b07      	cmp	r3, #7
 80012e2:	ddc5      	ble.n	8001270 <numberingCube+0x830>
	}
	HAL_Delay(delay);
 80012e4:	23fa      	movs	r3, #250	; 0xfa
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 fbc9 	bl	8001a80 <HAL_Delay>
	//digit 9
	for (int i = 0; i < 8; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	e092      	b.n	800141a <numberingCube+0x9da>
	{
		column[i] = 0x7e;
 80012f4:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <numberingCube+0x9f4>)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	227e      	movs	r2, #126	; 0x7e
 80012fc:	701a      	strb	r2, [r3, #0]
		layer = 0x81;
 80012fe:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <numberingCube+0x9f8>)
 8001300:	2281      	movs	r2, #129	; 0x81
 8001302:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001304:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <numberingCube+0x9f8>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <numberingCube+0x9f4>)
 800130a:	0011      	movs	r1, r2
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff f801 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001312:	4b4a      	ldr	r3, [pc, #296]	; (800143c <numberingCube+0x9fc>)
 8001314:	0018      	movs	r0, r3
 8001316:	f7fe ffdf 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f000 fbaf 	bl	8001a80 <HAL_Delay>

		column[i] = 0xc3;
 8001322:	4a44      	ldr	r2, [pc, #272]	; (8001434 <numberingCube+0x9f4>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	18d3      	adds	r3, r2, r3
 8001328:	22c3      	movs	r2, #195	; 0xc3
 800132a:	701a      	strb	r2, [r3, #0]
		layer = 0x60;
 800132c:	4b42      	ldr	r3, [pc, #264]	; (8001438 <numberingCube+0x9f8>)
 800132e:	2260      	movs	r2, #96	; 0x60
 8001330:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001332:	4b41      	ldr	r3, [pc, #260]	; (8001438 <numberingCube+0x9f8>)
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <numberingCube+0x9f4>)
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f7fe ffea 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <numberingCube+0x9fc>)
 8001342:	0018      	movs	r0, r3
 8001344:	f7fe ffc8 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fb98 	bl	8001a80 <HAL_Delay>

		column[i] = 0xff;
 8001350:	4a38      	ldr	r2, [pc, #224]	; (8001434 <numberingCube+0x9f4>)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	18d3      	adds	r3, r2, r3
 8001356:	22ff      	movs	r2, #255	; 0xff
 8001358:	701a      	strb	r2, [r3, #0]
		layer = 0x10;
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <numberingCube+0x9f8>)
 800135c:	2210      	movs	r2, #16
 800135e:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <numberingCube+0x9f8>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <numberingCube+0x9f4>)
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f7fe ffd3 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <numberingCube+0x9fc>)
 8001370:	0018      	movs	r0, r3
 8001372:	f7fe ffb1 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 fb81 	bl	8001a80 <HAL_Delay>

		column[i] = 0x7f;
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <numberingCube+0x9f4>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	18d3      	adds	r3, r2, r3
 8001384:	227f      	movs	r2, #127	; 0x7f
 8001386:	701a      	strb	r2, [r3, #0]
		layer = 0x08;
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <numberingCube+0x9f8>)
 800138a:	2208      	movs	r2, #8
 800138c:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <numberingCube+0x9f8>)
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <numberingCube+0x9f4>)
 8001394:	0011      	movs	r1, r2
 8001396:	0018      	movs	r0, r3
 8001398:	f7fe ffbc 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <numberingCube+0x9fc>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f7fe ff9a 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 fb6a 	bl	8001a80 <HAL_Delay>

		column[i] = 0x03;
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <numberingCube+0x9f4>)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	18d3      	adds	r3, r2, r3
 80013b2:	2203      	movs	r2, #3
 80013b4:	701a      	strb	r2, [r3, #0]
		layer = 0x04;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <numberingCube+0x9f8>)
 80013b8:	2204      	movs	r2, #4
 80013ba:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <numberingCube+0x9f8>)
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <numberingCube+0x9f4>)
 80013c2:	0011      	movs	r1, r2
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7fe ffa5 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <numberingCube+0x9fc>)
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7fe ff83 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 fb53 	bl	8001a80 <HAL_Delay>

		column[i] = 0x83;
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <numberingCube+0x9f4>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	18d3      	adds	r3, r2, r3
 80013e0:	2283      	movs	r2, #131	; 0x83
 80013e2:	701a      	strb	r2, [r3, #0]
		layer = 0x02;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <numberingCube+0x9f8>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	701a      	strb	r2, [r3, #0]
		mergeData(column, layer);
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <numberingCube+0x9f8>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <numberingCube+0x9f4>)
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7fe ff8e 	bl	8000314 <mergeData>
		TransmitData(dataOut);
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <numberingCube+0x9fc>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7fe ff6c 	bl	80002d8 <TransmitData>
		HAL_Delay(x);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0018      	movs	r0, r3
 8001404:	f000 fb3c 	bl	8001a80 <HAL_Delay>
		clearCube();
 8001408:	f7fe ffd4 	bl	80003b4 <clearCube>
		HAL_Delay(y);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fb36 	bl	8001a80 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3301      	adds	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b07      	cmp	r3, #7
 800141e:	dc00      	bgt.n	8001422 <numberingCube+0x9e2>
 8001420:	e768      	b.n	80012f4 <numberingCube+0x8b4>
	}
	HAL_Delay(delay);
 8001422:	23fa      	movs	r3, #250	; 0xfa
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	0018      	movs	r0, r3
 8001428:	f000 fb2a 	bl	8001a80 <HAL_Delay>
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b00e      	add	sp, #56	; 0x38
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000f4 	.word	0x200000f4
 8001438:	200000f0 	.word	0x200000f0
 800143c:	200000fc 	.word	0x200000fc

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fab8 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f834 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 f8b8 	bl	80015c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001450:	f000 f878 	bl	8001544 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  currentEffect = 8;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <main+0x6c>)
 8001456:	2208      	movs	r2, #8
 8001458:	601a      	str	r2, [r3, #0]
	 switch (currentEffect) {
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <main+0x6c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b09      	cmp	r3, #9
 8001460:	d822      	bhi.n	80014a8 <main+0x68>
 8001462:	009a      	lsls	r2, r3, #2
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <main+0x70>)
 8001466:	18d3      	adds	r3, r2, r3
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	469f      	mov	pc, r3
		case 0:
			lightCube();
 800146c:	f7fe ff78 	bl	8000360 <lightCube>
			break;
 8001470:	e01b      	b.n	80014aa <main+0x6a>
		case 1:
			clearCube();
 8001472:	f7fe ff9f 	bl	80003b4 <clearCube>
			break;
 8001476:	e018      	b.n	80014aa <main+0x6a>
		case 2:
			growShrinkCube();
 8001478:	f7ff f962 	bl	8000740 <growShrinkCube>
			break;
 800147c:	e015      	b.n	80014aa <main+0x6a>
		case 3:
			upperCube();
 800147e:	f7fe ffc3 	bl	8000408 <upperCube>
			break;
 8001482:	e012      	b.n	80014aa <main+0x6a>
		case 4:
			sliderCube();
 8001484:	f7ff f88e 	bl	80005a4 <sliderCube>
			break;
 8001488:	e00f      	b.n	80014aa <main+0x6a>
		case 5:
			diagonalCube();
 800148a:	f7fe fff9 	bl	8000480 <diagonalCube>
			break;
 800148e:	e00c      	b.n	80014aa <main+0x6a>
		case 6:
			randomRainCube();
 8001490:	f7ff f8c6 	bl	8000620 <randomRainCube>
			break;
 8001494:	e009      	b.n	80014aa <main+0x6a>
		case 7:
			aroundEdgeCube();
 8001496:	f7ff f9af 	bl	80007f8 <aroundEdgeCube>
			break;
 800149a:	e006      	b.n	80014aa <main+0x6a>
		case 8:
			diaedgeCube();
 800149c:	f7ff fa06 	bl	80008ac <diaedgeCube>
			break;
 80014a0:	e003      	b.n	80014aa <main+0x6a>
		case 9:
			numberingCube();
 80014a2:	f7ff facd 	bl	8000a40 <numberingCube>
			break;
 80014a6:	e000      	b.n	80014aa <main+0x6a>
		default:
			break;
 80014a8:	46c0      	nop			; (mov r8, r8)
	  currentEffect = 8;
 80014aa:	e7d3      	b.n	8001454 <main+0x14>
 80014ac:	20000108 	.word	0x20000108
 80014b0:	080042a4 	.word	0x080042a4

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b093      	sub	sp, #76	; 0x4c
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	2414      	movs	r4, #20
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	0018      	movs	r0, r3
 80014c0:	2334      	movs	r3, #52	; 0x34
 80014c2:	001a      	movs	r2, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	f001 fe2b 	bl	8003120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	0018      	movs	r0, r3
 80014ce:	2310      	movs	r3, #16
 80014d0:	001a      	movs	r2, r3
 80014d2:	2100      	movs	r1, #0
 80014d4:	f001 fe24 	bl	8003120 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d8:	0021      	movs	r1, r4
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2201      	movs	r2, #1
 80014e4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2202      	movs	r2, #2
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	0252      	lsls	r2, r2, #9
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	0352      	lsls	r2, r2, #13
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001502:	187b      	adds	r3, r7, r1
 8001504:	0018      	movs	r0, r3
 8001506:	f000 fd7b 	bl	8002000 <HAL_RCC_OscConfig>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800150e:	f000 f8b9 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2202      	movs	r2, #2
 800151c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2101      	movs	r1, #1
 800152e:	0018      	movs	r0, r3
 8001530:	f001 f8ec 	bl	800270c <HAL_RCC_ClockConfig>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001538:	f000 f8a4 	bl	8001684 <Error_Handler>
  }
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b013      	add	sp, #76	; 0x4c
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_SPI1_Init+0x74>)
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <MX_SPI1_Init+0x78>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001550:	2282      	movs	r2, #130	; 0x82
 8001552:	0052      	lsls	r2, r2, #1
 8001554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_SPI1_Init+0x74>)
 800155e:	22e0      	movs	r2, #224	; 0xe0
 8001560:	00d2      	lsls	r2, r2, #3
 8001562:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_SPI1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_SPI1_Init+0x74>)
 800157a:	2220      	movs	r2, #32
 800157c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_SPI1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001592:	2207      	movs	r2, #7
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_SPI1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_SPI1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <MX_SPI1_Init+0x74>)
 80015a4:	0018      	movs	r0, r3
 80015a6:	f001 fa0b 	bl	80029c0 <HAL_SPI_Init>
 80015aa:	1e03      	subs	r3, r0, #0
 80015ac:	d001      	beq.n	80015b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f869 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000008c 	.word	0x2000008c
 80015bc:	40013000 	.word	0x40013000

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	240c      	movs	r4, #12
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	0018      	movs	r0, r3
 80015cc:	2314      	movs	r3, #20
 80015ce:	001a      	movs	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	f001 fda5 	bl	8003120 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MX_GPIO_Init+0xc0>)
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_GPIO_Init+0xc0>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	03c9      	lsls	r1, r1, #15
 80015e0:	430a      	orrs	r2, r1
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <MX_GPIO_Init+0xc0>)
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	03db      	lsls	r3, r3, #15
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <MX_GPIO_Init+0xc0>)
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_GPIO_Init+0xc0>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0289      	lsls	r1, r1, #10
 80015fc:	430a      	orrs	r2, r1
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_GPIO_Init+0xc0>)
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	4013      	ands	r3, r2
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 800160e:	2390      	movs	r3, #144	; 0x90
 8001610:	05db      	lsls	r3, r3, #23
 8001612:	2200      	movs	r2, #0
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fcb9 	bl	8001f8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2202      	movs	r2, #2
 8001620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	2284      	movs	r2, #132	; 0x84
 8001626:	0392      	lsls	r2, r2, #14
 8001628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2201      	movs	r2, #1
 800162e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	193a      	adds	r2, r7, r4
 8001632:	2390      	movs	r3, #144	; 0x90
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	0011      	movs	r1, r2
 8001638:	0018      	movs	r0, r3
 800163a:	f000 fb23 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 800163e:	0021      	movs	r1, r4
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2201      	movs	r2, #1
 800164a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2203      	movs	r2, #3
 8001656:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 8001658:	187a      	adds	r2, r7, r1
 800165a:	2390      	movs	r3, #144	; 0x90
 800165c:	05db      	lsls	r3, r3, #23
 800165e:	0011      	movs	r1, r2
 8001660:	0018      	movs	r0, r3
 8001662:	f000 fb0f 	bl	8001c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2102      	movs	r1, #2
 800166a:	2005      	movs	r0, #5
 800166c:	f000 fad8 	bl	8001c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001670:	2005      	movs	r0, #5
 8001672:	f000 faea 	bl	8001c4a <HAL_NVIC_EnableIRQ>

}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b009      	add	sp, #36	; 0x24
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40021000 	.word	0x40021000

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x44>)
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_MspInit+0x44>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	619a      	str	r2, [r3, #24]
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x44>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2201      	movs	r2, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x44>)
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_MspInit+0x44>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0549      	lsls	r1, r1, #21
 80016b8:	430a      	orrs	r2, r1
 80016ba:	61da      	str	r2, [r3, #28]
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_MspInit+0x44>)
 80016be:	69da      	ldr	r2, [r3, #28]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	055b      	lsls	r3, r3, #21
 80016c4:	4013      	ands	r3, r2
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	2414      	movs	r4, #20
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	0018      	movs	r0, r3
 80016e6:	2314      	movs	r3, #20
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f001 fd18 	bl	8003120 <memset>
  if(hspi->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_SPI_MspInit+0x90>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d132      	bne.n	8001760 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_SPI_MspInit+0x94>)
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_SPI_MspInit+0x94>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0149      	lsls	r1, r1, #5
 8001704:	430a      	orrs	r2, r1
 8001706:	619a      	str	r2, [r3, #24]
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_SPI_MspInit+0x94>)
 800170a:	699a      	ldr	r2, [r3, #24]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_SPI_MspInit+0x94>)
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_SPI_MspInit+0x94>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0289      	lsls	r1, r1, #10
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_SPI_MspInit+0x94>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001732:	0021      	movs	r1, r4
 8001734:	187b      	adds	r3, r7, r1
 8001736:	22a0      	movs	r2, #160	; 0xa0
 8001738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2202      	movs	r2, #2
 800173e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2203      	movs	r2, #3
 800174a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	187a      	adds	r2, r7, r1
 8001754:	2390      	movs	r3, #144	; 0x90
 8001756:	05db      	lsls	r3, r3, #23
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fa92 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b00b      	add	sp, #44	; 0x2c
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	40013000 	.word	0x40013000
 800176c:	40021000 	.word	0x40021000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f958 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f000 fc10 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
	return 1;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_kill>:

int _kill(int pid, int sig)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c4:	f001 fc82 	bl	80030cc <__errno>
 80017c8:	0003      	movs	r3, r0
 80017ca:	2216      	movs	r2, #22
 80017cc:	601a      	str	r2, [r3, #0]
	return -1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	425b      	negs	r3, r3
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}

080017da <_exit>:

void _exit (int status)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e2:	2301      	movs	r3, #1
 80017e4:	425a      	negs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0011      	movs	r1, r2
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff ffe5 	bl	80017ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80017f0:	e7fe      	b.n	80017f0 <_exit+0x16>

080017f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e00a      	b.n	800181a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001804:	e000      	b.n	8001808 <_read+0x16>
 8001806:	bf00      	nop
 8001808:	0001      	movs	r1, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf0      	blt.n	8001804 <_read+0x12>
	}

return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b006      	add	sp, #24
 800182a:	bd80      	pop	{r7, pc}

0800182c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e009      	b.n	8001852 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	0018      	movs	r0, r3
 8001848:	e000      	b.n	800184c <_write+0x20>
 800184a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	dbf1      	blt.n	800183e <_write+0x12>
	}
	return len;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b006      	add	sp, #24
 8001862:	bd80      	pop	{r7, pc}

08001864 <_close>:

int _close(int file)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	return -1;
 800186c:	2301      	movs	r3, #1
 800186e:	425b      	negs	r3, r3
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0192      	lsls	r2, r2, #6
 8001888:	605a      	str	r2, [r3, #4]
	return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <_isatty>:

int _isatty(int file)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
	return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b004      	add	sp, #16
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f001 fbee 	bl	80030cc <__errno>
 80018f0:	0003      	movs	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	425b      	negs	r3, r3
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	18d2      	adds	r2, r2, r3
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b006      	add	sp, #24
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20001800 	.word	0x20001800
 800191c:	00000400 	.word	0x00000400
 8001920:	2000010c 	.word	0x2000010c
 8001924:	20000128 	.word	0x20000128

08001928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001934:	4813      	ldr	r0, [pc, #76]	; (8001984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001936:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001938:	4813      	ldr	r0, [pc, #76]	; (8001988 <LoopForever+0x6>)
    LDR R1, [R0]
 800193a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800193c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <LoopForever+0xa>)
    CMP R1, R2
 8001940:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001942:	d105      	bne.n	8001950 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001944:	4812      	ldr	r0, [pc, #72]	; (8001990 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001946:	4913      	ldr	r1, [pc, #76]	; (8001994 <LoopForever+0x12>)
    STR R1, [R0]
 8001948:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800194a:	4813      	ldr	r0, [pc, #76]	; (8001998 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800194c:	4913      	ldr	r1, [pc, #76]	; (800199c <LoopForever+0x1a>)
    STR R1, [R0]
 800194e:	6001      	str	r1, [r0, #0]

08001950 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001952:	4914      	ldr	r1, [pc, #80]	; (80019a4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <LoopForever+0x26>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a11      	ldr	r2, [pc, #68]	; (80019ac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001968:	4c11      	ldr	r4, [pc, #68]	; (80019b0 <LoopForever+0x2e>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001976:	f7ff ffd7 	bl	8001928 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800197a:	f001 fbad 	bl	80030d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800197e:	f7ff fd5f 	bl	8001440 <main>

08001982 <LoopForever>:

LoopForever:
    b LoopForever
 8001982:	e7fe      	b.n	8001982 <LoopForever>
  ldr   r0, =_estack
 8001984:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001988:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800198c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001990:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001994:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001998:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800199c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019a8:	0800442c 	.word	0x0800442c
  ldr r2, =_sbss
 80019ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019b0:	20000124 	.word	0x20000124

080019b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_IRQHandler>
	...

080019b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_Init+0x24>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_Init+0x24>)
 80019c2:	2110      	movs	r1, #16
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f000 f809 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ce:	f7ff fe5f 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_InitTick+0x5c>)
 80019ea:	681c      	ldr	r4, [r3, #0]
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_InitTick+0x60>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	0019      	movs	r1, r3
 80019f2:	23fa      	movs	r3, #250	; 0xfa
 80019f4:	0098      	lsls	r0, r3, #2
 80019f6:	f7fe fb91 	bl	800011c <__udivsi3>
 80019fa:	0003      	movs	r3, r0
 80019fc:	0019      	movs	r1, r3
 80019fe:	0020      	movs	r0, r4
 8001a00:	f7fe fb8c 	bl	800011c <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 f92f 	bl	8001c6a <HAL_SYSTICK_Config>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e00f      	b.n	8001a34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d80b      	bhi.n	8001a32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	425b      	negs	r3, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 f8fc 	bl	8001c20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_InitTick+0x64>)
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b003      	add	sp, #12
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_IncTick+0x1c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	001a      	movs	r2, r3
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x20>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	18d2      	adds	r2, r2, r3
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_IncTick+0x20>)
 8001a5a:	601a      	str	r2, [r3, #0]
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000110 	.word	0x20000110

08001a6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <HAL_GetTick+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	20000110 	.word	0x20000110

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff fff0 	bl	8001a6c <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3301      	adds	r3, #1
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	f7ff ffe0 	bl	8001a6c <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	0002      	movs	r2, r0
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8001ada:	d809      	bhi.n	8001af0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	231f      	movs	r3, #31
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_EnableIRQ+0x30>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4091      	lsls	r1, r2
 8001aec:	000a      	movs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
  }
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b002      	add	sp, #8
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b10:	d828      	bhi.n	8001b64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <__NVIC_SetPriority+0xd4>)
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	33c0      	adds	r3, #192	; 0xc0
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	589b      	ldr	r3, [r3, r2]
 8001b22:	1dfa      	adds	r2, r7, #7
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	0011      	movs	r1, r2
 8001b28:	2203      	movs	r2, #3
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	00d2      	lsls	r2, r2, #3
 8001b2e:	21ff      	movs	r1, #255	; 0xff
 8001b30:	4091      	lsls	r1, r2
 8001b32:	000a      	movs	r2, r1
 8001b34:	43d2      	mvns	r2, r2
 8001b36:	401a      	ands	r2, r3
 8001b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	22ff      	movs	r2, #255	; 0xff
 8001b40:	401a      	ands	r2, r3
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	0018      	movs	r0, r3
 8001b48:	2303      	movs	r3, #3
 8001b4a:	4003      	ands	r3, r0
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	481f      	ldr	r0, [pc, #124]	; (8001bd0 <__NVIC_SetPriority+0xd4>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	33c0      	adds	r3, #192	; 0xc0
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b62:	e031      	b.n	8001bc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <__NVIC_SetPriority+0xd8>)
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	400b      	ands	r3, r1
 8001b70:	3b08      	subs	r3, #8
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3306      	adds	r3, #6
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1dfa      	adds	r2, r7, #7
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	0011      	movs	r1, r2
 8001b84:	2203      	movs	r2, #3
 8001b86:	400a      	ands	r2, r1
 8001b88:	00d2      	lsls	r2, r2, #3
 8001b8a:	21ff      	movs	r1, #255	; 0xff
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	43d2      	mvns	r2, r2
 8001b92:	401a      	ands	r2, r3
 8001b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	22ff      	movs	r2, #255	; 0xff
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	4003      	ands	r3, r0
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <__NVIC_SetPriority+0xd8>)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	001c      	movs	r4, r3
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	4023      	ands	r3, r4
 8001bb8:	3b08      	subs	r3, #8
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	3306      	adds	r3, #6
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	18c3      	adds	r3, r0, r3
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b003      	add	sp, #12
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	045b      	lsls	r3, r3, #17
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d301      	bcc.n	8001bf0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bec:	2301      	movs	r3, #1
 8001bee:	e010      	b.n	8001c12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <SysTick_Config+0x44>)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff ff7c 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x44>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x44>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	1c02      	adds	r2, r0, #0
 8001c30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	0002      	movs	r2, r0
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff ff33 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff ffaf 	bl	8001bd8 <SysTick_Config>
 8001c7a:	0003      	movs	r3, r0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b002      	add	sp, #8
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	e149      	b.n	8001f28 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4091      	lsls	r1, r2
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d100      	bne.n	8001cac <HAL_GPIO_Init+0x28>
 8001caa:	e13a      	b.n	8001f22 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	43da      	mvns	r2, r3
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	2201      	movs	r2, #1
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2203      	movs	r2, #3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	58d3      	ldr	r3, [r2, r3]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2207      	movs	r2, #7
 8001d80:	4013      	ands	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2107      	movs	r1, #7
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	6939      	ldr	r1, [r7, #16]
 8001db4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	23c0      	movs	r3, #192	; 0xc0
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	4013      	ands	r3, r2
 8001df4:	d100      	bne.n	8001df8 <HAL_GPIO_Init+0x174>
 8001df6:	e094      	b.n	8001f22 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <HAL_GPIO_Init+0x2bc>)
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_GPIO_Init+0x2bc>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	430a      	orrs	r2, r1
 8001e02:	619a      	str	r2, [r3, #24]
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x2bc>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e10:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	589b      	ldr	r3, [r3, r2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2203      	movs	r2, #3
 8001e22:	4013      	ands	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	2390      	movs	r3, #144	; 0x90
 8001e38:	05db      	lsls	r3, r3, #23
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x1d6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a41      	ldr	r2, [pc, #260]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x1d2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a40      	ldr	r2, [pc, #256]	; (8001f4c <HAL_GPIO_Init+0x2c8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x1ce>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e004      	b.n	8001e5c <HAL_GPIO_Init+0x1d8>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_Init+0x1d8>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x1d8>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	2103      	movs	r1, #3
 8001e60:	400a      	ands	r2, r1
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	4093      	lsls	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e6c:	4935      	ldr	r1, [pc, #212]	; (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	025b      	lsls	r3, r3, #9
 8001e92:	4013      	ands	r3, r2
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43da      	mvns	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	035b      	lsls	r3, r3, #13
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43da      	mvns	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	039b      	lsls	r3, r3, #14
 8001f10:	4013      	ands	r3, r2
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	40da      	lsrs	r2, r3
 8001f30:	1e13      	subs	r3, r2, #0
 8001f32:	d000      	beq.n	8001f36 <HAL_GPIO_Init+0x2b2>
 8001f34:	e6ae      	b.n	8001c94 <HAL_GPIO_Init+0x10>
  } 
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b006      	add	sp, #24
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	40010400 	.word	0x40010400

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	1cbb      	adds	r3, r7, #2
 8001f60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	1cba      	adds	r2, r7, #2
 8001f68:	8812      	ldrh	r2, [r2, #0]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6e:	230f      	movs	r3, #15
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e003      	b.n	8001f80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f80:	230f      	movs	r3, #15
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	781b      	ldrb	r3, [r3, #0]
  }
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	0008      	movs	r0, r1
 8001f98:	0011      	movs	r1, r2
 8001f9a:	1cbb      	adds	r3, r7, #2
 8001f9c:	1c02      	adds	r2, r0, #0
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	1c7b      	adds	r3, r7, #1
 8001fa2:	1c0a      	adds	r2, r1, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa6:	1c7b      	adds	r3, r7, #1
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fae:	1cbb      	adds	r3, r7, #2
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb6:	e003      	b.n	8001fc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb8:	1cbb      	adds	r3, r7, #2
 8001fba:	881a      	ldrh	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	0002      	movs	r2, r0
 8001fd0:	1dbb      	adds	r3, r7, #6
 8001fd2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	1dba      	adds	r2, r7, #6
 8001fda:	8812      	ldrh	r2, [r2, #0]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d008      	beq.n	8001ff2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001fe2:	1dba      	adds	r2, r7, #6
 8001fe4:	8812      	ldrh	r2, [r2, #0]
 8001fe6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe8:	1dbb      	adds	r3, r7, #6
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7fe f94f 	bl	8000290 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f000 fb76 	bl	8002700 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	d100      	bne.n	8002020 <HAL_RCC_OscConfig+0x20>
 800201e:	e08e      	b.n	800213e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002020:	4bc5      	ldr	r3, [pc, #788]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	220c      	movs	r2, #12
 8002026:	4013      	ands	r3, r2
 8002028:	2b04      	cmp	r3, #4
 800202a:	d00e      	beq.n	800204a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800202c:	4bc2      	ldr	r3, [pc, #776]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	220c      	movs	r2, #12
 8002032:	4013      	ands	r3, r2
 8002034:	2b08      	cmp	r3, #8
 8002036:	d117      	bne.n	8002068 <HAL_RCC_OscConfig+0x68>
 8002038:	4bbf      	ldr	r3, [pc, #764]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	23c0      	movs	r3, #192	; 0xc0
 800203e:	025b      	lsls	r3, r3, #9
 8002040:	401a      	ands	r2, r3
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	025b      	lsls	r3, r3, #9
 8002046:	429a      	cmp	r2, r3
 8002048:	d10e      	bne.n	8002068 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4bbb      	ldr	r3, [pc, #748]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	029b      	lsls	r3, r3, #10
 8002052:	4013      	ands	r3, r2
 8002054:	d100      	bne.n	8002058 <HAL_RCC_OscConfig+0x58>
 8002056:	e071      	b.n	800213c <HAL_RCC_OscConfig+0x13c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d000      	beq.n	8002062 <HAL_RCC_OscConfig+0x62>
 8002060:	e06c      	b.n	800213c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 fb4c 	bl	8002700 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_OscConfig+0x80>
 8002070:	4bb1      	ldr	r3, [pc, #708]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4bb0      	ldr	r3, [pc, #704]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	0249      	lsls	r1, r1, #9
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e02f      	b.n	80020e0 <HAL_RCC_OscConfig+0xe0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10c      	bne.n	80020a2 <HAL_RCC_OscConfig+0xa2>
 8002088:	4bab      	ldr	r3, [pc, #684]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4baa      	ldr	r3, [pc, #680]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800208e:	49ab      	ldr	r1, [pc, #684]	; (800233c <HAL_RCC_OscConfig+0x33c>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	4ba8      	ldr	r3, [pc, #672]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4ba7      	ldr	r3, [pc, #668]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800209a:	49a9      	ldr	r1, [pc, #676]	; (8002340 <HAL_RCC_OscConfig+0x340>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e01e      	b.n	80020e0 <HAL_RCC_OscConfig+0xe0>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d10e      	bne.n	80020c8 <HAL_RCC_OscConfig+0xc8>
 80020aa:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4ba2      	ldr	r3, [pc, #648]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	02c9      	lsls	r1, r1, #11
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	4b9f      	ldr	r3, [pc, #636]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b9e      	ldr	r3, [pc, #632]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	0249      	lsls	r1, r1, #9
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xe0>
 80020c8:	4b9b      	ldr	r3, [pc, #620]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b9a      	ldr	r3, [pc, #616]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020ce:	499b      	ldr	r1, [pc, #620]	; (800233c <HAL_RCC_OscConfig+0x33c>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	4b98      	ldr	r3, [pc, #608]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b97      	ldr	r3, [pc, #604]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80020da:	4999      	ldr	r1, [pc, #612]	; (8002340 <HAL_RCC_OscConfig+0x340>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d014      	beq.n	8002112 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fcc0 	bl	8001a6c <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f2:	f7ff fcbb 	bl	8001a6c <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	; 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2fd      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002104:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	4013      	ands	r3, r2
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0xf2>
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff fcab 	bl	8001a6c <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fca6 	bl	8001a6c <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e2e8      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	029b      	lsls	r3, r3, #10
 8002136:	4013      	ands	r3, r2
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x11c>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d100      	bne.n	800214a <HAL_RCC_OscConfig+0x14a>
 8002148:	e06c      	b.n	8002224 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800214a:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	220c      	movs	r2, #12
 8002150:	4013      	ands	r3, r2
 8002152:	d00e      	beq.n	8002172 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002154:	4b78      	ldr	r3, [pc, #480]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	220c      	movs	r2, #12
 800215a:	4013      	ands	r3, r2
 800215c:	2b08      	cmp	r3, #8
 800215e:	d11f      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1a0>
 8002160:	4b75      	ldr	r3, [pc, #468]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	23c0      	movs	r3, #192	; 0xc0
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	401a      	ands	r2, r3
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	429a      	cmp	r2, r3
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b71      	ldr	r3, [pc, #452]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2202      	movs	r2, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d005      	beq.n	8002188 <HAL_RCC_OscConfig+0x188>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d001      	beq.n	8002188 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e2bb      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	22f8      	movs	r2, #248	; 0xf8
 800218e:	4393      	bics	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00da      	lsls	r2, r3, #3
 8002198:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e041      	b.n	8002224 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d024      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b62      	ldr	r3, [pc, #392]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fc5a 	bl	8001a6c <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021be:	f7ff fc55 	bl	8001a6c <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e297      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d0f1      	beq.n	80021be <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22f8      	movs	r2, #248	; 0xf8
 80021e0:	4393      	bics	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	00da      	lsls	r2, r3, #3
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e018      	b.n	8002224 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f2:	4b51      	ldr	r3, [pc, #324]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	438a      	bics	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fc35 	bl	8001a6c <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002208:	f7ff fc30 	bl	8001a6c <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e272      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d1f1      	bne.n	8002208 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2208      	movs	r2, #8
 800222a:	4013      	ands	r3, r2
 800222c:	d036      	beq.n	800229c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d019      	beq.n	800226a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223a:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800223c:	2101      	movs	r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff fc13 	bl	8001a6c <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff fc0e 	bl	8001a6c <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e250      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d0f1      	beq.n	800224c <HAL_RCC_OscConfig+0x24c>
 8002268:	e018      	b.n	800229c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800226c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002270:	2101      	movs	r1, #1
 8002272:	438a      	bics	r2, r1
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fbf9 	bl	8001a6c <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fbf4 	bl	8001a6c <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e236      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d1f1      	bne.n	8002280 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2204      	movs	r2, #4
 80022a2:	4013      	ands	r3, r2
 80022a4:	d100      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2a8>
 80022a6:	e0b5      	b.n	8002414 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a8:	201f      	movs	r0, #31
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	055b      	lsls	r3, r3, #21
 80022b8:	4013      	ands	r3, r2
 80022ba:	d110      	bne.n	80022de <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	0549      	lsls	r1, r1, #21
 80022c6:	430a      	orrs	r2, r1
 80022c8:	61da      	str	r2, [r3, #28]
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	055b      	lsls	r3, r3, #21
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022d8:	183b      	adds	r3, r7, r0
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_OscConfig+0x344>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d11a      	bne.n	8002320 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_RCC_OscConfig+0x344>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_RCC_OscConfig+0x344>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0049      	lsls	r1, r1, #1
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f8:	f7ff fbb8 	bl	8001a6c <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7ff fbb3 	bl	8001a6c <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1f5      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x344>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d10f      	bne.n	8002348 <HAL_RCC_OscConfig+0x348>
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <HAL_RCC_OscConfig+0x338>)
 800232e:	2101      	movs	r1, #1
 8002330:	430a      	orrs	r2, r1
 8002332:	621a      	str	r2, [r3, #32]
 8002334:	e036      	b.n	80023a4 <HAL_RCC_OscConfig+0x3a4>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	40021000 	.word	0x40021000
 800233c:	fffeffff 	.word	0xfffeffff
 8002340:	fffbffff 	.word	0xfffbffff
 8002344:	40007000 	.word	0x40007000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x36a>
 8002350:	4bca      	ldr	r3, [pc, #808]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	4bc9      	ldr	r3, [pc, #804]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002356:	2101      	movs	r1, #1
 8002358:	438a      	bics	r2, r1
 800235a:	621a      	str	r2, [r3, #32]
 800235c:	4bc7      	ldr	r3, [pc, #796]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	4bc6      	ldr	r3, [pc, #792]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002362:	2104      	movs	r1, #4
 8002364:	438a      	bics	r2, r1
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x3a4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b05      	cmp	r3, #5
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x38c>
 8002372:	4bc2      	ldr	r3, [pc, #776]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002374:	6a1a      	ldr	r2, [r3, #32]
 8002376:	4bc1      	ldr	r3, [pc, #772]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002378:	2104      	movs	r1, #4
 800237a:	430a      	orrs	r2, r1
 800237c:	621a      	str	r2, [r3, #32]
 800237e:	4bbf      	ldr	r3, [pc, #764]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	4bbe      	ldr	r3, [pc, #760]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002384:	2101      	movs	r1, #1
 8002386:	430a      	orrs	r2, r1
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x3a4>
 800238c:	4bbb      	ldr	r3, [pc, #748]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	4bba      	ldr	r3, [pc, #744]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	621a      	str	r2, [r3, #32]
 8002398:	4bb8      	ldr	r3, [pc, #736]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	4bb7      	ldr	r3, [pc, #732]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800239e:	2104      	movs	r1, #4
 80023a0:	438a      	bics	r2, r1
 80023a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d014      	beq.n	80023d6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fb5e 	bl	8001a6c <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	e009      	b.n	80023ca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7ff fb59 	bl	8001a6c <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4aaf      	ldr	r2, [pc, #700]	; (8002680 <HAL_RCC_OscConfig+0x680>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e19a      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	4bac      	ldr	r3, [pc, #688]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3b6>
 80023d4:	e013      	b.n	80023fe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7ff fb49 	bl	8001a6c <HAL_GetTick>
 80023da:	0003      	movs	r3, r0
 80023dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	e009      	b.n	80023f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff fb44 	bl	8001a6c <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	4aa5      	ldr	r2, [pc, #660]	; (8002680 <HAL_RCC_OscConfig+0x680>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e185      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	4ba1      	ldr	r3, [pc, #644]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023fe:	231f      	movs	r3, #31
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b9c      	ldr	r3, [pc, #624]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	4b9b      	ldr	r3, [pc, #620]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800240e:	499d      	ldr	r1, [pc, #628]	; (8002684 <HAL_RCC_OscConfig+0x684>)
 8002410:	400a      	ands	r2, r1
 8002412:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	d063      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d12a      	bne.n	800247c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002426:	4b95      	ldr	r3, [pc, #596]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242a:	4b94      	ldr	r3, [pc, #592]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800242c:	2104      	movs	r1, #4
 800242e:	430a      	orrs	r2, r1
 8002430:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002432:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002436:	4b91      	ldr	r3, [pc, #580]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7ff fb15 	bl	8001a6c <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002448:	f7ff fb10 	bl	8001a6c <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e152      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d0f1      	beq.n	8002448 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002464:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	22f8      	movs	r2, #248	; 0xf8
 800246a:	4393      	bics	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	00da      	lsls	r2, r3, #3
 8002474:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
 800247a:	e034      	b.n	80024e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	3305      	adds	r3, #5
 8002482:	d111      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002484:	4b7d      	ldr	r3, [pc, #500]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002488:	4b7c      	ldr	r3, [pc, #496]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	22f8      	movs	r2, #248	; 0xf8
 8002496:	4393      	bics	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	00da      	lsls	r2, r3, #3
 80024a0:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34
 80024a6:	e01e      	b.n	80024e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024a8:	4b74      	ldr	r3, [pc, #464]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ac:	4b73      	ldr	r3, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024ae:	2104      	movs	r1, #4
 80024b0:	430a      	orrs	r2, r1
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024b4:	4b71      	ldr	r3, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b8:	4b70      	ldr	r3, [pc, #448]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fad4 	bl	8001a6c <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024ca:	f7ff facf 	bl	8001a6c <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e111      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024dc:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1f1      	bne.n	80024ca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2220      	movs	r2, #32
 80024ec:	4013      	ands	r3, r2
 80024ee:	d05c      	beq.n	80025aa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024f0:	4b62      	ldr	r3, [pc, #392]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	220c      	movs	r2, #12
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d00e      	beq.n	800251a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024fc:	4b5f      	ldr	r3, [pc, #380]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	220c      	movs	r2, #12
 8002502:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002504:	2b08      	cmp	r3, #8
 8002506:	d114      	bne.n	8002532 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002508:	4b5c      	ldr	r3, [pc, #368]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	23c0      	movs	r3, #192	; 0xc0
 800250e:	025b      	lsls	r3, r3, #9
 8002510:	401a      	ands	r2, r3
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	429a      	cmp	r2, r3
 8002518:	d10b      	bne.n	8002532 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800251c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	4013      	ands	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_RCC_OscConfig+0x5a8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d03c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e6      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01b      	beq.n	8002572 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800253a:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800253c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253e:	4b4f      	ldr	r3, [pc, #316]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	0249      	lsls	r1, r1, #9
 8002544:	430a      	orrs	r2, r1
 8002546:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fa90 	bl	8001a6c <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002552:	f7ff fa8b 	bl	8001a6c <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0cd      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002564:	4b45      	ldr	r3, [pc, #276]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	025b      	lsls	r3, r3, #9
 800256c:	4013      	ands	r3, r2
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x552>
 8002570:	e01b      	b.n	80025aa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002578:	4943      	ldr	r1, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x688>)
 800257a:	400a      	ands	r2, r1
 800257c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fa75 	bl	8001a6c <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002588:	f7ff fa70 	bl	8001a6c <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0b2      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800259c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	025b      	lsls	r3, r3, #9
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x588>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025a8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d100      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5b4>
 80025b2:	e0a4      	b.n	80026fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	220c      	movs	r2, #12
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d100      	bne.n	80025c2 <HAL_RCC_OscConfig+0x5c2>
 80025c0:	e078      	b.n	80026b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d14c      	bne.n	8002664 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80025d0:	492e      	ldr	r1, [pc, #184]	; (800268c <HAL_RCC_OscConfig+0x68c>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fa49 	bl	8001a6c <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff fa44 	bl	8001a6c <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e086      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	049b      	lsls	r3, r3, #18
 80025fa:	4013      	ands	r3, r2
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	220f      	movs	r2, #15
 8002604:	4393      	bics	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800260e:	430a      	orrs	r2, r1
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_RCC_OscConfig+0x690>)
 8002618:	4013      	ands	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	431a      	orrs	r2, r3
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	0449      	lsls	r1, r1, #17
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7ff fa17 	bl	8001a6c <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff fa12 	bl	8001a6c <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e054      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	049b      	lsls	r3, r3, #18
 800265e:	4013      	ands	r3, r2
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x644>
 8002662:	e04c      	b.n	80026fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <HAL_RCC_OscConfig+0x67c>)
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <HAL_RCC_OscConfig+0x68c>)
 800266c:	400a      	ands	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff f9fc 	bl	8001a6c <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x6a6>
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	40021000 	.word	0x40021000
 8002680:	00001388 	.word	0x00001388
 8002684:	efffffff 	.word	0xefffffff
 8002688:	fffeffff 	.word	0xfffeffff
 800268c:	feffffff 	.word	0xfeffffff
 8002690:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002694:	f7ff f9ea 	bl	8001a6c <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e02c      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_RCC_OscConfig+0x708>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	049b      	lsls	r3, r3, #18
 80026ae:	4013      	ands	r3, r2
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x694>
 80026b2:	e024      	b.n	80026fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e01f      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_RCC_OscConfig+0x708>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_RCC_OscConfig+0x708>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	025b      	lsls	r3, r3, #9
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	429a      	cmp	r2, r3
 80026da:	d10e      	bne.n	80026fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	220f      	movs	r2, #15
 80026e0:	401a      	ands	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	23f0      	movs	r3, #240	; 0xf0
 80026ee:	039b      	lsls	r3, r3, #14
 80026f0:	401a      	ands	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b008      	add	sp, #32
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000

0800270c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0bf      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b61      	ldr	r3, [pc, #388]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	4013      	ands	r3, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d911      	bls.n	8002752 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b5e      	ldr	r3, [pc, #376]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	4393      	bics	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002740:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0a6      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d015      	beq.n	8002788 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2204      	movs	r2, #4
 8002762:	4013      	ands	r3, r2
 8002764:	d006      	beq.n	8002774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002766:	4b51      	ldr	r3, [pc, #324]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 800276c:	21e0      	movs	r1, #224	; 0xe0
 800276e:	00c9      	lsls	r1, r1, #3
 8002770:	430a      	orrs	r2, r1
 8002772:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	22f0      	movs	r2, #240	; 0xf0
 800277a:	4393      	bics	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	d04c      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b44      	ldr	r3, [pc, #272]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	4013      	ands	r3, r2
 80027a4:	d120      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07a      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	049b      	lsls	r3, r3, #18
 80027ba:	4013      	ands	r3, r2
 80027bc:	d114      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e06e      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027ca:	4b38      	ldr	r3, [pc, #224]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 80027cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	025b      	lsls	r3, r3, #9
 80027d2:	4013      	ands	r3, r2
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e062      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e05b      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	4393      	bics	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7ff f936 	bl	8001a6c <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002804:	e009      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002806:	f7ff f931 	bl	8001a6c <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <HAL_RCC_ClockConfig+0x1a4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e042      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	220c      	movs	r2, #12
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1ec      	bne.n	8002806 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d211      	bcs.n	800285e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	4393      	bics	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_RCC_ClockConfig+0x19c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e020      	b.n	80028a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2204      	movs	r2, #4
 8002864:	4013      	ands	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_RCC_ClockConfig+0x1a8>)
 800286e:	4013      	ands	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800287c:	f000 f820 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002880:	0001      	movs	r1, r0
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_ClockConfig+0x1a0>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	220f      	movs	r2, #15
 800288a:	4013      	ands	r3, r2
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1ac>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	000a      	movs	r2, r1
 8002892:	40da      	lsrs	r2, r3
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1b0>)
 8002896:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002898:	2001      	movs	r0, #1
 800289a:	f7ff f8a1 	bl	80019e0 <HAL_InitTick>
  
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	00001388 	.word	0x00001388
 80028b4:	fffff8ff 	.word	0xfffff8ff
 80028b8:	080042cc 	.word	0x080042cc
 80028bc:	20000000 	.word	0x20000000

080028c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08f      	sub	sp, #60	; 0x3c
 80028c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028c6:	2314      	movs	r3, #20
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	4a38      	ldr	r2, [pc, #224]	; (80029ac <HAL_RCC_GetSysClockFreq+0xec>)
 80028cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ce:	c313      	stmia	r3!, {r0, r1, r4}
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4a36      	ldr	r2, [pc, #216]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028da:	c313      	stmia	r3!, {r0, r1, r4}
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028f4:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	220c      	movs	r2, #12
 80028fe:	4013      	ands	r3, r2
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d047      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xd4>
 8002904:	d849      	bhi.n	800299a <HAL_RCC_GetSysClockFreq+0xda>
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x50>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x56>
 800290e:	e044      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002914:	e044      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	220f      	movs	r2, #15
 800291c:	4013      	ands	r3, r2
 800291e:	2214      	movs	r2, #20
 8002920:	18ba      	adds	r2, r7, r2
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	220f      	movs	r2, #15
 800292c:	4013      	ands	r3, r2
 800292e:	1d3a      	adds	r2, r7, #4
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002936:	23c0      	movs	r3, #192	; 0xc0
 8002938:	025b      	lsls	r3, r3, #9
 800293a:	401a      	ands	r2, r3
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	025b      	lsls	r3, r3, #9
 8002940:	429a      	cmp	r2, r3
 8002942:	d109      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002946:	481c      	ldr	r0, [pc, #112]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002948:	f7fd fbe8 	bl	800011c <__udivsi3>
 800294c:	0003      	movs	r3, r0
 800294e:	001a      	movs	r2, r3
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	4353      	muls	r3, r2
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
 8002956:	e01a      	b.n	800298e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295a:	23c0      	movs	r3, #192	; 0xc0
 800295c:	025b      	lsls	r3, r3, #9
 800295e:	401a      	ands	r2, r3
 8002960:	23c0      	movs	r3, #192	; 0xc0
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	429a      	cmp	r2, r3
 8002966:	d109      	bne.n	800297c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296a:	4814      	ldr	r0, [pc, #80]	; (80029bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800296c:	f7fd fbd6 	bl	800011c <__udivsi3>
 8002970:	0003      	movs	r3, r0
 8002972:	001a      	movs	r2, r3
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	4353      	muls	r3, r2
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
 800297a:	e008      	b.n	800298e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800297c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800297e:	480e      	ldr	r0, [pc, #56]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002980:	f7fd fbcc 	bl	800011c <__udivsi3>
 8002984:	0003      	movs	r3, r0
 8002986:	001a      	movs	r2, r3
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	4353      	muls	r3, r2
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002992:	e005      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002998:	e002      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800299e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b00f      	add	sp, #60	; 0x3c
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	08004284 	.word	0x08004284
 80029b0:	08004294 	.word	0x08004294
 80029b4:	40021000 	.word	0x40021000
 80029b8:	007a1200 	.word	0x007a1200
 80029bc:	02dc6c00 	.word	0x02dc6c00

080029c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0a8      	b.n	8002b24 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	2382      	movs	r3, #130	; 0x82
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d009      	beq.n	80029fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	61da      	str	r2, [r3, #28]
 80029ec:	e005      	b.n	80029fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	225d      	movs	r2, #93	; 0x5d
 8002a04:	5c9b      	ldrb	r3, [r3, r2]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	225c      	movs	r2, #92	; 0x5c
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7fe fe5e 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	225d      	movs	r2, #93	; 0x5d
 8002a20:	2102      	movs	r1, #2
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	438a      	bics	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	23e0      	movs	r3, #224	; 0xe0
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d902      	bls.n	8002a46 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e002      	b.n	8002a4c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	015b      	lsls	r3, r3, #5
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	23f0      	movs	r3, #240	; 0xf0
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d008      	beq.n	8002a6a <HAL_SPI_Init+0xaa>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	23e0      	movs	r3, #224	; 0xe0
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d002      	beq.n	8002a6a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	2382      	movs	r3, #130	; 0x82
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	401a      	ands	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	2384      	movs	r3, #132	; 0x84
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2102      	movs	r1, #2
 8002a86:	400b      	ands	r3, r1
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	400b      	ands	r3, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6999      	ldr	r1, [r3, #24]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2138      	movs	r1, #56	; 0x38
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	400b      	ands	r3, r1
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	2204      	movs	r2, #4
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	400b      	ands	r3, r1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	23f0      	movs	r3, #240	; 0xf0
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	400b      	ands	r3, r1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	0011      	movs	r1, r2
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	015b      	lsls	r3, r3, #5
 8002afa:	401a      	ands	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4907      	ldr	r1, [pc, #28]	; (8002b2c <HAL_SPI_Init+0x16c>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	225d      	movs	r2, #93	; 0x5d
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	fffff7ff 	.word	0xfffff7ff

08002b30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	1dbb      	adds	r3, r7, #6
 8002b3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b40:	231f      	movs	r3, #31
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	225c      	movs	r2, #92	; 0x5c
 8002b4c:	5c9b      	ldrb	r3, [r3, r2]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_SPI_Transmit+0x26>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e140      	b.n	8002dd8 <HAL_SPI_Transmit+0x2a8>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	225c      	movs	r2, #92	; 0x5c
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b5e:	f7fe ff85 	bl	8001a6c <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b66:	2316      	movs	r3, #22
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	1dba      	adds	r2, r7, #6
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	225d      	movs	r2, #93	; 0x5d
 8002b74:	5c9b      	ldrb	r3, [r3, r2]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d004      	beq.n	8002b86 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002b7c:	231f      	movs	r3, #31
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b84:	e11d      	b.n	8002dc2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_SPI_Transmit+0x64>
 8002b8c:	1dbb      	adds	r3, r7, #6
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002b94:	231f      	movs	r3, #31
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b9c:	e111      	b.n	8002dc2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	225d      	movs	r2, #93	; 0x5d
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1dba      	adds	r2, r7, #6
 8002bb6:	8812      	ldrh	r2, [r2, #0]
 8002bb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1dba      	adds	r2, r7, #6
 8002bbe:	8812      	ldrh	r2, [r2, #0]
 8002bc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2244      	movs	r2, #68	; 0x44
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2246      	movs	r2, #70	; 0x46
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d110      	bne.n	8002c12 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2140      	movs	r1, #64	; 0x40
 8002bfc:	438a      	bics	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	01c9      	lsls	r1, r1, #7
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2240      	movs	r2, #64	; 0x40
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d007      	beq.n	8002c30 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2140      	movs	r1, #64	; 0x40
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	23e0      	movs	r3, #224	; 0xe0
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d94e      	bls.n	8002cda <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_SPI_Transmit+0x11e>
 8002c44:	2316      	movs	r3, #22
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d13f      	bne.n	8002cce <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	1c9a      	adds	r2, r3, #2
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c72:	e02c      	b.n	8002cce <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d112      	bne.n	8002ca8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ca6:	e012      	b.n	8002cce <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca8:	f7fe fee0 	bl	8001a6c <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d802      	bhi.n	8002cbe <HAL_SPI_Transmit+0x18e>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_SPI_Transmit+0x194>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002cc4:	231f      	movs	r3, #31
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2203      	movs	r2, #3
 8002cca:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ccc:	e079      	b.n	8002dc2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1cd      	bne.n	8002c74 <HAL_SPI_Transmit+0x144>
 8002cd8:	e04f      	b.n	8002d7a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_SPI_Transmit+0x1bc>
 8002ce2:	2316      	movs	r3, #22
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d141      	bne.n	8002d70 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	7812      	ldrb	r2, [r2, #0]
 8002cf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002d12:	e02d      	b.n	8002d70 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d113      	bne.n	8002d4a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d48:	e012      	b.n	8002d70 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d4a:	f7fe fe8f 	bl	8001a6c <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d802      	bhi.n	8002d60 <HAL_SPI_Transmit+0x230>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HAL_SPI_Transmit+0x236>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002d66:	231f      	movs	r3, #31
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d6e:	e028      	b.n	8002dc2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1cc      	bne.n	8002d14 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f95d 	bl	8003040 <SPI_EndRxTxTransaction>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002db6:	231f      	movs	r3, #31
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e000      	b.n	8002dc2 <HAL_SPI_Transmit+0x292>
  }

error:
 8002dc0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	225d      	movs	r2, #93	; 0x5d
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	225c      	movs	r2, #92	; 0x5c
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002dd2:	231f      	movs	r3, #31
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b008      	add	sp, #32
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002df0:	f7fe fe3c 	bl	8001a6c <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	18d3      	adds	r3, r2, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e00:	f7fe fe34 	bl	8001a6c <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	015b      	lsls	r3, r3, #5
 8002e0e:	0d1b      	lsrs	r3, r3, #20
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	4353      	muls	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e16:	e058      	b.n	8002eca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	d055      	beq.n	8002eca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e1e:	f7fe fe25 	bl	8001a6c <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d902      	bls.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d142      	bne.n	8002eba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	21e0      	movs	r1, #224	; 0xe0
 8002e40:	438a      	bics	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	2382      	movs	r3, #130	; 0x82
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d113      	bne.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d005      	beq.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	019b      	lsls	r3, r3, #6
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d110      	bne.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	491a      	ldr	r1, [pc, #104]	; (8002ef8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	0189      	lsls	r1, r1, #6
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	225d      	movs	r2, #93	; 0x5d
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	225c      	movs	r2, #92	; 0x5c
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e017      	b.n	8002eea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	425a      	negs	r2, r3
 8002eda:	4153      	adcs	r3, r2
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	001a      	movs	r2, r3
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d197      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b008      	add	sp, #32
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	ffffdfff 	.word	0xffffdfff

08002efc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f0a:	2317      	movs	r3, #23
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f12:	f7fe fdab 	bl	8001a6c <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	18d3      	adds	r3, r2, r3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f22:	f7fe fda3 	bl	8001a6c <HAL_GetTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	0013      	movs	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	189b      	adds	r3, r3, r2
 8002f3c:	00da      	lsls	r2, r3, #3
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	0d1b      	lsrs	r3, r3, #20
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	4353      	muls	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f48:	e068      	b.n	800301c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	23c0      	movs	r3, #192	; 0xc0
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10a      	bne.n	8002f6a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	2117      	movs	r1, #23
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	d055      	beq.n	800301c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f70:	f7fe fd7c 	bl	8001a6c <HAL_GetTick>
 8002f74:	0002      	movs	r2, r0
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d902      	bls.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d142      	bne.n	800300c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	21e0      	movs	r1, #224	; 0xe0
 8002f92:	438a      	bics	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	2382      	movs	r3, #130	; 0x82
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d113      	bne.n	8002fca <SPI_WaitFifoStateUntilTimeout+0xce>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d005      	beq.n	8002fba <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d107      	bne.n	8002fca <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2140      	movs	r1, #64	; 0x40
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d110      	bne.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4916      	ldr	r1, [pc, #88]	; (800303c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	0189      	lsls	r1, r1, #6
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	225d      	movs	r2, #93	; 0x5d
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	225c      	movs	r2, #92	; 0x5c
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e010      	b.n	800302e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3b01      	subs	r3, #1
 800301a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d18e      	bne.n	8002f4a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b00a      	add	sp, #40	; 0x28
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	20000000 	.word	0x20000000
 800303c:	ffffdfff 	.word	0xffffdfff

08003040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	23c0      	movs	r3, #192	; 0xc0
 8003050:	0159      	lsls	r1, r3, #5
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0013      	movs	r3, r2
 800305a:	2200      	movs	r2, #0
 800305c:	f7ff ff4e 	bl	8002efc <SPI_WaitFifoStateUntilTimeout>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d007      	beq.n	8003074 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003068:	2220      	movs	r2, #32
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e027      	b.n	80030c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	0013      	movs	r3, r2
 800307e:	2200      	movs	r2, #0
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	f7ff fead 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8003086:	1e03      	subs	r3, r0, #0
 8003088:	d007      	beq.n	800309a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308e:	2220      	movs	r2, #32
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e014      	b.n	80030c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	23c0      	movs	r3, #192	; 0xc0
 800309e:	00d9      	lsls	r1, r3, #3
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	0013      	movs	r3, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	f7ff ff27 	bl	8002efc <SPI_WaitFifoStateUntilTimeout>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d007      	beq.n	80030c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	2220      	movs	r2, #32
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e000      	b.n	80030c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}

080030cc <__errno>:
 80030cc:	4b01      	ldr	r3, [pc, #4]	; (80030d4 <__errno+0x8>)
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	4770      	bx	lr
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	2000000c 	.word	0x2000000c

080030d8 <__libc_init_array>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	2600      	movs	r6, #0
 80030dc:	4d0c      	ldr	r5, [pc, #48]	; (8003110 <__libc_init_array+0x38>)
 80030de:	4c0d      	ldr	r4, [pc, #52]	; (8003114 <__libc_init_array+0x3c>)
 80030e0:	1b64      	subs	r4, r4, r5
 80030e2:	10a4      	asrs	r4, r4, #2
 80030e4:	42a6      	cmp	r6, r4
 80030e6:	d109      	bne.n	80030fc <__libc_init_array+0x24>
 80030e8:	2600      	movs	r6, #0
 80030ea:	f001 f8a7 	bl	800423c <_init>
 80030ee:	4d0a      	ldr	r5, [pc, #40]	; (8003118 <__libc_init_array+0x40>)
 80030f0:	4c0a      	ldr	r4, [pc, #40]	; (800311c <__libc_init_array+0x44>)
 80030f2:	1b64      	subs	r4, r4, r5
 80030f4:	10a4      	asrs	r4, r4, #2
 80030f6:	42a6      	cmp	r6, r4
 80030f8:	d105      	bne.n	8003106 <__libc_init_array+0x2e>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	00b3      	lsls	r3, r6, #2
 80030fe:	58eb      	ldr	r3, [r5, r3]
 8003100:	4798      	blx	r3
 8003102:	3601      	adds	r6, #1
 8003104:	e7ee      	b.n	80030e4 <__libc_init_array+0xc>
 8003106:	00b3      	lsls	r3, r6, #2
 8003108:	58eb      	ldr	r3, [r5, r3]
 800310a:	4798      	blx	r3
 800310c:	3601      	adds	r6, #1
 800310e:	e7f2      	b.n	80030f6 <__libc_init_array+0x1e>
 8003110:	08004424 	.word	0x08004424
 8003114:	08004424 	.word	0x08004424
 8003118:	08004424 	.word	0x08004424
 800311c:	08004428 	.word	0x08004428

08003120 <memset>:
 8003120:	0003      	movs	r3, r0
 8003122:	1882      	adds	r2, r0, r2
 8003124:	4293      	cmp	r3, r2
 8003126:	d100      	bne.n	800312a <memset+0xa>
 8003128:	4770      	bx	lr
 800312a:	7019      	strb	r1, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	e7f9      	b.n	8003124 <memset+0x4>

08003130 <rand>:
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <rand+0x5c>)
 8003132:	b510      	push	{r4, lr}
 8003134:	681c      	ldr	r4, [r3, #0]
 8003136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d116      	bne.n	800316a <rand+0x3a>
 800313c:	2018      	movs	r0, #24
 800313e:	f000 f863 	bl	8003208 <malloc>
 8003142:	1e02      	subs	r2, r0, #0
 8003144:	63a0      	str	r0, [r4, #56]	; 0x38
 8003146:	d104      	bne.n	8003152 <rand+0x22>
 8003148:	214e      	movs	r1, #78	; 0x4e
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <rand+0x60>)
 800314c:	4811      	ldr	r0, [pc, #68]	; (8003194 <rand+0x64>)
 800314e:	f000 f82d 	bl	80031ac <__assert_func>
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <rand+0x68>)
 8003154:	2100      	movs	r1, #0
 8003156:	6003      	str	r3, [r0, #0]
 8003158:	4b10      	ldr	r3, [pc, #64]	; (800319c <rand+0x6c>)
 800315a:	6043      	str	r3, [r0, #4]
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <rand+0x70>)
 800315e:	6083      	str	r3, [r0, #8]
 8003160:	230b      	movs	r3, #11
 8003162:	8183      	strh	r3, [r0, #12]
 8003164:	2001      	movs	r0, #1
 8003166:	6110      	str	r0, [r2, #16]
 8003168:	6151      	str	r1, [r2, #20]
 800316a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <rand+0x74>)
 800316e:	6920      	ldr	r0, [r4, #16]
 8003170:	6961      	ldr	r1, [r4, #20]
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <rand+0x78>)
 8003174:	f7fd f85e 	bl	8000234 <__aeabi_lmul>
 8003178:	2201      	movs	r2, #1
 800317a:	2300      	movs	r3, #0
 800317c:	1880      	adds	r0, r0, r2
 800317e:	4159      	adcs	r1, r3
 8003180:	6120      	str	r0, [r4, #16]
 8003182:	6161      	str	r1, [r4, #20]
 8003184:	0048      	lsls	r0, r1, #1
 8003186:	0840      	lsrs	r0, r0, #1
 8003188:	bd10      	pop	{r4, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	2000000c 	.word	0x2000000c
 8003190:	080042e0 	.word	0x080042e0
 8003194:	080042f7 	.word	0x080042f7
 8003198:	abcd330e 	.word	0xabcd330e
 800319c:	e66d1234 	.word	0xe66d1234
 80031a0:	0005deec 	.word	0x0005deec
 80031a4:	4c957f2d 	.word	0x4c957f2d
 80031a8:	5851f42d 	.word	0x5851f42d

080031ac <__assert_func>:
 80031ac:	b530      	push	{r4, r5, lr}
 80031ae:	0014      	movs	r4, r2
 80031b0:	001a      	movs	r2, r3
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <__assert_func+0x2c>)
 80031b4:	0005      	movs	r5, r0
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b085      	sub	sp, #20
 80031ba:	68d8      	ldr	r0, [r3, #12]
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <__assert_func+0x30>)
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d101      	bne.n	80031c6 <__assert_func+0x1a>
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <__assert_func+0x34>)
 80031c4:	001c      	movs	r4, r3
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	9100      	str	r1, [sp, #0]
 80031ca:	002b      	movs	r3, r5
 80031cc:	4905      	ldr	r1, [pc, #20]	; (80031e4 <__assert_func+0x38>)
 80031ce:	9402      	str	r4, [sp, #8]
 80031d0:	f000 f80a 	bl	80031e8 <fiprintf>
 80031d4:	f000 fcc8 	bl	8003b68 <abort>
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	08004352 	.word	0x08004352
 80031e0:	0800438d 	.word	0x0800438d
 80031e4:	0800435f 	.word	0x0800435f

080031e8 <fiprintf>:
 80031e8:	b40e      	push	{r1, r2, r3}
 80031ea:	b503      	push	{r0, r1, lr}
 80031ec:	0001      	movs	r1, r0
 80031ee:	ab03      	add	r3, sp, #12
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <fiprintf+0x1c>)
 80031f2:	cb04      	ldmia	r3!, {r2}
 80031f4:	6800      	ldr	r0, [r0, #0]
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	f000 f91a 	bl	8003430 <_vfiprintf_r>
 80031fc:	b002      	add	sp, #8
 80031fe:	bc08      	pop	{r3}
 8003200:	b003      	add	sp, #12
 8003202:	4718      	bx	r3
 8003204:	2000000c 	.word	0x2000000c

08003208 <malloc>:
 8003208:	b510      	push	{r4, lr}
 800320a:	4b03      	ldr	r3, [pc, #12]	; (8003218 <malloc+0x10>)
 800320c:	0001      	movs	r1, r0
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	f000 f870 	bl	80032f4 <_malloc_r>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	2000000c 	.word	0x2000000c

0800321c <_free_r>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	0005      	movs	r5, r0
 8003220:	2900      	cmp	r1, #0
 8003222:	d010      	beq.n	8003246 <_free_r+0x2a>
 8003224:	1f0c      	subs	r4, r1, #4
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	da00      	bge.n	800322e <_free_r+0x12>
 800322c:	18e4      	adds	r4, r4, r3
 800322e:	0028      	movs	r0, r5
 8003230:	f000 feec 	bl	800400c <__malloc_lock>
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <_free_r+0x90>)
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <_free_r+0x2c>
 800323c:	6063      	str	r3, [r4, #4]
 800323e:	6014      	str	r4, [r2, #0]
 8003240:	0028      	movs	r0, r5
 8003242:	f000 feeb 	bl	800401c <__malloc_unlock>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	42a3      	cmp	r3, r4
 800324a:	d908      	bls.n	800325e <_free_r+0x42>
 800324c:	6821      	ldr	r1, [r4, #0]
 800324e:	1860      	adds	r0, r4, r1
 8003250:	4283      	cmp	r3, r0
 8003252:	d1f3      	bne.n	800323c <_free_r+0x20>
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	1841      	adds	r1, r0, r1
 800325a:	6021      	str	r1, [r4, #0]
 800325c:	e7ee      	b.n	800323c <_free_r+0x20>
 800325e:	001a      	movs	r2, r3
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <_free_r+0x4e>
 8003266:	42a3      	cmp	r3, r4
 8003268:	d9f9      	bls.n	800325e <_free_r+0x42>
 800326a:	6811      	ldr	r1, [r2, #0]
 800326c:	1850      	adds	r0, r2, r1
 800326e:	42a0      	cmp	r0, r4
 8003270:	d10b      	bne.n	800328a <_free_r+0x6e>
 8003272:	6820      	ldr	r0, [r4, #0]
 8003274:	1809      	adds	r1, r1, r0
 8003276:	1850      	adds	r0, r2, r1
 8003278:	6011      	str	r1, [r2, #0]
 800327a:	4283      	cmp	r3, r0
 800327c:	d1e0      	bne.n	8003240 <_free_r+0x24>
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	1841      	adds	r1, r0, r1
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	6053      	str	r3, [r2, #4]
 8003288:	e7da      	b.n	8003240 <_free_r+0x24>
 800328a:	42a0      	cmp	r0, r4
 800328c:	d902      	bls.n	8003294 <_free_r+0x78>
 800328e:	230c      	movs	r3, #12
 8003290:	602b      	str	r3, [r5, #0]
 8003292:	e7d5      	b.n	8003240 <_free_r+0x24>
 8003294:	6821      	ldr	r1, [r4, #0]
 8003296:	1860      	adds	r0, r4, r1
 8003298:	4283      	cmp	r3, r0
 800329a:	d103      	bne.n	80032a4 <_free_r+0x88>
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	1841      	adds	r1, r0, r1
 80032a2:	6021      	str	r1, [r4, #0]
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6054      	str	r4, [r2, #4]
 80032a8:	e7ca      	b.n	8003240 <_free_r+0x24>
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000114 	.word	0x20000114

080032b0 <sbrk_aligned>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	4e0f      	ldr	r6, [pc, #60]	; (80032f0 <sbrk_aligned+0x40>)
 80032b4:	000d      	movs	r5, r1
 80032b6:	6831      	ldr	r1, [r6, #0]
 80032b8:	0004      	movs	r4, r0
 80032ba:	2900      	cmp	r1, #0
 80032bc:	d102      	bne.n	80032c4 <sbrk_aligned+0x14>
 80032be:	f000 fb73 	bl	80039a8 <_sbrk_r>
 80032c2:	6030      	str	r0, [r6, #0]
 80032c4:	0029      	movs	r1, r5
 80032c6:	0020      	movs	r0, r4
 80032c8:	f000 fb6e 	bl	80039a8 <_sbrk_r>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d00a      	beq.n	80032e6 <sbrk_aligned+0x36>
 80032d0:	2303      	movs	r3, #3
 80032d2:	1cc5      	adds	r5, r0, #3
 80032d4:	439d      	bics	r5, r3
 80032d6:	42a8      	cmp	r0, r5
 80032d8:	d007      	beq.n	80032ea <sbrk_aligned+0x3a>
 80032da:	1a29      	subs	r1, r5, r0
 80032dc:	0020      	movs	r0, r4
 80032de:	f000 fb63 	bl	80039a8 <_sbrk_r>
 80032e2:	1c43      	adds	r3, r0, #1
 80032e4:	d101      	bne.n	80032ea <sbrk_aligned+0x3a>
 80032e6:	2501      	movs	r5, #1
 80032e8:	426d      	negs	r5, r5
 80032ea:	0028      	movs	r0, r5
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000118 	.word	0x20000118

080032f4 <_malloc_r>:
 80032f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032f6:	2203      	movs	r2, #3
 80032f8:	1ccb      	adds	r3, r1, #3
 80032fa:	4393      	bics	r3, r2
 80032fc:	3308      	adds	r3, #8
 80032fe:	0006      	movs	r6, r0
 8003300:	001f      	movs	r7, r3
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d232      	bcs.n	800336c <_malloc_r+0x78>
 8003306:	270c      	movs	r7, #12
 8003308:	42b9      	cmp	r1, r7
 800330a:	d831      	bhi.n	8003370 <_malloc_r+0x7c>
 800330c:	0030      	movs	r0, r6
 800330e:	f000 fe7d 	bl	800400c <__malloc_lock>
 8003312:	4d32      	ldr	r5, [pc, #200]	; (80033dc <_malloc_r+0xe8>)
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	001c      	movs	r4, r3
 8003318:	2c00      	cmp	r4, #0
 800331a:	d12e      	bne.n	800337a <_malloc_r+0x86>
 800331c:	0039      	movs	r1, r7
 800331e:	0030      	movs	r0, r6
 8003320:	f7ff ffc6 	bl	80032b0 <sbrk_aligned>
 8003324:	0004      	movs	r4, r0
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	d11e      	bne.n	8003368 <_malloc_r+0x74>
 800332a:	682c      	ldr	r4, [r5, #0]
 800332c:	0025      	movs	r5, r4
 800332e:	2d00      	cmp	r5, #0
 8003330:	d14a      	bne.n	80033c8 <_malloc_r+0xd4>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	0029      	movs	r1, r5
 8003336:	18e3      	adds	r3, r4, r3
 8003338:	0030      	movs	r0, r6
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	f000 fb34 	bl	80039a8 <_sbrk_r>
 8003340:	9b01      	ldr	r3, [sp, #4]
 8003342:	4283      	cmp	r3, r0
 8003344:	d143      	bne.n	80033ce <_malloc_r+0xda>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	3703      	adds	r7, #3
 800334a:	1aff      	subs	r7, r7, r3
 800334c:	2303      	movs	r3, #3
 800334e:	439f      	bics	r7, r3
 8003350:	3708      	adds	r7, #8
 8003352:	2f0c      	cmp	r7, #12
 8003354:	d200      	bcs.n	8003358 <_malloc_r+0x64>
 8003356:	270c      	movs	r7, #12
 8003358:	0039      	movs	r1, r7
 800335a:	0030      	movs	r0, r6
 800335c:	f7ff ffa8 	bl	80032b0 <sbrk_aligned>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d034      	beq.n	80033ce <_malloc_r+0xda>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	19df      	adds	r7, r3, r7
 8003368:	6027      	str	r7, [r4, #0]
 800336a:	e013      	b.n	8003394 <_malloc_r+0xa0>
 800336c:	2b00      	cmp	r3, #0
 800336e:	dacb      	bge.n	8003308 <_malloc_r+0x14>
 8003370:	230c      	movs	r3, #12
 8003372:	2500      	movs	r5, #0
 8003374:	6033      	str	r3, [r6, #0]
 8003376:	0028      	movs	r0, r5
 8003378:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	1bd1      	subs	r1, r2, r7
 800337e:	d420      	bmi.n	80033c2 <_malloc_r+0xce>
 8003380:	290b      	cmp	r1, #11
 8003382:	d917      	bls.n	80033b4 <_malloc_r+0xc0>
 8003384:	19e2      	adds	r2, r4, r7
 8003386:	6027      	str	r7, [r4, #0]
 8003388:	42a3      	cmp	r3, r4
 800338a:	d111      	bne.n	80033b0 <_malloc_r+0xbc>
 800338c:	602a      	str	r2, [r5, #0]
 800338e:	6863      	ldr	r3, [r4, #4]
 8003390:	6011      	str	r1, [r2, #0]
 8003392:	6053      	str	r3, [r2, #4]
 8003394:	0030      	movs	r0, r6
 8003396:	0025      	movs	r5, r4
 8003398:	f000 fe40 	bl	800401c <__malloc_unlock>
 800339c:	2207      	movs	r2, #7
 800339e:	350b      	adds	r5, #11
 80033a0:	1d23      	adds	r3, r4, #4
 80033a2:	4395      	bics	r5, r2
 80033a4:	1aea      	subs	r2, r5, r3
 80033a6:	429d      	cmp	r5, r3
 80033a8:	d0e5      	beq.n	8003376 <_malloc_r+0x82>
 80033aa:	1b5b      	subs	r3, r3, r5
 80033ac:	50a3      	str	r3, [r4, r2]
 80033ae:	e7e2      	b.n	8003376 <_malloc_r+0x82>
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	e7ec      	b.n	800338e <_malloc_r+0x9a>
 80033b4:	6862      	ldr	r2, [r4, #4]
 80033b6:	42a3      	cmp	r3, r4
 80033b8:	d101      	bne.n	80033be <_malloc_r+0xca>
 80033ba:	602a      	str	r2, [r5, #0]
 80033bc:	e7ea      	b.n	8003394 <_malloc_r+0xa0>
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	e7e8      	b.n	8003394 <_malloc_r+0xa0>
 80033c2:	0023      	movs	r3, r4
 80033c4:	6864      	ldr	r4, [r4, #4]
 80033c6:	e7a7      	b.n	8003318 <_malloc_r+0x24>
 80033c8:	002c      	movs	r4, r5
 80033ca:	686d      	ldr	r5, [r5, #4]
 80033cc:	e7af      	b.n	800332e <_malloc_r+0x3a>
 80033ce:	230c      	movs	r3, #12
 80033d0:	0030      	movs	r0, r6
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	f000 fe22 	bl	800401c <__malloc_unlock>
 80033d8:	e7cd      	b.n	8003376 <_malloc_r+0x82>
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	20000114 	.word	0x20000114

080033e0 <__sfputc_r>:
 80033e0:	6893      	ldr	r3, [r2, #8]
 80033e2:	b510      	push	{r4, lr}
 80033e4:	3b01      	subs	r3, #1
 80033e6:	6093      	str	r3, [r2, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	da04      	bge.n	80033f6 <__sfputc_r+0x16>
 80033ec:	6994      	ldr	r4, [r2, #24]
 80033ee:	42a3      	cmp	r3, r4
 80033f0:	db07      	blt.n	8003402 <__sfputc_r+0x22>
 80033f2:	290a      	cmp	r1, #10
 80033f4:	d005      	beq.n	8003402 <__sfputc_r+0x22>
 80033f6:	6813      	ldr	r3, [r2, #0]
 80033f8:	1c58      	adds	r0, r3, #1
 80033fa:	6010      	str	r0, [r2, #0]
 80033fc:	7019      	strb	r1, [r3, #0]
 80033fe:	0008      	movs	r0, r1
 8003400:	bd10      	pop	{r4, pc}
 8003402:	f000 fae3 	bl	80039cc <__swbuf_r>
 8003406:	0001      	movs	r1, r0
 8003408:	e7f9      	b.n	80033fe <__sfputc_r+0x1e>

0800340a <__sfputs_r>:
 800340a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340c:	0006      	movs	r6, r0
 800340e:	000f      	movs	r7, r1
 8003410:	0014      	movs	r4, r2
 8003412:	18d5      	adds	r5, r2, r3
 8003414:	42ac      	cmp	r4, r5
 8003416:	d101      	bne.n	800341c <__sfputs_r+0x12>
 8003418:	2000      	movs	r0, #0
 800341a:	e007      	b.n	800342c <__sfputs_r+0x22>
 800341c:	7821      	ldrb	r1, [r4, #0]
 800341e:	003a      	movs	r2, r7
 8003420:	0030      	movs	r0, r6
 8003422:	f7ff ffdd 	bl	80033e0 <__sfputc_r>
 8003426:	3401      	adds	r4, #1
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d1f3      	bne.n	8003414 <__sfputs_r+0xa>
 800342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003430 <_vfiprintf_r>:
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b0a1      	sub	sp, #132	; 0x84
 8003434:	0006      	movs	r6, r0
 8003436:	000c      	movs	r4, r1
 8003438:	001f      	movs	r7, r3
 800343a:	9203      	str	r2, [sp, #12]
 800343c:	2800      	cmp	r0, #0
 800343e:	d004      	beq.n	800344a <_vfiprintf_r+0x1a>
 8003440:	6983      	ldr	r3, [r0, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <_vfiprintf_r+0x1a>
 8003446:	f000 fcc5 	bl	8003dd4 <__sinit>
 800344a:	4b8e      	ldr	r3, [pc, #568]	; (8003684 <_vfiprintf_r+0x254>)
 800344c:	429c      	cmp	r4, r3
 800344e:	d11c      	bne.n	800348a <_vfiprintf_r+0x5a>
 8003450:	6874      	ldr	r4, [r6, #4]
 8003452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003454:	07db      	lsls	r3, r3, #31
 8003456:	d405      	bmi.n	8003464 <_vfiprintf_r+0x34>
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	059b      	lsls	r3, r3, #22
 800345c:	d402      	bmi.n	8003464 <_vfiprintf_r+0x34>
 800345e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003460:	f000 fd59 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	071b      	lsls	r3, r3, #28
 8003468:	d502      	bpl.n	8003470 <_vfiprintf_r+0x40>
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11d      	bne.n	80034ac <_vfiprintf_r+0x7c>
 8003470:	0021      	movs	r1, r4
 8003472:	0030      	movs	r0, r6
 8003474:	f000 fb00 	bl	8003a78 <__swsetup_r>
 8003478:	2800      	cmp	r0, #0
 800347a:	d017      	beq.n	80034ac <_vfiprintf_r+0x7c>
 800347c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800347e:	07db      	lsls	r3, r3, #31
 8003480:	d50d      	bpl.n	800349e <_vfiprintf_r+0x6e>
 8003482:	2001      	movs	r0, #1
 8003484:	4240      	negs	r0, r0
 8003486:	b021      	add	sp, #132	; 0x84
 8003488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800348a:	4b7f      	ldr	r3, [pc, #508]	; (8003688 <_vfiprintf_r+0x258>)
 800348c:	429c      	cmp	r4, r3
 800348e:	d101      	bne.n	8003494 <_vfiprintf_r+0x64>
 8003490:	68b4      	ldr	r4, [r6, #8]
 8003492:	e7de      	b.n	8003452 <_vfiprintf_r+0x22>
 8003494:	4b7d      	ldr	r3, [pc, #500]	; (800368c <_vfiprintf_r+0x25c>)
 8003496:	429c      	cmp	r4, r3
 8003498:	d1db      	bne.n	8003452 <_vfiprintf_r+0x22>
 800349a:	68f4      	ldr	r4, [r6, #12]
 800349c:	e7d9      	b.n	8003452 <_vfiprintf_r+0x22>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	059b      	lsls	r3, r3, #22
 80034a2:	d4ee      	bmi.n	8003482 <_vfiprintf_r+0x52>
 80034a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a6:	f000 fd37 	bl	8003f18 <__retarget_lock_release_recursive>
 80034aa:	e7ea      	b.n	8003482 <_vfiprintf_r+0x52>
 80034ac:	2300      	movs	r3, #0
 80034ae:	ad08      	add	r5, sp, #32
 80034b0:	616b      	str	r3, [r5, #20]
 80034b2:	3320      	adds	r3, #32
 80034b4:	766b      	strb	r3, [r5, #25]
 80034b6:	3310      	adds	r3, #16
 80034b8:	76ab      	strb	r3, [r5, #26]
 80034ba:	9707      	str	r7, [sp, #28]
 80034bc:	9f03      	ldr	r7, [sp, #12]
 80034be:	783b      	ldrb	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <_vfiprintf_r+0x98>
 80034c4:	2b25      	cmp	r3, #37	; 0x25
 80034c6:	d14e      	bne.n	8003566 <_vfiprintf_r+0x136>
 80034c8:	9b03      	ldr	r3, [sp, #12]
 80034ca:	1afb      	subs	r3, r7, r3
 80034cc:	9305      	str	r3, [sp, #20]
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	429f      	cmp	r7, r3
 80034d2:	d00d      	beq.n	80034f0 <_vfiprintf_r+0xc0>
 80034d4:	9b05      	ldr	r3, [sp, #20]
 80034d6:	0021      	movs	r1, r4
 80034d8:	0030      	movs	r0, r6
 80034da:	9a03      	ldr	r2, [sp, #12]
 80034dc:	f7ff ff95 	bl	800340a <__sfputs_r>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d100      	bne.n	80034e6 <_vfiprintf_r+0xb6>
 80034e4:	e0b5      	b.n	8003652 <_vfiprintf_r+0x222>
 80034e6:	696a      	ldr	r2, [r5, #20]
 80034e8:	9b05      	ldr	r3, [sp, #20]
 80034ea:	4694      	mov	ip, r2
 80034ec:	4463      	add	r3, ip
 80034ee:	616b      	str	r3, [r5, #20]
 80034f0:	783b      	ldrb	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d100      	bne.n	80034f8 <_vfiprintf_r+0xc8>
 80034f6:	e0ac      	b.n	8003652 <_vfiprintf_r+0x222>
 80034f8:	2201      	movs	r2, #1
 80034fa:	1c7b      	adds	r3, r7, #1
 80034fc:	9303      	str	r3, [sp, #12]
 80034fe:	2300      	movs	r3, #0
 8003500:	4252      	negs	r2, r2
 8003502:	606a      	str	r2, [r5, #4]
 8003504:	a904      	add	r1, sp, #16
 8003506:	3254      	adds	r2, #84	; 0x54
 8003508:	1852      	adds	r2, r2, r1
 800350a:	602b      	str	r3, [r5, #0]
 800350c:	60eb      	str	r3, [r5, #12]
 800350e:	60ab      	str	r3, [r5, #8]
 8003510:	7013      	strb	r3, [r2, #0]
 8003512:	65ab      	str	r3, [r5, #88]	; 0x58
 8003514:	9b03      	ldr	r3, [sp, #12]
 8003516:	2205      	movs	r2, #5
 8003518:	7819      	ldrb	r1, [r3, #0]
 800351a:	485d      	ldr	r0, [pc, #372]	; (8003690 <_vfiprintf_r+0x260>)
 800351c:	f000 fd6a 	bl	8003ff4 <memchr>
 8003520:	9b03      	ldr	r3, [sp, #12]
 8003522:	1c5f      	adds	r7, r3, #1
 8003524:	2800      	cmp	r0, #0
 8003526:	d120      	bne.n	800356a <_vfiprintf_r+0x13a>
 8003528:	682a      	ldr	r2, [r5, #0]
 800352a:	06d3      	lsls	r3, r2, #27
 800352c:	d504      	bpl.n	8003538 <_vfiprintf_r+0x108>
 800352e:	2353      	movs	r3, #83	; 0x53
 8003530:	a904      	add	r1, sp, #16
 8003532:	185b      	adds	r3, r3, r1
 8003534:	2120      	movs	r1, #32
 8003536:	7019      	strb	r1, [r3, #0]
 8003538:	0713      	lsls	r3, r2, #28
 800353a:	d504      	bpl.n	8003546 <_vfiprintf_r+0x116>
 800353c:	2353      	movs	r3, #83	; 0x53
 800353e:	a904      	add	r1, sp, #16
 8003540:	185b      	adds	r3, r3, r1
 8003542:	212b      	movs	r1, #43	; 0x2b
 8003544:	7019      	strb	r1, [r3, #0]
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b2a      	cmp	r3, #42	; 0x2a
 800354c:	d016      	beq.n	800357c <_vfiprintf_r+0x14c>
 800354e:	2100      	movs	r1, #0
 8003550:	68eb      	ldr	r3, [r5, #12]
 8003552:	9f03      	ldr	r7, [sp, #12]
 8003554:	783a      	ldrb	r2, [r7, #0]
 8003556:	1c78      	adds	r0, r7, #1
 8003558:	3a30      	subs	r2, #48	; 0x30
 800355a:	4684      	mov	ip, r0
 800355c:	2a09      	cmp	r2, #9
 800355e:	d94f      	bls.n	8003600 <_vfiprintf_r+0x1d0>
 8003560:	2900      	cmp	r1, #0
 8003562:	d111      	bne.n	8003588 <_vfiprintf_r+0x158>
 8003564:	e017      	b.n	8003596 <_vfiprintf_r+0x166>
 8003566:	3701      	adds	r7, #1
 8003568:	e7a9      	b.n	80034be <_vfiprintf_r+0x8e>
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <_vfiprintf_r+0x260>)
 800356c:	682a      	ldr	r2, [r5, #0]
 800356e:	1ac0      	subs	r0, r0, r3
 8003570:	2301      	movs	r3, #1
 8003572:	4083      	lsls	r3, r0
 8003574:	4313      	orrs	r3, r2
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	9703      	str	r7, [sp, #12]
 800357a:	e7cb      	b.n	8003514 <_vfiprintf_r+0xe4>
 800357c:	9b07      	ldr	r3, [sp, #28]
 800357e:	1d19      	adds	r1, r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	9107      	str	r1, [sp, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	db01      	blt.n	800358c <_vfiprintf_r+0x15c>
 8003588:	930b      	str	r3, [sp, #44]	; 0x2c
 800358a:	e004      	b.n	8003596 <_vfiprintf_r+0x166>
 800358c:	425b      	negs	r3, r3
 800358e:	60eb      	str	r3, [r5, #12]
 8003590:	2302      	movs	r3, #2
 8003592:	4313      	orrs	r3, r2
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	783b      	ldrb	r3, [r7, #0]
 8003598:	2b2e      	cmp	r3, #46	; 0x2e
 800359a:	d10a      	bne.n	80035b2 <_vfiprintf_r+0x182>
 800359c:	787b      	ldrb	r3, [r7, #1]
 800359e:	2b2a      	cmp	r3, #42	; 0x2a
 80035a0:	d137      	bne.n	8003612 <_vfiprintf_r+0x1e2>
 80035a2:	9b07      	ldr	r3, [sp, #28]
 80035a4:	3702      	adds	r7, #2
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	9207      	str	r2, [sp, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db2d      	blt.n	800360c <_vfiprintf_r+0x1dc>
 80035b0:	9309      	str	r3, [sp, #36]	; 0x24
 80035b2:	2203      	movs	r2, #3
 80035b4:	7839      	ldrb	r1, [r7, #0]
 80035b6:	4837      	ldr	r0, [pc, #220]	; (8003694 <_vfiprintf_r+0x264>)
 80035b8:	f000 fd1c 	bl	8003ff4 <memchr>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d007      	beq.n	80035d0 <_vfiprintf_r+0x1a0>
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <_vfiprintf_r+0x264>)
 80035c2:	682a      	ldr	r2, [r5, #0]
 80035c4:	1ac0      	subs	r0, r0, r3
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	4083      	lsls	r3, r0
 80035ca:	4313      	orrs	r3, r2
 80035cc:	3701      	adds	r7, #1
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	7839      	ldrb	r1, [r7, #0]
 80035d2:	1c7b      	adds	r3, r7, #1
 80035d4:	2206      	movs	r2, #6
 80035d6:	4830      	ldr	r0, [pc, #192]	; (8003698 <_vfiprintf_r+0x268>)
 80035d8:	9303      	str	r3, [sp, #12]
 80035da:	7629      	strb	r1, [r5, #24]
 80035dc:	f000 fd0a 	bl	8003ff4 <memchr>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d045      	beq.n	8003670 <_vfiprintf_r+0x240>
 80035e4:	4b2d      	ldr	r3, [pc, #180]	; (800369c <_vfiprintf_r+0x26c>)
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d127      	bne.n	800363a <_vfiprintf_r+0x20a>
 80035ea:	2207      	movs	r2, #7
 80035ec:	9b07      	ldr	r3, [sp, #28]
 80035ee:	3307      	adds	r3, #7
 80035f0:	4393      	bics	r3, r2
 80035f2:	3308      	adds	r3, #8
 80035f4:	9307      	str	r3, [sp, #28]
 80035f6:	696b      	ldr	r3, [r5, #20]
 80035f8:	9a04      	ldr	r2, [sp, #16]
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	616b      	str	r3, [r5, #20]
 80035fe:	e75d      	b.n	80034bc <_vfiprintf_r+0x8c>
 8003600:	210a      	movs	r1, #10
 8003602:	434b      	muls	r3, r1
 8003604:	4667      	mov	r7, ip
 8003606:	189b      	adds	r3, r3, r2
 8003608:	3909      	subs	r1, #9
 800360a:	e7a3      	b.n	8003554 <_vfiprintf_r+0x124>
 800360c:	2301      	movs	r3, #1
 800360e:	425b      	negs	r3, r3
 8003610:	e7ce      	b.n	80035b0 <_vfiprintf_r+0x180>
 8003612:	2300      	movs	r3, #0
 8003614:	001a      	movs	r2, r3
 8003616:	3701      	adds	r7, #1
 8003618:	606b      	str	r3, [r5, #4]
 800361a:	7839      	ldrb	r1, [r7, #0]
 800361c:	1c78      	adds	r0, r7, #1
 800361e:	3930      	subs	r1, #48	; 0x30
 8003620:	4684      	mov	ip, r0
 8003622:	2909      	cmp	r1, #9
 8003624:	d903      	bls.n	800362e <_vfiprintf_r+0x1fe>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0c3      	beq.n	80035b2 <_vfiprintf_r+0x182>
 800362a:	9209      	str	r2, [sp, #36]	; 0x24
 800362c:	e7c1      	b.n	80035b2 <_vfiprintf_r+0x182>
 800362e:	230a      	movs	r3, #10
 8003630:	435a      	muls	r2, r3
 8003632:	4667      	mov	r7, ip
 8003634:	1852      	adds	r2, r2, r1
 8003636:	3b09      	subs	r3, #9
 8003638:	e7ef      	b.n	800361a <_vfiprintf_r+0x1ea>
 800363a:	ab07      	add	r3, sp, #28
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	0022      	movs	r2, r4
 8003640:	0029      	movs	r1, r5
 8003642:	0030      	movs	r0, r6
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <_vfiprintf_r+0x270>)
 8003646:	e000      	b.n	800364a <_vfiprintf_r+0x21a>
 8003648:	bf00      	nop
 800364a:	9004      	str	r0, [sp, #16]
 800364c:	9b04      	ldr	r3, [sp, #16]
 800364e:	3301      	adds	r3, #1
 8003650:	d1d1      	bne.n	80035f6 <_vfiprintf_r+0x1c6>
 8003652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003654:	07db      	lsls	r3, r3, #31
 8003656:	d405      	bmi.n	8003664 <_vfiprintf_r+0x234>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	059b      	lsls	r3, r3, #22
 800365c:	d402      	bmi.n	8003664 <_vfiprintf_r+0x234>
 800365e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003660:	f000 fc5a 	bl	8003f18 <__retarget_lock_release_recursive>
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	065b      	lsls	r3, r3, #25
 8003668:	d500      	bpl.n	800366c <_vfiprintf_r+0x23c>
 800366a:	e70a      	b.n	8003482 <_vfiprintf_r+0x52>
 800366c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800366e:	e70a      	b.n	8003486 <_vfiprintf_r+0x56>
 8003670:	ab07      	add	r3, sp, #28
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	0022      	movs	r2, r4
 8003676:	0029      	movs	r1, r5
 8003678:	0030      	movs	r0, r6
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <_vfiprintf_r+0x270>)
 800367c:	f000 f882 	bl	8003784 <_printf_i>
 8003680:	e7e3      	b.n	800364a <_vfiprintf_r+0x21a>
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	080043e4 	.word	0x080043e4
 8003688:	08004404 	.word	0x08004404
 800368c:	080043c4 	.word	0x080043c4
 8003690:	0800438e 	.word	0x0800438e
 8003694:	08004394 	.word	0x08004394
 8003698:	08004398 	.word	0x08004398
 800369c:	00000000 	.word	0x00000000
 80036a0:	0800340b 	.word	0x0800340b

080036a4 <_printf_common>:
 80036a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a6:	0015      	movs	r5, r2
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	688a      	ldr	r2, [r1, #8]
 80036ac:	690b      	ldr	r3, [r1, #16]
 80036ae:	000c      	movs	r4, r1
 80036b0:	9000      	str	r0, [sp, #0]
 80036b2:	4293      	cmp	r3, r2
 80036b4:	da00      	bge.n	80036b8 <_printf_common+0x14>
 80036b6:	0013      	movs	r3, r2
 80036b8:	0022      	movs	r2, r4
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	3243      	adds	r2, #67	; 0x43
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	2a00      	cmp	r2, #0
 80036c2:	d001      	beq.n	80036c8 <_printf_common+0x24>
 80036c4:	3301      	adds	r3, #1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	069b      	lsls	r3, r3, #26
 80036cc:	d502      	bpl.n	80036d4 <_printf_common+0x30>
 80036ce:	682b      	ldr	r3, [r5, #0]
 80036d0:	3302      	adds	r3, #2
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	2306      	movs	r3, #6
 80036d8:	0017      	movs	r7, r2
 80036da:	401f      	ands	r7, r3
 80036dc:	421a      	tst	r2, r3
 80036de:	d027      	beq.n	8003730 <_printf_common+0x8c>
 80036e0:	0023      	movs	r3, r4
 80036e2:	3343      	adds	r3, #67	; 0x43
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	4193      	sbcs	r3, r2
 80036ea:	6822      	ldr	r2, [r4, #0]
 80036ec:	0692      	lsls	r2, r2, #26
 80036ee:	d430      	bmi.n	8003752 <_printf_common+0xae>
 80036f0:	0022      	movs	r2, r4
 80036f2:	9901      	ldr	r1, [sp, #4]
 80036f4:	9800      	ldr	r0, [sp, #0]
 80036f6:	9e08      	ldr	r6, [sp, #32]
 80036f8:	3243      	adds	r2, #67	; 0x43
 80036fa:	47b0      	blx	r6
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d025      	beq.n	800374c <_printf_common+0xa8>
 8003700:	2306      	movs	r3, #6
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	682a      	ldr	r2, [r5, #0]
 8003706:	68e1      	ldr	r1, [r4, #12]
 8003708:	2500      	movs	r5, #0
 800370a:	4003      	ands	r3, r0
 800370c:	2b04      	cmp	r3, #4
 800370e:	d103      	bne.n	8003718 <_printf_common+0x74>
 8003710:	1a8d      	subs	r5, r1, r2
 8003712:	43eb      	mvns	r3, r5
 8003714:	17db      	asrs	r3, r3, #31
 8003716:	401d      	ands	r5, r3
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	6922      	ldr	r2, [r4, #16]
 800371c:	4293      	cmp	r3, r2
 800371e:	dd01      	ble.n	8003724 <_printf_common+0x80>
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	18ed      	adds	r5, r5, r3
 8003724:	2700      	movs	r7, #0
 8003726:	42bd      	cmp	r5, r7
 8003728:	d120      	bne.n	800376c <_printf_common+0xc8>
 800372a:	2000      	movs	r0, #0
 800372c:	e010      	b.n	8003750 <_printf_common+0xac>
 800372e:	3701      	adds	r7, #1
 8003730:	68e3      	ldr	r3, [r4, #12]
 8003732:	682a      	ldr	r2, [r5, #0]
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	42bb      	cmp	r3, r7
 8003738:	ddd2      	ble.n	80036e0 <_printf_common+0x3c>
 800373a:	0022      	movs	r2, r4
 800373c:	2301      	movs	r3, #1
 800373e:	9901      	ldr	r1, [sp, #4]
 8003740:	9800      	ldr	r0, [sp, #0]
 8003742:	9e08      	ldr	r6, [sp, #32]
 8003744:	3219      	adds	r2, #25
 8003746:	47b0      	blx	r6
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d1f0      	bne.n	800372e <_printf_common+0x8a>
 800374c:	2001      	movs	r0, #1
 800374e:	4240      	negs	r0, r0
 8003750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003752:	2030      	movs	r0, #48	; 0x30
 8003754:	18e1      	adds	r1, r4, r3
 8003756:	3143      	adds	r1, #67	; 0x43
 8003758:	7008      	strb	r0, [r1, #0]
 800375a:	0021      	movs	r1, r4
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	3145      	adds	r1, #69	; 0x45
 8003760:	7809      	ldrb	r1, [r1, #0]
 8003762:	18a2      	adds	r2, r4, r2
 8003764:	3243      	adds	r2, #67	; 0x43
 8003766:	3302      	adds	r3, #2
 8003768:	7011      	strb	r1, [r2, #0]
 800376a:	e7c1      	b.n	80036f0 <_printf_common+0x4c>
 800376c:	0022      	movs	r2, r4
 800376e:	2301      	movs	r3, #1
 8003770:	9901      	ldr	r1, [sp, #4]
 8003772:	9800      	ldr	r0, [sp, #0]
 8003774:	9e08      	ldr	r6, [sp, #32]
 8003776:	321a      	adds	r2, #26
 8003778:	47b0      	blx	r6
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	d0e6      	beq.n	800374c <_printf_common+0xa8>
 800377e:	3701      	adds	r7, #1
 8003780:	e7d1      	b.n	8003726 <_printf_common+0x82>
	...

08003784 <_printf_i>:
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	9206      	str	r2, [sp, #24]
 800378a:	000a      	movs	r2, r1
 800378c:	3243      	adds	r2, #67	; 0x43
 800378e:	9307      	str	r3, [sp, #28]
 8003790:	9005      	str	r0, [sp, #20]
 8003792:	9204      	str	r2, [sp, #16]
 8003794:	7e0a      	ldrb	r2, [r1, #24]
 8003796:	000c      	movs	r4, r1
 8003798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800379a:	2a78      	cmp	r2, #120	; 0x78
 800379c:	d807      	bhi.n	80037ae <_printf_i+0x2a>
 800379e:	2a62      	cmp	r2, #98	; 0x62
 80037a0:	d809      	bhi.n	80037b6 <_printf_i+0x32>
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d100      	bne.n	80037a8 <_printf_i+0x24>
 80037a6:	e0c1      	b.n	800392c <_printf_i+0x1a8>
 80037a8:	2a58      	cmp	r2, #88	; 0x58
 80037aa:	d100      	bne.n	80037ae <_printf_i+0x2a>
 80037ac:	e08c      	b.n	80038c8 <_printf_i+0x144>
 80037ae:	0026      	movs	r6, r4
 80037b0:	3642      	adds	r6, #66	; 0x42
 80037b2:	7032      	strb	r2, [r6, #0]
 80037b4:	e022      	b.n	80037fc <_printf_i+0x78>
 80037b6:	0010      	movs	r0, r2
 80037b8:	3863      	subs	r0, #99	; 0x63
 80037ba:	2815      	cmp	r0, #21
 80037bc:	d8f7      	bhi.n	80037ae <_printf_i+0x2a>
 80037be:	f7fc fca3 	bl	8000108 <__gnu_thumb1_case_shi>
 80037c2:	0016      	.short	0x0016
 80037c4:	fff6001f 	.word	0xfff6001f
 80037c8:	fff6fff6 	.word	0xfff6fff6
 80037cc:	001ffff6 	.word	0x001ffff6
 80037d0:	fff6fff6 	.word	0xfff6fff6
 80037d4:	fff6fff6 	.word	0xfff6fff6
 80037d8:	003600a8 	.word	0x003600a8
 80037dc:	fff6009a 	.word	0xfff6009a
 80037e0:	00b9fff6 	.word	0x00b9fff6
 80037e4:	0036fff6 	.word	0x0036fff6
 80037e8:	fff6fff6 	.word	0xfff6fff6
 80037ec:	009e      	.short	0x009e
 80037ee:	0026      	movs	r6, r4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	3642      	adds	r6, #66	; 0x42
 80037f4:	1d11      	adds	r1, r2, #4
 80037f6:	6019      	str	r1, [r3, #0]
 80037f8:	6813      	ldr	r3, [r2, #0]
 80037fa:	7033      	strb	r3, [r6, #0]
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0a7      	b.n	8003950 <_printf_i+0x1cc>
 8003800:	6808      	ldr	r0, [r1, #0]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	1d0a      	adds	r2, r1, #4
 8003806:	0605      	lsls	r5, r0, #24
 8003808:	d50b      	bpl.n	8003822 <_printf_i+0x9e>
 800380a:	680d      	ldr	r5, [r1, #0]
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	2d00      	cmp	r5, #0
 8003810:	da03      	bge.n	800381a <_printf_i+0x96>
 8003812:	232d      	movs	r3, #45	; 0x2d
 8003814:	9a04      	ldr	r2, [sp, #16]
 8003816:	426d      	negs	r5, r5
 8003818:	7013      	strb	r3, [r2, #0]
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <_printf_i+0x21c>)
 800381c:	270a      	movs	r7, #10
 800381e:	9303      	str	r3, [sp, #12]
 8003820:	e01b      	b.n	800385a <_printf_i+0xd6>
 8003822:	680d      	ldr	r5, [r1, #0]
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	0641      	lsls	r1, r0, #25
 8003828:	d5f1      	bpl.n	800380e <_printf_i+0x8a>
 800382a:	b22d      	sxth	r5, r5
 800382c:	e7ef      	b.n	800380e <_printf_i+0x8a>
 800382e:	680d      	ldr	r5, [r1, #0]
 8003830:	6819      	ldr	r1, [r3, #0]
 8003832:	1d08      	adds	r0, r1, #4
 8003834:	6018      	str	r0, [r3, #0]
 8003836:	062e      	lsls	r6, r5, #24
 8003838:	d501      	bpl.n	800383e <_printf_i+0xba>
 800383a:	680d      	ldr	r5, [r1, #0]
 800383c:	e003      	b.n	8003846 <_printf_i+0xc2>
 800383e:	066d      	lsls	r5, r5, #25
 8003840:	d5fb      	bpl.n	800383a <_printf_i+0xb6>
 8003842:	680d      	ldr	r5, [r1, #0]
 8003844:	b2ad      	uxth	r5, r5
 8003846:	4b56      	ldr	r3, [pc, #344]	; (80039a0 <_printf_i+0x21c>)
 8003848:	2708      	movs	r7, #8
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	2a6f      	cmp	r2, #111	; 0x6f
 800384e:	d000      	beq.n	8003852 <_printf_i+0xce>
 8003850:	3702      	adds	r7, #2
 8003852:	0023      	movs	r3, r4
 8003854:	2200      	movs	r2, #0
 8003856:	3343      	adds	r3, #67	; 0x43
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	60a3      	str	r3, [r4, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db03      	blt.n	800386a <_printf_i+0xe6>
 8003862:	2204      	movs	r2, #4
 8003864:	6821      	ldr	r1, [r4, #0]
 8003866:	4391      	bics	r1, r2
 8003868:	6021      	str	r1, [r4, #0]
 800386a:	2d00      	cmp	r5, #0
 800386c:	d102      	bne.n	8003874 <_printf_i+0xf0>
 800386e:	9e04      	ldr	r6, [sp, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <_printf_i+0x10a>
 8003874:	9e04      	ldr	r6, [sp, #16]
 8003876:	0028      	movs	r0, r5
 8003878:	0039      	movs	r1, r7
 800387a:	f7fc fcd5 	bl	8000228 <__aeabi_uidivmod>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	3e01      	subs	r6, #1
 8003882:	5c5b      	ldrb	r3, [r3, r1]
 8003884:	7033      	strb	r3, [r6, #0]
 8003886:	002b      	movs	r3, r5
 8003888:	0005      	movs	r5, r0
 800388a:	429f      	cmp	r7, r3
 800388c:	d9f3      	bls.n	8003876 <_printf_i+0xf2>
 800388e:	2f08      	cmp	r7, #8
 8003890:	d109      	bne.n	80038a6 <_printf_i+0x122>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	07db      	lsls	r3, r3, #31
 8003896:	d506      	bpl.n	80038a6 <_printf_i+0x122>
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	6922      	ldr	r2, [r4, #16]
 800389c:	4293      	cmp	r3, r2
 800389e:	dc02      	bgt.n	80038a6 <_printf_i+0x122>
 80038a0:	2330      	movs	r3, #48	; 0x30
 80038a2:	3e01      	subs	r6, #1
 80038a4:	7033      	strb	r3, [r6, #0]
 80038a6:	9b04      	ldr	r3, [sp, #16]
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	9b07      	ldr	r3, [sp, #28]
 80038ae:	0021      	movs	r1, r4
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	9805      	ldr	r0, [sp, #20]
 80038b4:	9b06      	ldr	r3, [sp, #24]
 80038b6:	aa09      	add	r2, sp, #36	; 0x24
 80038b8:	f7ff fef4 	bl	80036a4 <_printf_common>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d14c      	bne.n	800395a <_printf_i+0x1d6>
 80038c0:	2001      	movs	r0, #1
 80038c2:	4240      	negs	r0, r0
 80038c4:	b00b      	add	sp, #44	; 0x2c
 80038c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c8:	3145      	adds	r1, #69	; 0x45
 80038ca:	700a      	strb	r2, [r1, #0]
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <_printf_i+0x21c>)
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	6821      	ldr	r1, [r4, #0]
 80038d4:	ca20      	ldmia	r2!, {r5}
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	0608      	lsls	r0, r1, #24
 80038da:	d516      	bpl.n	800390a <_printf_i+0x186>
 80038dc:	07cb      	lsls	r3, r1, #31
 80038de:	d502      	bpl.n	80038e6 <_printf_i+0x162>
 80038e0:	2320      	movs	r3, #32
 80038e2:	4319      	orrs	r1, r3
 80038e4:	6021      	str	r1, [r4, #0]
 80038e6:	2710      	movs	r7, #16
 80038e8:	2d00      	cmp	r5, #0
 80038ea:	d1b2      	bne.n	8003852 <_printf_i+0xce>
 80038ec:	2320      	movs	r3, #32
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	439a      	bics	r2, r3
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	e7ad      	b.n	8003852 <_printf_i+0xce>
 80038f6:	2220      	movs	r2, #32
 80038f8:	6809      	ldr	r1, [r1, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	6022      	str	r2, [r4, #0]
 80038fe:	0022      	movs	r2, r4
 8003900:	2178      	movs	r1, #120	; 0x78
 8003902:	3245      	adds	r2, #69	; 0x45
 8003904:	7011      	strb	r1, [r2, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <_printf_i+0x220>)
 8003908:	e7e1      	b.n	80038ce <_printf_i+0x14a>
 800390a:	0648      	lsls	r0, r1, #25
 800390c:	d5e6      	bpl.n	80038dc <_printf_i+0x158>
 800390e:	b2ad      	uxth	r5, r5
 8003910:	e7e4      	b.n	80038dc <_printf_i+0x158>
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	680d      	ldr	r5, [r1, #0]
 8003916:	1d10      	adds	r0, r2, #4
 8003918:	6949      	ldr	r1, [r1, #20]
 800391a:	6018      	str	r0, [r3, #0]
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	062e      	lsls	r6, r5, #24
 8003920:	d501      	bpl.n	8003926 <_printf_i+0x1a2>
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	e002      	b.n	800392c <_printf_i+0x1a8>
 8003926:	066d      	lsls	r5, r5, #25
 8003928:	d5fb      	bpl.n	8003922 <_printf_i+0x19e>
 800392a:	8019      	strh	r1, [r3, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	9e04      	ldr	r6, [sp, #16]
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	e7bb      	b.n	80038ac <_printf_i+0x128>
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	1d11      	adds	r1, r2, #4
 8003938:	6019      	str	r1, [r3, #0]
 800393a:	6816      	ldr	r6, [r2, #0]
 800393c:	2100      	movs	r1, #0
 800393e:	0030      	movs	r0, r6
 8003940:	6862      	ldr	r2, [r4, #4]
 8003942:	f000 fb57 	bl	8003ff4 <memchr>
 8003946:	2800      	cmp	r0, #0
 8003948:	d001      	beq.n	800394e <_printf_i+0x1ca>
 800394a:	1b80      	subs	r0, r0, r6
 800394c:	6060      	str	r0, [r4, #4]
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	6123      	str	r3, [r4, #16]
 8003952:	2300      	movs	r3, #0
 8003954:	9a04      	ldr	r2, [sp, #16]
 8003956:	7013      	strb	r3, [r2, #0]
 8003958:	e7a8      	b.n	80038ac <_printf_i+0x128>
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	0032      	movs	r2, r6
 800395e:	9906      	ldr	r1, [sp, #24]
 8003960:	9805      	ldr	r0, [sp, #20]
 8003962:	9d07      	ldr	r5, [sp, #28]
 8003964:	47a8      	blx	r5
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	d0aa      	beq.n	80038c0 <_printf_i+0x13c>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	079b      	lsls	r3, r3, #30
 800396e:	d415      	bmi.n	800399c <_printf_i+0x218>
 8003970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003972:	68e0      	ldr	r0, [r4, #12]
 8003974:	4298      	cmp	r0, r3
 8003976:	daa5      	bge.n	80038c4 <_printf_i+0x140>
 8003978:	0018      	movs	r0, r3
 800397a:	e7a3      	b.n	80038c4 <_printf_i+0x140>
 800397c:	0022      	movs	r2, r4
 800397e:	2301      	movs	r3, #1
 8003980:	9906      	ldr	r1, [sp, #24]
 8003982:	9805      	ldr	r0, [sp, #20]
 8003984:	9e07      	ldr	r6, [sp, #28]
 8003986:	3219      	adds	r2, #25
 8003988:	47b0      	blx	r6
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d098      	beq.n	80038c0 <_printf_i+0x13c>
 800398e:	3501      	adds	r5, #1
 8003990:	68e3      	ldr	r3, [r4, #12]
 8003992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	42ab      	cmp	r3, r5
 8003998:	dcf0      	bgt.n	800397c <_printf_i+0x1f8>
 800399a:	e7e9      	b.n	8003970 <_printf_i+0x1ec>
 800399c:	2500      	movs	r5, #0
 800399e:	e7f7      	b.n	8003990 <_printf_i+0x20c>
 80039a0:	0800439f 	.word	0x0800439f
 80039a4:	080043b0 	.word	0x080043b0

080039a8 <_sbrk_r>:
 80039a8:	2300      	movs	r3, #0
 80039aa:	b570      	push	{r4, r5, r6, lr}
 80039ac:	4d06      	ldr	r5, [pc, #24]	; (80039c8 <_sbrk_r+0x20>)
 80039ae:	0004      	movs	r4, r0
 80039b0:	0008      	movs	r0, r1
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	f7fd ff82 	bl	80018bc <_sbrk>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d103      	bne.n	80039c4 <_sbrk_r+0x1c>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d000      	beq.n	80039c4 <_sbrk_r+0x1c>
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	20000120 	.word	0x20000120

080039cc <__swbuf_r>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	0005      	movs	r5, r0
 80039d0:	000e      	movs	r6, r1
 80039d2:	0014      	movs	r4, r2
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d004      	beq.n	80039e2 <__swbuf_r+0x16>
 80039d8:	6983      	ldr	r3, [r0, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <__swbuf_r+0x16>
 80039de:	f000 f9f9 	bl	8003dd4 <__sinit>
 80039e2:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <__swbuf_r+0xa0>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	d12e      	bne.n	8003a46 <__swbuf_r+0x7a>
 80039e8:	686c      	ldr	r4, [r5, #4]
 80039ea:	69a3      	ldr	r3, [r4, #24]
 80039ec:	60a3      	str	r3, [r4, #8]
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	071b      	lsls	r3, r3, #28
 80039f2:	d532      	bpl.n	8003a5a <__swbuf_r+0x8e>
 80039f4:	6923      	ldr	r3, [r4, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02f      	beq.n	8003a5a <__swbuf_r+0x8e>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	6922      	ldr	r2, [r4, #16]
 80039fe:	b2f7      	uxtb	r7, r6
 8003a00:	1a98      	subs	r0, r3, r2
 8003a02:	6963      	ldr	r3, [r4, #20]
 8003a04:	b2f6      	uxtb	r6, r6
 8003a06:	4283      	cmp	r3, r0
 8003a08:	dc05      	bgt.n	8003a16 <__swbuf_r+0x4a>
 8003a0a:	0021      	movs	r1, r4
 8003a0c:	0028      	movs	r0, r5
 8003a0e:	f000 f93f 	bl	8003c90 <_fflush_r>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d127      	bne.n	8003a66 <__swbuf_r+0x9a>
 8003a16:	68a3      	ldr	r3, [r4, #8]
 8003a18:	3001      	adds	r0, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	60a3      	str	r3, [r4, #8]
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	6022      	str	r2, [r4, #0]
 8003a24:	701f      	strb	r7, [r3, #0]
 8003a26:	6963      	ldr	r3, [r4, #20]
 8003a28:	4283      	cmp	r3, r0
 8003a2a:	d004      	beq.n	8003a36 <__swbuf_r+0x6a>
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	07db      	lsls	r3, r3, #31
 8003a30:	d507      	bpl.n	8003a42 <__swbuf_r+0x76>
 8003a32:	2e0a      	cmp	r6, #10
 8003a34:	d105      	bne.n	8003a42 <__swbuf_r+0x76>
 8003a36:	0021      	movs	r1, r4
 8003a38:	0028      	movs	r0, r5
 8003a3a:	f000 f929 	bl	8003c90 <_fflush_r>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d111      	bne.n	8003a66 <__swbuf_r+0x9a>
 8003a42:	0030      	movs	r0, r6
 8003a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <__swbuf_r+0xa4>)
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	d101      	bne.n	8003a50 <__swbuf_r+0x84>
 8003a4c:	68ac      	ldr	r4, [r5, #8]
 8003a4e:	e7cc      	b.n	80039ea <__swbuf_r+0x1e>
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <__swbuf_r+0xa8>)
 8003a52:	429c      	cmp	r4, r3
 8003a54:	d1c9      	bne.n	80039ea <__swbuf_r+0x1e>
 8003a56:	68ec      	ldr	r4, [r5, #12]
 8003a58:	e7c7      	b.n	80039ea <__swbuf_r+0x1e>
 8003a5a:	0021      	movs	r1, r4
 8003a5c:	0028      	movs	r0, r5
 8003a5e:	f000 f80b 	bl	8003a78 <__swsetup_r>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d0c9      	beq.n	80039fa <__swbuf_r+0x2e>
 8003a66:	2601      	movs	r6, #1
 8003a68:	4276      	negs	r6, r6
 8003a6a:	e7ea      	b.n	8003a42 <__swbuf_r+0x76>
 8003a6c:	080043e4 	.word	0x080043e4
 8003a70:	08004404 	.word	0x08004404
 8003a74:	080043c4 	.word	0x080043c4

08003a78 <__swsetup_r>:
 8003a78:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <__swsetup_r+0xe0>)
 8003a7a:	b570      	push	{r4, r5, r6, lr}
 8003a7c:	681d      	ldr	r5, [r3, #0]
 8003a7e:	0006      	movs	r6, r0
 8003a80:	000c      	movs	r4, r1
 8003a82:	2d00      	cmp	r5, #0
 8003a84:	d005      	beq.n	8003a92 <__swsetup_r+0x1a>
 8003a86:	69ab      	ldr	r3, [r5, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <__swsetup_r+0x1a>
 8003a8c:	0028      	movs	r0, r5
 8003a8e:	f000 f9a1 	bl	8003dd4 <__sinit>
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <__swsetup_r+0xe4>)
 8003a94:	429c      	cmp	r4, r3
 8003a96:	d10f      	bne.n	8003ab8 <__swsetup_r+0x40>
 8003a98:	686c      	ldr	r4, [r5, #4]
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	5ee2      	ldrsh	r2, [r4, r3]
 8003a9e:	b293      	uxth	r3, r2
 8003aa0:	0711      	lsls	r1, r2, #28
 8003aa2:	d42d      	bmi.n	8003b00 <__swsetup_r+0x88>
 8003aa4:	06d9      	lsls	r1, r3, #27
 8003aa6:	d411      	bmi.n	8003acc <__swsetup_r+0x54>
 8003aa8:	2309      	movs	r3, #9
 8003aaa:	2001      	movs	r0, #1
 8003aac:	6033      	str	r3, [r6, #0]
 8003aae:	3337      	adds	r3, #55	; 0x37
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	81a3      	strh	r3, [r4, #12]
 8003ab4:	4240      	negs	r0, r0
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <__swsetup_r+0xe8>)
 8003aba:	429c      	cmp	r4, r3
 8003abc:	d101      	bne.n	8003ac2 <__swsetup_r+0x4a>
 8003abe:	68ac      	ldr	r4, [r5, #8]
 8003ac0:	e7eb      	b.n	8003a9a <__swsetup_r+0x22>
 8003ac2:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <__swsetup_r+0xec>)
 8003ac4:	429c      	cmp	r4, r3
 8003ac6:	d1e8      	bne.n	8003a9a <__swsetup_r+0x22>
 8003ac8:	68ec      	ldr	r4, [r5, #12]
 8003aca:	e7e6      	b.n	8003a9a <__swsetup_r+0x22>
 8003acc:	075b      	lsls	r3, r3, #29
 8003ace:	d513      	bpl.n	8003af8 <__swsetup_r+0x80>
 8003ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ad2:	2900      	cmp	r1, #0
 8003ad4:	d008      	beq.n	8003ae8 <__swsetup_r+0x70>
 8003ad6:	0023      	movs	r3, r4
 8003ad8:	3344      	adds	r3, #68	; 0x44
 8003ada:	4299      	cmp	r1, r3
 8003adc:	d002      	beq.n	8003ae4 <__swsetup_r+0x6c>
 8003ade:	0030      	movs	r0, r6
 8003ae0:	f7ff fb9c 	bl	800321c <_free_r>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6363      	str	r3, [r4, #52]	; 0x34
 8003ae8:	2224      	movs	r2, #36	; 0x24
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	4393      	bics	r3, r2
 8003aee:	81a3      	strh	r3, [r4, #12]
 8003af0:	2300      	movs	r3, #0
 8003af2:	6063      	str	r3, [r4, #4]
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	2308      	movs	r3, #8
 8003afa:	89a2      	ldrh	r2, [r4, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	81a3      	strh	r3, [r4, #12]
 8003b00:	6923      	ldr	r3, [r4, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <__swsetup_r+0xa6>
 8003b06:	21a0      	movs	r1, #160	; 0xa0
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	0089      	lsls	r1, r1, #2
 8003b0e:	0092      	lsls	r2, r2, #2
 8003b10:	400b      	ands	r3, r1
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <__swsetup_r+0xa6>
 8003b16:	0021      	movs	r1, r4
 8003b18:	0030      	movs	r0, r6
 8003b1a:	f000 fa27 	bl	8003f6c <__smakebuf_r>
 8003b1e:	220c      	movs	r2, #12
 8003b20:	5ea3      	ldrsh	r3, [r4, r2]
 8003b22:	2001      	movs	r0, #1
 8003b24:	001a      	movs	r2, r3
 8003b26:	b299      	uxth	r1, r3
 8003b28:	4002      	ands	r2, r0
 8003b2a:	4203      	tst	r3, r0
 8003b2c:	d00f      	beq.n	8003b4e <__swsetup_r+0xd6>
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60a2      	str	r2, [r4, #8]
 8003b32:	6962      	ldr	r2, [r4, #20]
 8003b34:	4252      	negs	r2, r2
 8003b36:	61a2      	str	r2, [r4, #24]
 8003b38:	2000      	movs	r0, #0
 8003b3a:	6922      	ldr	r2, [r4, #16]
 8003b3c:	4282      	cmp	r2, r0
 8003b3e:	d1ba      	bne.n	8003ab6 <__swsetup_r+0x3e>
 8003b40:	060a      	lsls	r2, r1, #24
 8003b42:	d5b8      	bpl.n	8003ab6 <__swsetup_r+0x3e>
 8003b44:	2240      	movs	r2, #64	; 0x40
 8003b46:	4313      	orrs	r3, r2
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	3801      	subs	r0, #1
 8003b4c:	e7b3      	b.n	8003ab6 <__swsetup_r+0x3e>
 8003b4e:	0788      	lsls	r0, r1, #30
 8003b50:	d400      	bmi.n	8003b54 <__swsetup_r+0xdc>
 8003b52:	6962      	ldr	r2, [r4, #20]
 8003b54:	60a2      	str	r2, [r4, #8]
 8003b56:	e7ef      	b.n	8003b38 <__swsetup_r+0xc0>
 8003b58:	2000000c 	.word	0x2000000c
 8003b5c:	080043e4 	.word	0x080043e4
 8003b60:	08004404 	.word	0x08004404
 8003b64:	080043c4 	.word	0x080043c4

08003b68 <abort>:
 8003b68:	2006      	movs	r0, #6
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	f000 fa88 	bl	8004080 <raise>
 8003b70:	2001      	movs	r0, #1
 8003b72:	f7fd fe32 	bl	80017da <_exit>
	...

08003b78 <__sflush_r>:
 8003b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b7a:	898b      	ldrh	r3, [r1, #12]
 8003b7c:	0005      	movs	r5, r0
 8003b7e:	000c      	movs	r4, r1
 8003b80:	071a      	lsls	r2, r3, #28
 8003b82:	d45f      	bmi.n	8003c44 <__sflush_r+0xcc>
 8003b84:	684a      	ldr	r2, [r1, #4]
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	dc04      	bgt.n	8003b94 <__sflush_r+0x1c>
 8003b8a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	dc01      	bgt.n	8003b94 <__sflush_r+0x1c>
 8003b90:	2000      	movs	r0, #0
 8003b92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b96:	2f00      	cmp	r7, #0
 8003b98:	d0fa      	beq.n	8003b90 <__sflush_r+0x18>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	682e      	ldr	r6, [r5, #0]
 8003ba0:	602a      	str	r2, [r5, #0]
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	0149      	lsls	r1, r1, #5
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	420b      	tst	r3, r1
 8003baa:	d034      	beq.n	8003c16 <__sflush_r+0x9e>
 8003bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	075b      	lsls	r3, r3, #29
 8003bb2:	d506      	bpl.n	8003bc2 <__sflush_r+0x4a>
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	1ac0      	subs	r0, r0, r3
 8003bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <__sflush_r+0x4a>
 8003bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bc0:	1ac0      	subs	r0, r0, r3
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	6a21      	ldr	r1, [r4, #32]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	0028      	movs	r0, r5
 8003bca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003bcc:	47b8      	blx	r7
 8003bce:	89a1      	ldrh	r1, [r4, #12]
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d106      	bne.n	8003be2 <__sflush_r+0x6a>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	2b1d      	cmp	r3, #29
 8003bd8:	d831      	bhi.n	8003c3e <__sflush_r+0xc6>
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <__sflush_r+0x114>)
 8003bdc:	40da      	lsrs	r2, r3
 8003bde:	07d3      	lsls	r3, r2, #31
 8003be0:	d52d      	bpl.n	8003c3e <__sflush_r+0xc6>
 8003be2:	2300      	movs	r3, #0
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	04cb      	lsls	r3, r1, #19
 8003bec:	d505      	bpl.n	8003bfa <__sflush_r+0x82>
 8003bee:	1c43      	adds	r3, r0, #1
 8003bf0:	d102      	bne.n	8003bf8 <__sflush_r+0x80>
 8003bf2:	682b      	ldr	r3, [r5, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d100      	bne.n	8003bfa <__sflush_r+0x82>
 8003bf8:	6560      	str	r0, [r4, #84]	; 0x54
 8003bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bfc:	602e      	str	r6, [r5, #0]
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	d0c6      	beq.n	8003b90 <__sflush_r+0x18>
 8003c02:	0023      	movs	r3, r4
 8003c04:	3344      	adds	r3, #68	; 0x44
 8003c06:	4299      	cmp	r1, r3
 8003c08:	d002      	beq.n	8003c10 <__sflush_r+0x98>
 8003c0a:	0028      	movs	r0, r5
 8003c0c:	f7ff fb06 	bl	800321c <_free_r>
 8003c10:	2000      	movs	r0, #0
 8003c12:	6360      	str	r0, [r4, #52]	; 0x34
 8003c14:	e7bd      	b.n	8003b92 <__sflush_r+0x1a>
 8003c16:	2301      	movs	r3, #1
 8003c18:	0028      	movs	r0, r5
 8003c1a:	6a21      	ldr	r1, [r4, #32]
 8003c1c:	47b8      	blx	r7
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	d1c5      	bne.n	8003bae <__sflush_r+0x36>
 8003c22:	682b      	ldr	r3, [r5, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0c2      	beq.n	8003bae <__sflush_r+0x36>
 8003c28:	2b1d      	cmp	r3, #29
 8003c2a:	d001      	beq.n	8003c30 <__sflush_r+0xb8>
 8003c2c:	2b16      	cmp	r3, #22
 8003c2e:	d101      	bne.n	8003c34 <__sflush_r+0xbc>
 8003c30:	602e      	str	r6, [r5, #0]
 8003c32:	e7ad      	b.n	8003b90 <__sflush_r+0x18>
 8003c34:	2340      	movs	r3, #64	; 0x40
 8003c36:	89a2      	ldrh	r2, [r4, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	e7a9      	b.n	8003b92 <__sflush_r+0x1a>
 8003c3e:	2340      	movs	r3, #64	; 0x40
 8003c40:	430b      	orrs	r3, r1
 8003c42:	e7fa      	b.n	8003c3a <__sflush_r+0xc2>
 8003c44:	690f      	ldr	r7, [r1, #16]
 8003c46:	2f00      	cmp	r7, #0
 8003c48:	d0a2      	beq.n	8003b90 <__sflush_r+0x18>
 8003c4a:	680a      	ldr	r2, [r1, #0]
 8003c4c:	600f      	str	r7, [r1, #0]
 8003c4e:	1bd2      	subs	r2, r2, r7
 8003c50:	9201      	str	r2, [sp, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	079b      	lsls	r3, r3, #30
 8003c56:	d100      	bne.n	8003c5a <__sflush_r+0xe2>
 8003c58:	694a      	ldr	r2, [r1, #20]
 8003c5a:	60a2      	str	r2, [r4, #8]
 8003c5c:	9b01      	ldr	r3, [sp, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	dc00      	bgt.n	8003c64 <__sflush_r+0xec>
 8003c62:	e795      	b.n	8003b90 <__sflush_r+0x18>
 8003c64:	003a      	movs	r2, r7
 8003c66:	0028      	movs	r0, r5
 8003c68:	9b01      	ldr	r3, [sp, #4]
 8003c6a:	6a21      	ldr	r1, [r4, #32]
 8003c6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c6e:	47b0      	blx	r6
 8003c70:	2800      	cmp	r0, #0
 8003c72:	dc06      	bgt.n	8003c82 <__sflush_r+0x10a>
 8003c74:	2340      	movs	r3, #64	; 0x40
 8003c76:	2001      	movs	r0, #1
 8003c78:	89a2      	ldrh	r2, [r4, #12]
 8003c7a:	4240      	negs	r0, r0
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	e787      	b.n	8003b92 <__sflush_r+0x1a>
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	183f      	adds	r7, r7, r0
 8003c86:	1a1b      	subs	r3, r3, r0
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	e7e7      	b.n	8003c5c <__sflush_r+0xe4>
 8003c8c:	20400001 	.word	0x20400001

08003c90 <_fflush_r>:
 8003c90:	690b      	ldr	r3, [r1, #16]
 8003c92:	b570      	push	{r4, r5, r6, lr}
 8003c94:	0005      	movs	r5, r0
 8003c96:	000c      	movs	r4, r1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <_fflush_r+0x12>
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	0028      	movs	r0, r5
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d004      	beq.n	8003cb0 <_fflush_r+0x20>
 8003ca6:	6983      	ldr	r3, [r0, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <_fflush_r+0x20>
 8003cac:	f000 f892 	bl	8003dd4 <__sinit>
 8003cb0:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <_fflush_r+0x74>)
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	d11b      	bne.n	8003cee <_fflush_r+0x5e>
 8003cb6:	686c      	ldr	r4, [r5, #4]
 8003cb8:	220c      	movs	r2, #12
 8003cba:	5ea3      	ldrsh	r3, [r4, r2]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ed      	beq.n	8003c9c <_fflush_r+0xc>
 8003cc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cc2:	07d2      	lsls	r2, r2, #31
 8003cc4:	d404      	bmi.n	8003cd0 <_fflush_r+0x40>
 8003cc6:	059b      	lsls	r3, r3, #22
 8003cc8:	d402      	bmi.n	8003cd0 <_fflush_r+0x40>
 8003cca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ccc:	f000 f923 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8003cd0:	0028      	movs	r0, r5
 8003cd2:	0021      	movs	r1, r4
 8003cd4:	f7ff ff50 	bl	8003b78 <__sflush_r>
 8003cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cda:	0005      	movs	r5, r0
 8003cdc:	07db      	lsls	r3, r3, #31
 8003cde:	d4de      	bmi.n	8003c9e <_fflush_r+0xe>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	059b      	lsls	r3, r3, #22
 8003ce4:	d4db      	bmi.n	8003c9e <_fflush_r+0xe>
 8003ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce8:	f000 f916 	bl	8003f18 <__retarget_lock_release_recursive>
 8003cec:	e7d7      	b.n	8003c9e <_fflush_r+0xe>
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <_fflush_r+0x78>)
 8003cf0:	429c      	cmp	r4, r3
 8003cf2:	d101      	bne.n	8003cf8 <_fflush_r+0x68>
 8003cf4:	68ac      	ldr	r4, [r5, #8]
 8003cf6:	e7df      	b.n	8003cb8 <_fflush_r+0x28>
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <_fflush_r+0x7c>)
 8003cfa:	429c      	cmp	r4, r3
 8003cfc:	d1dc      	bne.n	8003cb8 <_fflush_r+0x28>
 8003cfe:	68ec      	ldr	r4, [r5, #12]
 8003d00:	e7da      	b.n	8003cb8 <_fflush_r+0x28>
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	080043e4 	.word	0x080043e4
 8003d08:	08004404 	.word	0x08004404
 8003d0c:	080043c4 	.word	0x080043c4

08003d10 <std>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b510      	push	{r4, lr}
 8003d14:	0004      	movs	r4, r0
 8003d16:	6003      	str	r3, [r0, #0]
 8003d18:	6043      	str	r3, [r0, #4]
 8003d1a:	6083      	str	r3, [r0, #8]
 8003d1c:	8181      	strh	r1, [r0, #12]
 8003d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d20:	0019      	movs	r1, r3
 8003d22:	81c2      	strh	r2, [r0, #14]
 8003d24:	6103      	str	r3, [r0, #16]
 8003d26:	6143      	str	r3, [r0, #20]
 8003d28:	6183      	str	r3, [r0, #24]
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	305c      	adds	r0, #92	; 0x5c
 8003d2e:	f7ff f9f7 	bl	8003120 <memset>
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <std+0x38>)
 8003d34:	6224      	str	r4, [r4, #32]
 8003d36:	6263      	str	r3, [r4, #36]	; 0x24
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <std+0x3c>)
 8003d3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <std+0x40>)
 8003d3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <std+0x44>)
 8003d42:	6323      	str	r3, [r4, #48]	; 0x30
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	080040c1 	.word	0x080040c1
 8003d4c:	080040e9 	.word	0x080040e9
 8003d50:	08004121 	.word	0x08004121
 8003d54:	0800414d 	.word	0x0800414d

08003d58 <_cleanup_r>:
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	4902      	ldr	r1, [pc, #8]	; (8003d64 <_cleanup_r+0xc>)
 8003d5c:	f000 f8ba 	bl	8003ed4 <_fwalk_reent>
 8003d60:	bd10      	pop	{r4, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	08003c91 	.word	0x08003c91

08003d68 <__sfmoreglue>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	2568      	movs	r5, #104	; 0x68
 8003d6c:	1e4a      	subs	r2, r1, #1
 8003d6e:	4355      	muls	r5, r2
 8003d70:	000e      	movs	r6, r1
 8003d72:	0029      	movs	r1, r5
 8003d74:	3174      	adds	r1, #116	; 0x74
 8003d76:	f7ff fabd 	bl	80032f4 <_malloc_r>
 8003d7a:	1e04      	subs	r4, r0, #0
 8003d7c:	d008      	beq.n	8003d90 <__sfmoreglue+0x28>
 8003d7e:	2100      	movs	r1, #0
 8003d80:	002a      	movs	r2, r5
 8003d82:	6001      	str	r1, [r0, #0]
 8003d84:	6046      	str	r6, [r0, #4]
 8003d86:	300c      	adds	r0, #12
 8003d88:	60a0      	str	r0, [r4, #8]
 8003d8a:	3268      	adds	r2, #104	; 0x68
 8003d8c:	f7ff f9c8 	bl	8003120 <memset>
 8003d90:	0020      	movs	r0, r4
 8003d92:	bd70      	pop	{r4, r5, r6, pc}

08003d94 <__sfp_lock_acquire>:
 8003d94:	b510      	push	{r4, lr}
 8003d96:	4802      	ldr	r0, [pc, #8]	; (8003da0 <__sfp_lock_acquire+0xc>)
 8003d98:	f000 f8bd 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	2000011d 	.word	0x2000011d

08003da4 <__sfp_lock_release>:
 8003da4:	b510      	push	{r4, lr}
 8003da6:	4802      	ldr	r0, [pc, #8]	; (8003db0 <__sfp_lock_release+0xc>)
 8003da8:	f000 f8b6 	bl	8003f18 <__retarget_lock_release_recursive>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	2000011d 	.word	0x2000011d

08003db4 <__sinit_lock_acquire>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <__sinit_lock_acquire+0xc>)
 8003db8:	f000 f8ad 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	2000011e 	.word	0x2000011e

08003dc4 <__sinit_lock_release>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <__sinit_lock_release+0xc>)
 8003dc8:	f000 f8a6 	bl	8003f18 <__retarget_lock_release_recursive>
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	2000011e 	.word	0x2000011e

08003dd4 <__sinit>:
 8003dd4:	b513      	push	{r0, r1, r4, lr}
 8003dd6:	0004      	movs	r4, r0
 8003dd8:	f7ff ffec 	bl	8003db4 <__sinit_lock_acquire>
 8003ddc:	69a3      	ldr	r3, [r4, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <__sinit+0x14>
 8003de2:	f7ff ffef 	bl	8003dc4 <__sinit_lock_release>
 8003de6:	bd13      	pop	{r0, r1, r4, pc}
 8003de8:	64a3      	str	r3, [r4, #72]	; 0x48
 8003dea:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003dec:	6523      	str	r3, [r4, #80]	; 0x50
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <__sinit+0x68>)
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <__sinit+0x6c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	d101      	bne.n	8003e00 <__sinit+0x2c>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	61a3      	str	r3, [r4, #24]
 8003e00:	0020      	movs	r0, r4
 8003e02:	f000 f81f 	bl	8003e44 <__sfp>
 8003e06:	6060      	str	r0, [r4, #4]
 8003e08:	0020      	movs	r0, r4
 8003e0a:	f000 f81b 	bl	8003e44 <__sfp>
 8003e0e:	60a0      	str	r0, [r4, #8]
 8003e10:	0020      	movs	r0, r4
 8003e12:	f000 f817 	bl	8003e44 <__sfp>
 8003e16:	2200      	movs	r2, #0
 8003e18:	2104      	movs	r1, #4
 8003e1a:	60e0      	str	r0, [r4, #12]
 8003e1c:	6860      	ldr	r0, [r4, #4]
 8003e1e:	f7ff ff77 	bl	8003d10 <std>
 8003e22:	2201      	movs	r2, #1
 8003e24:	2109      	movs	r1, #9
 8003e26:	68a0      	ldr	r0, [r4, #8]
 8003e28:	f7ff ff72 	bl	8003d10 <std>
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	2112      	movs	r1, #18
 8003e30:	68e0      	ldr	r0, [r4, #12]
 8003e32:	f7ff ff6d 	bl	8003d10 <std>
 8003e36:	2301      	movs	r3, #1
 8003e38:	61a3      	str	r3, [r4, #24]
 8003e3a:	e7d2      	b.n	8003de2 <__sinit+0xe>
 8003e3c:	080042dc 	.word	0x080042dc
 8003e40:	08003d59 	.word	0x08003d59

08003e44 <__sfp>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	0007      	movs	r7, r0
 8003e48:	f7ff ffa4 	bl	8003d94 <__sfp_lock_acquire>
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <__sfp+0x88>)
 8003e4e:	681e      	ldr	r6, [r3, #0]
 8003e50:	69b3      	ldr	r3, [r6, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <__sfp+0x18>
 8003e56:	0030      	movs	r0, r6
 8003e58:	f7ff ffbc 	bl	8003dd4 <__sinit>
 8003e5c:	3648      	adds	r6, #72	; 0x48
 8003e5e:	68b4      	ldr	r4, [r6, #8]
 8003e60:	6873      	ldr	r3, [r6, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	d504      	bpl.n	8003e70 <__sfp+0x2c>
 8003e66:	6833      	ldr	r3, [r6, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d022      	beq.n	8003eb2 <__sfp+0x6e>
 8003e6c:	6836      	ldr	r6, [r6, #0]
 8003e6e:	e7f6      	b.n	8003e5e <__sfp+0x1a>
 8003e70:	220c      	movs	r2, #12
 8003e72:	5ea5      	ldrsh	r5, [r4, r2]
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	d11a      	bne.n	8003eae <__sfp+0x6a>
 8003e78:	0020      	movs	r0, r4
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <__sfp+0x8c>)
 8003e7c:	3058      	adds	r0, #88	; 0x58
 8003e7e:	60e3      	str	r3, [r4, #12]
 8003e80:	6665      	str	r5, [r4, #100]	; 0x64
 8003e82:	f000 f847 	bl	8003f14 <__retarget_lock_init_recursive>
 8003e86:	f7ff ff8d 	bl	8003da4 <__sfp_lock_release>
 8003e8a:	0020      	movs	r0, r4
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	0029      	movs	r1, r5
 8003e90:	6025      	str	r5, [r4, #0]
 8003e92:	60a5      	str	r5, [r4, #8]
 8003e94:	6065      	str	r5, [r4, #4]
 8003e96:	6125      	str	r5, [r4, #16]
 8003e98:	6165      	str	r5, [r4, #20]
 8003e9a:	61a5      	str	r5, [r4, #24]
 8003e9c:	305c      	adds	r0, #92	; 0x5c
 8003e9e:	f7ff f93f 	bl	8003120 <memset>
 8003ea2:	6365      	str	r5, [r4, #52]	; 0x34
 8003ea4:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ea6:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ea8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003eaa:	0020      	movs	r0, r4
 8003eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eae:	3468      	adds	r4, #104	; 0x68
 8003eb0:	e7d7      	b.n	8003e62 <__sfp+0x1e>
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	0038      	movs	r0, r7
 8003eb6:	f7ff ff57 	bl	8003d68 <__sfmoreglue>
 8003eba:	1e04      	subs	r4, r0, #0
 8003ebc:	6030      	str	r0, [r6, #0]
 8003ebe:	d1d5      	bne.n	8003e6c <__sfp+0x28>
 8003ec0:	f7ff ff70 	bl	8003da4 <__sfp_lock_release>
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	e7ef      	b.n	8003eaa <__sfp+0x66>
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	080042dc 	.word	0x080042dc
 8003ed0:	ffff0001 	.word	0xffff0001

08003ed4 <_fwalk_reent>:
 8003ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ed6:	0004      	movs	r4, r0
 8003ed8:	0006      	movs	r6, r0
 8003eda:	2700      	movs	r7, #0
 8003edc:	9101      	str	r1, [sp, #4]
 8003ede:	3448      	adds	r4, #72	; 0x48
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	68a5      	ldr	r5, [r4, #8]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	9b00      	ldr	r3, [sp, #0]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	d504      	bpl.n	8003ef8 <_fwalk_reent+0x24>
 8003eee:	6824      	ldr	r4, [r4, #0]
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	d1f5      	bne.n	8003ee0 <_fwalk_reent+0xc>
 8003ef4:	0038      	movs	r0, r7
 8003ef6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ef8:	89ab      	ldrh	r3, [r5, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d908      	bls.n	8003f10 <_fwalk_reent+0x3c>
 8003efe:	220e      	movs	r2, #14
 8003f00:	5eab      	ldrsh	r3, [r5, r2]
 8003f02:	3301      	adds	r3, #1
 8003f04:	d004      	beq.n	8003f10 <_fwalk_reent+0x3c>
 8003f06:	0029      	movs	r1, r5
 8003f08:	0030      	movs	r0, r6
 8003f0a:	9b01      	ldr	r3, [sp, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	4307      	orrs	r7, r0
 8003f10:	3568      	adds	r5, #104	; 0x68
 8003f12:	e7e8      	b.n	8003ee6 <_fwalk_reent+0x12>

08003f14 <__retarget_lock_init_recursive>:
 8003f14:	4770      	bx	lr

08003f16 <__retarget_lock_acquire_recursive>:
 8003f16:	4770      	bx	lr

08003f18 <__retarget_lock_release_recursive>:
 8003f18:	4770      	bx	lr
	...

08003f1c <__swhatbuf_r>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	000e      	movs	r6, r1
 8003f20:	001d      	movs	r5, r3
 8003f22:	230e      	movs	r3, #14
 8003f24:	5ec9      	ldrsh	r1, [r1, r3]
 8003f26:	0014      	movs	r4, r2
 8003f28:	b096      	sub	sp, #88	; 0x58
 8003f2a:	2900      	cmp	r1, #0
 8003f2c:	da08      	bge.n	8003f40 <__swhatbuf_r+0x24>
 8003f2e:	220c      	movs	r2, #12
 8003f30:	5eb3      	ldrsh	r3, [r6, r2]
 8003f32:	2200      	movs	r2, #0
 8003f34:	602a      	str	r2, [r5, #0]
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	d411      	bmi.n	8003f5e <__swhatbuf_r+0x42>
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	e00f      	b.n	8003f60 <__swhatbuf_r+0x44>
 8003f40:	466a      	mov	r2, sp
 8003f42:	f000 f92f 	bl	80041a4 <_fstat_r>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	dbf1      	blt.n	8003f2e <__swhatbuf_r+0x12>
 8003f4a:	23f0      	movs	r3, #240	; 0xf0
 8003f4c:	9901      	ldr	r1, [sp, #4]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	4019      	ands	r1, r3
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <__swhatbuf_r+0x4c>)
 8003f54:	18c9      	adds	r1, r1, r3
 8003f56:	424b      	negs	r3, r1
 8003f58:	4159      	adcs	r1, r3
 8003f5a:	6029      	str	r1, [r5, #0]
 8003f5c:	e7ed      	b.n	8003f3a <__swhatbuf_r+0x1e>
 8003f5e:	2340      	movs	r3, #64	; 0x40
 8003f60:	2000      	movs	r0, #0
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	b016      	add	sp, #88	; 0x58
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	ffffe000 	.word	0xffffe000

08003f6c <__smakebuf_r>:
 8003f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f6e:	2602      	movs	r6, #2
 8003f70:	898b      	ldrh	r3, [r1, #12]
 8003f72:	0005      	movs	r5, r0
 8003f74:	000c      	movs	r4, r1
 8003f76:	4233      	tst	r3, r6
 8003f78:	d006      	beq.n	8003f88 <__smakebuf_r+0x1c>
 8003f7a:	0023      	movs	r3, r4
 8003f7c:	3347      	adds	r3, #71	; 0x47
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	6123      	str	r3, [r4, #16]
 8003f82:	2301      	movs	r3, #1
 8003f84:	6163      	str	r3, [r4, #20]
 8003f86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f88:	466a      	mov	r2, sp
 8003f8a:	ab01      	add	r3, sp, #4
 8003f8c:	f7ff ffc6 	bl	8003f1c <__swhatbuf_r>
 8003f90:	9900      	ldr	r1, [sp, #0]
 8003f92:	0007      	movs	r7, r0
 8003f94:	0028      	movs	r0, r5
 8003f96:	f7ff f9ad 	bl	80032f4 <_malloc_r>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d108      	bne.n	8003fb0 <__smakebuf_r+0x44>
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	5ea3      	ldrsh	r3, [r4, r2]
 8003fa2:	059a      	lsls	r2, r3, #22
 8003fa4:	d4ef      	bmi.n	8003f86 <__smakebuf_r+0x1a>
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	4393      	bics	r3, r2
 8003faa:	431e      	orrs	r6, r3
 8003fac:	81a6      	strh	r6, [r4, #12]
 8003fae:	e7e4      	b.n	8003f7a <__smakebuf_r+0xe>
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <__smakebuf_r+0x84>)
 8003fb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	89a2      	ldrh	r2, [r4, #12]
 8003fb8:	6020      	str	r0, [r4, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	81a3      	strh	r3, [r4, #12]
 8003fbe:	9b00      	ldr	r3, [sp, #0]
 8003fc0:	6120      	str	r0, [r4, #16]
 8003fc2:	6163      	str	r3, [r4, #20]
 8003fc4:	9b01      	ldr	r3, [sp, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <__smakebuf_r+0x7a>
 8003fca:	0028      	movs	r0, r5
 8003fcc:	230e      	movs	r3, #14
 8003fce:	5ee1      	ldrsh	r1, [r4, r3]
 8003fd0:	f000 f8fa 	bl	80041c8 <_isatty_r>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d006      	beq.n	8003fe6 <__smakebuf_r+0x7a>
 8003fd8:	2203      	movs	r2, #3
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	4393      	bics	r3, r2
 8003fde:	001a      	movs	r2, r3
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	81a3      	strh	r3, [r4, #12]
 8003fe6:	89a0      	ldrh	r0, [r4, #12]
 8003fe8:	4307      	orrs	r7, r0
 8003fea:	81a7      	strh	r7, [r4, #12]
 8003fec:	e7cb      	b.n	8003f86 <__smakebuf_r+0x1a>
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	08003d59 	.word	0x08003d59

08003ff4 <memchr>:
 8003ff4:	b2c9      	uxtb	r1, r1
 8003ff6:	1882      	adds	r2, r0, r2
 8003ff8:	4290      	cmp	r0, r2
 8003ffa:	d101      	bne.n	8004000 <memchr+0xc>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4770      	bx	lr
 8004000:	7803      	ldrb	r3, [r0, #0]
 8004002:	428b      	cmp	r3, r1
 8004004:	d0fb      	beq.n	8003ffe <memchr+0xa>
 8004006:	3001      	adds	r0, #1
 8004008:	e7f6      	b.n	8003ff8 <memchr+0x4>
	...

0800400c <__malloc_lock>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4802      	ldr	r0, [pc, #8]	; (8004018 <__malloc_lock+0xc>)
 8004010:	f7ff ff81 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8004014:	bd10      	pop	{r4, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	2000011c 	.word	0x2000011c

0800401c <__malloc_unlock>:
 800401c:	b510      	push	{r4, lr}
 800401e:	4802      	ldr	r0, [pc, #8]	; (8004028 <__malloc_unlock+0xc>)
 8004020:	f7ff ff7a 	bl	8003f18 <__retarget_lock_release_recursive>
 8004024:	bd10      	pop	{r4, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	2000011c 	.word	0x2000011c

0800402c <_raise_r>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	0004      	movs	r4, r0
 8004030:	000d      	movs	r5, r1
 8004032:	291f      	cmp	r1, #31
 8004034:	d904      	bls.n	8004040 <_raise_r+0x14>
 8004036:	2316      	movs	r3, #22
 8004038:	6003      	str	r3, [r0, #0]
 800403a:	2001      	movs	r0, #1
 800403c:	4240      	negs	r0, r0
 800403e:	bd70      	pop	{r4, r5, r6, pc}
 8004040:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <_raise_r+0x24>
 8004046:	008a      	lsls	r2, r1, #2
 8004048:	189b      	adds	r3, r3, r2
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2a00      	cmp	r2, #0
 800404e:	d108      	bne.n	8004062 <_raise_r+0x36>
 8004050:	0020      	movs	r0, r4
 8004052:	f000 f831 	bl	80040b8 <_getpid_r>
 8004056:	002a      	movs	r2, r5
 8004058:	0001      	movs	r1, r0
 800405a:	0020      	movs	r0, r4
 800405c:	f000 f81a 	bl	8004094 <_kill_r>
 8004060:	e7ed      	b.n	800403e <_raise_r+0x12>
 8004062:	2000      	movs	r0, #0
 8004064:	2a01      	cmp	r2, #1
 8004066:	d0ea      	beq.n	800403e <_raise_r+0x12>
 8004068:	1c51      	adds	r1, r2, #1
 800406a:	d103      	bne.n	8004074 <_raise_r+0x48>
 800406c:	2316      	movs	r3, #22
 800406e:	3001      	adds	r0, #1
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	e7e4      	b.n	800403e <_raise_r+0x12>
 8004074:	2400      	movs	r4, #0
 8004076:	0028      	movs	r0, r5
 8004078:	601c      	str	r4, [r3, #0]
 800407a:	4790      	blx	r2
 800407c:	0020      	movs	r0, r4
 800407e:	e7de      	b.n	800403e <_raise_r+0x12>

08004080 <raise>:
 8004080:	b510      	push	{r4, lr}
 8004082:	4b03      	ldr	r3, [pc, #12]	; (8004090 <raise+0x10>)
 8004084:	0001      	movs	r1, r0
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f7ff ffd0 	bl	800402c <_raise_r>
 800408c:	bd10      	pop	{r4, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	2000000c 	.word	0x2000000c

08004094 <_kill_r>:
 8004094:	2300      	movs	r3, #0
 8004096:	b570      	push	{r4, r5, r6, lr}
 8004098:	4d06      	ldr	r5, [pc, #24]	; (80040b4 <_kill_r+0x20>)
 800409a:	0004      	movs	r4, r0
 800409c:	0008      	movs	r0, r1
 800409e:	0011      	movs	r1, r2
 80040a0:	602b      	str	r3, [r5, #0]
 80040a2:	f7fd fb8a 	bl	80017ba <_kill>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	d103      	bne.n	80040b2 <_kill_r+0x1e>
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d000      	beq.n	80040b2 <_kill_r+0x1e>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	20000120 	.word	0x20000120

080040b8 <_getpid_r>:
 80040b8:	b510      	push	{r4, lr}
 80040ba:	f7fd fb78 	bl	80017ae <_getpid>
 80040be:	bd10      	pop	{r4, pc}

080040c0 <__sread>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	000c      	movs	r4, r1
 80040c4:	250e      	movs	r5, #14
 80040c6:	5f49      	ldrsh	r1, [r1, r5]
 80040c8:	f000 f8a4 	bl	8004214 <_read_r>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	db03      	blt.n	80040d8 <__sread+0x18>
 80040d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040d2:	181b      	adds	r3, r3, r0
 80040d4:	6563      	str	r3, [r4, #84]	; 0x54
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	4a02      	ldr	r2, [pc, #8]	; (80040e4 <__sread+0x24>)
 80040dc:	4013      	ands	r3, r2
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	e7f9      	b.n	80040d6 <__sread+0x16>
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	ffffefff 	.word	0xffffefff

080040e8 <__swrite>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	001f      	movs	r7, r3
 80040ec:	898b      	ldrh	r3, [r1, #12]
 80040ee:	0005      	movs	r5, r0
 80040f0:	000c      	movs	r4, r1
 80040f2:	0016      	movs	r6, r2
 80040f4:	05db      	lsls	r3, r3, #23
 80040f6:	d505      	bpl.n	8004104 <__swrite+0x1c>
 80040f8:	230e      	movs	r3, #14
 80040fa:	5ec9      	ldrsh	r1, [r1, r3]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2302      	movs	r3, #2
 8004100:	f000 f874 	bl	80041ec <_lseek_r>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	4a05      	ldr	r2, [pc, #20]	; (800411c <__swrite+0x34>)
 8004108:	0028      	movs	r0, r5
 800410a:	4013      	ands	r3, r2
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	0032      	movs	r2, r6
 8004110:	230e      	movs	r3, #14
 8004112:	5ee1      	ldrsh	r1, [r4, r3]
 8004114:	003b      	movs	r3, r7
 8004116:	f000 f81f 	bl	8004158 <_write_r>
 800411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411c:	ffffefff 	.word	0xffffefff

08004120 <__sseek>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	000c      	movs	r4, r1
 8004124:	250e      	movs	r5, #14
 8004126:	5f49      	ldrsh	r1, [r1, r5]
 8004128:	f000 f860 	bl	80041ec <_lseek_r>
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	1c42      	adds	r2, r0, #1
 8004130:	d103      	bne.n	800413a <__sseek+0x1a>
 8004132:	4a05      	ldr	r2, [pc, #20]	; (8004148 <__sseek+0x28>)
 8004134:	4013      	ands	r3, r2
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	bd70      	pop	{r4, r5, r6, pc}
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	0152      	lsls	r2, r2, #5
 800413e:	4313      	orrs	r3, r2
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	6560      	str	r0, [r4, #84]	; 0x54
 8004144:	e7f8      	b.n	8004138 <__sseek+0x18>
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	ffffefff 	.word	0xffffefff

0800414c <__sclose>:
 800414c:	b510      	push	{r4, lr}
 800414e:	230e      	movs	r3, #14
 8004150:	5ec9      	ldrsh	r1, [r1, r3]
 8004152:	f000 f815 	bl	8004180 <_close_r>
 8004156:	bd10      	pop	{r4, pc}

08004158 <_write_r>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	0004      	movs	r4, r0
 800415c:	0008      	movs	r0, r1
 800415e:	0011      	movs	r1, r2
 8004160:	001a      	movs	r2, r3
 8004162:	2300      	movs	r3, #0
 8004164:	4d05      	ldr	r5, [pc, #20]	; (800417c <_write_r+0x24>)
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	f7fd fb60 	bl	800182c <_write>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d103      	bne.n	8004178 <_write_r+0x20>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d000      	beq.n	8004178 <_write_r+0x20>
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	bd70      	pop	{r4, r5, r6, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	20000120 	.word	0x20000120

08004180 <_close_r>:
 8004180:	2300      	movs	r3, #0
 8004182:	b570      	push	{r4, r5, r6, lr}
 8004184:	4d06      	ldr	r5, [pc, #24]	; (80041a0 <_close_r+0x20>)
 8004186:	0004      	movs	r4, r0
 8004188:	0008      	movs	r0, r1
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	f7fd fb6a 	bl	8001864 <_close>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d103      	bne.n	800419c <_close_r+0x1c>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d000      	beq.n	800419c <_close_r+0x1c>
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	bd70      	pop	{r4, r5, r6, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20000120 	.word	0x20000120

080041a4 <_fstat_r>:
 80041a4:	2300      	movs	r3, #0
 80041a6:	b570      	push	{r4, r5, r6, lr}
 80041a8:	4d06      	ldr	r5, [pc, #24]	; (80041c4 <_fstat_r+0x20>)
 80041aa:	0004      	movs	r4, r0
 80041ac:	0008      	movs	r0, r1
 80041ae:	0011      	movs	r1, r2
 80041b0:	602b      	str	r3, [r5, #0]
 80041b2:	f7fd fb61 	bl	8001878 <_fstat>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	d103      	bne.n	80041c2 <_fstat_r+0x1e>
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d000      	beq.n	80041c2 <_fstat_r+0x1e>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	20000120 	.word	0x20000120

080041c8 <_isatty_r>:
 80041c8:	2300      	movs	r3, #0
 80041ca:	b570      	push	{r4, r5, r6, lr}
 80041cc:	4d06      	ldr	r5, [pc, #24]	; (80041e8 <_isatty_r+0x20>)
 80041ce:	0004      	movs	r4, r0
 80041d0:	0008      	movs	r0, r1
 80041d2:	602b      	str	r3, [r5, #0]
 80041d4:	f7fd fb5e 	bl	8001894 <_isatty>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d103      	bne.n	80041e4 <_isatty_r+0x1c>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d000      	beq.n	80041e4 <_isatty_r+0x1c>
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	bd70      	pop	{r4, r5, r6, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000120 	.word	0x20000120

080041ec <_lseek_r>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	0004      	movs	r4, r0
 80041f0:	0008      	movs	r0, r1
 80041f2:	0011      	movs	r1, r2
 80041f4:	001a      	movs	r2, r3
 80041f6:	2300      	movs	r3, #0
 80041f8:	4d05      	ldr	r5, [pc, #20]	; (8004210 <_lseek_r+0x24>)
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	f7fd fb53 	bl	80018a6 <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d103      	bne.n	800420c <_lseek_r+0x20>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d000      	beq.n	800420c <_lseek_r+0x20>
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	bd70      	pop	{r4, r5, r6, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	20000120 	.word	0x20000120

08004214 <_read_r>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	0004      	movs	r4, r0
 8004218:	0008      	movs	r0, r1
 800421a:	0011      	movs	r1, r2
 800421c:	001a      	movs	r2, r3
 800421e:	2300      	movs	r3, #0
 8004220:	4d05      	ldr	r5, [pc, #20]	; (8004238 <_read_r+0x24>)
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	f7fd fae5 	bl	80017f2 <_read>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d103      	bne.n	8004234 <_read_r+0x20>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d000      	beq.n	8004234 <_read_r+0x20>
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	20000120 	.word	0x20000120

0800423c <_init>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr

08004248 <_fini>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr
