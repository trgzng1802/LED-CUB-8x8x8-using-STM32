
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800683c  0800683c  0001683c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006a2c  08006a2c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a2c  08006a2c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000078  08006aac  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08006aac  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5f7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc5  00000000  00000000  0002e697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00031460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  00032098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6e7  00000000  00000000  00032b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145cf  00000000  00000000  0004e21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d76e  00000000  00000000  000627ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eff5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003164  00000000  00000000  000effac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006824 	.word	0x08006824

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006824 	.word	0x08006824

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <HAL_UART_RxCpltCallback+0x34>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d10b      	bne.n	80002bc <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80002a4:	4908      	ldr	r1, [pc, #32]	; (80002c8 <HAL_UART_RxCpltCallback+0x38>)
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <HAL_UART_RxCpltCallback+0x34>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	0018      	movs	r0, r3
 80002ac:	f002 f882 	bl	80023b4 <HAL_UART_Receive_IT>
		currentEffect = rxData - 48;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <HAL_UART_RxCpltCallback+0x38>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	3b30      	subs	r3, #48	; 0x30
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_UART_RxCpltCallback+0x3c>)
 80002ba:	701a      	strb	r2, [r3, #0]
	}
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000f8 	.word	0x200000f8
 80002c8:	2000017c 	.word	0x2000017c
 80002cc:	20000010 	.word	0x20000010

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fb44 	bl	8000960 <HAL_Init>

  /* USER CODE BEGIN Init */

  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 80002d8:	2390      	movs	r3, #144	; 0x90
 80002da:	05d9      	lsls	r1, r3, #23
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <main+0x48>)
 80002de:	2202      	movs	r2, #2
 80002e0:	0018      	movs	r0, r3
 80002e2:	f003 fabe 	bl	8003862 <Btn_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f81f 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f8eb 	bl	80004c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002ee:	f000 f87b 	bl	80003e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002f2:	f000 f8b7 	bl	8000464 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData, 1);
 80002f6:	4909      	ldr	r1, [pc, #36]	; (800031c <main+0x4c>)
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <main+0x50>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f002 f859 	bl	80023b4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Btn_Handle(&button1);
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <main+0x48>)
 8000304:	0018      	movs	r0, r3
 8000306:	f003 fa1e 	bl	8003746 <Btn_Handle>
	  Led_cube_Handle(currentEffect);
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <main+0x54>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	0018      	movs	r0, r3
 8000310:	f004 fb98 	bl	8004a44 <Led_cube_Handle>
	  Btn_Handle(&button1);
 8000314:	e7f5      	b.n	8000302 <main+0x32>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	20000180 	.word	0x20000180
 800031c:	2000017c 	.word	0x2000017c
 8000320:	200000f8 	.word	0x200000f8
 8000324:	20000010 	.word	0x20000010

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b099      	sub	sp, #100	; 0x64
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	242c      	movs	r4, #44	; 0x2c
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	2334      	movs	r3, #52	; 0x34
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f005 f9b5 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	231c      	movs	r3, #28
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	0018      	movs	r0, r3
 8000344:	2310      	movs	r3, #16
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f005 f9ad 	bl	80056a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	0018      	movs	r0, r3
 8000352:	2318      	movs	r3, #24
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f005 f9a6 	bl	80056a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035c:	0021      	movs	r1, r4
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2201      	movs	r2, #1
 8000362:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2201      	movs	r2, #1
 8000368:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2202      	movs	r2, #2
 800036e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	0252      	lsls	r2, r2, #9
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	0352      	lsls	r2, r2, #13
 800037e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	187b      	adds	r3, r7, r1
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fe4b 	bl	8001024 <HAL_RCC_OscConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000392:	f000 f8ef 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	211c      	movs	r1, #28
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2207      	movs	r2, #7
 800039c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2202      	movs	r2, #2
 80003a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2101      	movs	r1, #1
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f9bb 	bl	8001730 <HAL_RCC_ClockConfig>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003be:	f000 f8d9 	bl	8000574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2201      	movs	r2, #1
 80003c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fb27 	bl	8001a24 <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003da:	f000 f8cb 	bl	8000574 <Error_Handler>
  }
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b019      	add	sp, #100	; 0x64
 80003e4:	bd90      	pop	{r4, r7, pc}
	...

080003e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_SPI1_Init+0x74>)
 80003ee:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <MX_SPI1_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_SPI1_Init+0x74>)
 80003f4:	2282      	movs	r2, #130	; 0x82
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_SPI1_Init+0x74>)
 8000402:	22e0      	movs	r2, #224	; 0xe0
 8000404:	00d2      	lsls	r2, r2, #3
 8000406:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_SPI1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_SPI1_Init+0x74>)
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	0092      	lsls	r2, r2, #2
 800041a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_SPI1_Init+0x74>)
 800041e:	2220      	movs	r2, #32
 8000420:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_SPI1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_SPI1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_SPI1_Init+0x74>)
 8000436:	2207      	movs	r2, #7
 8000438:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_SPI1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_SPI1_Init+0x74>)
 8000448:	0018      	movs	r0, r3
 800044a:	f001 fbd9 	bl	8001c00 <HAL_SPI_Init>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000452:	f000 f88f 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000094 	.word	0x20000094
 8000460:	40013000 	.word	0x40013000

08000464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800046a:	4a15      	ldr	r2, [pc, #84]	; (80004c0 <MX_USART1_UART_Init+0x5c>)
 800046c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000470:	22e1      	movs	r2, #225	; 0xe1
 8000472:	0252      	lsls	r2, r2, #9
 8000474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800048a:	2204      	movs	r2, #4
 800048c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_USART1_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_USART1_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_USART1_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <MX_USART1_UART_Init+0x58>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 ff2f 	bl	800230c <HAL_UART_Init>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004b2:	f000 f85f 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000f8 	.word	0x200000f8
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	240c      	movs	r4, #12
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2314      	movs	r3, #20
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f005 f8e7 	bl	80056a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b25      	ldr	r3, [pc, #148]	; (8000570 <MX_GPIO_Init+0xac>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b24      	ldr	r3, [pc, #144]	; (8000570 <MX_GPIO_Init+0xac>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	03c9      	lsls	r1, r1, #15
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <MX_GPIO_Init+0xac>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	03db      	lsls	r3, r3, #15
 80004f0:	4013      	ands	r3, r2
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_GPIO_Init+0xac>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_GPIO_Init+0xac>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0289      	lsls	r1, r1, #10
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_GPIO_Init+0xac>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	029b      	lsls	r3, r3, #10
 800050c:	4013      	ands	r3, r2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2200      	movs	r2, #0
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fd65 	bl	8000fea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2202      	movs	r2, #2
 8000524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2201      	movs	r2, #1
 8000530:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	193a      	adds	r2, r7, r4
 8000534:	2390      	movs	r3, #144	; 0x90
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	0011      	movs	r1, r2
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fbd0 	bl	8000ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 8000540:	0021      	movs	r1, r4
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2240      	movs	r2, #64	; 0x40
 8000546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2201      	movs	r2, #1
 800054c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2203      	movs	r2, #3
 8000558:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 800055a:	187a      	adds	r2, r7, r1
 800055c:	2390      	movs	r3, #144	; 0x90
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fbbc 	bl	8000ce0 <HAL_GPIO_Init>

}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b009      	add	sp, #36	; 0x24
 800056e:	bd90      	pop	{r4, r7, pc}
 8000570:	40021000 	.word	0x40021000

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	699a      	ldr	r2, [r3, #24]
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	2101      	movs	r1, #1
 800058e:	430a      	orrs	r2, r1
 8000590:	619a      	str	r2, [r3, #24]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	69da      	ldr	r2, [r3, #28]
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0549      	lsls	r1, r1, #21
 80005a8:	430a      	orrs	r2, r1
 80005aa:	61da      	str	r2, [r3, #28]
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_MspInit+0x44>)
 80005ae:	69da      	ldr	r2, [r3, #28]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	055b      	lsls	r3, r3, #21
 80005b4:	4013      	ands	r3, r2
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08b      	sub	sp, #44	; 0x2c
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	2414      	movs	r4, #20
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	0018      	movs	r0, r3
 80005d6:	2314      	movs	r3, #20
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f005 f864 	bl	80056a8 <memset>
  if(hspi->Instance==SPI1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <HAL_SPI_MspInit+0x90>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d132      	bne.n	8000650 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_SPI_MspInit+0x94>)
 80005ec:	699a      	ldr	r2, [r3, #24]
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_SPI_MspInit+0x94>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0149      	lsls	r1, r1, #5
 80005f4:	430a      	orrs	r2, r1
 80005f6:	619a      	str	r2, [r3, #24]
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_SPI_MspInit+0x94>)
 80005fa:	699a      	ldr	r2, [r3, #24]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	015b      	lsls	r3, r3, #5
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_SPI_MspInit+0x94>)
 8000608:	695a      	ldr	r2, [r3, #20]
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <HAL_SPI_MspInit+0x94>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0289      	lsls	r1, r1, #10
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_SPI_MspInit+0x94>)
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	029b      	lsls	r3, r3, #10
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000622:	0021      	movs	r1, r4
 8000624:	187b      	adds	r3, r7, r1
 8000626:	22a0      	movs	r2, #160	; 0xa0
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2202      	movs	r2, #2
 800062e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2203      	movs	r2, #3
 800063a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	187a      	adds	r2, r7, r1
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fb48 	bl	8000ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b00b      	add	sp, #44	; 0x2c
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	40013000 	.word	0x40013000
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b08b      	sub	sp, #44	; 0x2c
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	2414      	movs	r4, #20
 800066a:	193b      	adds	r3, r7, r4
 800066c:	0018      	movs	r0, r3
 800066e:	2314      	movs	r3, #20
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f005 f818 	bl	80056a8 <memset>
  if(huart->Instance==USART1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <HAL_UART_MspInit+0xa4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d13b      	bne.n	80006fa <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <HAL_UART_MspInit+0xa8>)
 8000684:	699a      	ldr	r2, [r3, #24]
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <HAL_UART_MspInit+0xa8>)
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	01c9      	lsls	r1, r1, #7
 800068c:	430a      	orrs	r2, r1
 800068e:	619a      	str	r2, [r3, #24]
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <HAL_UART_MspInit+0xa8>)
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	01db      	lsls	r3, r3, #7
 8000698:	4013      	ands	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <HAL_UART_MspInit+0xa8>)
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_UART_MspInit+0xa8>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0289      	lsls	r1, r1, #10
 80006a8:	430a      	orrs	r2, r1
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_UART_MspInit+0xa8>)
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	029b      	lsls	r3, r3, #10
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	22c0      	movs	r2, #192	; 0xc0
 80006be:	00d2      	lsls	r2, r2, #3
 80006c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	0021      	movs	r1, r4
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2202      	movs	r2, #2
 80006c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2203      	movs	r2, #3
 80006d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	187a      	adds	r2, r7, r1
 80006de:	2390      	movs	r3, #144	; 0x90
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fafb 	bl	8000ce0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	201b      	movs	r0, #27
 80006f0:	f000 fa46 	bl	8000b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006f4:	201b      	movs	r0, #27
 80006f6:	f000 fa58 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b00b      	add	sp, #44	; 0x2c
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40013800 	.word	0x40013800
 8000708:	40021000 	.word	0x40021000

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f95e 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <USART1_IRQHandler+0x14>)
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fe98 	bl	8002478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	200000f8 	.word	0x200000f8

08000754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	return 1;
 8000758:	2301      	movs	r3, #1
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_kill>:

int _kill(int pid, int sig)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800076a:	f004 ff73 	bl	8005654 <__errno>
 800076e:	0003      	movs	r3, r0
 8000770:	2216      	movs	r2, #22
 8000772:	601a      	str	r2, [r3, #0]
	return -1;
 8000774:	2301      	movs	r3, #1
 8000776:	425b      	negs	r3, r3
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}

08000780 <_exit>:

void _exit (int status)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000788:	2301      	movs	r3, #1
 800078a:	425a      	negs	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff ffe5 	bl	8000760 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000796:	e7fe      	b.n	8000796 <_exit+0x16>

08000798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e00a      	b.n	80007c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007aa:	e000      	b.n	80007ae <_read+0x16>
 80007ac:	bf00      	nop
 80007ae:	0001      	movs	r1, r0
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	60ba      	str	r2, [r7, #8]
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbf0      	blt.n	80007aa <_read+0x12>
	}

return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b006      	add	sp, #24
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	60f8      	str	r0, [r7, #12]
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e009      	b.n	80007f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	60ba      	str	r2, [r7, #8]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	0018      	movs	r0, r3
 80007ee:	e000      	b.n	80007f2 <_write+0x20>
 80007f0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3301      	adds	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbf1      	blt.n	80007e4 <_write+0x12>
	}
	return len;
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	0018      	movs	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	b006      	add	sp, #24
 8000808:	bd80      	pop	{r7, pc}

0800080a <_close>:

int _close(int file)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	return -1;
 8000812:	2301      	movs	r3, #1
 8000814:	425b      	negs	r3, r3
}
 8000816:	0018      	movs	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}

0800081e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	0192      	lsls	r2, r2, #6
 800082e:	605a      	str	r2, [r3, #4]
	return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}

0800083a <_isatty>:

int _isatty(int file)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}

0800084c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f004 fede 	bl	8005654 <__errno>
 8000898:	0003      	movs	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	18d2      	adds	r2, r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b006      	add	sp, #24
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20001800 	.word	0x20001800
 80008c4:	00000400 	.word	0x00000400
 80008c8:	20000198 	.word	0x20000198
 80008cc:	20000250 	.word	0x20000250

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <LoopForever+0x6>)
    LDR R1, [R0]
 80008e2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008e4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <LoopForever+0xa>)
    CMP R1, R2
 80008e8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80008ea:	d105      	bne.n	80008f8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80008ee:	4913      	ldr	r1, [pc, #76]	; (800093c <LoopForever+0x12>)
    STR R1, [R0]
 80008f0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80008f2:	4813      	ldr	r0, [pc, #76]	; (8000940 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80008f4:	4913      	ldr	r1, [pc, #76]	; (8000944 <LoopForever+0x1a>)
    STR R1, [R0]
 80008f6:	6001      	str	r1, [r0, #0]

080008f8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <LoopForever+0x1e>)
  ldr r1, =_edata
 80008fa:	4914      	ldr	r1, [pc, #80]	; (800094c <LoopForever+0x22>)
  ldr r2, =_sidata
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <LoopForever+0x26>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000910:	4c11      	ldr	r4, [pc, #68]	; (8000958 <LoopForever+0x2e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800091e:	f7ff ffd7 	bl	80008d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000922:	f004 fe9d 	bl	8005660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fcd3 	bl	80002d0 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000930:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000934:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000938:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800093c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000940:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000944:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000950:	08006a34 	.word	0x08006a34
  ldr r2, =_sbss
 8000954:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000958:	2000024c 	.word	0x2000024c

0800095c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_IRQHandler>
	...

08000960 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_Init+0x24>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_Init+0x24>)
 800096a:	2110      	movs	r1, #16
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000970:	2001      	movs	r0, #1
 8000972:	f000 f809 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000976:	f7ff fe03 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40022000 	.word	0x40022000

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_InitTick+0x5c>)
 8000992:	681c      	ldr	r4, [r3, #0]
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_InitTick+0x60>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	0019      	movs	r1, r3
 800099a:	23fa      	movs	r3, #250	; 0xfa
 800099c:	0098      	lsls	r0, r3, #2
 800099e:	f7ff fbbd 	bl	800011c <__udivsi3>
 80009a2:	0003      	movs	r3, r0
 80009a4:	0019      	movs	r1, r3
 80009a6:	0020      	movs	r0, r4
 80009a8:	f7ff fbb8 	bl	800011c <__udivsi3>
 80009ac:	0003      	movs	r3, r0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f90b 	bl	8000bca <HAL_SYSTICK_Config>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e00f      	b.n	80009dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d80b      	bhi.n	80009da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	2301      	movs	r3, #1
 80009c6:	425b      	negs	r3, r3
 80009c8:	2200      	movs	r2, #0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 f8d8 	bl	8000b80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_InitTick+0x64>)
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b003      	add	sp, #12
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x1c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	001a      	movs	r2, r3
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x20>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	18d2      	adds	r2, r2, r3
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_IncTick+0x20>)
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	2000019c 	.word	0x2000019c

08000a14 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <HAL_GetTick+0x10>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	2000019c 	.word	0x2000019c

08000a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	0002      	movs	r2, r0
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3a:	d809      	bhi.n	8000a50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	001a      	movs	r2, r3
 8000a42:	231f      	movs	r3, #31
 8000a44:	401a      	ands	r2, r3
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_EnableIRQ+0x30>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	000a      	movs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
  }
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	0002      	movs	r2, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a70:	d828      	bhi.n	8000ac4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a72:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <__NVIC_SetPriority+0xd4>)
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	33c0      	adds	r3, #192	; 0xc0
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	589b      	ldr	r3, [r3, r2]
 8000a82:	1dfa      	adds	r2, r7, #7
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	0011      	movs	r1, r2
 8000a88:	2203      	movs	r2, #3
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	21ff      	movs	r1, #255	; 0xff
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	401a      	ands	r2, r3
 8000a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4003      	ands	r3, r0
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	481f      	ldr	r0, [pc, #124]	; (8000b30 <__NVIC_SetPriority+0xd4>)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	430a      	orrs	r2, r1
 8000abc:	33c0      	adds	r3, #192	; 0xc0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ac2:	e031      	b.n	8000b28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <__NVIC_SetPriority+0xd8>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0019      	movs	r1, r3
 8000acc:	230f      	movs	r3, #15
 8000ace:	400b      	ands	r3, r1
 8000ad0:	3b08      	subs	r3, #8
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3306      	adds	r3, #6
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	3304      	adds	r3, #4
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1dfa      	adds	r2, r7, #7
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	00d2      	lsls	r2, r2, #3
 8000aea:	21ff      	movs	r1, #255	; 0xff
 8000aec:	4091      	lsls	r1, r2
 8000aee:	000a      	movs	r2, r1
 8000af0:	43d2      	mvns	r2, r2
 8000af2:	401a      	ands	r2, r3
 8000af4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	019b      	lsls	r3, r3, #6
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	401a      	ands	r2, r3
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	0018      	movs	r0, r3
 8000b04:	2303      	movs	r3, #3
 8000b06:	4003      	ands	r3, r0
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <__NVIC_SetPriority+0xd8>)
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	001c      	movs	r4, r3
 8000b14:	230f      	movs	r3, #15
 8000b16:	4023      	ands	r3, r4
 8000b18:	3b08      	subs	r3, #8
 8000b1a:	089b      	lsrs	r3, r3, #2
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	3306      	adds	r3, #6
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	18c3      	adds	r3, r0, r3
 8000b24:	3304      	adds	r3, #4
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	045b      	lsls	r3, r3, #17
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d301      	bcc.n	8000b50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e010      	b.n	8000b72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <SysTick_Config+0x44>)
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	3a01      	subs	r2, #1
 8000b56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b58:	2301      	movs	r3, #1
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	2103      	movs	r1, #3
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ff7c 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x44>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x44>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	1c02      	adds	r2, r0, #0
 8000b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff33 	bl	8000a28 <__NVIC_EnableIRQ>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ffaf 	bl	8000b38 <SysTick_Config>
 8000bda:	0003      	movs	r3, r0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2221      	movs	r2, #33	; 0x21
 8000bf0:	5c9b      	ldrb	r3, [r3, r2]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d008      	beq.n	8000c0a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2220      	movs	r2, #32
 8000c02:	2100      	movs	r1, #0
 8000c04:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e020      	b.n	8000c4c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	210e      	movs	r1, #14
 8000c16:	438a      	bics	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	438a      	bics	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	2101      	movs	r1, #1
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2221      	movs	r2, #33	; 0x21
 8000c3e:	2101      	movs	r1, #1
 8000c40:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2221      	movs	r2, #33	; 0x21
 8000c68:	5c9b      	ldrb	r3, [r3, r2]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d006      	beq.n	8000c7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2204      	movs	r2, #4
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e028      	b.n	8000cd0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	210e      	movs	r1, #14
 8000c8a:	438a      	bics	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	438a      	bics	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	000a      	movs	r2, r1
 8000cac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2221      	movs	r2, #33	; 0x21
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	2100      	movs	r1, #0
 8000cbc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	0010      	movs	r0, r2
 8000cce:	4798      	blx	r3
    } 
  }
  return status;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	781b      	ldrb	r3, [r3, #0]
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cee:	e149      	b.n	8000f84 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d100      	bne.n	8000d08 <HAL_GPIO_Init+0x28>
 8000d06:	e13a      	b.n	8000f7e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d005      	beq.n	8000d20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d130      	bne.n	8000d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	409a      	lsls	r2, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d56:	2201      	movs	r2, #1
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2203      	movs	r2, #3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d017      	beq.n	8000dbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d123      	bne.n	8000e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	58d3      	ldr	r3, [r2, r3]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2207      	movs	r2, #7
 8000ddc:	4013      	ands	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2107      	movs	r1, #7
 8000df6:	400b      	ands	r3, r1
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	6939      	ldr	r1, [r7, #16]
 8000e10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2203      	movs	r2, #3
 8000e30:	401a      	ands	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	029b      	lsls	r3, r3, #10
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d100      	bne.n	8000e54 <HAL_GPIO_Init+0x174>
 8000e52:	e094      	b.n	8000f7e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e54:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	4b50      	ldr	r3, [pc, #320]	; (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	619a      	str	r2, [r3, #24]
 8000e60:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4013      	ands	r3, r2
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <HAL_GPIO_Init+0x2c0>)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	589b      	ldr	r3, [r3, r2]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4013      	ands	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	409a      	lsls	r2, r3
 8000e86:	0013      	movs	r3, r2
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	2390      	movs	r3, #144	; 0x90
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x1d6>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <HAL_GPIO_Init+0x2c4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x1d2>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <HAL_GPIO_Init+0x2c8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x1ce>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e004      	b.n	8000eb8 <HAL_GPIO_Init+0x1d8>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e002      	b.n	8000eb8 <HAL_GPIO_Init+0x1d8>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x1d8>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	2103      	movs	r1, #3
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec8:	4935      	ldr	r1, [pc, #212]	; (8000fa0 <HAL_GPIO_Init+0x2c0>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43da      	mvns	r2, r3
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	029b      	lsls	r3, r3, #10
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	035b      	lsls	r3, r3, #13
 8000f42:	4013      	ands	r3, r2
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	039b      	lsls	r3, r3, #14
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	1e13      	subs	r3, r2, #0
 8000f8e:	d000      	beq.n	8000f92 <HAL_GPIO_Init+0x2b2>
 8000f90:	e6ae      	b.n	8000cf0 <HAL_GPIO_Init+0x10>
  } 
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	000a      	movs	r2, r1
 8000fba:	1cbb      	adds	r3, r7, #2
 8000fbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	1cba      	adds	r2, r7, #2
 8000fc4:	8812      	ldrh	r2, [r2, #0]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d004      	beq.n	8000fd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
  }
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	0008      	movs	r0, r1
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	1cbb      	adds	r3, r7, #2
 8000ff8:	1c02      	adds	r2, r0, #0
 8000ffa:	801a      	strh	r2, [r3, #0]
 8000ffc:	1c7b      	adds	r3, r7, #1
 8000ffe:	1c0a      	adds	r2, r1, #0
 8001000:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001002:	1c7b      	adds	r3, r7, #1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100a:	1cbb      	adds	r3, r7, #2
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001012:	e003      	b.n	800101c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001014:	1cbb      	adds	r3, r7, #2
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	f000 fb76 	bl	8001724 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	4013      	ands	r3, r2
 8001040:	d100      	bne.n	8001044 <HAL_RCC_OscConfig+0x20>
 8001042:	e08e      	b.n	8001162 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001044:	4bc5      	ldr	r3, [pc, #788]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	220c      	movs	r2, #12
 800104a:	4013      	ands	r3, r2
 800104c:	2b04      	cmp	r3, #4
 800104e:	d00e      	beq.n	800106e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001050:	4bc2      	ldr	r3, [pc, #776]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	220c      	movs	r2, #12
 8001056:	4013      	ands	r3, r2
 8001058:	2b08      	cmp	r3, #8
 800105a:	d117      	bne.n	800108c <HAL_RCC_OscConfig+0x68>
 800105c:	4bbf      	ldr	r3, [pc, #764]	; (800135c <HAL_RCC_OscConfig+0x338>)
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	23c0      	movs	r3, #192	; 0xc0
 8001062:	025b      	lsls	r3, r3, #9
 8001064:	401a      	ands	r2, r3
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	025b      	lsls	r3, r3, #9
 800106a:	429a      	cmp	r2, r3
 800106c:	d10e      	bne.n	800108c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	4bbb      	ldr	r3, [pc, #748]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	029b      	lsls	r3, r3, #10
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_RCC_OscConfig+0x58>
 800107a:	e071      	b.n	8001160 <HAL_RCC_OscConfig+0x13c>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d000      	beq.n	8001086 <HAL_RCC_OscConfig+0x62>
 8001084:	e06c      	b.n	8001160 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 fb4c 	bl	8001724 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d107      	bne.n	80010a4 <HAL_RCC_OscConfig+0x80>
 8001094:	4bb1      	ldr	r3, [pc, #708]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4bb0      	ldr	r3, [pc, #704]	; (800135c <HAL_RCC_OscConfig+0x338>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0249      	lsls	r1, r1, #9
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e02f      	b.n	8001104 <HAL_RCC_OscConfig+0xe0>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10c      	bne.n	80010c6 <HAL_RCC_OscConfig+0xa2>
 80010ac:	4bab      	ldr	r3, [pc, #684]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4baa      	ldr	r3, [pc, #680]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010b2:	49ab      	ldr	r1, [pc, #684]	; (8001360 <HAL_RCC_OscConfig+0x33c>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	4ba8      	ldr	r3, [pc, #672]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4ba7      	ldr	r3, [pc, #668]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010be:	49a9      	ldr	r1, [pc, #676]	; (8001364 <HAL_RCC_OscConfig+0x340>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e01e      	b.n	8001104 <HAL_RCC_OscConfig+0xe0>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d10e      	bne.n	80010ec <HAL_RCC_OscConfig+0xc8>
 80010ce:	4ba3      	ldr	r3, [pc, #652]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4ba2      	ldr	r3, [pc, #648]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	02c9      	lsls	r1, r1, #11
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	4b9f      	ldr	r3, [pc, #636]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b9e      	ldr	r3, [pc, #632]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0249      	lsls	r1, r1, #9
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0xe0>
 80010ec:	4b9b      	ldr	r3, [pc, #620]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b9a      	ldr	r3, [pc, #616]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010f2:	499b      	ldr	r1, [pc, #620]	; (8001360 <HAL_RCC_OscConfig+0x33c>)
 80010f4:	400a      	ands	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	4b98      	ldr	r3, [pc, #608]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b97      	ldr	r3, [pc, #604]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80010fe:	4999      	ldr	r1, [pc, #612]	; (8001364 <HAL_RCC_OscConfig+0x340>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d014      	beq.n	8001136 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fc82 	bl	8000a14 <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001116:	f7ff fc7d 	bl	8000a14 <HAL_GetTick>
 800111a:	0002      	movs	r2, r0
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e2fd      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001128:	4b8c      	ldr	r3, [pc, #560]	; (800135c <HAL_RCC_OscConfig+0x338>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0xf2>
 8001134:	e015      	b.n	8001162 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fc6d 	bl	8000a14 <HAL_GetTick>
 800113a:	0003      	movs	r3, r0
 800113c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fc68 	bl	8000a14 <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e2e8      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	4b82      	ldr	r3, [pc, #520]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	029b      	lsls	r3, r3, #10
 800115a:	4013      	ands	r3, r2
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x11c>
 800115e:	e000      	b.n	8001162 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001160:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d100      	bne.n	800116e <HAL_RCC_OscConfig+0x14a>
 800116c:	e06c      	b.n	8001248 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800116e:	4b7b      	ldr	r3, [pc, #492]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	220c      	movs	r2, #12
 8001174:	4013      	ands	r3, r2
 8001176:	d00e      	beq.n	8001196 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001178:	4b78      	ldr	r3, [pc, #480]	; (800135c <HAL_RCC_OscConfig+0x338>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	220c      	movs	r2, #12
 800117e:	4013      	ands	r3, r2
 8001180:	2b08      	cmp	r3, #8
 8001182:	d11f      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1a0>
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	025b      	lsls	r3, r3, #9
 800118c:	401a      	ands	r2, r3
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	429a      	cmp	r2, r3
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b71      	ldr	r3, [pc, #452]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2202      	movs	r2, #2
 800119c:	4013      	ands	r3, r2
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x188>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e2bb      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b6b      	ldr	r3, [pc, #428]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	22f8      	movs	r2, #248	; 0xf8
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00da      	lsls	r2, r3, #3
 80011bc:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e041      	b.n	8001248 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d024      	beq.n	8001216 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b63      	ldr	r3, [pc, #396]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc1c 	bl	8000a14 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc17 	bl	8000a14 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e297      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0f1      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	22f8      	movs	r2, #248	; 0xf8
 8001204:	4393      	bics	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	00da      	lsls	r2, r3, #3
 800120e:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e018      	b.n	8001248 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	4b51      	ldr	r3, [pc, #324]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b50      	ldr	r3, [pc, #320]	; (800135c <HAL_RCC_OscConfig+0x338>)
 800121c:	2101      	movs	r1, #1
 800121e:	438a      	bics	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fbf7 	bl	8000a14 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fbf2 	bl	8000a14 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e272      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2202      	movs	r2, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d1f1      	bne.n	800122c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2208      	movs	r2, #8
 800124e:	4013      	ands	r3, r2
 8001250:	d036      	beq.n	80012c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d019      	beq.n	800128e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <HAL_RCC_OscConfig+0x338>)
 800125c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001260:	2101      	movs	r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff fbd5 	bl	8000a14 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fbd0 	bl	8000a14 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e250      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d0f1      	beq.n	8001270 <HAL_RCC_OscConfig+0x24c>
 800128c:	e018      	b.n	80012c0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001294:	2101      	movs	r1, #1
 8001296:	438a      	bics	r2, r1
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbbb 	bl	8000a14 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fbb6 	bl	8000a14 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e236      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d1f1      	bne.n	80012a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2204      	movs	r2, #4
 80012c6:	4013      	ands	r3, r2
 80012c8:	d100      	bne.n	80012cc <HAL_RCC_OscConfig+0x2a8>
 80012ca:	e0b5      	b.n	8001438 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012cc:	201f      	movs	r0, #31
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	4013      	ands	r3, r2
 80012de:	d110      	bne.n	8001302 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	0549      	lsls	r1, r1, #21
 80012ea:	430a      	orrs	r2, r1
 80012ec:	61da      	str	r2, [r3, #28]
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x338>)
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	055b      	lsls	r3, r3, #21
 80012f6:	4013      	ands	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012fc:	183b      	adds	r3, r7, r0
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_RCC_OscConfig+0x344>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4013      	ands	r3, r2
 800130c:	d11a      	bne.n	8001344 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_RCC_OscConfig+0x344>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_RCC_OscConfig+0x344>)
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0049      	lsls	r1, r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131c:	f7ff fb7a 	bl	8000a14 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fb75 	bl	8000a14 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1f5      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCC_OscConfig+0x344>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d10f      	bne.n	800136c <HAL_RCC_OscConfig+0x348>
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_RCC_OscConfig+0x338>)
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_RCC_OscConfig+0x338>)
 8001352:	2101      	movs	r1, #1
 8001354:	430a      	orrs	r2, r1
 8001356:	621a      	str	r2, [r3, #32]
 8001358:	e036      	b.n	80013c8 <HAL_RCC_OscConfig+0x3a4>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	40021000 	.word	0x40021000
 8001360:	fffeffff 	.word	0xfffeffff
 8001364:	fffbffff 	.word	0xfffbffff
 8001368:	40007000 	.word	0x40007000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10c      	bne.n	800138e <HAL_RCC_OscConfig+0x36a>
 8001374:	4bca      	ldr	r3, [pc, #808]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4bc9      	ldr	r3, [pc, #804]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	621a      	str	r2, [r3, #32]
 8001380:	4bc7      	ldr	r3, [pc, #796]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	4bc6      	ldr	r3, [pc, #792]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001386:	2104      	movs	r1, #4
 8001388:	438a      	bics	r2, r1
 800138a:	621a      	str	r2, [r3, #32]
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x3a4>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x38c>
 8001396:	4bc2      	ldr	r3, [pc, #776]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001398:	6a1a      	ldr	r2, [r3, #32]
 800139a:	4bc1      	ldr	r3, [pc, #772]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800139c:	2104      	movs	r1, #4
 800139e:	430a      	orrs	r2, r1
 80013a0:	621a      	str	r2, [r3, #32]
 80013a2:	4bbf      	ldr	r3, [pc, #764]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	4bbe      	ldr	r3, [pc, #760]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x3a4>
 80013b0:	4bbb      	ldr	r3, [pc, #748]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80013b2:	6a1a      	ldr	r2, [r3, #32]
 80013b4:	4bba      	ldr	r3, [pc, #744]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	438a      	bics	r2, r1
 80013ba:	621a      	str	r2, [r3, #32]
 80013bc:	4bb8      	ldr	r3, [pc, #736]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	4bb7      	ldr	r3, [pc, #732]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	2104      	movs	r1, #4
 80013c4:	438a      	bics	r2, r1
 80013c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d014      	beq.n	80013fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fb20 	bl	8000a14 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	e009      	b.n	80013ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff fb1b 	bl	8000a14 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	4aaf      	ldr	r2, [pc, #700]	; (80016a4 <HAL_RCC_OscConfig+0x680>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e19a      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	4bac      	ldr	r3, [pc, #688]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x3b6>
 80013f8:	e013      	b.n	8001422 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb0b 	bl	8000a14 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	e009      	b.n	8001418 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fb06 	bl	8000a14 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	4aa5      	ldr	r2, [pc, #660]	; (80016a4 <HAL_RCC_OscConfig+0x680>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e185      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	4ba1      	ldr	r3, [pc, #644]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	2202      	movs	r2, #2
 800141e:	4013      	ands	r3, r2
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001422:	231f      	movs	r3, #31
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	4b9b      	ldr	r3, [pc, #620]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001432:	499d      	ldr	r1, [pc, #628]	; (80016a8 <HAL_RCC_OscConfig+0x684>)
 8001434:	400a      	ands	r2, r1
 8001436:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2210      	movs	r2, #16
 800143e:	4013      	ands	r3, r2
 8001440:	d063      	beq.n	800150a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d12a      	bne.n	80014a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800144a:	4b95      	ldr	r3, [pc, #596]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800144c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144e:	4b94      	ldr	r3, [pc, #592]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001450:	2104      	movs	r1, #4
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001456:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800145c:	2101      	movs	r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fad7 	bl	8000a14 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800146c:	f7ff fad2 	bl	8000a14 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e152      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800147e:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d0f1      	beq.n	800146c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001488:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800148a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148c:	22f8      	movs	r2, #248	; 0xf8
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	00da      	lsls	r2, r3, #3
 8001498:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800149a:	430a      	orrs	r2, r1
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
 800149e:	e034      	b.n	800150a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	3305      	adds	r3, #5
 80014a6:	d111      	bne.n	80014cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014a8:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ac:	4b7c      	ldr	r3, [pc, #496]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014ae:	2104      	movs	r1, #4
 80014b0:	438a      	bics	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014b4:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	22f8      	movs	r2, #248	; 0xf8
 80014ba:	4393      	bics	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ca:	e01e      	b.n	800150a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014cc:	4b74      	ldr	r3, [pc, #464]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d0:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	2104      	movs	r1, #4
 80014d4:	430a      	orrs	r2, r1
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014d8:	4b71      	ldr	r3, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014dc:	4b70      	ldr	r3, [pc, #448]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80014de:	2101      	movs	r1, #1
 80014e0:	438a      	bics	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa96 	bl	8000a14 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014ee:	f7ff fa91 	bl	8000a14 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e111      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001500:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d1f1      	bne.n	80014ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2220      	movs	r2, #32
 8001510:	4013      	ands	r3, r2
 8001512:	d05c      	beq.n	80015ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001514:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	220c      	movs	r2, #12
 800151a:	4013      	ands	r3, r2
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d00e      	beq.n	800153e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	220c      	movs	r2, #12
 8001526:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001528:	2b08      	cmp	r3, #8
 800152a:	d114      	bne.n	8001556 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800152c:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	025b      	lsls	r3, r3, #9
 8001534:	401a      	ands	r2, r3
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	025b      	lsls	r3, r3, #9
 800153a:	429a      	cmp	r2, r3
 800153c:	d10b      	bne.n	8001556 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	4013      	ands	r3, r2
 8001548:	d040      	beq.n	80015cc <HAL_RCC_OscConfig+0x5a8>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d03c      	beq.n	80015cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0e6      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d01b      	beq.n	8001596 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800155e:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0249      	lsls	r1, r1, #9
 8001568:	430a      	orrs	r2, r1
 800156a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa52 	bl	8000a14 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001576:	f7ff fa4d 	bl	8000a14 <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e0cd      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800158a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	4013      	ands	r3, r2
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x552>
 8001594:	e01b      	b.n	80015ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001596:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800159c:	4943      	ldr	r1, [pc, #268]	; (80016ac <HAL_RCC_OscConfig+0x688>)
 800159e:	400a      	ands	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fa37 	bl	8000a14 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ac:	f7ff fa32 	bl	8000a14 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0b2      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80015c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	025b      	lsls	r3, r3, #9
 80015c6:	4013      	ands	r3, r2
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x588>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d100      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5b4>
 80015d6:	e0a4      	b.n	8001722 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	220c      	movs	r2, #12
 80015de:	4013      	ands	r3, r2
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5c2>
 80015e4:	e078      	b.n	80016d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d14c      	bne.n	8001688 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 80015f4:	492e      	ldr	r1, [pc, #184]	; (80016b0 <HAL_RCC_OscConfig+0x68c>)
 80015f6:	400a      	ands	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fa0b 	bl	8000a14 <HAL_GetTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fa06 	bl	8000a14 <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e086      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	049b      	lsls	r3, r3, #18
 800161e:	4013      	ands	r3, r2
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	220f      	movs	r2, #15
 8001628:	4393      	bics	r3, r2
 800162a:	0019      	movs	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001632:	430a      	orrs	r2, r1
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_RCC_OscConfig+0x690>)
 800163c:	4013      	ands	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	431a      	orrs	r2, r3
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	0449      	lsls	r1, r1, #17
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff f9d9 	bl	8000a14 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f9d4 	bl	8000a14 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e054      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	049b      	lsls	r3, r3, #18
 8001682:	4013      	ands	r3, r2
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x644>
 8001686:	e04c      	b.n	8001722 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <HAL_RCC_OscConfig+0x68c>)
 8001690:	400a      	ands	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff f9be 	bl	8000a14 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x6a6>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40021000 	.word	0x40021000
 80016a4:	00001388 	.word	0x00001388
 80016a8:	efffffff 	.word	0xefffffff
 80016ac:	fffeffff 	.word	0xfffeffff
 80016b0:	feffffff 	.word	0xfeffffff
 80016b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff f9ac 	bl	8000a14 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e02c      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_RCC_OscConfig+0x708>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	049b      	lsls	r3, r3, #18
 80016d2:	4013      	ands	r3, r2
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x694>
 80016d6:	e024      	b.n	8001722 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e01f      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_RCC_OscConfig+0x708>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_RCC_OscConfig+0x708>)
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	23c0      	movs	r3, #192	; 0xc0
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10e      	bne.n	800171e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	220f      	movs	r2, #15
 8001704:	401a      	ands	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d107      	bne.n	800171e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	23f0      	movs	r3, #240	; 0xf0
 8001712:	039b      	lsls	r3, r3, #14
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b008      	add	sp, #32
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0bf      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b61      	ldr	r3, [pc, #388]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	4013      	ands	r3, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d911      	bls.n	8001776 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2201      	movs	r2, #1
 8001758:	4393      	bics	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	4013      	ands	r3, r2
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0a6      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d015      	beq.n	80017ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2204      	movs	r2, #4
 8001786:	4013      	ands	r3, r2
 8001788:	d006      	beq.n	8001798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001790:	21e0      	movs	r1, #224	; 0xe0
 8001792:	00c9      	lsls	r1, r1, #3
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	22f0      	movs	r2, #240	; 0xf0
 800179e:	4393      	bics	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	4013      	ands	r3, r2
 80017b4:	d04c      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	029b      	lsls	r3, r3, #10
 80017c6:	4013      	ands	r3, r2
 80017c8:	d120      	bne.n	800180c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07a      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	049b      	lsls	r3, r3, #18
 80017de:	4013      	ands	r3, r2
 80017e0:	d114      	bne.n	800180c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06e      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	025b      	lsls	r3, r3, #9
 80017f6:	4013      	ands	r3, r2
 80017f8:	d108      	bne.n	800180c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e062      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2202      	movs	r2, #2
 8001804:	4013      	ands	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e05b      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2203      	movs	r2, #3
 8001812:	4393      	bics	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff f8f8 	bl	8000a14 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001828:	e009      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182a:	f7ff f8f3 	bl	8000a14 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <HAL_RCC_ClockConfig+0x1a4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e042      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	220c      	movs	r2, #12
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1ec      	bne.n	800182a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d211      	bcs.n	8001882 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	4393      	bics	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x19c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e020      	b.n	80018c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2204      	movs	r2, #4
 8001888:	4013      	ands	r3, r2
 800188a:	d009      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_RCC_ClockConfig+0x1a8>)
 8001892:	4013      	ands	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018a0:	f000 f820 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a4:	0001      	movs	r1, r0
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1a0>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	220f      	movs	r2, #15
 80018ae:	4013      	ands	r3, r2
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1ac>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	000a      	movs	r2, r1
 80018b6:	40da      	lsrs	r2, r3
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1b0>)
 80018ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff f863 	bl	8000988 <HAL_InitTick>
  
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b004      	add	sp, #16
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40021000 	.word	0x40021000
 80018d4:	00001388 	.word	0x00001388
 80018d8:	fffff8ff 	.word	0xfffff8ff
 80018dc:	0800685c 	.word	0x0800685c
 80018e0:	20000000 	.word	0x20000000

080018e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b08f      	sub	sp, #60	; 0x3c
 80018e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018ea:	2314      	movs	r3, #20
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xec>)
 80018f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018f2:	c313      	stmia	r3!, {r0, r1, r4}
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4a36      	ldr	r2, [pc, #216]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	220c      	movs	r2, #12
 8001922:	4013      	ands	r3, r2
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d047      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001928:	d849      	bhi.n	80019be <HAL_RCC_GetSysClockFreq+0xda>
 800192a:	2b04      	cmp	r3, #4
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x50>
 800192e:	2b08      	cmp	r3, #8
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x56>
 8001932:	e044      	b.n	80019be <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001938:	e044      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	220f      	movs	r2, #15
 8001940:	4013      	ands	r3, r2
 8001942:	2214      	movs	r2, #20
 8001944:	18ba      	adds	r2, r7, r2
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	220f      	movs	r2, #15
 8001950:	4013      	ands	r3, r2
 8001952:	1d3a      	adds	r2, r7, #4
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	025b      	lsls	r3, r3, #9
 800195e:	401a      	ands	r2, r3
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	025b      	lsls	r3, r3, #9
 8001964:	429a      	cmp	r2, r3
 8001966:	d109      	bne.n	800197c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196a:	481c      	ldr	r0, [pc, #112]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800196c:	f7fe fbd6 	bl	800011c <__udivsi3>
 8001970:	0003      	movs	r3, r0
 8001972:	001a      	movs	r2, r3
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	4353      	muls	r3, r2
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
 800197a:	e01a      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	401a      	ands	r2, r3
 8001984:	23c0      	movs	r3, #192	; 0xc0
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	429a      	cmp	r2, r3
 800198a:	d109      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800198c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001990:	f7fe fbc4 	bl	800011c <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	001a      	movs	r2, r3
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	4353      	muls	r3, r2
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
 800199e:	e008      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a4:	f7fe fbba 	bl	800011c <__udivsi3>
 80019a8:	0003      	movs	r3, r0
 80019aa:	001a      	movs	r2, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	4353      	muls	r3, r2
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019b6:	e005      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019bc:	e002      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b00f      	add	sp, #60	; 0x3c
 80019cc:	bd90      	pop	{r4, r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	0800683c 	.word	0x0800683c
 80019d4:	0800684c 	.word	0x0800684c
 80019d8:	40021000 	.word	0x40021000
 80019dc:	007a1200 	.word	0x007a1200
 80019e0:	02dc6c00 	.word	0x02dc6c00

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019fc:	f7ff fff2 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a00:	0001      	movs	r1, r0
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	2207      	movs	r2, #7
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	40d9      	lsrs	r1, r3
 8001a12:	000b      	movs	r3, r1
}    
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	0800686c 	.word	0x0800686c

08001a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	025b      	lsls	r3, r3, #9
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a40:	e08e      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2017      	movs	r0, #23
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	055b      	lsls	r3, r3, #21
 8001a52:	4013      	ands	r3, r2
 8001a54:	d110      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b64      	ldr	r3, [pc, #400]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0549      	lsls	r1, r1, #21
 8001a60:	430a      	orrs	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
 8001a64:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d11a      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	0049      	lsls	r1, r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7fe ffbf 	bl	8000a14 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	e008      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7fe ffba 	bl	8000a14 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e097      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	23c0      	movs	r3, #192	; 0xc0
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d034      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	23c0      	movs	r3, #192	; 0xc0
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d02c      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001adc:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ae6:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0249      	lsls	r1, r1, #9
 8001af0:	430a      	orrs	r2, r1
 8001af2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af4:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001afa:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7fe ff81 	bl	8000a14 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	e009      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7fe ff7c 	bl	8000a14 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4a35      	ldr	r2, [pc, #212]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e058      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b4a:	2317      	movs	r3, #23
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b5a:	4928      	ldr	r1, [pc, #160]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	d009      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	2203      	movs	r2, #3
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2220      	movs	r2, #32
 8001b84:	4013      	ands	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d009      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	4393      	bics	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	4393      	bics	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b006      	add	sp, #24
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	fffffcff 	.word	0xfffffcff
 8001bf4:	fffeffff 	.word	0xfffeffff
 8001bf8:	00001388 	.word	0x00001388
 8001bfc:	efffffff 	.word	0xefffffff

08001c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0a8      	b.n	8001d64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	2382      	movs	r3, #130	; 0x82
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d009      	beq.n	8001c3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
 8001c2c:	e005      	b.n	8001c3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	225d      	movs	r2, #93	; 0x5d
 8001c44:	5c9b      	ldrb	r3, [r3, r2]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	225c      	movs	r2, #92	; 0x5c
 8001c50:	2100      	movs	r1, #0
 8001c52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fcb6 	bl	80005c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	225d      	movs	r2, #93	; 0x5d
 8001c60:	2102      	movs	r1, #2
 8001c62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2140      	movs	r1, #64	; 0x40
 8001c70:	438a      	bics	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	23e0      	movs	r3, #224	; 0xe0
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d902      	bls.n	8001c86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e002      	b.n	8001c8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	23f0      	movs	r3, #240	; 0xf0
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d008      	beq.n	8001caa <HAL_SPI_Init+0xaa>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	23e0      	movs	r3, #224	; 0xe0
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d002      	beq.n	8001caa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	2382      	movs	r3, #130	; 0x82
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6899      	ldr	r1, [r3, #8]
 8001cb8:	2384      	movs	r3, #132	; 0x84
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6999      	ldr	r1, [r3, #24]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	400b      	ands	r3, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2138      	movs	r1, #56	; 0x38
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	0011      	movs	r1, r2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	019b      	lsls	r3, r3, #6
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	2204      	movs	r2, #4
 8001d10:	401a      	ands	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2110      	movs	r1, #16
 8001d18:	400b      	ands	r3, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	2108      	movs	r1, #8
 8001d22:	400b      	ands	r3, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	23f0      	movs	r3, #240	; 0xf0
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	400b      	ands	r3, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	0011      	movs	r1, r2
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4907      	ldr	r1, [pc, #28]	; (8001d6c <HAL_SPI_Init+0x16c>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	225d      	movs	r2, #93	; 0x5d
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b004      	add	sp, #16
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	fffff7ff 	.word	0xfffff7ff

08001d70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d80:	231f      	movs	r3, #31
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	225c      	movs	r2, #92	; 0x5c
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_SPI_Transmit+0x26>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e140      	b.n	8002018 <HAL_SPI_Transmit+0x2a8>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	225c      	movs	r2, #92	; 0x5c
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d9e:	f7fe fe39 	bl	8000a14 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001da6:	2316      	movs	r3, #22
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	1dba      	adds	r2, r7, #6
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	225d      	movs	r2, #93	; 0x5d
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d004      	beq.n	8001dc6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001dbc:	231f      	movs	r3, #31
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dc4:	e11d      	b.n	8002002 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_SPI_Transmit+0x64>
 8001dcc:	1dbb      	adds	r3, r7, #6
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001dd4:	231f      	movs	r3, #31
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ddc:	e111      	b.n	8002002 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	225d      	movs	r2, #93	; 0x5d
 8001de2:	2103      	movs	r1, #3
 8001de4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1dba      	adds	r2, r7, #6
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1dba      	adds	r2, r7, #6
 8001dfe:	8812      	ldrh	r2, [r2, #0]
 8001e00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2244      	movs	r2, #68	; 0x44
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2246      	movs	r2, #70	; 0x46
 8001e14:	2100      	movs	r1, #0
 8001e16:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d110      	bne.n	8001e52 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2180      	movs	r1, #128	; 0x80
 8001e4c:	01c9      	lsls	r1, r1, #7
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d007      	beq.n	8001e70 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	23e0      	movs	r3, #224	; 0xe0
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d94e      	bls.n	8001f1a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_SPI_Transmit+0x11e>
 8001e84:	2316      	movs	r3, #22
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d13f      	bne.n	8001f0e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	1c9a      	adds	r2, r3, #2
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001eb2:	e02c      	b.n	8001f0e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d112      	bne.n	8001ee8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	1c9a      	adds	r2, r3, #2
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ee6:	e012      	b.n	8001f0e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee8:	f7fe fd94 	bl	8000a14 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d802      	bhi.n	8001efe <HAL_SPI_Transmit+0x18e>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_SPI_Transmit+0x194>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001f04:	231f      	movs	r3, #31
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2203      	movs	r2, #3
 8001f0a:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f0c:	e079      	b.n	8002002 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1cd      	bne.n	8001eb4 <HAL_SPI_Transmit+0x144>
 8001f18:	e04f      	b.n	8001fba <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <HAL_SPI_Transmit+0x1bc>
 8001f22:	2316      	movs	r3, #22
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d141      	bne.n	8001fb0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	330c      	adds	r3, #12
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001f52:	e02d      	b.n	8001fb0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d113      	bne.n	8001f8a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f88:	e012      	b.n	8001fb0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f8a:	f7fe fd43 	bl	8000a14 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d802      	bhi.n	8001fa0 <HAL_SPI_Transmit+0x230>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_SPI_Transmit+0x236>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d104      	bne.n	8001fb0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001fa6:	231f      	movs	r3, #31
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2203      	movs	r2, #3
 8001fac:	701a      	strb	r2, [r3, #0]
          goto error;
 8001fae:	e028      	b.n	8002002 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1cc      	bne.n	8001f54 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 f95d 	bl	8002280 <SPI_EndRxTxTransaction>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001ff6:	231f      	movs	r3, #31
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e000      	b.n	8002002 <HAL_SPI_Transmit+0x292>
  }

error:
 8002000:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	225d      	movs	r2, #93	; 0x5d
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	225c      	movs	r2, #92	; 0x5c
 800200e:	2100      	movs	r1, #0
 8002010:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	781b      	ldrb	r3, [r3, #0]
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b008      	add	sp, #32
 800201e:	bd80      	pop	{r7, pc}

08002020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	1dfb      	adds	r3, r7, #7
 800202e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002030:	f7fe fcf0 	bl	8000a14 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002040:	f7fe fce8 	bl	8000a14 <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	015b      	lsls	r3, r3, #5
 800204e:	0d1b      	lsrs	r3, r3, #20
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	4353      	muls	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002056:	e058      	b.n	800210a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	d055      	beq.n	800210a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800205e:	f7fe fcd9 	bl	8000a14 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	429a      	cmp	r2, r3
 800206c:	d902      	bls.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x54>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d142      	bne.n	80020fa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	21e0      	movs	r1, #224	; 0xe0
 8002080:	438a      	bics	r2, r1
 8002082:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	2382      	movs	r3, #130	; 0x82
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	429a      	cmp	r2, r3
 800208e:	d113      	bne.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	429a      	cmp	r2, r3
 800209a:	d005      	beq.n	80020a8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	019b      	lsls	r3, r3, #6
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d110      	bne.n	80020e6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	491a      	ldr	r1, [pc, #104]	; (8002138 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	0189      	lsls	r1, r1, #6
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	225d      	movs	r2, #93	; 0x5d
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	225c      	movs	r2, #92	; 0x5c
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e017      	b.n	800212a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3b01      	subs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	4013      	ands	r3, r2
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	425a      	negs	r2, r3
 800211a:	4153      	adcs	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	001a      	movs	r2, r3
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d197      	bne.n	8002058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b008      	add	sp, #32
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	20000000 	.word	0x20000000
 8002138:	ffffdfff 	.word	0xffffdfff

0800213c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800214a:	2317      	movs	r3, #23
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002152:	f7fe fc5f 	bl	8000a14 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002162:	f7fe fc57 	bl	8000a14 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	330c      	adds	r3, #12
 8002170:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	0013      	movs	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	00da      	lsls	r2, r3, #3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	0d1b      	lsrs	r3, r3, #20
 8002182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002184:	4353      	muls	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002188:	e068      	b.n	800225c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	23c0      	movs	r3, #192	; 0xc0
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	429a      	cmp	r2, r3
 8002192:	d10a      	bne.n	80021aa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	2117      	movs	r1, #23
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	d055      	beq.n	800225c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021b0:	f7fe fc30 	bl	8000a14 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	429a      	cmp	r2, r3
 80021be:	d902      	bls.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d142      	bne.n	800224c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	21e0      	movs	r1, #224	; 0xe0
 80021d2:	438a      	bics	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	2382      	movs	r3, #130	; 0x82
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	429a      	cmp	r2, r3
 80021e0:	d113      	bne.n	800220a <SPI_WaitFifoStateUntilTimeout+0xce>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d005      	beq.n	80021fa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d107      	bne.n	800220a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2140      	movs	r1, #64	; 0x40
 8002206:	438a      	bics	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	429a      	cmp	r2, r3
 8002214:	d110      	bne.n	8002238 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002222:	400a      	ands	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0189      	lsls	r1, r1, #6
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	225d      	movs	r2, #93	; 0x5d
 800223c:	2101      	movs	r1, #1
 800223e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	225c      	movs	r2, #92	; 0x5c
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e010      	b.n	800226e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	3b01      	subs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d18e      	bne.n	800218a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b00a      	add	sp, #40	; 0x28
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	20000000 	.word	0x20000000
 800227c:	ffffdfff 	.word	0xffffdfff

08002280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	23c0      	movs	r3, #192	; 0xc0
 8002290:	0159      	lsls	r1, r3, #5
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	0013      	movs	r3, r2
 800229a:	2200      	movs	r2, #0
 800229c:	f7ff ff4e 	bl	800213c <SPI_WaitFifoStateUntilTimeout>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d007      	beq.n	80022b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	2220      	movs	r2, #32
 80022aa:	431a      	orrs	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e027      	b.n	8002304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	0013      	movs	r3, r2
 80022be:	2200      	movs	r2, #0
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	f7ff fead 	bl	8002020 <SPI_WaitFlagStateUntilTimeout>
 80022c6:	1e03      	subs	r3, r0, #0
 80022c8:	d007      	beq.n	80022da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ce:	2220      	movs	r2, #32
 80022d0:	431a      	orrs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e014      	b.n	8002304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	23c0      	movs	r3, #192	; 0xc0
 80022de:	00d9      	lsls	r1, r3, #3
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	0013      	movs	r3, r2
 80022e8:	2200      	movs	r2, #0
 80022ea:	f7ff ff27 	bl	800213c <SPI_WaitFifoStateUntilTimeout>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d007      	beq.n	8002302 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	2220      	movs	r2, #32
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e000      	b.n	8002304 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e044      	b.n	80023a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2274      	movs	r2, #116	; 0x74
 800232a:	2100      	movs	r1, #0
 800232c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f7fe f995 	bl	8000660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2224      	movs	r2, #36	; 0x24
 800233a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2101      	movs	r1, #1
 8002348:	438a      	bics	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 fb86 	bl	8002a60 <UART_SetConfig>
 8002354:	0003      	movs	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e024      	b.n	80023a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 fcb9 	bl	8002ce0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	490d      	ldr	r1, [pc, #52]	; (80023b0 <HAL_UART_Init+0xa4>)
 800237a:	400a      	ands	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	212a      	movs	r1, #42	; 0x2a
 800238a:	438a      	bics	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 fd51 	bl	8002e48 <UART_CheckIdleState>
 80023a6:	0003      	movs	r3, r0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	ffffb7ff 	.word	0xffffb7ff

080023b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	1dbb      	adds	r3, r7, #6
 80023c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d150      	bne.n	800246c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_UART_Receive_IT+0x24>
 80023d0:	1dbb      	adds	r3, r7, #6
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e048      	b.n	800246e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	015b      	lsls	r3, r3, #5
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d109      	bne.n	80023fc <HAL_UART_Receive_IT+0x48>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2201      	movs	r2, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	d001      	beq.n	80023fc <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e038      	b.n	800246e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2274      	movs	r2, #116	; 0x74
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_UART_Receive_IT+0x56>
 8002406:	2302      	movs	r3, #2
 8002408:	e031      	b.n	800246e <HAL_UART_Receive_IT+0xba>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2274      	movs	r2, #116	; 0x74
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	4013      	ands	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002426:	f3ef 8310 	mrs	r3, PRIMASK
 800242a:	613b      	str	r3, [r7, #16]
  return(result);
 800242c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	2301      	movs	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f383 8810 	msr	PRIMASK, r3
}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	04c9      	lsls	r1, r1, #19
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f383 8810 	msr	PRIMASK, r3
}
 8002458:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800245a:	1dbb      	adds	r3, r7, #6
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 fdfc 	bl	8003060 <UART_Start_Receive_IT>
 8002468:	0003      	movs	r3, r0
 800246a:	e000      	b.n	800246e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b008      	add	sp, #32
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b0ab      	sub	sp, #172	; 0xac
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	22a4      	movs	r2, #164	; 0xa4
 8002488:	18b9      	adds	r1, r7, r2
 800248a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	20a0      	movs	r0, #160	; 0xa0
 8002494:	1839      	adds	r1, r7, r0
 8002496:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	219c      	movs	r1, #156	; 0x9c
 80024a0:	1879      	adds	r1, r7, r1
 80024a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024a4:	0011      	movs	r1, r2
 80024a6:	18bb      	adds	r3, r7, r2
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a99      	ldr	r2, [pc, #612]	; (8002710 <HAL_UART_IRQHandler+0x298>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	2298      	movs	r2, #152	; 0x98
 80024b0:	18bc      	adds	r4, r7, r2
 80024b2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80024b4:	18bb      	adds	r3, r7, r2
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d114      	bne.n	80024e6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2220      	movs	r2, #32
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00f      	beq.n	80024e6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2220      	movs	r2, #32
 80024cc:	4013      	ands	r3, r2
 80024ce:	d00a      	beq.n	80024e6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d100      	bne.n	80024da <HAL_UART_IRQHandler+0x62>
 80024d8:	e296      	b.n	8002a08 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	0010      	movs	r0, r2
 80024e2:	4798      	blx	r3
      }
      return;
 80024e4:	e290      	b.n	8002a08 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024e6:	2398      	movs	r3, #152	; 0x98
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d100      	bne.n	80024f2 <HAL_UART_IRQHandler+0x7a>
 80024f0:	e114      	b.n	800271c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024f2:	239c      	movs	r3, #156	; 0x9c
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	d106      	bne.n	800250c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a83      	ldr	r2, [pc, #524]	; (8002714 <HAL_UART_IRQHandler+0x29c>)
 8002506:	4013      	ands	r3, r2
 8002508:	d100      	bne.n	800250c <HAL_UART_IRQHandler+0x94>
 800250a:	e107      	b.n	800271c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800250c:	23a4      	movs	r3, #164	; 0xa4
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d012      	beq.n	800253e <HAL_UART_IRQHandler+0xc6>
 8002518:	23a0      	movs	r3, #160	; 0xa0
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d00b      	beq.n	800253e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	589b      	ldr	r3, [r3, r2]
 8002534:	2201      	movs	r2, #1
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800253e:	23a4      	movs	r3, #164	; 0xa4
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2202      	movs	r2, #2
 8002546:	4013      	ands	r3, r2
 8002548:	d011      	beq.n	800256e <HAL_UART_IRQHandler+0xf6>
 800254a:	239c      	movs	r3, #156	; 0x9c
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d00b      	beq.n	800256e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2202      	movs	r2, #2
 800255c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	589b      	ldr	r3, [r3, r2]
 8002564:	2204      	movs	r2, #4
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800256e:	23a4      	movs	r3, #164	; 0xa4
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2204      	movs	r2, #4
 8002576:	4013      	ands	r3, r2
 8002578:	d011      	beq.n	800259e <HAL_UART_IRQHandler+0x126>
 800257a:	239c      	movs	r3, #156	; 0x9c
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2204      	movs	r2, #4
 800258c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	589b      	ldr	r3, [r3, r2]
 8002594:	2202      	movs	r2, #2
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800259e:	23a4      	movs	r3, #164	; 0xa4
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2208      	movs	r2, #8
 80025a6:	4013      	ands	r3, r2
 80025a8:	d017      	beq.n	80025da <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025aa:	23a0      	movs	r3, #160	; 0xa0
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2220      	movs	r2, #32
 80025b2:	4013      	ands	r3, r2
 80025b4:	d105      	bne.n	80025c2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025b6:	239c      	movs	r3, #156	; 0x9c
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025c0:	d00b      	beq.n	80025da <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2208      	movs	r2, #8
 80025c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	589b      	ldr	r3, [r3, r2]
 80025d0:	2208      	movs	r2, #8
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025da:	23a4      	movs	r3, #164	; 0xa4
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	4013      	ands	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_UART_IRQHandler+0x198>
 80025e8:	23a0      	movs	r3, #160	; 0xa0
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	04db      	lsls	r3, r3, #19
 80025f2:	4013      	ands	r3, r2
 80025f4:	d00c      	beq.n	8002610 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	589b      	ldr	r3, [r3, r2]
 8002606:	2220      	movs	r2, #32
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	589b      	ldr	r3, [r3, r2]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d100      	bne.n	800261c <HAL_UART_IRQHandler+0x1a4>
 800261a:	e1f7      	b.n	8002a0c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800261c:	23a4      	movs	r3, #164	; 0xa4
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2220      	movs	r2, #32
 8002624:	4013      	ands	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002628:	23a0      	movs	r3, #160	; 0xa0
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2220      	movs	r2, #32
 8002630:	4013      	ands	r3, r2
 8002632:	d008      	beq.n	8002646 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	0010      	movs	r0, r2
 8002644:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	2194      	movs	r1, #148	; 0x94
 800264e:	187a      	adds	r2, r7, r1
 8002650:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	4013      	ands	r3, r2
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d004      	beq.n	800266a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002660:	187b      	adds	r3, r7, r1
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2228      	movs	r2, #40	; 0x28
 8002666:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002668:	d047      	beq.n	80026fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 fda7 	bl	80031c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2240      	movs	r2, #64	; 0x40
 800267a:	4013      	ands	r3, r2
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d137      	bne.n	80026f0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002680:	f3ef 8310 	mrs	r3, PRIMASK
 8002684:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002688:	2090      	movs	r0, #144	; 0x90
 800268a:	183a      	adds	r2, r7, r0
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	2301      	movs	r3, #1
 8002690:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002694:	f383 8810 	msr	PRIMASK, r3
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2140      	movs	r1, #64	; 0x40
 80026a6:	438a      	bics	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b2:	f383 8810 	msr	PRIMASK, r3
}
 80026b6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d012      	beq.n	80026e6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_UART_IRQHandler+0x2a0>)
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7fe fac1 	bl	8000c54 <HAL_DMA_Abort_IT>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d01a      	beq.n	800270c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	0018      	movs	r0, r3
 80026e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	e012      	b.n	800270c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f9a5 	bl	8002a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ee:	e00d      	b.n	800270c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 f9a0 	bl	8002a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	e008      	b.n	800270c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f99b 	bl	8002a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	2100      	movs	r1, #0
 8002708:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800270a:	e17f      	b.n	8002a0c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270c:	46c0      	nop			; (mov r8, r8)
    return;
 800270e:	e17d      	b.n	8002a0c <HAL_UART_IRQHandler+0x594>
 8002710:	0000080f 	.word	0x0000080f
 8002714:	04000120 	.word	0x04000120
 8002718:	08003285 	.word	0x08003285

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002720:	2b01      	cmp	r3, #1
 8002722:	d000      	beq.n	8002726 <HAL_UART_IRQHandler+0x2ae>
 8002724:	e131      	b.n	800298a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002726:	23a4      	movs	r3, #164	; 0xa4
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2210      	movs	r2, #16
 800272e:	4013      	ands	r3, r2
 8002730:	d100      	bne.n	8002734 <HAL_UART_IRQHandler+0x2bc>
 8002732:	e12a      	b.n	800298a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002734:	23a0      	movs	r3, #160	; 0xa0
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2210      	movs	r2, #16
 800273c:	4013      	ands	r3, r2
 800273e:	d100      	bne.n	8002742 <HAL_UART_IRQHandler+0x2ca>
 8002740:	e123      	b.n	800298a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2210      	movs	r2, #16
 8002748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2240      	movs	r2, #64	; 0x40
 8002752:	4013      	ands	r3, r2
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d000      	beq.n	800275a <HAL_UART_IRQHandler+0x2e2>
 8002758:	e09b      	b.n	8002892 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	217e      	movs	r1, #126	; 0x7e
 8002764:	187b      	adds	r3, r7, r1
 8002766:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002768:	187b      	adds	r3, r7, r1
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d100      	bne.n	8002772 <HAL_UART_IRQHandler+0x2fa>
 8002770:	e14e      	b.n	8002a10 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2258      	movs	r2, #88	; 0x58
 8002776:	5a9b      	ldrh	r3, [r3, r2]
 8002778:	187a      	adds	r2, r7, r1
 800277a:	8812      	ldrh	r2, [r2, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d300      	bcc.n	8002782 <HAL_UART_IRQHandler+0x30a>
 8002780:	e146      	b.n	8002a10 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	187a      	adds	r2, r7, r1
 8002786:	215a      	movs	r1, #90	; 0x5a
 8002788:	8812      	ldrh	r2, [r2, #0]
 800278a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b20      	cmp	r3, #32
 8002794:	d06e      	beq.n	8002874 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002796:	f3ef 8310 	mrs	r3, PRIMASK
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279e:	67bb      	str	r3, [r7, #120]	; 0x78
 80027a0:	2301      	movs	r3, #1
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	f383 8810 	msr	PRIMASK, r3
}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	499a      	ldr	r1, [pc, #616]	; (8002a20 <HAL_UART_IRQHandler+0x5a8>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c8:	f3ef 8310 	mrs	r3, PRIMASK
 80027cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d0:	677b      	str	r3, [r7, #116]	; 0x74
 80027d2:	2301      	movs	r3, #1
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d8:	f383 8810 	msr	PRIMASK, r3
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	438a      	bics	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fa:	f3ef 8310 	mrs	r3, PRIMASK
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002800:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002802:	673b      	str	r3, [r7, #112]	; 0x70
 8002804:	2301      	movs	r3, #1
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280a:	f383 8810 	msr	PRIMASK, r3
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	438a      	bics	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002822:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002838:	f3ef 8310 	mrs	r3, PRIMASK
 800283c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002840:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002842:	2301      	movs	r3, #1
 8002844:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002848:	f383 8810 	msr	PRIMASK, r3
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2110      	movs	r1, #16
 800285a:	438a      	bics	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	f383 8810 	msr	PRIMASK, r3
}
 8002868:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	0018      	movs	r0, r3
 8002870:	f7fe f9b8 	bl	8000be4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2258      	movs	r2, #88	; 0x58
 8002878:	5a9a      	ldrh	r2, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	215a      	movs	r1, #90	; 0x5a
 800287e:	5a5b      	ldrh	r3, [r3, r1]
 8002880:	b29b      	uxth	r3, r3
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f8dc 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002890:	e0be      	b.n	8002a10 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2258      	movs	r2, #88	; 0x58
 8002896:	5a99      	ldrh	r1, [r3, r2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	225a      	movs	r2, #90	; 0x5a
 800289c:	5a9b      	ldrh	r3, [r3, r2]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	208e      	movs	r0, #142	; 0x8e
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	1a8a      	subs	r2, r1, r2
 80028a6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	225a      	movs	r2, #90	; 0x5a
 80028ac:	5a9b      	ldrh	r3, [r3, r2]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d100      	bne.n	80028b6 <HAL_UART_IRQHandler+0x43e>
 80028b4:	e0ae      	b.n	8002a14 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80028b6:	183b      	adds	r3, r7, r0
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d100      	bne.n	80028c0 <HAL_UART_IRQHandler+0x448>
 80028be:	e0a9      	b.n	8002a14 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80028c6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c8:	2488      	movs	r4, #136	; 0x88
 80028ca:	193a      	adds	r2, r7, r4
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	2301      	movs	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f383 8810 	msr	PRIMASK, r3
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	494f      	ldr	r1, [pc, #316]	; (8002a24 <HAL_UART_IRQHandler+0x5ac>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f383 8810 	msr	PRIMASK, r3
}
 80028f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f8:	f3ef 8310 	mrs	r3, PRIMASK
 80028fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80028fe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002900:	2484      	movs	r4, #132	; 0x84
 8002902:	193a      	adds	r2, r7, r4
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	2301      	movs	r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	438a      	bics	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	193b      	adds	r3, r7, r4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	f383 8810 	msr	PRIMASK, r3
}
 800292e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002942:	f3ef 8310 	mrs	r3, PRIMASK
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294a:	2480      	movs	r4, #128	; 0x80
 800294c:	193a      	adds	r2, r7, r4
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	f383 8810 	msr	PRIMASK, r3
}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2110      	movs	r1, #16
 8002968:	438a      	bics	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	193b      	adds	r3, r7, r4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	f383 8810 	msr	PRIMASK, r3
}
 8002978:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800297a:	183b      	adds	r3, r7, r0
 800297c:	881a      	ldrh	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f000 f860 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002988:	e044      	b.n	8002a14 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800298a:	23a4      	movs	r3, #164	; 0xa4
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	035b      	lsls	r3, r3, #13
 8002994:	4013      	ands	r3, r2
 8002996:	d010      	beq.n	80029ba <HAL_UART_IRQHandler+0x542>
 8002998:	239c      	movs	r3, #156	; 0x9c
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	03db      	lsls	r3, r3, #15
 80029a2:	4013      	ands	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	0352      	lsls	r2, r2, #13
 80029ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fe10 	bl	80035d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029b8:	e02f      	b.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029ba:	23a4      	movs	r3, #164	; 0xa4
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029c6:	23a0      	movs	r3, #160	; 0xa0
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	4013      	ands	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01e      	beq.n	8002a18 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	0010      	movs	r0, r2
 80029e2:	4798      	blx	r3
    }
    return;
 80029e4:	e018      	b.n	8002a18 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029e6:	23a4      	movs	r3, #164	; 0xa4
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	4013      	ands	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
 80029f2:	23a0      	movs	r3, #160	; 0xa0
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2240      	movs	r2, #64	; 0x40
 80029fa:	4013      	ands	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fc56 	bl	80032b2 <UART_EndTransmit_IT>
    return;
 8002a06:	e008      	b.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	e006      	b.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
    return;
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	e004      	b.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	e002      	b.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	e000      	b.n	8002a1a <HAL_UART_IRQHandler+0x5a2>
    return;
 8002a18:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b02b      	add	sp, #172	; 0xac
 8002a1e:	bd90      	pop	{r4, r7, pc}
 8002a20:	fffffeff 	.word	0xfffffeff
 8002a24:	fffffedf 	.word	0xfffffedf

08002a28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	000a      	movs	r2, r1
 8002a52:	1cbb      	adds	r3, r7, #2
 8002a54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a68:	231e      	movs	r3, #30
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a8d      	ldr	r2, [pc, #564]	; (8002cc4 <UART_SetConfig+0x264>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a88      	ldr	r2, [pc, #544]	; (8002cc8 <UART_SetConfig+0x268>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a7f      	ldr	r2, [pc, #508]	; (8002ccc <UART_SetConfig+0x26c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7b      	ldr	r2, [pc, #492]	; (8002cd0 <UART_SetConfig+0x270>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d127      	bne.n	8002b36 <UART_SetConfig+0xd6>
 8002ae6:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <UART_SetConfig+0x274>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	2203      	movs	r2, #3
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d00d      	beq.n	8002b0e <UART_SetConfig+0xae>
 8002af2:	d81b      	bhi.n	8002b2c <UART_SetConfig+0xcc>
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d014      	beq.n	8002b22 <UART_SetConfig+0xc2>
 8002af8:	d818      	bhi.n	8002b2c <UART_SetConfig+0xcc>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <UART_SetConfig+0xa4>
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d00a      	beq.n	8002b18 <UART_SetConfig+0xb8>
 8002b02:	e013      	b.n	8002b2c <UART_SetConfig+0xcc>
 8002b04:	231f      	movs	r3, #31
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e021      	b.n	8002b52 <UART_SetConfig+0xf2>
 8002b0e:	231f      	movs	r3, #31
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2202      	movs	r2, #2
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e01c      	b.n	8002b52 <UART_SetConfig+0xf2>
 8002b18:	231f      	movs	r3, #31
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e017      	b.n	8002b52 <UART_SetConfig+0xf2>
 8002b22:	231f      	movs	r3, #31
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2208      	movs	r2, #8
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e012      	b.n	8002b52 <UART_SetConfig+0xf2>
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2210      	movs	r2, #16
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e00d      	b.n	8002b52 <UART_SetConfig+0xf2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a67      	ldr	r2, [pc, #412]	; (8002cd8 <UART_SetConfig+0x278>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d104      	bne.n	8002b4a <UART_SetConfig+0xea>
 8002b40:	231f      	movs	r3, #31
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e003      	b.n	8002b52 <UART_SetConfig+0xf2>
 8002b4a:	231f      	movs	r3, #31
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2210      	movs	r2, #16
 8002b50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d15d      	bne.n	8002c1a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002b5e:	231f      	movs	r3, #31
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d015      	beq.n	8002b94 <UART_SetConfig+0x134>
 8002b68:	dc18      	bgt.n	8002b9c <UART_SetConfig+0x13c>
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d00d      	beq.n	8002b8a <UART_SetConfig+0x12a>
 8002b6e:	dc15      	bgt.n	8002b9c <UART_SetConfig+0x13c>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <UART_SetConfig+0x11a>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d005      	beq.n	8002b84 <UART_SetConfig+0x124>
 8002b78:	e010      	b.n	8002b9c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7fe ff3d 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	61bb      	str	r3, [r7, #24]
        break;
 8002b82:	e012      	b.n	8002baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b84:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <UART_SetConfig+0x27c>)
 8002b86:	61bb      	str	r3, [r7, #24]
        break;
 8002b88:	e00f      	b.n	8002baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8a:	f7fe feab 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	61bb      	str	r3, [r7, #24]
        break;
 8002b92:	e00a      	b.n	8002baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	61bb      	str	r3, [r7, #24]
        break;
 8002b9a:	e006      	b.n	8002baa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ba0:	231e      	movs	r3, #30
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
        break;
 8002ba8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d100      	bne.n	8002bb2 <UART_SetConfig+0x152>
 8002bb0:	e07b      	b.n	8002caa <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	005a      	lsls	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	18d2      	adds	r2, r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	0010      	movs	r0, r2
 8002bc6:	f7fd faa9 	bl	800011c <__udivsi3>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	d91c      	bls.n	8002c10 <UART_SetConfig+0x1b0>
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	025b      	lsls	r3, r3, #9
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d217      	bcs.n	8002c10 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	200e      	movs	r0, #14
 8002be6:	183b      	adds	r3, r7, r0
 8002be8:	210f      	movs	r1, #15
 8002bea:	438a      	bics	r2, r1
 8002bec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b299      	uxth	r1, r3
 8002bfa:	183b      	adds	r3, r7, r0
 8002bfc:	183a      	adds	r2, r7, r0
 8002bfe:	8812      	ldrh	r2, [r2, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	183a      	adds	r2, r7, r0
 8002c0a:	8812      	ldrh	r2, [r2, #0]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	e04c      	b.n	8002caa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c10:	231e      	movs	r3, #30
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e047      	b.n	8002caa <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c1a:	231f      	movs	r3, #31
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d015      	beq.n	8002c50 <UART_SetConfig+0x1f0>
 8002c24:	dc18      	bgt.n	8002c58 <UART_SetConfig+0x1f8>
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00d      	beq.n	8002c46 <UART_SetConfig+0x1e6>
 8002c2a:	dc15      	bgt.n	8002c58 <UART_SetConfig+0x1f8>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <UART_SetConfig+0x1d6>
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d005      	beq.n	8002c40 <UART_SetConfig+0x1e0>
 8002c34:	e010      	b.n	8002c58 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c36:	f7fe fedf 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	61bb      	str	r3, [r7, #24]
        break;
 8002c3e:	e012      	b.n	8002c66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <UART_SetConfig+0x27c>)
 8002c42:	61bb      	str	r3, [r7, #24]
        break;
 8002c44:	e00f      	b.n	8002c66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c46:	f7fe fe4d 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	61bb      	str	r3, [r7, #24]
        break;
 8002c4e:	e00a      	b.n	8002c66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	61bb      	str	r3, [r7, #24]
        break;
 8002c56:	e006      	b.n	8002c66 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c5c:	231e      	movs	r3, #30
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
        break;
 8002c64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01e      	beq.n	8002caa <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	085a      	lsrs	r2, r3, #1
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	18d2      	adds	r2, r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	0010      	movs	r0, r2
 8002c7e:	f7fd fa4d 	bl	800011c <__udivsi3>
 8002c82:	0003      	movs	r3, r0
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	d909      	bls.n	8002ca2 <UART_SetConfig+0x242>
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d204      	bcs.n	8002ca2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	e003      	b.n	8002caa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca2:	231e      	movs	r3, #30
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002cb6:	231e      	movs	r3, #30
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	781b      	ldrb	r3, [r3, #0]
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b008      	add	sp, #32
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	efff69f3 	.word	0xefff69f3
 8002cc8:	ffffcfff 	.word	0xffffcfff
 8002ccc:	fffff4ff 	.word	0xfffff4ff
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40004400 	.word	0x40004400
 8002cdc:	007a1200 	.word	0x007a1200

08002ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2201      	movs	r2, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a4a      	ldr	r2, [pc, #296]	; (8002e24 <UART_AdvFeatureConfig+0x144>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2202      	movs	r2, #2
 8002d10:	4013      	ands	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a43      	ldr	r2, [pc, #268]	; (8002e28 <UART_AdvFeatureConfig+0x148>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2204      	movs	r2, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <UART_AdvFeatureConfig+0x14c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2208      	movs	r2, #8
 8002d54:	4013      	ands	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <UART_AdvFeatureConfig+0x150>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2210      	movs	r2, #16
 8002d76:	4013      	ands	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <UART_AdvFeatureConfig+0x154>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2220      	movs	r2, #32
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <UART_AdvFeatureConfig+0x158>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2240      	movs	r2, #64	; 0x40
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <UART_AdvFeatureConfig+0x15c>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	035b      	lsls	r3, r3, #13
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d10b      	bne.n	8002dfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <UART_AdvFeatureConfig+0x160>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	4013      	ands	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <UART_AdvFeatureConfig+0x164>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
  }
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	fffdffff 	.word	0xfffdffff
 8002e28:	fffeffff 	.word	0xfffeffff
 8002e2c:	fffbffff 	.word	0xfffbffff
 8002e30:	ffff7fff 	.word	0xffff7fff
 8002e34:	ffffefff 	.word	0xffffefff
 8002e38:	ffffdfff 	.word	0xffffdfff
 8002e3c:	ffefffff 	.word	0xffefffff
 8002e40:	ff9fffff 	.word	0xff9fffff
 8002e44:	fff7ffff 	.word	0xfff7ffff

08002e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	2100      	movs	r1, #0
 8002e56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e58:	f7fd fddc 	bl	8000a14 <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2208      	movs	r2, #8
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d10c      	bne.n	8002e88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	0391      	lsls	r1, r2, #14
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <UART_CheckIdleState+0x8c>)
 8002e78:	9200      	str	r2, [sp, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f000 f82c 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e021      	b.n	8002ecc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2204      	movs	r2, #4
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d10c      	bne.n	8002eb0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	03d1      	lsls	r1, r2, #15
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <UART_CheckIdleState+0x8c>)
 8002ea0:	9200      	str	r2, [sp, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f000 f818 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002ea8:	1e03      	subs	r3, r0, #0
 8002eaa:	d001      	beq.n	8002eb0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e00d      	b.n	8002ecc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2274      	movs	r2, #116	; 0x74
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	01ffffff 	.word	0x01ffffff

08002ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b094      	sub	sp, #80	; 0x50
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee8:	e0a3      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eec:	3301      	adds	r3, #1
 8002eee:	d100      	bne.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ef0:	e09f      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fd fd8f 	bl	8000a14 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d13d      	bne.n	8002f84 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
 8002f12:	2301      	movs	r3, #1
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	494c      	ldr	r1, [pc, #304]	; (800305c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
 8002f44:	2301      	movs	r3, #1
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	f383 8810 	msr	PRIMASK, r3
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f66:	f383 8810 	msr	PRIMASK, r3
}
 8002f6a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2274      	movs	r2, #116	; 0x74
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e067      	b.n	8003054 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d050      	beq.n	8003032 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d146      	bne.n	8003032 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fae:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fb4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb8:	2301      	movs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f383 8810 	msr	PRIMASK, r3
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4923      	ldr	r1, [pc, #140]	; (800305c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f383 8810 	msr	PRIMASK, r3
}
 8002fde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fe6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fea:	2301      	movs	r3, #1
 8002fec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	438a      	bics	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	2120      	movs	r1, #32
 8003024:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2274      	movs	r2, #116	; 0x74
 800302a:	2100      	movs	r1, #0
 800302c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e010      	b.n	8003054 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	425a      	negs	r2, r3
 8003042:	4153      	adcs	r3, r2
 8003044:	b2db      	uxtb	r3, r3
 8003046:	001a      	movs	r2, r3
 8003048:	1dfb      	adds	r3, r7, #7
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d100      	bne.n	8003052 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003050:	e74b      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b014      	add	sp, #80	; 0x50
 800305a:	bd80      	pop	{r7, pc}
 800305c:	fffffe5f 	.word	0xfffffe5f

08003060 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	; 0x30
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	1dbb      	adds	r3, r7, #6
 800306c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1dba      	adds	r2, r7, #6
 8003078:	2158      	movs	r1, #88	; 0x58
 800307a:	8812      	ldrh	r2, [r2, #0]
 800307c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1dba      	adds	r2, r7, #6
 8003082:	215a      	movs	r1, #90	; 0x5a
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	015b      	lsls	r3, r3, #5
 8003096:	429a      	cmp	r2, r3
 8003098:	d10d      	bne.n	80030b6 <UART_Start_Receive_IT+0x56>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d104      	bne.n	80030ac <UART_Start_Receive_IT+0x4c>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	225c      	movs	r2, #92	; 0x5c
 80030a6:	4943      	ldr	r1, [pc, #268]	; (80031b4 <UART_Start_Receive_IT+0x154>)
 80030a8:	5299      	strh	r1, [r3, r2]
 80030aa:	e02e      	b.n	800310a <UART_Start_Receive_IT+0xaa>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	225c      	movs	r2, #92	; 0x5c
 80030b0:	21ff      	movs	r1, #255	; 0xff
 80030b2:	5299      	strh	r1, [r3, r2]
 80030b4:	e029      	b.n	800310a <UART_Start_Receive_IT+0xaa>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <UART_Start_Receive_IT+0x7a>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <UART_Start_Receive_IT+0x70>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	225c      	movs	r2, #92	; 0x5c
 80030ca:	21ff      	movs	r1, #255	; 0xff
 80030cc:	5299      	strh	r1, [r3, r2]
 80030ce:	e01c      	b.n	800310a <UART_Start_Receive_IT+0xaa>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	225c      	movs	r2, #92	; 0x5c
 80030d4:	217f      	movs	r1, #127	; 0x7f
 80030d6:	5299      	strh	r1, [r3, r2]
 80030d8:	e017      	b.n	800310a <UART_Start_Receive_IT+0xaa>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	055b      	lsls	r3, r3, #21
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d10d      	bne.n	8003102 <UART_Start_Receive_IT+0xa2>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <UART_Start_Receive_IT+0x98>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	225c      	movs	r2, #92	; 0x5c
 80030f2:	217f      	movs	r1, #127	; 0x7f
 80030f4:	5299      	strh	r1, [r3, r2]
 80030f6:	e008      	b.n	800310a <UART_Start_Receive_IT+0xaa>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	225c      	movs	r2, #92	; 0x5c
 80030fc:	213f      	movs	r1, #63	; 0x3f
 80030fe:	5299      	strh	r1, [r3, r2]
 8003100:	e003      	b.n	800310a <UART_Start_Receive_IT+0xaa>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	225c      	movs	r2, #92	; 0x5c
 8003106:	2100      	movs	r1, #0
 8003108:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	2100      	movs	r1, #0
 8003110:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2222      	movs	r2, #34	; 0x22
 8003116:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003118:	f3ef 8310 	mrs	r3, PRIMASK
 800311c:	61fb      	str	r3, [r7, #28]
  return(result);
 800311e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	2301      	movs	r3, #1
 8003124:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f383 8810 	msr	PRIMASK, r3
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	015b      	lsls	r3, r3, #5
 8003152:	429a      	cmp	r2, r3
 8003154:	d107      	bne.n	8003166 <UART_Start_Receive_IT+0x106>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <UART_Start_Receive_IT+0x158>)
 8003162:	665a      	str	r2, [r3, #100]	; 0x64
 8003164:	e002      	b.n	800316c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <UART_Start_Receive_IT+0x15c>)
 800316a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2274      	movs	r2, #116	; 0x74
 8003170:	2100      	movs	r1, #0
 8003172:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003174:	f3ef 8310 	mrs	r3, PRIMASK
 8003178:	613b      	str	r3, [r7, #16]
  return(result);
 800317a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
 800317e:	2301      	movs	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f383 8810 	msr	PRIMASK, r3
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2190      	movs	r1, #144	; 0x90
 8003196:	0049      	lsls	r1, r1, #1
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f383 8810 	msr	PRIMASK, r3
}
 80031a6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b00c      	add	sp, #48	; 0x30
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	000001ff 	.word	0x000001ff
 80031b8:	08003471 	.word	0x08003471
 80031bc:	08003309 	.word	0x08003309

080031c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	; 0x38
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c8:	f3ef 8310 	mrs	r3, PRIMASK
 80031cc:	617b      	str	r3, [r7, #20]
  return(result);
 80031ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
 80031d2:	2301      	movs	r3, #1
 80031d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f383 8810 	msr	PRIMASK, r3
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4925      	ldr	r1, [pc, #148]	; (8003280 <UART_EndRxTransfer+0xc0>)
 80031ea:	400a      	ands	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fa:	f3ef 8310 	mrs	r3, PRIMASK
 80031fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003200:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
 8003204:	2301      	movs	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f383 8810 	msr	PRIMASK, r3
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2101      	movs	r1, #1
 800321c:	438a      	bics	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	f383 8810 	msr	PRIMASK, r3
}
 800322a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	2b01      	cmp	r3, #1
 8003232:	d118      	bne.n	8003266 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003234:	f3ef 8310 	mrs	r3, PRIMASK
 8003238:	60bb      	str	r3, [r7, #8]
  return(result);
 800323a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323e:	2301      	movs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f383 8810 	msr	PRIMASK, r3
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2110      	movs	r1, #16
 8003256:	438a      	bics	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b00e      	add	sp, #56	; 0x38
 800327e:	bd80      	pop	{r7, pc}
 8003280:	fffffedf 	.word	0xfffffedf

08003284 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	225a      	movs	r2, #90	; 0x5a
 8003296:	2100      	movs	r1, #0
 8003298:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2252      	movs	r2, #82	; 0x52
 800329e:	2100      	movs	r1, #0
 80032a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff fbc7 	bl	8002a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ba:	f3ef 8310 	mrs	r3, PRIMASK
 80032be:	60bb      	str	r3, [r7, #8]
  return(result);
 80032c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	2301      	movs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f383 8810 	msr	PRIMASK, r3
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2140      	movs	r1, #64	; 0x40
 80032dc:	438a      	bics	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7ff fb94 	bl	8002a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b006      	add	sp, #24
 8003306:	bd80      	pop	{r7, pc}

08003308 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b090      	sub	sp, #64	; 0x40
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003310:	203e      	movs	r0, #62	; 0x3e
 8003312:	183b      	adds	r3, r7, r0
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	215c      	movs	r1, #92	; 0x5c
 8003318:	5a52      	ldrh	r2, [r2, r1]
 800331a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003320:	2b22      	cmp	r3, #34	; 0x22
 8003322:	d000      	beq.n	8003326 <UART_RxISR_8BIT+0x1e>
 8003324:	e095      	b.n	8003452 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	213c      	movs	r1, #60	; 0x3c
 800332c:	187b      	adds	r3, r7, r1
 800332e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003330:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003332:	187b      	adds	r3, r7, r1
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	183b      	adds	r3, r7, r0
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b2d9      	uxtb	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	400a      	ands	r2, r1
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	225a      	movs	r2, #90	; 0x5a
 8003356:	5a9b      	ldrh	r3, [r3, r2]
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b299      	uxth	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	225a      	movs	r2, #90	; 0x5a
 8003362:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	225a      	movs	r2, #90	; 0x5a
 8003368:	5a9b      	ldrh	r3, [r3, r2]
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d178      	bne.n	8003462 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003370:	f3ef 8310 	mrs	r3, PRIMASK
 8003374:	61bb      	str	r3, [r7, #24]
  return(result);
 8003376:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4936      	ldr	r1, [pc, #216]	; (800346c <UART_RxISR_8BIT+0x164>)
 8003392:	400a      	ands	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a2:	f3ef 8310 	mrs	r3, PRIMASK
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	637b      	str	r3, [r7, #52]	; 0x34
 80033ac:	2301      	movs	r3, #1
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	438a      	bics	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d12f      	bne.n	8003448 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ee:	f3ef 8310 	mrs	r3, PRIMASK
 80033f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80033f4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
 80033f8:	2301      	movs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2110      	movs	r1, #16
 8003410:	438a      	bics	r2, r1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2210      	movs	r2, #16
 8003428:	4013      	ands	r3, r2
 800342a:	2b10      	cmp	r3, #16
 800342c:	d103      	bne.n	8003436 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2210      	movs	r2, #16
 8003434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2258      	movs	r2, #88	; 0x58
 800343a:	5a9a      	ldrh	r2, [r3, r2]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff fb01 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003446:	e00c      	b.n	8003462 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f7fc ff20 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8003450:	e007      	b.n	8003462 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2108      	movs	r1, #8
 800345e:	430a      	orrs	r2, r1
 8003460:	619a      	str	r2, [r3, #24]
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	46bd      	mov	sp, r7
 8003466:	b010      	add	sp, #64	; 0x40
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	fffffedf 	.word	0xfffffedf

08003470 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	; 0x40
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003478:	203e      	movs	r0, #62	; 0x3e
 800347a:	183b      	adds	r3, r7, r0
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	215c      	movs	r1, #92	; 0x5c
 8003480:	5a52      	ldrh	r2, [r2, r1]
 8003482:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003488:	2b22      	cmp	r3, #34	; 0x22
 800348a:	d000      	beq.n	800348e <UART_RxISR_16BIT+0x1e>
 800348c:	e095      	b.n	80035ba <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	213c      	movs	r1, #60	; 0x3c
 8003494:	187b      	adds	r3, r7, r1
 8003496:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003498:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	183a      	adds	r2, r7, r0
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	8812      	ldrh	r2, [r2, #0]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	225a      	movs	r2, #90	; 0x5a
 80034be:	5a9b      	ldrh	r3, [r3, r2]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b299      	uxth	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	225a      	movs	r2, #90	; 0x5a
 80034ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	225a      	movs	r2, #90	; 0x5a
 80034d0:	5a9b      	ldrh	r3, [r3, r2]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d178      	bne.n	80035ca <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d8:	f3ef 8310 	mrs	r3, PRIMASK
 80034dc:	617b      	str	r3, [r7, #20]
  return(result);
 80034de:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	2301      	movs	r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4936      	ldr	r1, [pc, #216]	; (80035d4 <UART_RxISR_16BIT+0x164>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	623b      	str	r3, [r7, #32]
  return(result);
 8003510:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
 8003514:	2301      	movs	r3, #1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	438a      	bics	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	2b01      	cmp	r3, #1
 800354e:	d12f      	bne.n	80035b0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003556:	f3ef 8310 	mrs	r3, PRIMASK
 800355a:	60bb      	str	r3, [r7, #8]
  return(result);
 800355c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003560:	2301      	movs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2110      	movs	r1, #16
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2210      	movs	r2, #16
 8003590:	4013      	ands	r3, r2
 8003592:	2b10      	cmp	r3, #16
 8003594:	d103      	bne.n	800359e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2258      	movs	r2, #88	; 0x58
 80035a2:	5a9a      	ldrh	r2, [r3, r2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0011      	movs	r1, r2
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7ff fa4d 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035ae:	e00c      	b.n	80035ca <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7fc fe6c 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 80035b8:	e007      	b.n	80035ca <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2108      	movs	r1, #8
 80035c6:	430a      	orrs	r2, r1
 80035c8:	619a      	str	r2, [r3, #24]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b010      	add	sp, #64	; 0x40
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	fffffedf 	.word	0xfffffedf

080035d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle()
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e007      	b.n	8003604 <AroundEdgeCube_Handle+0x1c>
	{
		column_around_edge[i] = 0;
 80035f4:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b07      	cmp	r3, #7
 8003608:	ddf4      	ble.n	80035f4 <AroundEdgeCube_Handle+0xc>
	}
	layer_around_edge = 0;
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <AroundEdgeCube_Handle+0xd0>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <AroundEdgeCube_Handle+0xd4>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <AroundEdgeCube_Handle+0x36>
 8003618:	2b01      	cmp	r3, #1
 800361a:	d023      	beq.n	8003664 <AroundEdgeCube_Handle+0x7c>
			}
			TransmitData(column_around_edge, layer_around_edge);
			position_layer = TOP_N_BOTTOM_CUBE;
			break;
		default:
			break;
 800361c:	e045      	b.n	80036aa <AroundEdgeCube_Handle+0xc2>
			layer_around_edge = 0x81;
 800361e:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <AroundEdgeCube_Handle+0xd0>)
 8003620:	2281      	movs	r2, #129	; 0x81
 8003622:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 8003624:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 8003626:	22ff      	movs	r2, #255	; 0xff
 8003628:	71da      	strb	r2, [r3, #7]
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 800362c:	79da      	ldrb	r2, [r3, #7]
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 8003630:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003632:	2301      	movs	r3, #1
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	e007      	b.n	8003648 <AroundEdgeCube_Handle+0x60>
				column_around_edge[i] = 0x81;
 8003638:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	2281      	movs	r2, #129	; 0x81
 8003640:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3301      	adds	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b06      	cmp	r3, #6
 800364c:	ddf4      	ble.n	8003638 <AroundEdgeCube_Handle+0x50>
			TransmitData(column_around_edge, layer_around_edge);
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <AroundEdgeCube_Handle+0xd0>)
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 8003654:	0011      	movs	r1, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f001 ffc0 	bl	80055dc <TransmitData>
			position_layer = MIDDLE_CUBE;
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <AroundEdgeCube_Handle+0xd4>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
			break;
 8003662:	e022      	b.n	80036aa <AroundEdgeCube_Handle+0xc2>
			layer_around_edge = 0x7e;
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <AroundEdgeCube_Handle+0xd0>)
 8003666:	227e      	movs	r2, #126	; 0x7e
 8003668:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 800366c:	2281      	movs	r2, #129	; 0x81
 800366e:	71da      	strb	r2, [r3, #7]
 8003670:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 8003672:	79da      	ldrb	r2, [r3, #7]
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 8003676:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003678:	2301      	movs	r3, #1
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e007      	b.n	800368e <AroundEdgeCube_Handle+0xa6>
				column_around_edge[i] = 0;
 800367e:	4a0d      	ldr	r2, [pc, #52]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	18d3      	adds	r3, r2, r3
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3301      	adds	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b06      	cmp	r3, #6
 8003692:	ddf4      	ble.n	800367e <AroundEdgeCube_Handle+0x96>
			TransmitData(column_around_edge, layer_around_edge);
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <AroundEdgeCube_Handle+0xd0>)
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <AroundEdgeCube_Handle+0xcc>)
 800369a:	0011      	movs	r1, r2
 800369c:	0018      	movs	r0, r3
 800369e:	f001 ff9d 	bl	80055dc <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <AroundEdgeCube_Handle+0xd4>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
			break;
 80036a8:	46c0      	nop			; (mov r8, r8)
	}
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	200001a4 	.word	0x200001a4
 80036b8:	200001a0 	.word	0x200001a0
 80036bc:	200001ac 	.word	0x200001ac

080036c0 <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <AroundEdgeCube_Set_State+0x38>)
 80036c8:	2205      	movs	r2, #5
 80036ca:	701a      	strb	r2, [r3, #0]
	layer_around_edge = 0;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <AroundEdgeCube_Set_State+0x3c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e007      	b.n	80036e8 <AroundEdgeCube_Set_State+0x28>
	{
		column_around_edge[i] = 0;
 80036d8:	4a09      	ldr	r2, [pc, #36]	; (8003700 <AroundEdgeCube_Set_State+0x40>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3301      	adds	r3, #1
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b07      	cmp	r3, #7
 80036ec:	ddf4      	ble.n	80036d8 <AroundEdgeCube_Set_State+0x18>
	}
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000010 	.word	0x20000010
 80036fc:	200001a0 	.word	0x200001a0
 8003700:	200001a4 	.word	0x200001a4

08003704 <Btn_press_short_Callback>:
{

}

__weak void Btn_press_short_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	000a      	movs	r2, r1
 800370e:	1cbb      	adds	r3, r7, #2
 8003710:	801a      	strh	r2, [r3, #0]

}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}

0800371a <Btn_release_Callback>:

__weak void Btn_release_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	000a      	movs	r2, r1
 8003724:	1cbb      	adds	r3, r7, #2
 8003726:	801a      	strh	r2, [r3, #0]

}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <Btn_press_timeout_Callback>:

__weak void Btn_press_timeout_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	000a      	movs	r2, r1
 800373a:	1cbb      	adds	r3, r7, #2
 800373c:	801a      	strh	r2, [r3, #0]

}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}

08003746 <Btn_Handle>:

void Btn_Handle(Btn_Typedef *BtnX)
{
 8003746:	b5b0      	push	{r4, r5, r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
//*****************Loc nhieu******************//
	uint8_t status = HAL_GPIO_ReadPin(BtnX->GPIOx, BtnX->GPIO_Pin);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8a9b      	ldrh	r3, [r3, #20]
 8003756:	250f      	movs	r5, #15
 8003758:	197c      	adds	r4, r7, r5
 800375a:	0019      	movs	r1, r3
 800375c:	0010      	movs	r0, r2
 800375e:	f7fd fc27 	bl	8000fb0 <HAL_GPIO_ReadPin>
 8003762:	0003      	movs	r3, r0
 8003764:	7023      	strb	r3, [r4, #0]
	if (status != BtnX->Btn_filter)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	789b      	ldrb	r3, [r3, #2]
 800376a:	197a      	adds	r2, r7, r5
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d00b      	beq.n	800378a <Btn_Handle+0x44>
	{
		BtnX->Btn_filter = status;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	197a      	adds	r2, r7, r5
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	709a      	strb	r2, [r3, #2]
		BtnX->Is_debouncing = 1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	70da      	strb	r2, [r3, #3]
		BtnX->Time_debounce = HAL_GetTick();
 8003780:	f7fd f948 	bl	8000a14 <HAL_GetTick>
 8003784:	0002      	movs	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]
	}

//*****************Xac nhan tin hieu******************//
	if (BtnX->Is_debouncing && (HAL_GetTick()-BtnX->Time_debounce >= 15))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	78db      	ldrb	r3, [r3, #3]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00e      	beq.n	80037b0 <Btn_Handle+0x6a>
 8003792:	f7fd f93f 	bl	8000a14 <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b0e      	cmp	r3, #14
 80037a0:	d906      	bls.n	80037b0 <Btn_Handle+0x6a>
	{
		BtnX->Btn_current = BtnX->Btn_filter;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	789a      	ldrb	r2, [r3, #2]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	701a      	strb	r2, [r3, #0]
		BtnX->Is_debouncing = 0;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	70da      	strb	r2, [r3, #3]
	}

//*****************Nhan nha******************//
	if (BtnX->Btn_current != BtnX->Btn_last)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d035      	beq.n	8003828 <Btn_Handle+0xe2>
	{
		if (BtnX->Btn_current == 0)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d110      	bne.n	80037e6 <Btn_Handle+0xa0>
		{
			BtnX->Is_press_timeout = 1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	711a      	strb	r2, [r3, #4]
			Btn_press_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8a9b      	ldrh	r3, [r3, #20]
 80037d2:	0019      	movs	r1, r3
 80037d4:	0010      	movs	r0, r2
 80037d6:	f001 f8ff 	bl	80049d8 <Btn_press_Callback>
			BtnX->Time_start_press = HAL_GetTick();
 80037da:	f7fd f91b 	bl	8000a14 <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e01c      	b.n	8003820 <Btn_Handle+0xda>
		} else
		{
			if (HAL_GetTick() - BtnX->Time_start_press <= 1000)
 80037e6:	f7fd f915 	bl	8000a14 <HAL_GetTick>
 80037ea:	0002      	movs	r2, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	23fa      	movs	r3, #250	; 0xfa
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d807      	bhi.n	800380a <Btn_Handle+0xc4>
			{
				Btn_press_short_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8a9b      	ldrh	r3, [r3, #20]
 8003802:	0019      	movs	r1, r3
 8003804:	0010      	movs	r0, r2
 8003806:	f7ff ff7d 	bl	8003704 <Btn_press_short_Callback>
			}
			Btn_release_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8a9b      	ldrh	r3, [r3, #20]
 8003812:	0019      	movs	r1, r3
 8003814:	0010      	movs	r0, r2
 8003816:	f7ff ff80 	bl	800371a <Btn_release_Callback>
			BtnX->Is_press_timeout = 0;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	711a      	strb	r2, [r3, #4]
		}
		BtnX->Btn_last = BtnX->Btn_current;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	705a      	strb	r2, [r3, #1]
	}
	//*****************Nhan giu******************//
	if (BtnX->Is_press_timeout && (HAL_GetTick() - BtnX->Time_start_press >= 2000))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	791b      	ldrb	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d014      	beq.n	800385a <Btn_Handle+0x114>
 8003830:	f7fd f8f0 	bl	8000a14 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	1ad2      	subs	r2, r2, r3
 800383c:	23fa      	movs	r3, #250	; 0xfa
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	429a      	cmp	r2, r3
 8003842:	d30a      	bcc.n	800385a <Btn_Handle+0x114>
	{
		Btn_press_timeout_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8a9b      	ldrh	r3, [r3, #20]
 800384c:	0019      	movs	r1, r3
 800384e:	0010      	movs	r0, r2
 8003850:	f7ff ff6e 	bl	8003730 <Btn_press_timeout_Callback>
		BtnX->Is_press_timeout = 0;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	711a      	strb	r2, [r3, #4]
	}
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bdb0      	pop	{r4, r5, r7, pc}

08003862 <Btn_Init>:

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	801a      	strh	r2, [r3, #0]
	BtnX->GPIOx = GPIOx;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1dba      	adds	r2, r7, #6
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	829a      	strh	r2, [r3, #20]

}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b004      	add	sp, #16
 8003884:	bd80      	pop	{r7, pc}

08003886 <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube()
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	layer = 0x00;
 800388c:	230b      	movs	r3, #11
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e007      	b.n	80038aa <clearCube+0x24>
	{
		column[i] = 0x00;
 800389a:	003a      	movs	r2, r7
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	18d3      	adds	r3, r2, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	ddf4      	ble.n	800389a <clearCube+0x14>
	}
	TransmitData(column, layer);
 80038b0:	230b      	movs	r3, #11
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	003b      	movs	r3, r7
 80038b8:	0011      	movs	r1, r2
 80038ba:	0018      	movs	r0, r3
 80038bc:	f001 fe8e 	bl	80055dc <TransmitData>
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b004      	add	sp, #16
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle()
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	switch (w_number)
 80038cc:	4bc1      	ldr	r3, [pc, #772]	; (8003bd4 <CountDownCube_Handle+0x30c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d900      	bls.n	80038d6 <CountDownCube_Handle+0xe>
 80038d4:	e284      	b.n	8003de0 <CountDownCube_Handle+0x518>
 80038d6:	009a      	lsls	r2, r3, #2
 80038d8:	4bbf      	ldr	r3, [pc, #764]	; (8003bd8 <CountDownCube_Handle+0x310>)
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	469f      	mov	pc, r3
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80038e0:	f7fd f898 	bl	8000a14 <HAL_GetTick>
 80038e4:	0002      	movs	r2, r0
 80038e6:	4bbd      	ldr	r3, [pc, #756]	; (8003bdc <CountDownCube_Handle+0x314>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2246      	movs	r2, #70	; 0x46
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d32f      	bcc.n	8003952 <CountDownCube_Handle+0x8a>
			{
				if (direction == 1 && (i < 8))  i++;
 80038f2:	4bbb      	ldr	r3, [pc, #748]	; (8003be0 <CountDownCube_Handle+0x318>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d108      	bne.n	800390c <CountDownCube_Handle+0x44>
 80038fa:	4bba      	ldr	r3, [pc, #744]	; (8003be4 <CountDownCube_Handle+0x31c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b07      	cmp	r3, #7
 8003900:	dc04      	bgt.n	800390c <CountDownCube_Handle+0x44>
 8003902:	4bb8      	ldr	r3, [pc, #736]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	4bb6      	ldr	r3, [pc, #728]	; (8003be4 <CountDownCube_Handle+0x31c>)
 800390a:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 800390c:	4bb5      	ldr	r3, [pc, #724]	; (8003be4 <CountDownCube_Handle+0x31c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b07      	cmp	r3, #7
 8003912:	dd02      	ble.n	800391a <CountDownCube_Handle+0x52>
 8003914:	4bb2      	ldr	r3, [pc, #712]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800391a:	4bb1      	ldr	r3, [pc, #708]	; (8003be0 <CountDownCube_Handle+0x318>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <CountDownCube_Handle+0x6c>
 8003922:	4bb0      	ldr	r3, [pc, #704]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	dd04      	ble.n	8003934 <CountDownCube_Handle+0x6c>
 800392a:	4bae      	ldr	r3, [pc, #696]	; (8003be4 <CountDownCube_Handle+0x31c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	4bac      	ldr	r3, [pc, #688]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003932:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003934:	4bab      	ldr	r3, [pc, #684]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <CountDownCube_Handle+0x80>
				{
					direction = 1;
 800393c:	4ba8      	ldr	r3, [pc, #672]	; (8003be0 <CountDownCube_Handle+0x318>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 8003942:	4ba4      	ldr	r3, [pc, #656]	; (8003bd4 <CountDownCube_Handle+0x30c>)
 8003944:	2208      	movs	r2, #8
 8003946:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003948:	f7fd f864 	bl	8000a14 <HAL_GetTick>
 800394c:	0002      	movs	r2, r0
 800394e:	4ba3      	ldr	r3, [pc, #652]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003950:	601a      	str	r2, [r3, #0]
			}

			DigitNine(i);
 8003952:	4ba4      	ldr	r3, [pc, #656]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 fa76 	bl	8003e48 <DigitNine>
		break;
 800395c:	e241      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 800395e:	f7fd f859 	bl	8000a14 <HAL_GetTick>
 8003962:	0002      	movs	r2, r0
 8003964:	4b9d      	ldr	r3, [pc, #628]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2246      	movs	r2, #70	; 0x46
 800396c:	4293      	cmp	r3, r2
 800396e:	d32f      	bcc.n	80039d0 <CountDownCube_Handle+0x108>
			{

				if (direction == 1 && (i < 8))  i++;
 8003970:	4b9b      	ldr	r3, [pc, #620]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d108      	bne.n	800398a <CountDownCube_Handle+0xc2>
 8003978:	4b9a      	ldr	r3, [pc, #616]	; (8003be4 <CountDownCube_Handle+0x31c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b07      	cmp	r3, #7
 800397e:	dc04      	bgt.n	800398a <CountDownCube_Handle+0xc2>
 8003980:	4b98      	ldr	r3, [pc, #608]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	4b97      	ldr	r3, [pc, #604]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003988:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 800398a:	4b96      	ldr	r3, [pc, #600]	; (8003be4 <CountDownCube_Handle+0x31c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b07      	cmp	r3, #7
 8003990:	dd02      	ble.n	8003998 <CountDownCube_Handle+0xd0>
 8003992:	4b93      	ldr	r3, [pc, #588]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003998:	4b91      	ldr	r3, [pc, #580]	; (8003be0 <CountDownCube_Handle+0x318>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d108      	bne.n	80039b2 <CountDownCube_Handle+0xea>
 80039a0:	4b90      	ldr	r3, [pc, #576]	; (8003be4 <CountDownCube_Handle+0x31c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	dd04      	ble.n	80039b2 <CountDownCube_Handle+0xea>
 80039a8:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <CountDownCube_Handle+0x31c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	4b8d      	ldr	r3, [pc, #564]	; (8003be4 <CountDownCube_Handle+0x31c>)
 80039b0:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80039b2:	4b8c      	ldr	r3, [pc, #560]	; (8003be4 <CountDownCube_Handle+0x31c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <CountDownCube_Handle+0xfe>
				{
					direction = 1;
 80039ba:	4b89      	ldr	r3, [pc, #548]	; (8003be0 <CountDownCube_Handle+0x318>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 80039c0:	4b84      	ldr	r3, [pc, #528]	; (8003bd4 <CountDownCube_Handle+0x30c>)
 80039c2:	2207      	movs	r2, #7
 80039c4:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80039c6:	f7fd f825 	bl	8000a14 <HAL_GetTick>
 80039ca:	0002      	movs	r2, r0
 80039cc:	4b83      	ldr	r3, [pc, #524]	; (8003bdc <CountDownCube_Handle+0x314>)
 80039ce:	601a      	str	r2, [r3, #0]
			}

			DigitEight(i);
 80039d0:	4b84      	ldr	r3, [pc, #528]	; (8003be4 <CountDownCube_Handle+0x31c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 fa79 	bl	8003ecc <DigitEight>
		break;
 80039da:	e202      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80039dc:	f7fd f81a 	bl	8000a14 <HAL_GetTick>
 80039e0:	0002      	movs	r2, r0
 80039e2:	4b7e      	ldr	r3, [pc, #504]	; (8003bdc <CountDownCube_Handle+0x314>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2246      	movs	r2, #70	; 0x46
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d32f      	bcc.n	8003a4e <CountDownCube_Handle+0x186>
			{

				if (direction == 1 && (i < 8))  i++;
 80039ee:	4b7c      	ldr	r3, [pc, #496]	; (8003be0 <CountDownCube_Handle+0x318>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d108      	bne.n	8003a08 <CountDownCube_Handle+0x140>
 80039f6:	4b7b      	ldr	r3, [pc, #492]	; (8003be4 <CountDownCube_Handle+0x31c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b07      	cmp	r3, #7
 80039fc:	dc04      	bgt.n	8003a08 <CountDownCube_Handle+0x140>
 80039fe:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	4b77      	ldr	r3, [pc, #476]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a06:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003a08:	4b76      	ldr	r3, [pc, #472]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b07      	cmp	r3, #7
 8003a0e:	dd02      	ble.n	8003a16 <CountDownCube_Handle+0x14e>
 8003a10:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003a16:	4b72      	ldr	r3, [pc, #456]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <CountDownCube_Handle+0x168>
 8003a1e:	4b71      	ldr	r3, [pc, #452]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	dd04      	ble.n	8003a30 <CountDownCube_Handle+0x168>
 8003a26:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	4b6d      	ldr	r3, [pc, #436]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a2e:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003a30:	4b6c      	ldr	r3, [pc, #432]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <CountDownCube_Handle+0x17c>
				{
					direction = 1;
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 8003a3e:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <CountDownCube_Handle+0x30c>)
 8003a40:	2206      	movs	r2, #6
 8003a42:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003a44:	f7fc ffe6 	bl	8000a14 <HAL_GetTick>
 8003a48:	0002      	movs	r2, r0
 8003a4a:	4b64      	ldr	r3, [pc, #400]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003a4c:	601a      	str	r2, [r3, #0]
			}

			DigitSeven(i);
 8003a4e:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fa5e 	bl	8003f14 <DigitSeven>

			break;
 8003a58:	e1c3      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003a5a:	f7fc ffdb 	bl	8000a14 <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	4b5e      	ldr	r3, [pc, #376]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2246      	movs	r2, #70	; 0x46
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d32f      	bcc.n	8003acc <CountDownCube_Handle+0x204>
			{

				if (direction == 1 && (i < 8))  i++;
 8003a6c:	4b5c      	ldr	r3, [pc, #368]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <CountDownCube_Handle+0x1be>
 8003a74:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b07      	cmp	r3, #7
 8003a7a:	dc04      	bgt.n	8003a86 <CountDownCube_Handle+0x1be>
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	4b58      	ldr	r3, [pc, #352]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a84:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003a86:	4b57      	ldr	r3, [pc, #348]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	dd02      	ble.n	8003a94 <CountDownCube_Handle+0x1cc>
 8003a8e:	4b54      	ldr	r3, [pc, #336]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003a94:	4b52      	ldr	r3, [pc, #328]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <CountDownCube_Handle+0x1e6>
 8003a9c:	4b51      	ldr	r3, [pc, #324]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	dd04      	ble.n	8003aae <CountDownCube_Handle+0x1e6>
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1e5a      	subs	r2, r3, #1
 8003aaa:	4b4e      	ldr	r3, [pc, #312]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003aac:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003aae:	4b4d      	ldr	r3, [pc, #308]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <CountDownCube_Handle+0x1fa>
				{
					direction = 1;
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 8003abc:	4b45      	ldr	r3, [pc, #276]	; (8003bd4 <CountDownCube_Handle+0x30c>)
 8003abe:	2205      	movs	r2, #5
 8003ac0:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003ac2:	f7fc ffa7 	bl	8000a14 <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003aca:	601a      	str	r2, [r3, #0]
			}

			DigitSix(i);
 8003acc:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fa55 	bl	8003f80 <DigitSix>

			break;
 8003ad6:	e184      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003ad8:	f7fc ff9c 	bl	8000a14 <HAL_GetTick>
 8003adc:	0002      	movs	r2, r0
 8003ade:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2246      	movs	r2, #70	; 0x46
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d32f      	bcc.n	8003b4a <CountDownCube_Handle+0x282>
			{

				if (direction == 1 && (i < 8))  i++;
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <CountDownCube_Handle+0x23c>
 8003af2:	4b3c      	ldr	r3, [pc, #240]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b07      	cmp	r3, #7
 8003af8:	dc04      	bgt.n	8003b04 <CountDownCube_Handle+0x23c>
 8003afa:	4b3a      	ldr	r3, [pc, #232]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b02:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003b04:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b07      	cmp	r3, #7
 8003b0a:	dd02      	ble.n	8003b12 <CountDownCube_Handle+0x24a>
 8003b0c:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <CountDownCube_Handle+0x264>
 8003b1a:	4b32      	ldr	r3, [pc, #200]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	dd04      	ble.n	8003b2c <CountDownCube_Handle+0x264>
 8003b22:	4b30      	ldr	r3, [pc, #192]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b2a:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <CountDownCube_Handle+0x278>
				{
					direction = 1;
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <CountDownCube_Handle+0x30c>)
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003b40:	f7fc ff68 	bl	8000a14 <HAL_GetTick>
 8003b44:	0002      	movs	r2, r0
 8003b46:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003b48:	601a      	str	r2, [r3, #0]
			}

			DigitFive(i);
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 fa62 	bl	8004018 <DigitFive>
			break;
 8003b54:	e145      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003b56:	f7fc ff5d 	bl	8000a14 <HAL_GetTick>
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2246      	movs	r2, #70	; 0x46
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d32f      	bcc.n	8003bc8 <CountDownCube_Handle+0x300>
			{

				if (direction == 1 && (i < 8))  i++;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d108      	bne.n	8003b82 <CountDownCube_Handle+0x2ba>
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	dc04      	bgt.n	8003b82 <CountDownCube_Handle+0x2ba>
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b80:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b07      	cmp	r3, #7
 8003b88:	dd02      	ble.n	8003b90 <CountDownCube_Handle+0x2c8>
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d108      	bne.n	8003baa <CountDownCube_Handle+0x2e2>
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	dd04      	ble.n	8003baa <CountDownCube_Handle+0x2e2>
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003ba8:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <CountDownCube_Handle+0x2f6>
				{
					direction = 1;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <CountDownCube_Handle+0x318>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <CountDownCube_Handle+0x30c>)
 8003bba:	2203      	movs	r2, #3
 8003bbc:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003bbe:	f7fc ff29 	bl	8000a14 <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <CountDownCube_Handle+0x314>)
 8003bc6:	601a      	str	r2, [r3, #0]
			}

			DigitFour(i);
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <CountDownCube_Handle+0x31c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 fa6f 	bl	80040b0 <DigitFour>
			break;
 8003bd2:	e106      	b.n	8003de2 <CountDownCube_Handle+0x51a>
 8003bd4:	20000009 	.word	0x20000009
 8003bd8:	08006874 	.word	0x08006874
 8003bdc:	200001b8 	.word	0x200001b8
 8003be0:	2000000c 	.word	0x2000000c
 8003be4:	200001bc 	.word	0x200001bc

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003be8:	f7fc ff14 	bl	8000a14 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	4b7e      	ldr	r3, [pc, #504]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2246      	movs	r2, #70	; 0x46
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d32f      	bcc.n	8003c5a <CountDownCube_Handle+0x392>
			{

				if (direction == 1 && (i < 8))  i++;
 8003bfa:	4b7c      	ldr	r3, [pc, #496]	; (8003dec <CountDownCube_Handle+0x524>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d108      	bne.n	8003c14 <CountDownCube_Handle+0x34c>
 8003c02:	4b7b      	ldr	r3, [pc, #492]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b07      	cmp	r3, #7
 8003c08:	dc04      	bgt.n	8003c14 <CountDownCube_Handle+0x34c>
 8003c0a:	4b79      	ldr	r3, [pc, #484]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	4b77      	ldr	r3, [pc, #476]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c12:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003c14:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b07      	cmp	r3, #7
 8003c1a:	dd02      	ble.n	8003c22 <CountDownCube_Handle+0x35a>
 8003c1c:	4b73      	ldr	r3, [pc, #460]	; (8003dec <CountDownCube_Handle+0x524>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003c22:	4b72      	ldr	r3, [pc, #456]	; (8003dec <CountDownCube_Handle+0x524>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <CountDownCube_Handle+0x374>
 8003c2a:	4b71      	ldr	r3, [pc, #452]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	dd04      	ble.n	8003c3c <CountDownCube_Handle+0x374>
 8003c32:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c3a:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <CountDownCube_Handle+0x388>
				{
					direction = 1;
 8003c44:	4b69      	ldr	r3, [pc, #420]	; (8003dec <CountDownCube_Handle+0x524>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 8003c4a:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <CountDownCube_Handle+0x52c>)
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003c50:	f7fc fee0 	bl	8000a14 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	4b64      	ldr	r3, [pc, #400]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003c58:	601a      	str	r2, [r3, #0]
			}

			DigitThree(i);
 8003c5a:	4b65      	ldr	r3, [pc, #404]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 fa6c 	bl	800413c <DigitThree>
			break;
 8003c64:	e0bd      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003c66:	f7fc fed5 	bl	8000a14 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2246      	movs	r2, #70	; 0x46
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d32f      	bcc.n	8003cd8 <CountDownCube_Handle+0x410>
			{

				if (direction == 1 && (i < 8))  i++;
 8003c78:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <CountDownCube_Handle+0x524>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d108      	bne.n	8003c92 <CountDownCube_Handle+0x3ca>
 8003c80:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b07      	cmp	r3, #7
 8003c86:	dc04      	bgt.n	8003c92 <CountDownCube_Handle+0x3ca>
 8003c88:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c90:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003c92:	4b57      	ldr	r3, [pc, #348]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	dd02      	ble.n	8003ca0 <CountDownCube_Handle+0x3d8>
 8003c9a:	4b54      	ldr	r3, [pc, #336]	; (8003dec <CountDownCube_Handle+0x524>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003ca0:	4b52      	ldr	r3, [pc, #328]	; (8003dec <CountDownCube_Handle+0x524>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d108      	bne.n	8003cba <CountDownCube_Handle+0x3f2>
 8003ca8:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	dd04      	ble.n	8003cba <CountDownCube_Handle+0x3f2>
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1e5a      	subs	r2, r3, #1
 8003cb6:	4b4e      	ldr	r3, [pc, #312]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003cb8:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003cba:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <CountDownCube_Handle+0x406>
				{
					direction = 1;
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	; (8003dec <CountDownCube_Handle+0x524>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 8003cc8:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <CountDownCube_Handle+0x52c>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003cce:	f7fc fea1 	bl	8000a14 <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003cd6:	601a      	str	r2, [r3, #0]
			}

			DigitTwo(i);
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f000 fa65 	bl	80041ac <DigitTwo>
			break;
 8003ce2:	e07e      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003ce4:	f7fc fe96 	bl	8000a14 <HAL_GetTick>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2246      	movs	r2, #70	; 0x46
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d32f      	bcc.n	8003d56 <CountDownCube_Handle+0x48e>
			{

				if (direction == 1 && (i < 8))  i++;
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <CountDownCube_Handle+0x524>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <CountDownCube_Handle+0x448>
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b07      	cmp	r3, #7
 8003d04:	dc04      	bgt.n	8003d10 <CountDownCube_Handle+0x448>
 8003d06:	4b3a      	ldr	r3, [pc, #232]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d0e:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003d10:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b07      	cmp	r3, #7
 8003d16:	dd02      	ble.n	8003d1e <CountDownCube_Handle+0x456>
 8003d18:	4b34      	ldr	r3, [pc, #208]	; (8003dec <CountDownCube_Handle+0x524>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003d1e:	4b33      	ldr	r3, [pc, #204]	; (8003dec <CountDownCube_Handle+0x524>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d108      	bne.n	8003d38 <CountDownCube_Handle+0x470>
 8003d26:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	dd04      	ble.n	8003d38 <CountDownCube_Handle+0x470>
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d36:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <CountDownCube_Handle+0x484>
				{
					direction = 1;
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <CountDownCube_Handle+0x524>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <CountDownCube_Handle+0x52c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003d4c:	f7fc fe62 	bl	8000a14 <HAL_GetTick>
 8003d50:	0002      	movs	r2, r0
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003d54:	601a      	str	r2, [r3, #0]
			}

			DigitOne(i);
 8003d56:	4b26      	ldr	r3, [pc, #152]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fa7c 	bl	8004258 <DigitOne>
			break;
 8003d60:	e03f      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003d62:	f7fc fe57 	bl	8000a14 <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2246      	movs	r2, #70	; 0x46
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d32f      	bcc.n	8003dd4 <CountDownCube_Handle+0x50c>
			{

				if (direction == 1 && (i < 8))  i++;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <CountDownCube_Handle+0x524>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d108      	bne.n	8003d8e <CountDownCube_Handle+0x4c6>
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	dc04      	bgt.n	8003d8e <CountDownCube_Handle+0x4c6>
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d8c:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b07      	cmp	r3, #7
 8003d94:	dd02      	ble.n	8003d9c <CountDownCube_Handle+0x4d4>
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <CountDownCube_Handle+0x524>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <CountDownCube_Handle+0x524>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d108      	bne.n	8003db6 <CountDownCube_Handle+0x4ee>
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dd04      	ble.n	8003db6 <CountDownCube_Handle+0x4ee>
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1e5a      	subs	r2, r3, #1
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003db4:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <CountDownCube_Handle+0x502>
				{
					direction = 1;
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <CountDownCube_Handle+0x524>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <CountDownCube_Handle+0x52c>)
 8003dc6:	2209      	movs	r2, #9
 8003dc8:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003dca:	f7fc fe23 	bl	8000a14 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <CountDownCube_Handle+0x520>)
 8003dd2:	601a      	str	r2, [r3, #0]
			}

			DigitZero(i);
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <CountDownCube_Handle+0x528>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 fa89 	bl	80042f0 <DigitZero>
			break;
 8003dde:	e000      	b.n	8003de2 <CountDownCube_Handle+0x51a>

		default:
			break;
 8003de0:	46c0      	nop			; (mov r8, r8)
	}
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	200001b8 	.word	0x200001b8
 8003dec:	2000000c 	.word	0x2000000c
 8003df0:	200001bc 	.word	0x200001bc
 8003df4:	20000009 	.word	0x20000009

08003df8 <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <CountDownCube_Set_Sate+0x40>)
 8003e00:	2206      	movs	r2, #6
 8003e02:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 8003e04:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <CountDownCube_Set_Sate+0x44>)
 8003e06:	2209      	movs	r2, #9
 8003e08:	701a      	strb	r2, [r3, #0]
	direction = 1;
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <CountDownCube_Set_Sate+0x48>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003e10:	2300      	movs	r3, #0
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	e007      	b.n	8003e26 <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 8003e16:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <CountDownCube_Set_Sate+0x4c>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3301      	adds	r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b07      	cmp	r3, #7
 8003e2a:	ddf4      	ble.n	8003e16 <CountDownCube_Set_Sate+0x1e>
	}
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b002      	add	sp, #8
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	20000010 	.word	0x20000010
 8003e3c:	20000009 	.word	0x20000009
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	200001b0 	.word	0x200001b0

08003e48 <DigitNine>:

void DigitNine(int i)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <DigitNine+0x80>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	18d3      	adds	r3, r2, r3
 8003e56:	227e      	movs	r2, #126	; 0x7e
 8003e58:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <DigitNine+0x80>)
 8003e5c:	2181      	movs	r1, #129	; 0x81
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f001 fbbc 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xc3;
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <DigitNine+0x80>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	22c3      	movs	r2, #195	; 0xc3
 8003e6c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60);
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <DigitNine+0x80>)
 8003e70:	2160      	movs	r1, #96	; 0x60
 8003e72:	0018      	movs	r0, r3
 8003e74:	f001 fbb2 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x03;
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <DigitNine+0x80>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	2203      	movs	r2, #3
 8003e80:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <DigitNine+0x80>)
 8003e84:	210c      	movs	r1, #12
 8003e86:	0018      	movs	r0, r3
 8003e88:	f001 fba8 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xff;
 8003e8c:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <DigitNine+0x80>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	18d3      	adds	r3, r2, r3
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02);
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <DigitNine+0x80>)
 8003e98:	2102      	movs	r1, #2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f001 fb9e 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x7f;
 8003ea0:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <DigitNine+0x80>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	18d3      	adds	r3, r2, r3
 8003ea6:	227f      	movs	r2, #127	; 0x7f
 8003ea8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <DigitNine+0x80>)
 8003eac:	2110      	movs	r1, #16
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f001 fb94 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 8003eb4:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <DigitNine+0x80>)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	200001b0 	.word	0x200001b0

08003ecc <DigitEight>:

void DigitEight(int i)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xc3;
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <DigitEight+0x44>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	18d3      	adds	r3, r2, r3
 8003eda:	22c3      	movs	r2, #195	; 0xc3
 8003edc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66);
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <DigitEight+0x44>)
 8003ee0:	2166      	movs	r1, #102	; 0x66
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f001 fb7a 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x7e;
 8003ee8:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <DigitEight+0x44>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	18d3      	adds	r3, r2, r3
 8003eee:	227e      	movs	r2, #126	; 0x7e
 8003ef0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99);
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <DigitEight+0x44>)
 8003ef4:	2199      	movs	r1, #153	; 0x99
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f001 fb70 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 8003efc:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <DigitEight+0x44>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b002      	add	sp, #8
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	200001b0 	.word	0x200001b0

08003f14 <DigitSeven>:

void DigitSeven(int i)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <DigitSeven+0x68>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	18d3      	adds	r3, r2, r3
 8003f22:	22ff      	movs	r2, #255	; 0xff
 8003f24:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0);
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <DigitSeven+0x68>)
 8003f28:	21c0      	movs	r1, #192	; 0xc0
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f001 fb56 	bl	80055dc <TransmitData>

	for (int j = 0; j < 6; j++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e016      	b.n	8003f64 <DigitSeven+0x50>
	{
		column_countdown[i] = 0x03 << j;
 8003f36:	2203      	movs	r2, #3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	b2d9      	uxtb	r1, r3
 8003f40:	4a0e      	ldr	r2, [pc, #56]	; (8003f7c <DigitSeven+0x68>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	1c0a      	adds	r2, r1, #0
 8003f48:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j);
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	411a      	asrs	r2, r3
 8003f50:	0013      	movs	r3, r2
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <DigitSeven+0x68>)
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f001 fb3f 	bl	80055dc <TransmitData>
	for (int j = 0; j < 6; j++)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	dde5      	ble.n	8003f36 <DigitSeven+0x22>
	}

	column_countdown[i] = 0;
 8003f6a:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <DigitSeven+0x68>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	18d3      	adds	r3, r2, r3
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200001b0 	.word	0x200001b0

08003f80 <DigitSix>:

void DigitSix(int i)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8003f88:	4a22      	ldr	r2, [pc, #136]	; (8004014 <DigitSix+0x94>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	18d3      	adds	r3, r2, r3
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <DigitSix+0x94>)
 8003f94:	2142      	movs	r1, #66	; 0x42
 8003f96:	0018      	movs	r0, r3
 8003f98:	f001 fb20 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xc3;
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <DigitSix+0x94>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	18d3      	adds	r3, r2, r3
 8003fa2:	22c3      	movs	r2, #195	; 0xc3
 8003fa4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <DigitSix+0x94>)
 8003fa8:	210c      	movs	r1, #12
 8003faa:	0018      	movs	r0, r3
 8003fac:	f001 fb16 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x7f;
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <DigitSix+0x94>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	227f      	movs	r2, #127	; 0x7f
 8003fb8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <DigitSix+0x94>)
 8003fbc:	2180      	movs	r1, #128	; 0x80
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f001 fb0c 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xc0;
 8003fc4:	4a13      	ldr	r2, [pc, #76]	; (8004014 <DigitSix+0x94>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	22c0      	movs	r2, #192	; 0xc0
 8003fcc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <DigitSix+0x94>)
 8003fd0:	2120      	movs	r1, #32
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f001 fb02 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xfe;
 8003fd8:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <DigitSix+0x94>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	22fe      	movs	r2, #254	; 0xfe
 8003fe0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <DigitSix+0x94>)
 8003fe4:	2110      	movs	r1, #16
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f001 faf8 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x7e;
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <DigitSix+0x94>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	18d3      	adds	r3, r2, r3
 8003ff2:	227e      	movs	r2, #126	; 0x7e
 8003ff4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <DigitSix+0x94>)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f001 faee 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <DigitSix+0x94>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	18d3      	adds	r3, r2, r3
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	b002      	add	sp, #8
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	200001b0 	.word	0x200001b0

08004018 <DigitFive>:

void DigitFive(int i)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

	column_countdown[i] = 0xff;
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <DigitFive+0x94>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	18d3      	adds	r3, r2, r3
 8004026:	22ff      	movs	r2, #255	; 0xff
 8004028:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0);
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <DigitFive+0x94>)
 800402c:	21c0      	movs	r1, #192	; 0xc0
 800402e:	0018      	movs	r0, r3
 8004030:	f001 fad4 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xc0;
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <DigitFive+0x94>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	22c0      	movs	r2, #192	; 0xc0
 800403c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20);
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <DigitFive+0x94>)
 8004040:	2120      	movs	r1, #32
 8004042:	0018      	movs	r0, r3
 8004044:	f001 faca 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xfe;
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <DigitFive+0x94>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	18d3      	adds	r3, r2, r3
 800404e:	22fe      	movs	r2, #254	; 0xfe
 8004050:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10);
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <DigitFive+0x94>)
 8004054:	2110      	movs	r1, #16
 8004056:	0018      	movs	r0, r3
 8004058:	f001 fac0 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x03;
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <DigitFive+0x94>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	18d3      	adds	r3, r2, r3
 8004062:	2203      	movs	r2, #3
 8004064:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c);
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <DigitFive+0x94>)
 8004068:	210c      	movs	r1, #12
 800406a:	0018      	movs	r0, r3
 800406c:	f001 fab6 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x83;
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <DigitFive+0x94>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	2283      	movs	r2, #131	; 0x83
 8004078:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02);
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <DigitFive+0x94>)
 800407c:	2102      	movs	r1, #2
 800407e:	0018      	movs	r0, r3
 8004080:	f001 faac 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x7e;
 8004084:	4a09      	ldr	r2, [pc, #36]	; (80040ac <DigitFive+0x94>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	18d3      	adds	r3, r2, r3
 800408a:	227e      	movs	r2, #126	; 0x7e
 800408c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01);
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <DigitFive+0x94>)
 8004090:	2101      	movs	r1, #1
 8004092:	0018      	movs	r0, r3
 8004094:	f001 faa2 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <DigitFive+0x94>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	18d3      	adds	r3, r2, r3
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b002      	add	sp, #8
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	200001b0 	.word	0x200001b0

080040b0 <DigitFour>:

void DigitFour(int i)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x06;
 80040b8:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <DigitFour+0x84>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	2206      	movs	r2, #6
 80040c0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3);
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <DigitFour+0x84>)
 80040c4:	21f3      	movs	r1, #243	; 0xf3
 80040c6:	0018      	movs	r0, r3
 80040c8:	f001 fa88 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xff;
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <DigitFour+0x84>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	18d3      	adds	r3, r2, r3
 80040d2:	22ff      	movs	r2, #255	; 0xff
 80040d4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <DigitFour+0x84>)
 80040d8:	210c      	movs	r1, #12
 80040da:	0018      	movs	r0, r3
 80040dc:	f001 fa7e 	bl	80055dc <TransmitData>

	for (int j = 0; j < 4; j++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e01a      	b.n	800411c <DigitFour+0x6c>
	{
	column_countdown[i] = 0x08 << j;
 80040e6:	2208      	movs	r2, #8
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	409a      	lsls	r2, r3
 80040ec:	0013      	movs	r3, r2
 80040ee:	b2d9      	uxtb	r1, r3
 80040f0:	4a10      	ldr	r2, [pc, #64]	; (8004134 <DigitFour+0x84>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	18d3      	adds	r3, r2, r3
 80040f6:	1c0a      	adds	r2, r1, #0
 80040f8:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	411a      	asrs	r2, r3
 8004100:	0013      	movs	r3, r2
 8004102:	b2da      	uxtb	r2, r3
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <DigitFour+0x88>)
 8004106:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown);
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <DigitFour+0x88>)
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <DigitFour+0x84>)
 800410e:	0011      	movs	r1, r2
 8004110:	0018      	movs	r0, r3
 8004112:	f001 fa63 	bl	80055dc <TransmitData>
	for (int j = 0; j < 4; j++)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3301      	adds	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b03      	cmp	r3, #3
 8004120:	dde1      	ble.n	80040e6 <DigitFour+0x36>
	}

	column_countdown[i] = 0;
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <DigitFour+0x84>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	18d3      	adds	r3, r2, r3
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b004      	add	sp, #16
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200001b0 	.word	0x200001b0
 8004138:	200001ad 	.word	0x200001ad

0800413c <DigitThree>:

void DigitThree(int i)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8004144:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <DigitThree+0x6c>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	227e      	movs	r2, #126	; 0x7e
 800414c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <DigitThree+0x6c>)
 8004150:	2181      	movs	r1, #129	; 0x81
 8004152:	0018      	movs	r0, r3
 8004154:	f001 fa42 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xe7;
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <DigitThree+0x6c>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	22e7      	movs	r2, #231	; 0xe7
 8004160:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <DigitThree+0x6c>)
 8004164:	2142      	movs	r1, #66	; 0x42
 8004166:	0018      	movs	r0, r3
 8004168:	f001 fa38 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xc3;
 800416c:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <DigitThree+0x6c>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	22c3      	movs	r2, #195	; 0xc3
 8004174:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24);
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <DigitThree+0x6c>)
 8004178:	2124      	movs	r1, #36	; 0x24
 800417a:	0018      	movs	r0, r3
 800417c:	f001 fa2e 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x06;
 8004180:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <DigitThree+0x6c>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	18d3      	adds	r3, r2, r3
 8004186:	2206      	movs	r2, #6
 8004188:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18);
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <DigitThree+0x6c>)
 800418c:	2118      	movs	r1, #24
 800418e:	0018      	movs	r0, r3
 8004190:	f001 fa24 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <DigitThree+0x6c>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	18d3      	adds	r3, r2, r3
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b002      	add	sp, #8
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	200001b0 	.word	0x200001b0

080041ac <DigitTwo>:

void DigitTwo(int i)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <DigitTwo+0xa8>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	18d3      	adds	r3, r2, r3
 80041ba:	227e      	movs	r2, #126	; 0x7e
 80041bc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <DigitTwo+0xa8>)
 80041c0:	2180      	movs	r1, #128	; 0x80
 80041c2:	0018      	movs	r0, r3
 80041c4:	f001 fa0a 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xc3;
 80041c8:	4a22      	ldr	r2, [pc, #136]	; (8004254 <DigitTwo+0xa8>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	18d3      	adds	r3, r2, r3
 80041ce:	22c3      	movs	r2, #195	; 0xc3
 80041d0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <DigitTwo+0xa8>)
 80041d4:	2140      	movs	r1, #64	; 0x40
 80041d6:	0018      	movs	r0, r3
 80041d8:	f001 fa00 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x83;
 80041dc:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <DigitTwo+0xa8>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	18d3      	adds	r3, r2, r3
 80041e2:	2283      	movs	r2, #131	; 0x83
 80041e4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <DigitTwo+0xa8>)
 80041e8:	2120      	movs	r1, #32
 80041ea:	0018      	movs	r0, r3
 80041ec:	f001 f9f6 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x0e;
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <DigitTwo+0xa8>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	18d3      	adds	r3, r2, r3
 80041f6:	220e      	movs	r2, #14
 80041f8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <DigitTwo+0xa8>)
 80041fc:	2110      	movs	r1, #16
 80041fe:	0018      	movs	r0, r3
 8004200:	f001 f9ec 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x1c;
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <DigitTwo+0xa8>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	18d3      	adds	r3, r2, r3
 800420a:	221c      	movs	r2, #28
 800420c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <DigitTwo+0xa8>)
 8004210:	2108      	movs	r1, #8
 8004212:	0018      	movs	r0, r3
 8004214:	f001 f9e2 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x70;
 8004218:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <DigitTwo+0xa8>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	2270      	movs	r2, #112	; 0x70
 8004220:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04);
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <DigitTwo+0xa8>)
 8004224:	2104      	movs	r1, #4
 8004226:	0018      	movs	r0, r3
 8004228:	f001 f9d8 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xff;
 800422c:	4a09      	ldr	r2, [pc, #36]	; (8004254 <DigitTwo+0xa8>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	18d3      	adds	r3, r2, r3
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03);
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <DigitTwo+0xa8>)
 8004238:	2103      	movs	r1, #3
 800423a:	0018      	movs	r0, r3
 800423c:	f001 f9ce 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <DigitTwo+0xa8>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b002      	add	sp, #8
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	200001b0 	.word	0x200001b0

08004258 <DigitOne>:

void DigitOne(int i)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8004260:	4a22      	ldr	r2, [pc, #136]	; (80042ec <DigitOne+0x94>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	18d3      	adds	r3, r2, r3
 8004266:	22ff      	movs	r2, #255	; 0xff
 8004268:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <DigitOne+0x94>)
 800426c:	2101      	movs	r1, #1
 800426e:	0018      	movs	r0, r3
 8004270:	f001 f9b4 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x98;
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <DigitOne+0x94>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	18d3      	adds	r3, r2, r3
 800427a:	2298      	movs	r2, #152	; 0x98
 800427c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 800427e:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <DigitOne+0x94>)
 8004280:	2108      	movs	r1, #8
 8004282:	0018      	movs	r0, r3
 8004284:	f001 f9aa 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xd8;
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <DigitOne+0x94>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	18d3      	adds	r3, r2, r3
 800428e:	22d8      	movs	r2, #216	; 0xd8
 8004290:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <DigitOne+0x94>)
 8004294:	2110      	movs	r1, #16
 8004296:	0018      	movs	r0, r3
 8004298:	f001 f9a0 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x78;
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <DigitOne+0x94>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	18d3      	adds	r3, r2, r3
 80042a2:	2278      	movs	r2, #120	; 0x78
 80042a4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <DigitOne+0x94>)
 80042a8:	2120      	movs	r1, #32
 80042aa:	0018      	movs	r0, r3
 80042ac:	f001 f996 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x38;
 80042b0:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <DigitOne+0x94>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	18d3      	adds	r3, r2, r3
 80042b6:	2238      	movs	r2, #56	; 0x38
 80042b8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <DigitOne+0x94>)
 80042bc:	2140      	movs	r1, #64	; 0x40
 80042be:	0018      	movs	r0, r3
 80042c0:	f001 f98c 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x18;
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <DigitOne+0x94>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	2218      	movs	r2, #24
 80042cc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86);
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <DigitOne+0x94>)
 80042d0:	2186      	movs	r1, #134	; 0x86
 80042d2:	0018      	movs	r0, r3
 80042d4:	f001 f982 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <DigitOne+0x94>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	18d3      	adds	r3, r2, r3
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	200001b0 	.word	0x200001b0

080042f0 <DigitZero>:

void DigitZero(int i)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x3c;
 80042f8:	4a13      	ldr	r2, [pc, #76]	; (8004348 <DigitZero+0x58>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	223c      	movs	r2, #60	; 0x3c
 8004300:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <DigitZero+0x58>)
 8004304:	2181      	movs	r1, #129	; 0x81
 8004306:	0018      	movs	r0, r3
 8004308:	f001 f968 	bl	80055dc <TransmitData>

	column_countdown[i] = 0x66;
 800430c:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <DigitZero+0x58>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	18d3      	adds	r3, r2, r3
 8004312:	2266      	movs	r2, #102	; 0x66
 8004314:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8004316:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <DigitZero+0x58>)
 8004318:	2142      	movs	r1, #66	; 0x42
 800431a:	0018      	movs	r0, r3
 800431c:	f001 f95e 	bl	80055dc <TransmitData>

	column_countdown[i] = 0xc3;
 8004320:	4a09      	ldr	r2, [pc, #36]	; (8004348 <DigitZero+0x58>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	18d3      	adds	r3, r2, r3
 8004326:	22c3      	movs	r2, #195	; 0xc3
 8004328:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c);
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <DigitZero+0x58>)
 800432c:	213c      	movs	r1, #60	; 0x3c
 800432e:	0018      	movs	r0, r3
 8004330:	f001 f954 	bl	80055dc <TransmitData>

	column_countdown[i] = 0;
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <DigitZero+0x58>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	b002      	add	sp, #8
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	200001b0 	.word	0x200001b0

0800434c <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle()
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0

	switch (size_layer)
 8004352:	4b80      	ldr	r3, [pc, #512]	; (8004554 <DiagonalCube_Handle+0x208>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b03      	cmp	r3, #3
 8004358:	d100      	bne.n	800435c <DiagonalCube_Handle+0x10>
 800435a:	e0b5      	b.n	80044c8 <DiagonalCube_Handle+0x17c>
 800435c:	dd00      	ble.n	8004360 <DiagonalCube_Handle+0x14>
 800435e:	e0eb      	b.n	8004538 <DiagonalCube_Handle+0x1ec>
 8004360:	2b02      	cmp	r3, #2
 8004362:	d100      	bne.n	8004366 <DiagonalCube_Handle+0x1a>
 8004364:	e078      	b.n	8004458 <DiagonalCube_Handle+0x10c>
 8004366:	dd00      	ble.n	800436a <DiagonalCube_Handle+0x1e>
 8004368:	e0e6      	b.n	8004538 <DiagonalCube_Handle+0x1ec>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <DiagonalCube_Handle+0x28>
 800436e:	2b01      	cmp	r3, #1
 8004370:	d039      	beq.n	80043e6 <DiagonalCube_Handle+0x9a>
				size_layer = SMALLEST;
				time_start = HAL_GetTick();
			}
			break;
		default:
			break;
 8004372:	e0e1      	b.n	8004538 <DiagonalCube_Handle+0x1ec>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004374:	f7fc fb4e 	bl	8000a14 <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	4b77      	ldr	r3, [pc, #476]	; (8004558 <DiagonalCube_Handle+0x20c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2296      	movs	r2, #150	; 0x96
 8004382:	4293      	cmp	r3, r2
 8004384:	d200      	bcs.n	8004388 <DiagonalCube_Handle+0x3c>
 8004386:	e0d9      	b.n	800453c <DiagonalCube_Handle+0x1f0>
				layer_diagonal = 0x18;
 8004388:	4b74      	ldr	r3, [pc, #464]	; (800455c <DiagonalCube_Handle+0x210>)
 800438a:	2218      	movs	r2, #24
 800438c:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 800438e:	2303      	movs	r3, #3
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e007      	b.n	80043a4 <DiagonalCube_Handle+0x58>
					column_diagonal[i] = 0x18;
 8004394:	4a72      	ldr	r2, [pc, #456]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	18d3      	adds	r3, r2, r3
 800439a:	2218      	movs	r2, #24
 800439c:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3301      	adds	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	ddf4      	ble.n	8004394 <DiagonalCube_Handle+0x48>
				TransmitData(column_diagonal, layer_diagonal);
 80043aa:	4b6c      	ldr	r3, [pc, #432]	; (800455c <DiagonalCube_Handle+0x210>)
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <DiagonalCube_Handle+0x214>)
 80043b0:	0011      	movs	r1, r2
 80043b2:	0018      	movs	r0, r3
 80043b4:	f001 f912 	bl	80055dc <TransmitData>
				for (int i = 0; i < 8; i++)
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e007      	b.n	80043ce <DiagonalCube_Handle+0x82>
					column_diagonal[i] = 0;
 80043be:	4a68      	ldr	r2, [pc, #416]	; (8004560 <DiagonalCube_Handle+0x214>)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	18d3      	adds	r3, r2, r3
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b07      	cmp	r3, #7
 80043d2:	ddf4      	ble.n	80043be <DiagonalCube_Handle+0x72>
				size_layer = MEDIUM;
 80043d4:	4b5f      	ldr	r3, [pc, #380]	; (8004554 <DiagonalCube_Handle+0x208>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80043da:	f7fc fb1b 	bl	8000a14 <HAL_GetTick>
 80043de:	0002      	movs	r2, r0
 80043e0:	4b5d      	ldr	r3, [pc, #372]	; (8004558 <DiagonalCube_Handle+0x20c>)
 80043e2:	601a      	str	r2, [r3, #0]
			break;
 80043e4:	e0aa      	b.n	800453c <DiagonalCube_Handle+0x1f0>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80043e6:	f7fc fb15 	bl	8000a14 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <DiagonalCube_Handle+0x20c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2296      	movs	r2, #150	; 0x96
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d200      	bcs.n	80043fa <DiagonalCube_Handle+0xae>
 80043f8:	e0a2      	b.n	8004540 <DiagonalCube_Handle+0x1f4>
				layer_diagonal = 0x24;
 80043fa:	4b58      	ldr	r3, [pc, #352]	; (800455c <DiagonalCube_Handle+0x210>)
 80043fc:	2224      	movs	r2, #36	; 0x24
 80043fe:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004400:	2302      	movs	r3, #2
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e007      	b.n	8004416 <DiagonalCube_Handle+0xca>
					column_diagonal[i] = 0x3c;
 8004406:	4a56      	ldr	r2, [pc, #344]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	18d3      	adds	r3, r2, r3
 800440c:	223c      	movs	r2, #60	; 0x3c
 800440e:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3301      	adds	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b05      	cmp	r3, #5
 800441a:	ddf4      	ble.n	8004406 <DiagonalCube_Handle+0xba>
				TransmitData(column_diagonal, layer_diagonal);
 800441c:	4b4f      	ldr	r3, [pc, #316]	; (800455c <DiagonalCube_Handle+0x210>)
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	4b4f      	ldr	r3, [pc, #316]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004422:	0011      	movs	r1, r2
 8004424:	0018      	movs	r0, r3
 8004426:	f001 f8d9 	bl	80055dc <TransmitData>
				for (int i = 0; i < 8; i++)
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e007      	b.n	8004440 <DiagonalCube_Handle+0xf4>
					column_diagonal[i] = 0;
 8004430:	4a4b      	ldr	r2, [pc, #300]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	18d3      	adds	r3, r2, r3
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3301      	adds	r3, #1
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b07      	cmp	r3, #7
 8004444:	ddf4      	ble.n	8004430 <DiagonalCube_Handle+0xe4>
				size_layer = LARGE;
 8004446:	4b43      	ldr	r3, [pc, #268]	; (8004554 <DiagonalCube_Handle+0x208>)
 8004448:	2202      	movs	r2, #2
 800444a:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 800444c:	f7fc fae2 	bl	8000a14 <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	4b41      	ldr	r3, [pc, #260]	; (8004558 <DiagonalCube_Handle+0x20c>)
 8004454:	601a      	str	r2, [r3, #0]
			break;
 8004456:	e073      	b.n	8004540 <DiagonalCube_Handle+0x1f4>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004458:	f7fc fadc 	bl	8000a14 <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	4b3e      	ldr	r3, [pc, #248]	; (8004558 <DiagonalCube_Handle+0x20c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2296      	movs	r2, #150	; 0x96
 8004466:	4293      	cmp	r3, r2
 8004468:	d36c      	bcc.n	8004544 <DiagonalCube_Handle+0x1f8>
				layer_diagonal = 0x42;
 800446a:	4b3c      	ldr	r3, [pc, #240]	; (800455c <DiagonalCube_Handle+0x210>)
 800446c:	2242      	movs	r2, #66	; 0x42
 800446e:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004470:	2301      	movs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e007      	b.n	8004486 <DiagonalCube_Handle+0x13a>
					column_diagonal[i] = 0x7e;
 8004476:	4a3a      	ldr	r2, [pc, #232]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	18d3      	adds	r3, r2, r3
 800447c:	227e      	movs	r2, #126	; 0x7e
 800447e:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b06      	cmp	r3, #6
 800448a:	ddf4      	ble.n	8004476 <DiagonalCube_Handle+0x12a>
				TransmitData(column_diagonal, layer_diagonal);
 800448c:	4b33      	ldr	r3, [pc, #204]	; (800455c <DiagonalCube_Handle+0x210>)
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	4b33      	ldr	r3, [pc, #204]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f001 f8a1 	bl	80055dc <TransmitData>
				for (int i = 0; i < 8; i++)
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	e007      	b.n	80044b0 <DiagonalCube_Handle+0x164>
					column_diagonal[i] = 0;
 80044a0:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <DiagonalCube_Handle+0x214>)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	3301      	adds	r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b07      	cmp	r3, #7
 80044b4:	ddf4      	ble.n	80044a0 <DiagonalCube_Handle+0x154>
				size_layer = LARGEST;
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <DiagonalCube_Handle+0x208>)
 80044b8:	2203      	movs	r2, #3
 80044ba:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80044bc:	f7fc faaa 	bl	8000a14 <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	4b25      	ldr	r3, [pc, #148]	; (8004558 <DiagonalCube_Handle+0x20c>)
 80044c4:	601a      	str	r2, [r3, #0]
			break;
 80044c6:	e03d      	b.n	8004544 <DiagonalCube_Handle+0x1f8>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80044c8:	f7fc faa4 	bl	8000a14 <HAL_GetTick>
 80044cc:	0002      	movs	r2, r0
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <DiagonalCube_Handle+0x20c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2296      	movs	r2, #150	; 0x96
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d336      	bcc.n	8004548 <DiagonalCube_Handle+0x1fc>
				layer_diagonal= 0x81;
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <DiagonalCube_Handle+0x210>)
 80044dc:	2281      	movs	r2, #129	; 0x81
 80044de:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	e007      	b.n	80044f6 <DiagonalCube_Handle+0x1aa>
					column_diagonal[i] = 0xff;
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <DiagonalCube_Handle+0x214>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	18d3      	adds	r3, r2, r3
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3301      	adds	r3, #1
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b07      	cmp	r3, #7
 80044fa:	ddf4      	ble.n	80044e6 <DiagonalCube_Handle+0x19a>
				TransmitData(column_diagonal, layer_diagonal);
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <DiagonalCube_Handle+0x210>)
 80044fe:	781a      	ldrb	r2, [r3, #0]
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004502:	0011      	movs	r1, r2
 8004504:	0018      	movs	r0, r3
 8004506:	f001 f869 	bl	80055dc <TransmitData>
				for (int i = 0; i < 8; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	e007      	b.n	8004520 <DiagonalCube_Handle+0x1d4>
					column_diagonal[i] = 0;
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <DiagonalCube_Handle+0x214>)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	18d3      	adds	r3, r2, r3
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b07      	cmp	r3, #7
 8004524:	ddf4      	ble.n	8004510 <DiagonalCube_Handle+0x1c4>
				size_layer = SMALLEST;
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <DiagonalCube_Handle+0x208>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 800452c:	f7fc fa72 	bl	8000a14 <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <DiagonalCube_Handle+0x20c>)
 8004534:	601a      	str	r2, [r3, #0]
			break;
 8004536:	e007      	b.n	8004548 <DiagonalCube_Handle+0x1fc>
			break;
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	e006      	b.n	800454a <DiagonalCube_Handle+0x1fe>
			break;
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	e004      	b.n	800454a <DiagonalCube_Handle+0x1fe>
			break;
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	e002      	b.n	800454a <DiagonalCube_Handle+0x1fe>
			break;
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	e000      	b.n	800454a <DiagonalCube_Handle+0x1fe>
			break;
 8004548:	46c0      	nop			; (mov r8, r8)
	}
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b008      	add	sp, #32
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	200001c0 	.word	0x200001c0
 8004558:	200001cc 	.word	0x200001cc
 800455c:	200001c1 	.word	0x200001c1
 8004560:	200001c4 	.word	0x200001c4

08004564 <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <DiagonalCube_Set_State+0x3c>)
 800456c:	2204      	movs	r2, #4
 800456e:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004570:	2300      	movs	r3, #0
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e007      	b.n	8004586 <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 8004576:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <DiagonalCube_Set_State+0x40>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	18d3      	adds	r3, r2, r3
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3301      	adds	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b07      	cmp	r3, #7
 800458a:	ddf4      	ble.n	8004576 <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <DiagonalCube_Set_State+0x44>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <DiagonalCube_Set_State+0x48>)
 8004594:	2203      	movs	r2, #3
 8004596:	701a      	strb	r2, [r3, #0]
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b002      	add	sp, #8
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000010 	.word	0x20000010
 80045a4:	200001c4 	.word	0x200001c4
 80045a8:	200001c1 	.word	0x200001c1
 80045ac:	200001c0 	.word	0x200001c0

080045b0 <DisplayLed>:
uint8_t WhichByte, WhichBit, WhichColumn;
uint8_t dataOut[9];
extern SPI_HandleTypeDef hspi1;

void DisplayLed(uint8_t x, uint8_t y, uint8_t  z, uint8_t display)
{
 80045b0:	b5b0      	push	{r4, r5, r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	0005      	movs	r5, r0
 80045b8:	000c      	movs	r4, r1
 80045ba:	0010      	movs	r0, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	1c2a      	adds	r2, r5, #0
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	1dbb      	adds	r3, r7, #6
 80045c6:	1c22      	adds	r2, r4, #0
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	1d7b      	adds	r3, r7, #5
 80045cc:	1c02      	adds	r2, r0, #0
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	1c0a      	adds	r2, r1, #0
 80045d4:	701a      	strb	r2, [r3, #0]

	WhichByte = (((z << 6)+(y << 3) + x) >> 3);
 80045d6:	1d7b      	adds	r3, r7, #5
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	019a      	lsls	r2, r3, #6
 80045dc:	1dbb      	adds	r3, r7, #6
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	18d2      	adds	r2, r2, r3
 80045e4:	1dfb      	adds	r3, r7, #7
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	10db      	asrs	r3, r3, #3
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <DisplayLed+0x140>)
 80045f0:	701a      	strb	r2, [r3, #0]
	WhichBit = ((z << 6) + (y << 3) + x) - (WhichByte << 3);
 80045f2:	1d7b      	adds	r3, r7, #5
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	019b      	lsls	r3, r3, #6
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	1dbb      	adds	r3, r7, #6
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	18d3      	adds	r3, r2, r3
 8004604:	b2da      	uxtb	r2, r3
 8004606:	1dfb      	adds	r3, r7, #7
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	18d3      	adds	r3, r2, r3
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4b38      	ldr	r3, [pc, #224]	; (80046f0 <DisplayLed+0x140>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b36      	ldr	r3, [pc, #216]	; (80046f4 <DisplayLed+0x144>)
 800461c:	701a      	strb	r2, [r3, #0]
	WhichColumn = WhichByte - (z*8);
 800461e:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <DisplayLed+0x140>)
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	1d7b      	adds	r3, r7, #5
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	b2da      	uxtb	r2, r3
 800462e:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <DisplayLed+0x148>)
 8004630:	701a      	strb	r2, [r3, #0]
	if (z == 8) IClayer = 0xff;
 8004632:	1d7b      	adds	r3, r7, #5
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b08      	cmp	r3, #8
 8004638:	d103      	bne.n	8004642 <DisplayLed+0x92>
 800463a:	4b30      	ldr	r3, [pc, #192]	; (80046fc <DisplayLed+0x14c>)
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e007      	b.n	8004652 <DisplayLed+0xa2>
	else IClayer = 0x01 <<  z;
 8004642:	1d7b      	adds	r3, r7, #5
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	409a      	lsls	r2, r3
 800464a:	0013      	movs	r3, r2
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <DisplayLed+0x14c>)
 8004650:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0x01 << WhichBit;
 8004652:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <DisplayLed+0x144>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	001a      	movs	r2, r3
 8004658:	2301      	movs	r3, #1
 800465a:	4093      	lsls	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <DisplayLed+0x148>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	001a      	movs	r2, r3
 8004664:	b2c9      	uxtb	r1, r1
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <DisplayLed+0x150>)
 8004668:	5499      	strb	r1, [r3, r2]
	dataOut[0] = IClayer;
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <DisplayLed+0x14c>)
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	4b25      	ldr	r3, [pc, #148]	; (8004704 <DisplayLed+0x154>)
 8004670:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < 9; i++)
 8004672:	230f      	movs	r3, #15
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e00e      	b.n	800469a <DisplayLed+0xea>
	{
		dataOut[i] = ICcolumn[i-1];
 800467c:	200f      	movs	r0, #15
 800467e:	183b      	adds	r3, r7, r0
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	1e5a      	subs	r2, r3, #1
 8004684:	183b      	adds	r3, r7, r0
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	491d      	ldr	r1, [pc, #116]	; (8004700 <DisplayLed+0x150>)
 800468a:	5c89      	ldrb	r1, [r1, r2]
 800468c:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <DisplayLed+0x154>)
 800468e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < 9; i++)
 8004690:	183b      	adds	r3, r7, r0
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	183b      	adds	r3, r7, r0
 8004696:	3201      	adds	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	230f      	movs	r3, #15
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d9eb      	bls.n	800467c <DisplayLed+0xcc>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80046a4:	2390      	movs	r3, #144	; 0x90
 80046a6:	05db      	lsls	r3, r3, #23
 80046a8:	2200      	movs	r2, #0
 80046aa:	2140      	movs	r1, #64	; 0x40
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7fc fc9c 	bl	8000fea <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 80046b2:	4914      	ldr	r1, [pc, #80]	; (8004704 <DisplayLed+0x154>)
 80046b4:	4814      	ldr	r0, [pc, #80]	; (8004708 <DisplayLed+0x158>)
 80046b6:	2364      	movs	r3, #100	; 0x64
 80046b8:	2209      	movs	r2, #9
 80046ba:	f7fd fb59 	bl	8001d70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 80046be:	2390      	movs	r3, #144	; 0x90
 80046c0:	05db      	lsls	r3, r3, #23
 80046c2:	2201      	movs	r2, #1
 80046c4:	2140      	movs	r1, #64	; 0x40
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7fc fc8f 	bl	8000fea <HAL_GPIO_WritePin>
	if (!display)
 80046cc:	1d3b      	adds	r3, r7, #4
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d108      	bne.n	80046e6 <DisplayLed+0x136>
	{
		IClayer = 0;
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <DisplayLed+0x14c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
		ICcolumn[WhichColumn] = 0;
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <DisplayLed+0x148>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	001a      	movs	r2, r3
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <DisplayLed+0x150>)
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]
	}
}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bdb0      	pop	{r4, r5, r7, pc}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	200001d9 	.word	0x200001d9
 80046f4:	200001da 	.word	0x200001da
 80046f8:	200001db 	.word	0x200001db
 80046fc:	200001d8 	.word	0x200001d8
 8004700:	200001d0 	.word	0x200001d0
 8004704:	200001dc 	.word	0x200001dc
 8004708:	20000094 	.word	0x20000094

0800470c <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle() //ok
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 8004712:	4b93      	ldr	r3, [pc, #588]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	71da      	strb	r2, [r3, #7]
 8004718:	4b91      	ldr	r3, [pc, #580]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800471a:	79da      	ldrb	r2, [r3, #7]
 800471c:	4b90      	ldr	r3, [pc, #576]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800471e:	719a      	strb	r2, [r3, #6]
 8004720:	4b8f      	ldr	r3, [pc, #572]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004722:	799a      	ldrb	r2, [r3, #6]
 8004724:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004726:	715a      	strb	r2, [r3, #5]
 8004728:	4b8d      	ldr	r3, [pc, #564]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800472a:	795a      	ldrb	r2, [r3, #5]
 800472c:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800472e:	711a      	strb	r2, [r3, #4]
 8004730:	4b8b      	ldr	r3, [pc, #556]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004732:	791a      	ldrb	r2, [r3, #4]
 8004734:	4b8a      	ldr	r3, [pc, #552]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004736:	70da      	strb	r2, [r3, #3]
 8004738:	4b89      	ldr	r3, [pc, #548]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800473a:	78da      	ldrb	r2, [r3, #3]
 800473c:	4b88      	ldr	r3, [pc, #544]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800473e:	709a      	strb	r2, [r3, #2]
 8004740:	4b87      	ldr	r3, [pc, #540]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004742:	789a      	ldrb	r2, [r3, #2]
 8004744:	4b86      	ldr	r3, [pc, #536]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004746:	705a      	strb	r2, [r3, #1]
 8004748:	4b85      	ldr	r3, [pc, #532]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800474a:	785a      	ldrb	r2, [r3, #1]
 800474c:	4b84      	ldr	r3, [pc, #528]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800474e:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 8004750:	4b83      	ldr	r3, [pc, #524]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004752:	227e      	movs	r2, #126	; 0x7e
 8004754:	739a      	strb	r2, [r3, #14]
 8004756:	4b82      	ldr	r3, [pc, #520]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004758:	7b9a      	ldrb	r2, [r3, #14]
 800475a:	4b81      	ldr	r3, [pc, #516]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800475c:	735a      	strb	r2, [r3, #13]
 800475e:	4b80      	ldr	r3, [pc, #512]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004760:	7b5a      	ldrb	r2, [r3, #13]
 8004762:	4b7f      	ldr	r3, [pc, #508]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004764:	731a      	strb	r2, [r3, #12]
 8004766:	4b7e      	ldr	r3, [pc, #504]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004768:	7b1a      	ldrb	r2, [r3, #12]
 800476a:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800476c:	72da      	strb	r2, [r3, #11]
 800476e:	4b7c      	ldr	r3, [pc, #496]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004770:	7ada      	ldrb	r2, [r3, #11]
 8004772:	4b7b      	ldr	r3, [pc, #492]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004774:	729a      	strb	r2, [r3, #10]
 8004776:	4b7a      	ldr	r3, [pc, #488]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004778:	7a9a      	ldrb	r2, [r3, #10]
 800477a:	4b79      	ldr	r3, [pc, #484]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800477c:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 800477e:	4b78      	ldr	r3, [pc, #480]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004780:	223c      	movs	r2, #60	; 0x3c
 8004782:	755a      	strb	r2, [r3, #21]
 8004784:	4b76      	ldr	r3, [pc, #472]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004786:	7d5a      	ldrb	r2, [r3, #21]
 8004788:	4b75      	ldr	r3, [pc, #468]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800478a:	751a      	strb	r2, [r3, #20]
 800478c:	4b74      	ldr	r3, [pc, #464]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800478e:	7d1a      	ldrb	r2, [r3, #20]
 8004790:	4b73      	ldr	r3, [pc, #460]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004792:	74da      	strb	r2, [r3, #19]
 8004794:	4b72      	ldr	r3, [pc, #456]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004796:	7cda      	ldrb	r2, [r3, #19]
 8004798:	4b71      	ldr	r3, [pc, #452]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800479a:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 800479c:	4b70      	ldr	r3, [pc, #448]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 800479e:	2218      	movs	r2, #24
 80047a0:	771a      	strb	r2, [r3, #28]
 80047a2:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 80047a4:	7f1a      	ldrb	r2, [r3, #28]
 80047a6:	4b6e      	ldr	r3, [pc, #440]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 80047a8:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 80047aa:	4b6e      	ldr	r3, [pc, #440]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 80047b0:	4b6c      	ldr	r3, [pc, #432]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 80047b2:	227e      	movs	r2, #126	; 0x7e
 80047b4:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 80047b6:	4b6b      	ldr	r3, [pc, #428]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 80047b8:	223c      	movs	r2, #60	; 0x3c
 80047ba:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 80047bc:	4b69      	ldr	r3, [pc, #420]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 80047be:	2218      	movs	r2, #24
 80047c0:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 80047c2:	4b69      	ldr	r3, [pc, #420]	; (8004968 <GrowShrinkCube_Handle+0x25c>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d100      	bne.n	80047cc <GrowShrinkCube_Handle+0xc0>
 80047ca:	e090      	b.n	80048ee <GrowShrinkCube_Handle+0x1e2>
 80047cc:	dd00      	ble.n	80047d0 <GrowShrinkCube_Handle+0xc4>
 80047ce:	e0b9      	b.n	8004944 <GrowShrinkCube_Handle+0x238>
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d060      	beq.n	8004896 <GrowShrinkCube_Handle+0x18a>
 80047d4:	dd00      	ble.n	80047d8 <GrowShrinkCube_Handle+0xcc>
 80047d6:	e0b5      	b.n	8004944 <GrowShrinkCube_Handle+0x238>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <GrowShrinkCube_Handle+0xd6>
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d02d      	beq.n	800483c <GrowShrinkCube_Handle+0x130>
				time_start = HAL_GetTick();
				size_cube = TWO_X_TWO_CUBE;
			}
			break;
		default:
			break;
 80047e0:	e0b0      	b.n	8004944 <GrowShrinkCube_Handle+0x238>
			if (HAL_GetTick() - time_start >= time_todo2)
 80047e2:	f7fc f917 	bl	8000a14 <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	4b60      	ldr	r3, [pc, #384]	; (800496c <GrowShrinkCube_Handle+0x260>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	22c8      	movs	r2, #200	; 0xc8
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d200      	bcs.n	80047f6 <GrowShrinkCube_Handle+0xea>
 80047f4:	e0a8      	b.n	8004948 <GrowShrinkCube_Handle+0x23c>
				for (int j = 0; j < 8; j++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	e013      	b.n	8004824 <GrowShrinkCube_Handle+0x118>
					temp[j] = column_growshrink[3][j];
 80047fc:	4a58      	ldr	r2, [pc, #352]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	18d3      	adds	r3, r2, r3
 8004802:	3318      	adds	r3, #24
 8004804:	7819      	ldrb	r1, [r3, #0]
 8004806:	003a      	movs	r2, r7
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	18d3      	adds	r3, r2, r3
 800480c:	1c0a      	adds	r2, r1, #0
 800480e:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3]);
 8004810:	4b54      	ldr	r3, [pc, #336]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 8004812:	78da      	ldrb	r2, [r3, #3]
 8004814:	003b      	movs	r3, r7
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f000 fedf 	bl	80055dc <TransmitData>
				for (int j = 0; j < 8; j++)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3301      	adds	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b07      	cmp	r3, #7
 8004828:	dde8      	ble.n	80047fc <GrowShrinkCube_Handle+0xf0>
				time_start = HAL_GetTick();
 800482a:	f7fc f8f3 	bl	8000a14 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	4b4e      	ldr	r3, [pc, #312]	; (800496c <GrowShrinkCube_Handle+0x260>)
 8004832:	601a      	str	r2, [r3, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 8004834:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <GrowShrinkCube_Handle+0x25c>)
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
			break;
 800483a:	e085      	b.n	8004948 <GrowShrinkCube_Handle+0x23c>
			if (HAL_GetTick() - time_start >= time_todo2)
 800483c:	f7fc f8ea 	bl	8000a14 <HAL_GetTick>
 8004840:	0002      	movs	r2, r0
 8004842:	4b4a      	ldr	r3, [pc, #296]	; (800496c <GrowShrinkCube_Handle+0x260>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	22c8      	movs	r2, #200	; 0xc8
 800484a:	4293      	cmp	r3, r2
 800484c:	d200      	bcs.n	8004850 <GrowShrinkCube_Handle+0x144>
 800484e:	e07d      	b.n	800494c <GrowShrinkCube_Handle+0x240>
				for (int j = 0; j < 8; j++)
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e013      	b.n	800487e <GrowShrinkCube_Handle+0x172>
					temp[j] = column_growshrink[2][j];
 8004856:	4a42      	ldr	r2, [pc, #264]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	18d3      	adds	r3, r2, r3
 800485c:	3310      	adds	r3, #16
 800485e:	7819      	ldrb	r1, [r3, #0]
 8004860:	003a      	movs	r2, r7
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	18d3      	adds	r3, r2, r3
 8004866:	1c0a      	adds	r2, r1, #0
 8004868:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2]);
 800486a:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 800486c:	789a      	ldrb	r2, [r3, #2]
 800486e:	003b      	movs	r3, r7
 8004870:	0011      	movs	r1, r2
 8004872:	0018      	movs	r0, r3
 8004874:	f000 feb2 	bl	80055dc <TransmitData>
				for (int j = 0; j < 8; j++)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3301      	adds	r3, #1
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b07      	cmp	r3, #7
 8004882:	dde8      	ble.n	8004856 <GrowShrinkCube_Handle+0x14a>
				time_start = HAL_GetTick();
 8004884:	f7fc f8c6 	bl	8000a14 <HAL_GetTick>
 8004888:	0002      	movs	r2, r0
 800488a:	4b38      	ldr	r3, [pc, #224]	; (800496c <GrowShrinkCube_Handle+0x260>)
 800488c:	601a      	str	r2, [r3, #0]
				size_cube = SIX_X_SIX_CUBE;
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <GrowShrinkCube_Handle+0x25c>)
 8004890:	2202      	movs	r2, #2
 8004892:	701a      	strb	r2, [r3, #0]
			break;
 8004894:	e05a      	b.n	800494c <GrowShrinkCube_Handle+0x240>
			if (HAL_GetTick() - time_start >= time_todo2)
 8004896:	f7fc f8bd 	bl	8000a14 <HAL_GetTick>
 800489a:	0002      	movs	r2, r0
 800489c:	4b33      	ldr	r3, [pc, #204]	; (800496c <GrowShrinkCube_Handle+0x260>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	22c8      	movs	r2, #200	; 0xc8
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d353      	bcc.n	8004950 <GrowShrinkCube_Handle+0x244>
				for (int j = 0; j < 8; j++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e013      	b.n	80048d6 <GrowShrinkCube_Handle+0x1ca>
					temp[j] = column_growshrink[1][j];
 80048ae:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	18d3      	adds	r3, r2, r3
 80048b4:	3308      	adds	r3, #8
 80048b6:	7819      	ldrb	r1, [r3, #0]
 80048b8:	003a      	movs	r2, r7
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	1c0a      	adds	r2, r1, #0
 80048c0:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1]);
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 80048c4:	785a      	ldrb	r2, [r3, #1]
 80048c6:	003b      	movs	r3, r7
 80048c8:	0011      	movs	r1, r2
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fe86 	bl	80055dc <TransmitData>
				for (int j = 0; j < 8; j++)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b07      	cmp	r3, #7
 80048da:	dde8      	ble.n	80048ae <GrowShrinkCube_Handle+0x1a2>
				time_start = HAL_GetTick();
 80048dc:	f7fc f89a 	bl	8000a14 <HAL_GetTick>
 80048e0:	0002      	movs	r2, r0
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <GrowShrinkCube_Handle+0x260>)
 80048e4:	601a      	str	r2, [r3, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <GrowShrinkCube_Handle+0x25c>)
 80048e8:	2203      	movs	r2, #3
 80048ea:	701a      	strb	r2, [r3, #0]
			break;
 80048ec:	e030      	b.n	8004950 <GrowShrinkCube_Handle+0x244>
			if (HAL_GetTick() - time_start >= time_todo2)
 80048ee:	f7fc f891 	bl	8000a14 <HAL_GetTick>
 80048f2:	0002      	movs	r2, r0
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <GrowShrinkCube_Handle+0x260>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	22c8      	movs	r2, #200	; 0xc8
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d329      	bcc.n	8004954 <GrowShrinkCube_Handle+0x248>
				for (int j = 0; j < 8; j++)
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	e012      	b.n	800492c <GrowShrinkCube_Handle+0x220>
					temp[j] = column_growshrink[0][j];
 8004906:	4a16      	ldr	r2, [pc, #88]	; (8004960 <GrowShrinkCube_Handle+0x254>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	18d3      	adds	r3, r2, r3
 800490c:	7819      	ldrb	r1, [r3, #0]
 800490e:	003a      	movs	r2, r7
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	18d3      	adds	r3, r2, r3
 8004914:	1c0a      	adds	r2, r1, #0
 8004916:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0]);
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <GrowShrinkCube_Handle+0x258>)
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	003b      	movs	r3, r7
 800491e:	0011      	movs	r1, r2
 8004920:	0018      	movs	r0, r3
 8004922:	f000 fe5b 	bl	80055dc <TransmitData>
				for (int j = 0; j < 8; j++)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	3301      	adds	r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b07      	cmp	r3, #7
 8004930:	dde9      	ble.n	8004906 <GrowShrinkCube_Handle+0x1fa>
				time_start = HAL_GetTick();
 8004932:	f7fc f86f 	bl	8000a14 <HAL_GetTick>
 8004936:	0002      	movs	r2, r0
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <GrowShrinkCube_Handle+0x260>)
 800493a:	601a      	str	r2, [r3, #0]
				size_cube = TWO_X_TWO_CUBE;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <GrowShrinkCube_Handle+0x25c>)
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
			break;
 8004942:	e007      	b.n	8004954 <GrowShrinkCube_Handle+0x248>
			break;
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	e006      	b.n	8004956 <GrowShrinkCube_Handle+0x24a>
			break;
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	e004      	b.n	8004956 <GrowShrinkCube_Handle+0x24a>
			break;
 800494c:	46c0      	nop			; (mov r8, r8)
 800494e:	e002      	b.n	8004956 <GrowShrinkCube_Handle+0x24a>
			break;
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	e000      	b.n	8004956 <GrowShrinkCube_Handle+0x24a>
			break;
 8004954:	46c0      	nop			; (mov r8, r8)
	}
}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	b006      	add	sp, #24
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	200001ec 	.word	0x200001ec
 8004964:	2000020c 	.word	0x2000020c
 8004968:	200001e5 	.word	0x200001e5
 800496c:	200001e8 	.word	0x200001e8

08004970 <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <GrowShrinkCube_Set_State+0x58>)
 8004978:	2203      	movs	r2, #3
 800497a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 800497c:	2300      	movs	r3, #0
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	e018      	b.n	80049b4 <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <GrowShrinkCube_Set_State+0x5c>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	18d3      	adds	r3, r2, r3
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 800498c:	2300      	movs	r3, #0
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	e00a      	b.n	80049a8 <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 8004992:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <GrowShrinkCube_Set_State+0x60>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	18d2      	adds	r2, r2, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	18d3      	adds	r3, r2, r3
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b07      	cmp	r3, #7
 80049ac:	ddf1      	ble.n	8004992 <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3301      	adds	r3, #1
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	dde3      	ble.n	8004982 <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <GrowShrinkCube_Set_State+0x64>)
 80049bc:	2203      	movs	r2, #3
 80049be:	701a      	strb	r2, [r3, #0]
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000010 	.word	0x20000010
 80049cc:	2000020c 	.word	0x2000020c
 80049d0:	200001ec 	.word	0x200001ec
 80049d4:	200001e5 	.word	0x200001e5

080049d8 <Btn_press_Callback>:
#include "led_cube_handle.h"

Cube_Status currentEffect = RANDOM_RAIN_CUBE;

void Btn_press_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	000a      	movs	r2, r1
 80049e2:	1cbb      	adds	r3, r7, #2
 80049e4:	801a      	strh	r2, [r3, #0]
	switch(currentEffect){
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <Btn_press_Callback+0x64>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d821      	bhi.n	8004a32 <Btn_press_Callback+0x5a>
 80049ee:	009a      	lsls	r2, r3, #2
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <Btn_press_Callback+0x68>)
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	469f      	mov	pc, r3
	case TURN_OFF_ALL_LEDS:
		currentEffect = TURN_ON_ALL_LEDS;
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <Btn_press_Callback+0x64>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
		break;
 80049fe:	e019      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case TURN_ON_ALL_LEDS:
		PlaneCube_Set_State();
 8004a00:	f000 fa04 	bl	8004e0c <PlaneCube_Set_State>
		break;
 8004a04:	e016      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case SWEEP_ALL_LEDS:
		GrowShrinkCube_Set_State();
 8004a06:	f7ff ffb3 	bl	8004970 <GrowShrinkCube_Set_State>
		break;
 8004a0a:	e013      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case GROW_SHRINK_CUBE:
		DiagonalCube_Set_State();
 8004a0c:	f7ff fdaa 	bl	8004564 <DiagonalCube_Set_State>
		break;
 8004a10:	e010      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case DIAGONAL_CUBE:
		AroundEdgeCube_Set_State();
 8004a12:	f7fe fe55 	bl	80036c0 <AroundEdgeCube_Set_State>
		break;
 8004a16:	e00d      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case AROUND_EDGE_CUBE:
		CountDownCube_Set_Sate();
 8004a18:	f7ff f9ee 	bl	8003df8 <CountDownCube_Set_Sate>
		break;
 8004a1c:	e00a      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case COUNT_DOWN_CUBE:
		RandomRainCube_Set_State();
 8004a1e:	f000 fa97 	bl	8004f50 <RandomRainCube_Set_State>
		break;
 8004a22:	e007      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case RANDOM_RAIN_CUBE:
		SpiralCube_Set_State();
 8004a24:	f000 fdc6 	bl	80055b4 <SpiralCube_Set_State>
		break;
 8004a28:	e004      	b.n	8004a34 <Btn_press_Callback+0x5c>
	case SPIRAL_CUBE:
		currentEffect = TURN_OFF_ALL_LEDS;
 8004a2a:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <Btn_press_Callback+0x64>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
		break;
 8004a30:	e000      	b.n	8004a34 <Btn_press_Callback+0x5c>
	default:
		break;
 8004a32:	46c0      	nop			; (mov r8, r8)
	}
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000010 	.word	0x20000010
 8004a40:	0800689c 	.word	0x0800689c

08004a44 <Led_cube_Handle>:

void Led_cube_Handle(Cube_Status cube_state)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	1dfb      	adds	r3, r7, #7
 8004a4e:	701a      	strb	r2, [r3, #0]
	switch (cube_state) {
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d820      	bhi.n	8004a9a <Led_cube_Handle+0x56>
 8004a58:	009a      	lsls	r2, r3, #2
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <Led_cube_Handle+0x60>)
 8004a5c:	18d3      	adds	r3, r2, r3
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	469f      	mov	pc, r3
		case TURN_OFF_ALL_LEDS:
			clearCube();
 8004a62:	f7fe ff10 	bl	8003886 <clearCube>
			break;
 8004a66:	e019      	b.n	8004a9c <Led_cube_Handle+0x58>
		case TURN_ON_ALL_LEDS:
			lightCube();
 8004a68:	f000 f81e 	bl	8004aa8 <lightCube>
			break;
 8004a6c:	e016      	b.n	8004a9c <Led_cube_Handle+0x58>
		case SWEEP_ALL_LEDS:
			PlaneCube_Handle();
 8004a6e:	f000 f847 	bl	8004b00 <PlaneCube_Handle>
			break;
 8004a72:	e013      	b.n	8004a9c <Led_cube_Handle+0x58>
		case GROW_SHRINK_CUBE:
			GrowShrinkCube_Handle();
 8004a74:	f7ff fe4a 	bl	800470c <GrowShrinkCube_Handle>
			break;
 8004a78:	e010      	b.n	8004a9c <Led_cube_Handle+0x58>
		case DIAGONAL_CUBE:
			DiagonalCube_Handle();
 8004a7a:	f7ff fc67 	bl	800434c <DiagonalCube_Handle>
			break;
 8004a7e:	e00d      	b.n	8004a9c <Led_cube_Handle+0x58>
		case AROUND_EDGE_CUBE:
			AroundEdgeCube_Handle();
 8004a80:	f7fe fdb2 	bl	80035e8 <AroundEdgeCube_Handle>
			break;
 8004a84:	e00a      	b.n	8004a9c <Led_cube_Handle+0x58>
		case COUNT_DOWN_CUBE:
			CountDownCube_Handle();
 8004a86:	f7fe ff1f 	bl	80038c8 <CountDownCube_Handle>
			break;
 8004a8a:	e007      	b.n	8004a9c <Led_cube_Handle+0x58>
		case RANDOM_RAIN_CUBE:
			RandomRainCube_Handle(4);
 8004a8c:	2004      	movs	r0, #4
 8004a8e:	f000 f9ed 	bl	8004e6c <RandomRainCube_Handle>
			break;
 8004a92:	e003      	b.n	8004a9c <Led_cube_Handle+0x58>
		case SPIRAL_CUBE:
			SpiralCube_Handle();
 8004a94:	f000 fa6c 	bl	8004f70 <SpiralCube_Handle>
			break;
 8004a98:	e000      	b.n	8004a9c <Led_cube_Handle+0x58>
		default:
			break;
 8004a9a:	46c0      	nop			; (mov r8, r8)
	}
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	080068c0 	.word	0x080068c0

08004aa8 <lightCube>:
#include "light_cube.h"

void lightCube()
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	for (int i = 0;  i < 8; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e01d      	b.n	8004af0 <lightCube+0x48>
	{
		for (int j = 0; j < 8; j++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	e007      	b.n	8004aca <lightCube+0x22>
		{
			column[i] = 0xff;
 8004aba:	1d3a      	adds	r2, r7, #4
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	18d3      	adds	r3, r2, r3
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b07      	cmp	r3, #7
 8004ace:	ddf4      	ble.n	8004aba <lightCube+0x12>
		}
		layer = 0x80 >> i;
 8004ad0:	2280      	movs	r2, #128	; 0x80
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	411a      	asrs	r2, r3
 8004ad6:	210f      	movs	r1, #15
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	701a      	strb	r2, [r3, #0]
		TransmitData(column, layer);
 8004adc:	187b      	adds	r3, r7, r1
 8004ade:	781a      	ldrb	r2, [r3, #0]
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f000 fd79 	bl	80055dc <TransmitData>
	for (int i = 0;  i < 8; i++)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3301      	adds	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b07      	cmp	r3, #7
 8004af4:	ddde      	ble.n	8004ab4 <lightCube+0xc>
	}
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(){
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
	switch(way_state){
 8004b06:	4bbb      	ldr	r3, [pc, #748]	; (8004df4 <PlaneCube_Handle+0x2f4>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d100      	bne.n	8004b10 <PlaneCube_Handle+0x10>
 8004b0e:	e100      	b.n	8004d12 <PlaneCube_Handle+0x212>
 8004b10:	dd00      	ble.n	8004b14 <PlaneCube_Handle+0x14>
 8004b12:	e164      	b.n	8004dde <PlaneCube_Handle+0x2de>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <PlaneCube_Handle+0x1e>
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d06c      	beq.n	8004bf6 <PlaneCube_Handle+0xf6>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 8004b1c:	e15f      	b.n	8004dde <PlaneCube_Handle+0x2de>
		layer_plane = 0xff;
 8004b1e:	4bb6      	ldr	r3, [pc, #728]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004b20:	22ff      	movs	r2, #255	; 0xff
 8004b22:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004b24:	f7fb ff76 	bl	8000a14 <HAL_GetTick>
 8004b28:	0002      	movs	r2, r0
 8004b2a:	4bb4      	ldr	r3, [pc, #720]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2264      	movs	r2, #100	; 0x64
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d200      	bcs.n	8004b38 <PlaneCube_Handle+0x38>
 8004b36:	e154      	b.n	8004de2 <PlaneCube_Handle+0x2e2>
			if (way)
 8004b38:	4bb1      	ldr	r3, [pc, #708]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d027      	beq.n	8004b90 <PlaneCube_Handle+0x90>
				column_plane[i] = 0xff;
 8004b40:	4bb0      	ldr	r3, [pc, #704]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4ab0      	ldr	r2, [pc, #704]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004b46:	21ff      	movs	r1, #255	; 0xff
 8004b48:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8004b4a:	4bab      	ldr	r3, [pc, #684]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	4bae      	ldr	r3, [pc, #696]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004b50:	0011      	movs	r1, r2
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 fd42 	bl	80055dc <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 8004b58:	4bab      	ldr	r3, [pc, #684]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004b5a:	79db      	ldrb	r3, [r3, #7]
 8004b5c:	2bff      	cmp	r3, #255	; 0xff
 8004b5e:	d103      	bne.n	8004b68 <PlaneCube_Handle+0x68>
 8004b60:	4ba7      	ldr	r3, [pc, #668]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e004      	b.n	8004b72 <PlaneCube_Handle+0x72>
				else i++;
 8004b68:	4ba6      	ldr	r3, [pc, #664]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	4ba5      	ldr	r3, [pc, #660]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004b70:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e007      	b.n	8004b88 <PlaneCube_Handle+0x88>
					column_plane[j] = 0;
 8004b78:	4aa3      	ldr	r2, [pc, #652]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	18d3      	adds	r3, r2, r3
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3301      	adds	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b07      	cmp	r3, #7
 8004b8c:	ddf4      	ble.n	8004b78 <PlaneCube_Handle+0x78>
 8004b8e:	e02c      	b.n	8004bea <PlaneCube_Handle+0xea>
				column_plane[i] = 0xff;
 8004b90:	4b9c      	ldr	r3, [pc, #624]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a9c      	ldr	r2, [pc, #624]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004b96:	21ff      	movs	r1, #255	; 0xff
 8004b98:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8004b9a:	4b97      	ldr	r3, [pc, #604]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	4b9a      	ldr	r3, [pc, #616]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004ba0:	0011      	movs	r1, r2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 fd1a 	bl	80055dc <TransmitData>
				if (column_plane[0] == 0xff)
 8004ba8:	4b97      	ldr	r3, [pc, #604]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2bff      	cmp	r3, #255	; 0xff
 8004bae:	d109      	bne.n	8004bc4 <PlaneCube_Handle+0xc4>
						way = 1;
 8004bb0:	4b93      	ldr	r3, [pc, #588]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
						i = 0;
 8004bb6:	4b93      	ldr	r3, [pc, #588]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
						way_state = OY;
 8004bbc:	4b8d      	ldr	r3, [pc, #564]	; (8004df4 <PlaneCube_Handle+0x2f4>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e004      	b.n	8004bce <PlaneCube_Handle+0xce>
				else i--;
 8004bc4:	4b8f      	ldr	r3, [pc, #572]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	1e5a      	subs	r2, r3, #1
 8004bca:	4b8e      	ldr	r3, [pc, #568]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004bcc:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e007      	b.n	8004be4 <PlaneCube_Handle+0xe4>
					column_plane[j] = 0;
 8004bd4:	4a8c      	ldr	r2, [pc, #560]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	18d3      	adds	r3, r2, r3
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3301      	adds	r3, #1
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	ddf4      	ble.n	8004bd4 <PlaneCube_Handle+0xd4>
			timer = HAL_GetTick();
 8004bea:	f7fb ff13 	bl	8000a14 <HAL_GetTick>
 8004bee:	0002      	movs	r2, r0
 8004bf0:	4b82      	ldr	r3, [pc, #520]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004bf2:	601a      	str	r2, [r3, #0]
		break;
 8004bf4:	e0f5      	b.n	8004de2 <PlaneCube_Handle+0x2e2>
		layer_plane = 0xff;
 8004bf6:	4b80      	ldr	r3, [pc, #512]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 8004bfc:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d119      	bne.n	8004c38 <PlaneCube_Handle+0x138>
			for (int j = 0; j < 8; j++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	e007      	b.n	8004c1a <PlaneCube_Handle+0x11a>
				column_plane[j] = 1;
 8004c0a:	4a7f      	ldr	r2, [pc, #508]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	18d3      	adds	r3, r2, r3
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3301      	adds	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b07      	cmp	r3, #7
 8004c1e:	ddf4      	ble.n	8004c0a <PlaneCube_Handle+0x10a>
			TransmitData(column_plane, layer_plane);
 8004c20:	4b75      	ldr	r3, [pc, #468]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	4b78      	ldr	r3, [pc, #480]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 fcd7 	bl	80055dc <TransmitData>
			timer = HAL_GetTick();
 8004c2e:	f7fb fef1 	bl	8000a14 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	4b71      	ldr	r3, [pc, #452]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004c36:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004c38:	f7fb feec 	bl	8000a14 <HAL_GetTick>
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2264      	movs	r2, #100	; 0x64
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d200      	bcs.n	8004c4c <PlaneCube_Handle+0x14c>
 8004c4a:	e0cc      	b.n	8004de6 <PlaneCube_Handle+0x2e6>
			if (way)
 8004c4c:	4b6c      	ldr	r3, [pc, #432]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d022      	beq.n	8004c9a <PlaneCube_Handle+0x19a>
				for (int j = 0; j < 8; j++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e00d      	b.n	8004c76 <PlaneCube_Handle+0x176>
					column_plane[j] <<= 1;
 8004c5a:	4a6b      	ldr	r2, [pc, #428]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	18d3      	adds	r3, r2, r3
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	18db      	adds	r3, r3, r3
 8004c64:	b2d9      	uxtb	r1, r3
 8004c66:	4a68      	ldr	r2, [pc, #416]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	18d3      	adds	r3, r2, r3
 8004c6c:	1c0a      	adds	r2, r1, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3301      	adds	r3, #1
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b07      	cmp	r3, #7
 8004c7a:	ddee      	ble.n	8004c5a <PlaneCube_Handle+0x15a>
				TransmitData(column_plane, layer_plane);
 8004c7c:	4b5e      	ldr	r3, [pc, #376]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004c7e:	781a      	ldrb	r2, [r3, #0]
 8004c80:	4b61      	ldr	r3, [pc, #388]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004c82:	0011      	movs	r1, r2
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 fca9 	bl	80055dc <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 8004c8a:	4b5f      	ldr	r3, [pc, #380]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d139      	bne.n	8004d06 <PlaneCube_Handle+0x206>
 8004c92:	4b5b      	ldr	r3, [pc, #364]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e035      	b.n	8004d06 <PlaneCube_Handle+0x206>
				for (int j = 0; j < 8; j++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e00d      	b.n	8004cbc <PlaneCube_Handle+0x1bc>
					column_plane[j] >>= 1;
 8004ca0:	4a59      	ldr	r2, [pc, #356]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	18d3      	adds	r3, r2, r3
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	b2d9      	uxtb	r1, r3
 8004cac:	4a56      	ldr	r2, [pc, #344]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	18d3      	adds	r3, r2, r3
 8004cb2:	1c0a      	adds	r2, r1, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b07      	cmp	r3, #7
 8004cc0:	ddee      	ble.n	8004ca0 <PlaneCube_Handle+0x1a0>
				TransmitData(column_plane, layer_plane);
 8004cc2:	4b4d      	ldr	r3, [pc, #308]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004cc4:	781a      	ldrb	r2, [r3, #0]
 8004cc6:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004cc8:	0011      	movs	r1, r2
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 fc86 	bl	80055dc <TransmitData>
				if (column_plane[0] == 0x00)
 8004cd0:	4b4d      	ldr	r3, [pc, #308]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <PlaneCube_Handle+0x206>
					for (int j = 0; j < 8; j++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	e007      	b.n	8004cee <PlaneCube_Handle+0x1ee>
						column_plane[j] = 0xff;
 8004cde:	4a4a      	ldr	r2, [pc, #296]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	18d3      	adds	r3, r2, r3
 8004ce4:	22ff      	movs	r2, #255	; 0xff
 8004ce6:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b07      	cmp	r3, #7
 8004cf2:	ddf4      	ble.n	8004cde <PlaneCube_Handle+0x1de>
					layer_plane = 0;
 8004cf4:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
					way = 1;
 8004cfa:	4b41      	ldr	r3, [pc, #260]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8004d00:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <PlaneCube_Handle+0x2f4>)
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8004d06:	f7fb fe85 	bl	8000a14 <HAL_GetTick>
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004d0e:	601a      	str	r2, [r3, #0]
		break;
 8004d10:	e069      	b.n	8004de6 <PlaneCube_Handle+0x2e6>
		if(layer_plane == 0)
 8004d12:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <PlaneCube_Handle+0x238>
			layer_plane = 1;
 8004d1a:	4b37      	ldr	r3, [pc, #220]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane);
 8004d20:	4b35      	ldr	r3, [pc, #212]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004d26:	0011      	movs	r1, r2
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 fc57 	bl	80055dc <TransmitData>
			timer = HAL_GetTick();
 8004d2e:	f7fb fe71 	bl	8000a14 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004d36:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8004d38:	f7fb fe6c 	bl	8000a14 <HAL_GetTick>
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	4b2f      	ldr	r3, [pc, #188]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2264      	movs	r2, #100	; 0x64
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d34f      	bcc.n	8004dea <PlaneCube_Handle+0x2ea>
			if(way)
 8004d4a:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <PlaneCube_Handle+0x27c>
				layer_plane <<= 1;
 8004d52:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	18db      	adds	r3, r3, r3
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d5c:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004d64:	0011      	movs	r1, r2
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 fc38 	bl	80055dc <TransmitData>
				if(layer_plane == 0x80) way = 0;
 8004d6c:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b80      	cmp	r3, #128	; 0x80
 8004d72:	d12e      	bne.n	8004dd2 <PlaneCube_Handle+0x2d2>
 8004d74:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e02a      	b.n	8004dd2 <PlaneCube_Handle+0x2d2>
				layer_plane >>= 1;
 8004d7c:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d86:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8004d88:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004d8e:	0011      	movs	r1, r2
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 fc23 	bl	80055dc <TransmitData>
				if(layer_plane == 0x01)
 8004d96:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d119      	bne.n	8004dd2 <PlaneCube_Handle+0x2d2>
					for (int j = 0; j < 8; j++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	607b      	str	r3, [r7, #4]
 8004da2:	e007      	b.n	8004db4 <PlaneCube_Handle+0x2b4>
						column_plane[j] = 0;
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <PlaneCube_Handle+0x308>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3301      	adds	r3, #1
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b07      	cmp	r3, #7
 8004db8:	ddf4      	ble.n	8004da4 <PlaneCube_Handle+0x2a4>
					i = 0;
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <PlaneCube_Handle+0x304>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
					way = 1;
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <PlaneCube_Handle+0x300>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <PlaneCube_Handle+0x2f4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <PlaneCube_Handle+0x2f8>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8004dd2:	f7fb fe1f 	bl	8000a14 <HAL_GetTick>
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <PlaneCube_Handle+0x2fc>)
 8004dda:	601a      	str	r2, [r3, #0]
		break;
 8004ddc:	e005      	b.n	8004dea <PlaneCube_Handle+0x2ea>
		break;
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	e004      	b.n	8004dec <PlaneCube_Handle+0x2ec>
		break;
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	e002      	b.n	8004dec <PlaneCube_Handle+0x2ec>
		break;
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	e000      	b.n	8004dec <PlaneCube_Handle+0x2ec>
		break;
 8004dea:	46c0      	nop			; (mov r8, r8)
	}
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b008      	add	sp, #32
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20000210 	.word	0x20000210
 8004df8:	20000218 	.word	0x20000218
 8004dfc:	20000214 	.word	0x20000214
 8004e00:	20000211 	.word	0x20000211
 8004e04:	20000224 	.word	0x20000224
 8004e08:	2000021c 	.word	0x2000021c

08004e0c <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <PlaneCube_Set_State+0x48>)
 8004e14:	2202      	movs	r2, #2
 8004e16:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	607b      	str	r3, [r7, #4]
 8004e1c:	e007      	b.n	8004e2e <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <PlaneCube_Set_State+0x4c>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b07      	cmp	r3, #7
 8004e32:	ddf4      	ble.n	8004e1e <PlaneCube_Set_State+0x12>
	}
	i = 0;
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <PlaneCube_Set_State+0x50>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
	way = 1;
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <PlaneCube_Set_State+0x54>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <PlaneCube_Set_State+0x58>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <PlaneCube_Set_State+0x5c>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000010 	.word	0x20000010
 8004e58:	2000021c 	.word	0x2000021c
 8004e5c:	20000224 	.word	0x20000224
 8004e60:	20000211 	.word	0x20000211
 8004e64:	20000218 	.word	0x20000218
 8004e68:	20000210 	.word	0x20000210

08004e6c <RandomRainCube_Handle>:
#include "random_rain_cube.h"
static uint8_t x,y,z;
uint32_t time_rain = 0;

void RandomRainCube_Handle(uint8_t rain_times)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	0002      	movs	r2, r0
 8004e74:	1dfb      	adds	r3, r7, #7
 8004e76:	701a      	strb	r2, [r3, #0]
	srand(HAL_GetTick());
 8004e78:	f7fb fdcc 	bl	8000a14 <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 fc1a 	bl	80056b8 <srand>
	if (HAL_GetTick() - time_rain >= 50)
 8004e84:	f7fb fdc6 	bl	8000a14 <HAL_GetTick>
 8004e88:	0002      	movs	r2, r0
 8004e8a:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <RandomRainCube_Handle+0xd0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b31      	cmp	r3, #49	; 0x31
 8004e92:	d912      	bls.n	8004eba <RandomRainCube_Handle+0x4e>
	{


			if (z == 0) z = 7;
 8004e94:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <RandomRainCube_Handle+0xd4>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <RandomRainCube_Handle+0x38>
 8004e9c:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <RandomRainCube_Handle+0xd4>)
 8004e9e:	2207      	movs	r2, #7
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e005      	b.n	8004eb0 <RandomRainCube_Handle+0x44>
			else z--;
 8004ea4:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <RandomRainCube_Handle+0xd4>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <RandomRainCube_Handle+0xd4>)
 8004eae:	701a      	strb	r2, [r3, #0]
			time_rain = HAL_GetTick();
 8004eb0:	f7fb fdb0 	bl	8000a14 <HAL_GetTick>
 8004eb4:	0002      	movs	r2, r0
 8004eb6:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <RandomRainCube_Handle+0xd0>)
 8004eb8:	601a      	str	r2, [r3, #0]
	}

	for (uint8_t n = 0; n < rain_times; n++)
 8004eba:	230f      	movs	r3, #15
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e02e      	b.n	8004f22 <RandomRainCube_Handle+0xb6>
	{
		if (z == 7)
 8004ec4:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <RandomRainCube_Handle+0xd4>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b07      	cmp	r3, #7
 8004eca:	d11b      	bne.n	8004f04 <RandomRainCube_Handle+0x98>
		{
			x = rand() % 8;
 8004ecc:	f000 fc24 	bl	8005718 <rand>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <RandomRainCube_Handle+0xd8>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d504      	bpl.n	8004ee2 <RandomRainCube_Handle+0x76>
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	2208      	movs	r2, #8
 8004edc:	4252      	negs	r2, r2
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <RandomRainCube_Handle+0xdc>)
 8004ee6:	701a      	strb	r2, [r3, #0]
			y = rand() % 8;
 8004ee8:	f000 fc16 	bl	8005718 <rand>
 8004eec:	0003      	movs	r3, r0
 8004eee:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <RandomRainCube_Handle+0xd8>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d504      	bpl.n	8004efe <RandomRainCube_Handle+0x92>
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	4252      	negs	r2, r2
 8004efa:	4313      	orrs	r3, r2
 8004efc:	3301      	adds	r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <RandomRainCube_Handle+0xe0>)
 8004f02:	701a      	strb	r2, [r3, #0]
		}

		DisplayLed(x, y, z, 0);
 8004f04:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <RandomRainCube_Handle+0xdc>)
 8004f06:	7818      	ldrb	r0, [r3, #0]
 8004f08:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <RandomRainCube_Handle+0xe0>)
 8004f0a:	7819      	ldrb	r1, [r3, #0]
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <RandomRainCube_Handle+0xd4>)
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	f7ff fb4d 	bl	80045b0 <DisplayLed>
	for (uint8_t n = 0; n < rain_times; n++)
 8004f16:	210f      	movs	r1, #15
 8004f18:	187b      	adds	r3, r7, r1
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	3201      	adds	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	230f      	movs	r3, #15
 8004f24:	18fa      	adds	r2, r7, r3
 8004f26:	1dfb      	adds	r3, r7, #7
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3c9      	bcc.n	8004ec4 <RandomRainCube_Handle+0x58>
	}

}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b004      	add	sp, #16
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	2000022c 	.word	0x2000022c
 8004f40:	2000022a 	.word	0x2000022a
 8004f44:	80000007 	.word	0x80000007
 8004f48:	20000228 	.word	0x20000228
 8004f4c:	20000229 	.word	0x20000229

08004f50 <RandomRainCube_Set_State>:

void RandomRainCube_Set_State()
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
	z = 7;
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <RandomRainCube_Set_State+0x18>)
 8004f56:	2207      	movs	r2, #7
 8004f58:	701a      	strb	r2, [r3, #0]
	currentEffect = RANDOM_RAIN_CUBE;
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <RandomRainCube_Set_State+0x1c>)
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	701a      	strb	r2, [r3, #0]
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	2000022a 	.word	0x2000022a
 8004f6c:	20000010 	.word	0x20000010

08004f70 <SpiralCube_Handle>:
const uint8_t z = 8;
const uint32_t timePerColumn = 60;
uint32_t timeStart = 0;

void SpiralCube_Handle()
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
	switch (directRotate) {
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <SpiralCube_Handle+0x54>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <SpiralCube_Handle+0x46>
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11c      	bne.n	8004fba <SpiralCube_Handle+0x4a>
		case COUNTER_CLOCKWISE:
			switch (rollSize)
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <SpiralCube_Handle+0x58>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d011      	beq.n	8004fac <SpiralCube_Handle+0x3c>
 8004f88:	dc13      	bgt.n	8004fb2 <SpiralCube_Handle+0x42>
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d00b      	beq.n	8004fa6 <SpiralCube_Handle+0x36>
 8004f8e:	dc10      	bgt.n	8004fb2 <SpiralCube_Handle+0x42>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <SpiralCube_Handle+0x2a>
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d003      	beq.n	8004fa0 <SpiralCube_Handle+0x30>
					break;
				case ROLL_SMALL:
					RollSmall_Handle();
					break;
				default:
					break;
 8004f98:	e00b      	b.n	8004fb2 <SpiralCube_Handle+0x42>
					RollBiggest_Handle();
 8004f9a:	f000 f817 	bl	8004fcc <RollBiggest_Handle>
					break;
 8004f9e:	e009      	b.n	8004fb4 <SpiralCube_Handle+0x44>
					RollBigger_Handle();
 8004fa0:	f000 f8da 	bl	8005158 <RollBigger_Handle>
					break;
 8004fa4:	e006      	b.n	8004fb4 <SpiralCube_Handle+0x44>
					RollMedium_Handle();
 8004fa6:	f000 f99d 	bl	80052e4 <RollMedium_Handle>
					break;
 8004faa:	e003      	b.n	8004fb4 <SpiralCube_Handle+0x44>
					RollSmall_Handle();
 8004fac:	f000 fa60 	bl	8005470 <RollSmall_Handle>
					break;
 8004fb0:	e000      	b.n	8004fb4 <SpiralCube_Handle+0x44>
					break;
 8004fb2:	46c0      	nop			; (mov r8, r8)
			}
			break;
 8004fb4:	e002      	b.n	8004fbc <SpiralCube_Handle+0x4c>
		case CLOCKWISE:

			break;
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	e000      	b.n	8004fbc <SpiralCube_Handle+0x4c>
		default:
			break;
 8004fba:	46c0      	nop			; (mov r8, r8)
	}
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	20000232 	.word	0x20000232
 8004fc8:	20000230 	.word	0x20000230

08004fcc <RollBiggest_Handle>:

void RollBiggest_Handle()
{
 8004fcc:	b5b0      	push	{r4, r5, r7, lr}
 8004fce:	af00      	add	r7, sp, #0
	switch (axisDirection)
 8004fd0:	4b5c      	ldr	r3, [pc, #368]	; (8005144 <RollBiggest_Handle+0x178>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d100      	bne.n	8004fda <RollBiggest_Handle+0xe>
 8004fd8:	e081      	b.n	80050de <RollBiggest_Handle+0x112>
 8004fda:	dd00      	ble.n	8004fde <RollBiggest_Handle+0x12>
 8004fdc:	e0a6      	b.n	800512c <RollBiggest_Handle+0x160>
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d056      	beq.n	8005090 <RollBiggest_Handle+0xc4>
 8004fe2:	dd00      	ble.n	8004fe6 <RollBiggest_Handle+0x1a>
 8004fe4:	e0a2      	b.n	800512c <RollBiggest_Handle+0x160>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <RollBiggest_Handle+0x24>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d028      	beq.n	8005040 <RollBiggest_Handle+0x74>
				else x--;
				timeStart = HAL_GetTick();
			}
			break;
		default:
			break;
 8004fee:	e09d      	b.n	800512c <RollBiggest_Handle+0x160>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 8004ff0:	4b55      	ldr	r3, [pc, #340]	; (8005148 <RollBiggest_Handle+0x17c>)
 8004ff2:	681c      	ldr	r4, [r3, #0]
 8004ff4:	f7fb fd0e 	bl	8000a14 <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	1ae3      	subs	r3, r4, r3
 8004ffc:	223c      	movs	r2, #60	; 0x3c
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d200      	bcs.n	8005004 <RollBiggest_Handle+0x38>
 8005002:	e095      	b.n	8005130 <RollBiggest_Handle+0x164>
				DisplayLed(0, y, z, 1);
 8005004:	4b51      	ldr	r3, [pc, #324]	; (800514c <RollBiggest_Handle+0x180>)
 8005006:	7819      	ldrb	r1, [r3, #0]
 8005008:	2208      	movs	r2, #8
 800500a:	2301      	movs	r3, #1
 800500c:	2000      	movs	r0, #0
 800500e:	f7ff facf 	bl	80045b0 <DisplayLed>
				if (y == 0)
 8005012:	4b4e      	ldr	r3, [pc, #312]	; (800514c <RollBiggest_Handle+0x180>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <RollBiggest_Handle+0x5c>
					x = 1;
 800501a:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <RollBiggest_Handle+0x184>)
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGER;
 8005020:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <RollBiggest_Handle+0x188>)
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e005      	b.n	8005034 <RollBiggest_Handle+0x68>
				else y--;
 8005028:	4b48      	ldr	r3, [pc, #288]	; (800514c <RollBiggest_Handle+0x180>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	3b01      	subs	r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	4b46      	ldr	r3, [pc, #280]	; (800514c <RollBiggest_Handle+0x180>)
 8005032:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005034:	f7fb fcee 	bl	8000a14 <HAL_GetTick>
 8005038:	0002      	movs	r2, r0
 800503a:	4b43      	ldr	r3, [pc, #268]	; (8005148 <RollBiggest_Handle+0x17c>)
 800503c:	601a      	str	r2, [r3, #0]
			break;
 800503e:	e077      	b.n	8005130 <RollBiggest_Handle+0x164>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <RollBiggest_Handle+0x17c>)
 8005042:	681c      	ldr	r4, [r3, #0]
 8005044:	f7fb fce6 	bl	8000a14 <HAL_GetTick>
 8005048:	0003      	movs	r3, r0
 800504a:	1ae3      	subs	r3, r4, r3
 800504c:	223c      	movs	r2, #60	; 0x3c
 800504e:	4293      	cmp	r3, r2
 8005050:	d200      	bcs.n	8005054 <RollBiggest_Handle+0x88>
 8005052:	e06f      	b.n	8005134 <RollBiggest_Handle+0x168>
				DisplayLed(x, 0, z, 1);
 8005054:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <RollBiggest_Handle+0x184>)
 8005056:	7818      	ldrb	r0, [r3, #0]
 8005058:	2208      	movs	r2, #8
 800505a:	2301      	movs	r3, #1
 800505c:	2100      	movs	r1, #0
 800505e:	f7ff faa7 	bl	80045b0 <DisplayLed>
				if (x == 7)
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <RollBiggest_Handle+0x184>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b07      	cmp	r3, #7
 8005068:	d106      	bne.n	8005078 <RollBiggest_Handle+0xac>
					axisDirection = Y_AXIS_2;
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <RollBiggest_Handle+0x178>)
 800506c:	2202      	movs	r2, #2
 800506e:	701a      	strb	r2, [r3, #0]
					y = 0;
 8005070:	4b36      	ldr	r3, [pc, #216]	; (800514c <RollBiggest_Handle+0x180>)
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e005      	b.n	8005084 <RollBiggest_Handle+0xb8>
				else x++;
 8005078:	4b35      	ldr	r3, [pc, #212]	; (8005150 <RollBiggest_Handle+0x184>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	4b33      	ldr	r3, [pc, #204]	; (8005150 <RollBiggest_Handle+0x184>)
 8005082:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005084:	f7fb fcc6 	bl	8000a14 <HAL_GetTick>
 8005088:	0002      	movs	r2, r0
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <RollBiggest_Handle+0x17c>)
 800508c:	601a      	str	r2, [r3, #0]
			break;
 800508e:	e051      	b.n	8005134 <RollBiggest_Handle+0x168>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 8005090:	4b2d      	ldr	r3, [pc, #180]	; (8005148 <RollBiggest_Handle+0x17c>)
 8005092:	681c      	ldr	r4, [r3, #0]
 8005094:	f7fb fcbe 	bl	8000a14 <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	1ae3      	subs	r3, r4, r3
 800509c:	223c      	movs	r2, #60	; 0x3c
 800509e:	4293      	cmp	r3, r2
 80050a0:	d34a      	bcc.n	8005138 <RollBiggest_Handle+0x16c>
				DisplayLed(7, y, z, 1);
 80050a2:	4b2a      	ldr	r3, [pc, #168]	; (800514c <RollBiggest_Handle+0x180>)
 80050a4:	7819      	ldrb	r1, [r3, #0]
 80050a6:	2208      	movs	r2, #8
 80050a8:	2301      	movs	r3, #1
 80050aa:	2007      	movs	r0, #7
 80050ac:	f7ff fa80 	bl	80045b0 <DisplayLed>
				if (y == 7)
 80050b0:	4b26      	ldr	r3, [pc, #152]	; (800514c <RollBiggest_Handle+0x180>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b07      	cmp	r3, #7
 80050b6:	d106      	bne.n	80050c6 <RollBiggest_Handle+0xfa>
					axisDirection = X_AXIS_2;
 80050b8:	4b22      	ldr	r3, [pc, #136]	; (8005144 <RollBiggest_Handle+0x178>)
 80050ba:	2203      	movs	r2, #3
 80050bc:	701a      	strb	r2, [r3, #0]
					x = 7;
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <RollBiggest_Handle+0x184>)
 80050c0:	2207      	movs	r2, #7
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e005      	b.n	80050d2 <RollBiggest_Handle+0x106>
				else y++;
 80050c6:	4b21      	ldr	r3, [pc, #132]	; (800514c <RollBiggest_Handle+0x180>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	4b1f      	ldr	r3, [pc, #124]	; (800514c <RollBiggest_Handle+0x180>)
 80050d0:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80050d2:	f7fb fc9f 	bl	8000a14 <HAL_GetTick>
 80050d6:	0002      	movs	r2, r0
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <RollBiggest_Handle+0x17c>)
 80050da:	601a      	str	r2, [r3, #0]
			break;
 80050dc:	e02c      	b.n	8005138 <RollBiggest_Handle+0x16c>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <RollBiggest_Handle+0x17c>)
 80050e0:	681c      	ldr	r4, [r3, #0]
 80050e2:	f7fb fc97 	bl	8000a14 <HAL_GetTick>
 80050e6:	0003      	movs	r3, r0
 80050e8:	1ae3      	subs	r3, r4, r3
 80050ea:	223c      	movs	r2, #60	; 0x3c
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d325      	bcc.n	800513c <RollBiggest_Handle+0x170>
				DisplayLed(x, 7, z, 1);
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <RollBiggest_Handle+0x184>)
 80050f2:	7818      	ldrb	r0, [r3, #0]
 80050f4:	2208      	movs	r2, #8
 80050f6:	2301      	movs	r3, #1
 80050f8:	2107      	movs	r1, #7
 80050fa:	f7ff fa59 	bl	80045b0 <DisplayLed>
				if (x == 1)
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <RollBiggest_Handle+0x184>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d106      	bne.n	8005114 <RollBiggest_Handle+0x148>
					rollSize = ROLL_BIGGER;
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <RollBiggest_Handle+0x188>)
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
					y = 7;
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <RollBiggest_Handle+0x180>)
 800510e:	2207      	movs	r2, #7
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e005      	b.n	8005120 <RollBiggest_Handle+0x154>
				else x--;
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <RollBiggest_Handle+0x184>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <RollBiggest_Handle+0x184>)
 800511e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005120:	f7fb fc78 	bl	8000a14 <HAL_GetTick>
 8005124:	0002      	movs	r2, r0
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <RollBiggest_Handle+0x17c>)
 8005128:	601a      	str	r2, [r3, #0]
			break;
 800512a:	e007      	b.n	800513c <RollBiggest_Handle+0x170>
			break;
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	e006      	b.n	800513e <RollBiggest_Handle+0x172>
			break;
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	e004      	b.n	800513e <RollBiggest_Handle+0x172>
			break;
 8005134:	46c0      	nop			; (mov r8, r8)
 8005136:	e002      	b.n	800513e <RollBiggest_Handle+0x172>
			break;
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	e000      	b.n	800513e <RollBiggest_Handle+0x172>
			break;
 800513c:	46c0      	nop			; (mov r8, r8)
	}
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	bdb0      	pop	{r4, r5, r7, pc}
 8005144:	20000231 	.word	0x20000231
 8005148:	20000238 	.word	0x20000238
 800514c:	20000234 	.word	0x20000234
 8005150:	20000233 	.word	0x20000233
 8005154:	20000230 	.word	0x20000230

08005158 <RollBigger_Handle>:

void RollBigger_Handle()
{
 8005158:	b5b0      	push	{r4, r5, r7, lr}
 800515a:	af00      	add	r7, sp, #0
	switch (axisDirection)
 800515c:	4b5c      	ldr	r3, [pc, #368]	; (80052d0 <RollBigger_Handle+0x178>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d100      	bne.n	8005166 <RollBigger_Handle+0xe>
 8005164:	e081      	b.n	800526a <RollBigger_Handle+0x112>
 8005166:	dd00      	ble.n	800516a <RollBigger_Handle+0x12>
 8005168:	e0a6      	b.n	80052b8 <RollBigger_Handle+0x160>
 800516a:	2b02      	cmp	r3, #2
 800516c:	d056      	beq.n	800521c <RollBigger_Handle+0xc4>
 800516e:	dd00      	ble.n	8005172 <RollBigger_Handle+0x1a>
 8005170:	e0a2      	b.n	80052b8 <RollBigger_Handle+0x160>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <RollBigger_Handle+0x24>
 8005176:	2b01      	cmp	r3, #1
 8005178:	d028      	beq.n	80051cc <RollBigger_Handle+0x74>
				else x--;
				timeStart = HAL_GetTick();
			}
			break;
		default:
			break;
 800517a:	e09d      	b.n	80052b8 <RollBigger_Handle+0x160>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 800517c:	4b55      	ldr	r3, [pc, #340]	; (80052d4 <RollBigger_Handle+0x17c>)
 800517e:	681c      	ldr	r4, [r3, #0]
 8005180:	f7fb fc48 	bl	8000a14 <HAL_GetTick>
 8005184:	0003      	movs	r3, r0
 8005186:	1ae3      	subs	r3, r4, r3
 8005188:	223c      	movs	r2, #60	; 0x3c
 800518a:	4293      	cmp	r3, r2
 800518c:	d200      	bcs.n	8005190 <RollBigger_Handle+0x38>
 800518e:	e095      	b.n	80052bc <RollBigger_Handle+0x164>
				DisplayLed(1, y, z, 1);
 8005190:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <RollBigger_Handle+0x180>)
 8005192:	7819      	ldrb	r1, [r3, #0]
 8005194:	2208      	movs	r2, #8
 8005196:	2301      	movs	r3, #1
 8005198:	2001      	movs	r0, #1
 800519a:	f7ff fa09 	bl	80045b0 <DisplayLed>
				if (y  == 1)
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <RollBigger_Handle+0x180>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d106      	bne.n	80051b4 <RollBigger_Handle+0x5c>
					x = 1;
 80051a6:	4b4d      	ldr	r3, [pc, #308]	; (80052dc <RollBigger_Handle+0x184>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_1;
 80051ac:	4b48      	ldr	r3, [pc, #288]	; (80052d0 <RollBigger_Handle+0x178>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e005      	b.n	80051c0 <RollBigger_Handle+0x68>
				else y--;
 80051b4:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <RollBigger_Handle+0x180>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	4b46      	ldr	r3, [pc, #280]	; (80052d8 <RollBigger_Handle+0x180>)
 80051be:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80051c0:	f7fb fc28 	bl	8000a14 <HAL_GetTick>
 80051c4:	0002      	movs	r2, r0
 80051c6:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <RollBigger_Handle+0x17c>)
 80051c8:	601a      	str	r2, [r3, #0]
			break;
 80051ca:	e077      	b.n	80052bc <RollBigger_Handle+0x164>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 80051cc:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <RollBigger_Handle+0x17c>)
 80051ce:	681c      	ldr	r4, [r3, #0]
 80051d0:	f7fb fc20 	bl	8000a14 <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	1ae3      	subs	r3, r4, r3
 80051d8:	223c      	movs	r2, #60	; 0x3c
 80051da:	4293      	cmp	r3, r2
 80051dc:	d200      	bcs.n	80051e0 <RollBigger_Handle+0x88>
 80051de:	e06f      	b.n	80052c0 <RollBigger_Handle+0x168>
				DisplayLed(x, 1, z, 1);
 80051e0:	4b3e      	ldr	r3, [pc, #248]	; (80052dc <RollBigger_Handle+0x184>)
 80051e2:	7818      	ldrb	r0, [r3, #0]
 80051e4:	2208      	movs	r2, #8
 80051e6:	2301      	movs	r3, #1
 80051e8:	2101      	movs	r1, #1
 80051ea:	f7ff f9e1 	bl	80045b0 <DisplayLed>
				if (x  == 1)
 80051ee:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <RollBigger_Handle+0x184>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d106      	bne.n	8005204 <RollBigger_Handle+0xac>
					y = 1;
 80051f6:	4b38      	ldr	r3, [pc, #224]	; (80052d8 <RollBigger_Handle+0x180>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_2;
 80051fc:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <RollBigger_Handle+0x178>)
 80051fe:	2202      	movs	r2, #2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e005      	b.n	8005210 <RollBigger_Handle+0xb8>
				else x++;
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <RollBigger_Handle+0x184>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	b2da      	uxtb	r2, r3
 800520c:	4b33      	ldr	r3, [pc, #204]	; (80052dc <RollBigger_Handle+0x184>)
 800520e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005210:	f7fb fc00 	bl	8000a14 <HAL_GetTick>
 8005214:	0002      	movs	r2, r0
 8005216:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <RollBigger_Handle+0x17c>)
 8005218:	601a      	str	r2, [r3, #0]
			break;
 800521a:	e051      	b.n	80052c0 <RollBigger_Handle+0x168>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <RollBigger_Handle+0x17c>)
 800521e:	681c      	ldr	r4, [r3, #0]
 8005220:	f7fb fbf8 	bl	8000a14 <HAL_GetTick>
 8005224:	0003      	movs	r3, r0
 8005226:	1ae3      	subs	r3, r4, r3
 8005228:	223c      	movs	r2, #60	; 0x3c
 800522a:	4293      	cmp	r3, r2
 800522c:	d34a      	bcc.n	80052c4 <RollBigger_Handle+0x16c>
				DisplayLed(6, y, z, 1);
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <RollBigger_Handle+0x180>)
 8005230:	7819      	ldrb	r1, [r3, #0]
 8005232:	2208      	movs	r2, #8
 8005234:	2301      	movs	r3, #1
 8005236:	2006      	movs	r0, #6
 8005238:	f7ff f9ba 	bl	80045b0 <DisplayLed>
				if (y  == 6)
 800523c:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <RollBigger_Handle+0x180>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b06      	cmp	r3, #6
 8005242:	d106      	bne.n	8005252 <RollBigger_Handle+0xfa>
					x = 6;
 8005244:	4b25      	ldr	r3, [pc, #148]	; (80052dc <RollBigger_Handle+0x184>)
 8005246:	2206      	movs	r2, #6
 8005248:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_2;
 800524a:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <RollBigger_Handle+0x178>)
 800524c:	2203      	movs	r2, #3
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e005      	b.n	800525e <RollBigger_Handle+0x106>
				else y++;
 8005252:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <RollBigger_Handle+0x180>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <RollBigger_Handle+0x180>)
 800525c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800525e:	f7fb fbd9 	bl	8000a14 <HAL_GetTick>
 8005262:	0002      	movs	r2, r0
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <RollBigger_Handle+0x17c>)
 8005266:	601a      	str	r2, [r3, #0]
			break;
 8005268:	e02c      	b.n	80052c4 <RollBigger_Handle+0x16c>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 800526a:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <RollBigger_Handle+0x17c>)
 800526c:	681c      	ldr	r4, [r3, #0]
 800526e:	f7fb fbd1 	bl	8000a14 <HAL_GetTick>
 8005272:	0003      	movs	r3, r0
 8005274:	1ae3      	subs	r3, r4, r3
 8005276:	223c      	movs	r2, #60	; 0x3c
 8005278:	4293      	cmp	r3, r2
 800527a:	d325      	bcc.n	80052c8 <RollBigger_Handle+0x170>
				DisplayLed(x, 6, z, 1);
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <RollBigger_Handle+0x184>)
 800527e:	7818      	ldrb	r0, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	2301      	movs	r3, #1
 8005284:	2106      	movs	r1, #6
 8005286:	f7ff f993 	bl	80045b0 <DisplayLed>
				if (x  == 2)
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <RollBigger_Handle+0x184>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d106      	bne.n	80052a0 <RollBigger_Handle+0x148>
					y = 6;
 8005292:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <RollBigger_Handle+0x180>)
 8005294:	2206      	movs	r2, #6
 8005296:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <RollBigger_Handle+0x188>)
 800529a:	2202      	movs	r2, #2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e005      	b.n	80052ac <RollBigger_Handle+0x154>
				else x--;
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <RollBigger_Handle+0x184>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <RollBigger_Handle+0x184>)
 80052aa:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80052ac:	f7fb fbb2 	bl	8000a14 <HAL_GetTick>
 80052b0:	0002      	movs	r2, r0
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <RollBigger_Handle+0x17c>)
 80052b4:	601a      	str	r2, [r3, #0]
			break;
 80052b6:	e007      	b.n	80052c8 <RollBigger_Handle+0x170>
			break;
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	e006      	b.n	80052ca <RollBigger_Handle+0x172>
			break;
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	e004      	b.n	80052ca <RollBigger_Handle+0x172>
			break;
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	e002      	b.n	80052ca <RollBigger_Handle+0x172>
			break;
 80052c4:	46c0      	nop			; (mov r8, r8)
 80052c6:	e000      	b.n	80052ca <RollBigger_Handle+0x172>
			break;
 80052c8:	46c0      	nop			; (mov r8, r8)
	}
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bdb0      	pop	{r4, r5, r7, pc}
 80052d0:	20000231 	.word	0x20000231
 80052d4:	20000238 	.word	0x20000238
 80052d8:	20000234 	.word	0x20000234
 80052dc:	20000233 	.word	0x20000233
 80052e0:	20000230 	.word	0x20000230

080052e4 <RollMedium_Handle>:

void RollMedium_Handle()
{
 80052e4:	b5b0      	push	{r4, r5, r7, lr}
 80052e6:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 80052e8:	4b5c      	ldr	r3, [pc, #368]	; (800545c <RollMedium_Handle+0x178>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d100      	bne.n	80052f2 <RollMedium_Handle+0xe>
 80052f0:	e081      	b.n	80053f6 <RollMedium_Handle+0x112>
 80052f2:	dd00      	ble.n	80052f6 <RollMedium_Handle+0x12>
 80052f4:	e0a6      	b.n	8005444 <RollMedium_Handle+0x160>
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d056      	beq.n	80053a8 <RollMedium_Handle+0xc4>
 80052fa:	dd00      	ble.n	80052fe <RollMedium_Handle+0x1a>
 80052fc:	e0a2      	b.n	8005444 <RollMedium_Handle+0x160>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <RollMedium_Handle+0x24>
 8005302:	2b01      	cmp	r3, #1
 8005304:	d028      	beq.n	8005358 <RollMedium_Handle+0x74>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 8005306:	e09d      	b.n	8005444 <RollMedium_Handle+0x160>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 8005308:	4b55      	ldr	r3, [pc, #340]	; (8005460 <RollMedium_Handle+0x17c>)
 800530a:	681c      	ldr	r4, [r3, #0]
 800530c:	f7fb fb82 	bl	8000a14 <HAL_GetTick>
 8005310:	0003      	movs	r3, r0
 8005312:	1ae3      	subs	r3, r4, r3
 8005314:	223c      	movs	r2, #60	; 0x3c
 8005316:	4293      	cmp	r3, r2
 8005318:	d200      	bcs.n	800531c <RollMedium_Handle+0x38>
 800531a:	e095      	b.n	8005448 <RollMedium_Handle+0x164>
				DisplayLed(2, y, z, 1);
 800531c:	4b51      	ldr	r3, [pc, #324]	; (8005464 <RollMedium_Handle+0x180>)
 800531e:	7819      	ldrb	r1, [r3, #0]
 8005320:	2208      	movs	r2, #8
 8005322:	2301      	movs	r3, #1
 8005324:	2002      	movs	r0, #2
 8005326:	f7ff f943 	bl	80045b0 <DisplayLed>
				if (y == 2)
 800532a:	4b4e      	ldr	r3, [pc, #312]	; (8005464 <RollMedium_Handle+0x180>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d106      	bne.n	8005340 <RollMedium_Handle+0x5c>
					x = 2;
 8005332:	4b4d      	ldr	r3, [pc, #308]	; (8005468 <RollMedium_Handle+0x184>)
 8005334:	2202      	movs	r2, #2
 8005336:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_1;
 8005338:	4b48      	ldr	r3, [pc, #288]	; (800545c <RollMedium_Handle+0x178>)
 800533a:	2201      	movs	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e005      	b.n	800534c <RollMedium_Handle+0x68>
				else y--;
 8005340:	4b48      	ldr	r3, [pc, #288]	; (8005464 <RollMedium_Handle+0x180>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3b01      	subs	r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	4b46      	ldr	r3, [pc, #280]	; (8005464 <RollMedium_Handle+0x180>)
 800534a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800534c:	f7fb fb62 	bl	8000a14 <HAL_GetTick>
 8005350:	0002      	movs	r2, r0
 8005352:	4b43      	ldr	r3, [pc, #268]	; (8005460 <RollMedium_Handle+0x17c>)
 8005354:	601a      	str	r2, [r3, #0]
			break;
 8005356:	e077      	b.n	8005448 <RollMedium_Handle+0x164>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 8005358:	4b41      	ldr	r3, [pc, #260]	; (8005460 <RollMedium_Handle+0x17c>)
 800535a:	681c      	ldr	r4, [r3, #0]
 800535c:	f7fb fb5a 	bl	8000a14 <HAL_GetTick>
 8005360:	0003      	movs	r3, r0
 8005362:	1ae3      	subs	r3, r4, r3
 8005364:	223c      	movs	r2, #60	; 0x3c
 8005366:	4293      	cmp	r3, r2
 8005368:	d200      	bcs.n	800536c <RollMedium_Handle+0x88>
 800536a:	e06f      	b.n	800544c <RollMedium_Handle+0x168>
				DisplayLed(x, 2, z, 1);
 800536c:	4b3e      	ldr	r3, [pc, #248]	; (8005468 <RollMedium_Handle+0x184>)
 800536e:	7818      	ldrb	r0, [r3, #0]
 8005370:	2208      	movs	r2, #8
 8005372:	2301      	movs	r3, #1
 8005374:	2102      	movs	r1, #2
 8005376:	f7ff f91b 	bl	80045b0 <DisplayLed>
				if (x  == 5)
 800537a:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <RollMedium_Handle+0x184>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b05      	cmp	r3, #5
 8005380:	d106      	bne.n	8005390 <RollMedium_Handle+0xac>
					y = 2;
 8005382:	4b38      	ldr	r3, [pc, #224]	; (8005464 <RollMedium_Handle+0x180>)
 8005384:	2202      	movs	r2, #2
 8005386:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_2;
 8005388:	4b34      	ldr	r3, [pc, #208]	; (800545c <RollMedium_Handle+0x178>)
 800538a:	2202      	movs	r2, #2
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e005      	b.n	800539c <RollMedium_Handle+0xb8>
				else x++;
 8005390:	4b35      	ldr	r3, [pc, #212]	; (8005468 <RollMedium_Handle+0x184>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	4b33      	ldr	r3, [pc, #204]	; (8005468 <RollMedium_Handle+0x184>)
 800539a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800539c:	f7fb fb3a 	bl	8000a14 <HAL_GetTick>
 80053a0:	0002      	movs	r2, r0
 80053a2:	4b2f      	ldr	r3, [pc, #188]	; (8005460 <RollMedium_Handle+0x17c>)
 80053a4:	601a      	str	r2, [r3, #0]
			break;
 80053a6:	e051      	b.n	800544c <RollMedium_Handle+0x168>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 80053a8:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <RollMedium_Handle+0x17c>)
 80053aa:	681c      	ldr	r4, [r3, #0]
 80053ac:	f7fb fb32 	bl	8000a14 <HAL_GetTick>
 80053b0:	0003      	movs	r3, r0
 80053b2:	1ae3      	subs	r3, r4, r3
 80053b4:	223c      	movs	r2, #60	; 0x3c
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d34a      	bcc.n	8005450 <RollMedium_Handle+0x16c>
				DisplayLed(5, y, z, 1);
 80053ba:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <RollMedium_Handle+0x180>)
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	2208      	movs	r2, #8
 80053c0:	2301      	movs	r3, #1
 80053c2:	2005      	movs	r0, #5
 80053c4:	f7ff f8f4 	bl	80045b0 <DisplayLed>
				if (y == 5)
 80053c8:	4b26      	ldr	r3, [pc, #152]	; (8005464 <RollMedium_Handle+0x180>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	d106      	bne.n	80053de <RollMedium_Handle+0xfa>
					x = 5;
 80053d0:	4b25      	ldr	r3, [pc, #148]	; (8005468 <RollMedium_Handle+0x184>)
 80053d2:	2205      	movs	r2, #5
 80053d4:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_2;
 80053d6:	4b21      	ldr	r3, [pc, #132]	; (800545c <RollMedium_Handle+0x178>)
 80053d8:	2203      	movs	r2, #3
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e005      	b.n	80053ea <RollMedium_Handle+0x106>
				else y++;
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <RollMedium_Handle+0x180>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	4b1f      	ldr	r3, [pc, #124]	; (8005464 <RollMedium_Handle+0x180>)
 80053e8:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80053ea:	f7fb fb13 	bl	8000a14 <HAL_GetTick>
 80053ee:	0002      	movs	r2, r0
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <RollMedium_Handle+0x17c>)
 80053f2:	601a      	str	r2, [r3, #0]
			break;
 80053f4:	e02c      	b.n	8005450 <RollMedium_Handle+0x16c>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 80053f6:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <RollMedium_Handle+0x17c>)
 80053f8:	681c      	ldr	r4, [r3, #0]
 80053fa:	f7fb fb0b 	bl	8000a14 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	1ae3      	subs	r3, r4, r3
 8005402:	223c      	movs	r2, #60	; 0x3c
 8005404:	4293      	cmp	r3, r2
 8005406:	d325      	bcc.n	8005454 <RollMedium_Handle+0x170>
				DisplayLed(x, 5, z, 1);
 8005408:	4b17      	ldr	r3, [pc, #92]	; (8005468 <RollMedium_Handle+0x184>)
 800540a:	7818      	ldrb	r0, [r3, #0]
 800540c:	2208      	movs	r2, #8
 800540e:	2301      	movs	r3, #1
 8005410:	2105      	movs	r1, #5
 8005412:	f7ff f8cd 	bl	80045b0 <DisplayLed>
				if (x  == 3)
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <RollMedium_Handle+0x184>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b03      	cmp	r3, #3
 800541c:	d106      	bne.n	800542c <RollMedium_Handle+0x148>
					y = 5;
 800541e:	4b11      	ldr	r3, [pc, #68]	; (8005464 <RollMedium_Handle+0x180>)
 8005420:	2205      	movs	r2, #5
 8005422:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_SMALL;
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <RollMedium_Handle+0x188>)
 8005426:	2203      	movs	r2, #3
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e005      	b.n	8005438 <RollMedium_Handle+0x154>
				else x--;
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <RollMedium_Handle+0x184>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <RollMedium_Handle+0x184>)
 8005436:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005438:	f7fb faec 	bl	8000a14 <HAL_GetTick>
 800543c:	0002      	movs	r2, r0
 800543e:	4b08      	ldr	r3, [pc, #32]	; (8005460 <RollMedium_Handle+0x17c>)
 8005440:	601a      	str	r2, [r3, #0]
			break;
 8005442:	e007      	b.n	8005454 <RollMedium_Handle+0x170>
			break;
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	e006      	b.n	8005456 <RollMedium_Handle+0x172>
			break;
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	e004      	b.n	8005456 <RollMedium_Handle+0x172>
			break;
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	e002      	b.n	8005456 <RollMedium_Handle+0x172>
			break;
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	e000      	b.n	8005456 <RollMedium_Handle+0x172>
			break;
 8005454:	46c0      	nop			; (mov r8, r8)
	}
}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	46bd      	mov	sp, r7
 800545a:	bdb0      	pop	{r4, r5, r7, pc}
 800545c:	20000231 	.word	0x20000231
 8005460:	20000238 	.word	0x20000238
 8005464:	20000234 	.word	0x20000234
 8005468:	20000233 	.word	0x20000233
 800546c:	20000230 	.word	0x20000230

08005470 <RollSmall_Handle>:

void RollSmall_Handle()
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005474:	4b49      	ldr	r3, [pc, #292]	; (800559c <RollSmall_Handle+0x12c>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d055      	beq.n	8005528 <RollSmall_Handle+0xb8>
 800547c:	dd00      	ble.n	8005480 <RollSmall_Handle+0x10>
 800547e:	e083      	b.n	8005588 <RollSmall_Handle+0x118>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <RollSmall_Handle+0x1a>
 8005484:	2b01      	cmp	r3, #1
 8005486:	d028      	beq.n	80054da <RollSmall_Handle+0x6a>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 8005488:	e07e      	b.n	8005588 <RollSmall_Handle+0x118>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 800548a:	4b45      	ldr	r3, [pc, #276]	; (80055a0 <RollSmall_Handle+0x130>)
 800548c:	681c      	ldr	r4, [r3, #0]
 800548e:	f7fb fac1 	bl	8000a14 <HAL_GetTick>
 8005492:	0003      	movs	r3, r0
 8005494:	1ae3      	subs	r3, r4, r3
 8005496:	223c      	movs	r2, #60	; 0x3c
 8005498:	4293      	cmp	r3, r2
 800549a:	d200      	bcs.n	800549e <RollSmall_Handle+0x2e>
 800549c:	e076      	b.n	800558c <RollSmall_Handle+0x11c>
				DisplayLed(3, y, z, 1);
 800549e:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <RollSmall_Handle+0x134>)
 80054a0:	7819      	ldrb	r1, [r3, #0]
 80054a2:	2208      	movs	r2, #8
 80054a4:	2301      	movs	r3, #1
 80054a6:	2003      	movs	r0, #3
 80054a8:	f7ff f882 	bl	80045b0 <DisplayLed>
				if (y == 3)
 80054ac:	4b3d      	ldr	r3, [pc, #244]	; (80055a4 <RollSmall_Handle+0x134>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d106      	bne.n	80054c2 <RollSmall_Handle+0x52>
					x = 3;
 80054b4:	4b3c      	ldr	r3, [pc, #240]	; (80055a8 <RollSmall_Handle+0x138>)
 80054b6:	2203      	movs	r2, #3
 80054b8:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_1;
 80054ba:	4b38      	ldr	r3, [pc, #224]	; (800559c <RollSmall_Handle+0x12c>)
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	e005      	b.n	80054ce <RollSmall_Handle+0x5e>
				else y--;
 80054c2:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <RollSmall_Handle+0x134>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <RollSmall_Handle+0x134>)
 80054cc:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80054ce:	f7fb faa1 	bl	8000a14 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	4b32      	ldr	r3, [pc, #200]	; (80055a0 <RollSmall_Handle+0x130>)
 80054d6:	601a      	str	r2, [r3, #0]
			break;
 80054d8:	e058      	b.n	800558c <RollSmall_Handle+0x11c>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 80054da:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <RollSmall_Handle+0x130>)
 80054dc:	681c      	ldr	r4, [r3, #0]
 80054de:	f7fb fa99 	bl	8000a14 <HAL_GetTick>
 80054e2:	0003      	movs	r3, r0
 80054e4:	1ae3      	subs	r3, r4, r3
 80054e6:	223c      	movs	r2, #60	; 0x3c
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d351      	bcc.n	8005590 <RollSmall_Handle+0x120>
				DisplayLed(x, 3, z, 1);
 80054ec:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <RollSmall_Handle+0x138>)
 80054ee:	7818      	ldrb	r0, [r3, #0]
 80054f0:	2208      	movs	r2, #8
 80054f2:	2301      	movs	r3, #1
 80054f4:	2103      	movs	r1, #3
 80054f6:	f7ff f85b 	bl	80045b0 <DisplayLed>
				if (x  == 4)
 80054fa:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <RollSmall_Handle+0x138>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d106      	bne.n	8005510 <RollSmall_Handle+0xa0>
					y = 3;
 8005502:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <RollSmall_Handle+0x134>)
 8005504:	2203      	movs	r2, #3
 8005506:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_2;
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <RollSmall_Handle+0x12c>)
 800550a:	2202      	movs	r2, #2
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e005      	b.n	800551c <RollSmall_Handle+0xac>
				else x++;
 8005510:	4b25      	ldr	r3, [pc, #148]	; (80055a8 <RollSmall_Handle+0x138>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <RollSmall_Handle+0x138>)
 800551a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800551c:	f7fb fa7a 	bl	8000a14 <HAL_GetTick>
 8005520:	0002      	movs	r2, r0
 8005522:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <RollSmall_Handle+0x130>)
 8005524:	601a      	str	r2, [r3, #0]
			break;
 8005526:	e033      	b.n	8005590 <RollSmall_Handle+0x120>
			if (timeStart - HAL_GetTick() >= timePerColumn)
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <RollSmall_Handle+0x130>)
 800552a:	681c      	ldr	r4, [r3, #0]
 800552c:	f7fb fa72 	bl	8000a14 <HAL_GetTick>
 8005530:	0003      	movs	r3, r0
 8005532:	1ae3      	subs	r3, r4, r3
 8005534:	223c      	movs	r2, #60	; 0x3c
 8005536:	4293      	cmp	r3, r2
 8005538:	d32c      	bcc.n	8005594 <RollSmall_Handle+0x124>
				DisplayLed(4, y, z, 1);
 800553a:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <RollSmall_Handle+0x134>)
 800553c:	7819      	ldrb	r1, [r3, #0]
 800553e:	2208      	movs	r2, #8
 8005540:	2301      	movs	r3, #1
 8005542:	2004      	movs	r0, #4
 8005544:	f7ff f834 	bl	80045b0 <DisplayLed>
				if (y == 4)
 8005548:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <RollSmall_Handle+0x134>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d10f      	bne.n	8005570 <RollSmall_Handle+0x100>
					x = 7;
 8005550:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <RollSmall_Handle+0x138>)
 8005552:	2207      	movs	r2, #7
 8005554:	701a      	strb	r2, [r3, #0]
					y = 0;
 8005556:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <RollSmall_Handle+0x134>)
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
					directRotate = CLOCKWISE;
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <RollSmall_Handle+0x13c>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8005562:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <RollSmall_Handle+0x140>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <RollSmall_Handle+0x12c>)
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e005      	b.n	800557c <RollSmall_Handle+0x10c>
				else y++;
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <RollSmall_Handle+0x134>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	3301      	adds	r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <RollSmall_Handle+0x134>)
 800557a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800557c:	f7fb fa4a 	bl	8000a14 <HAL_GetTick>
 8005580:	0002      	movs	r2, r0
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <RollSmall_Handle+0x130>)
 8005584:	601a      	str	r2, [r3, #0]
			break;
 8005586:	e005      	b.n	8005594 <RollSmall_Handle+0x124>
			break;
 8005588:	46c0      	nop			; (mov r8, r8)
 800558a:	e004      	b.n	8005596 <RollSmall_Handle+0x126>
			break;
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	e002      	b.n	8005596 <RollSmall_Handle+0x126>
			break;
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	e000      	b.n	8005596 <RollSmall_Handle+0x126>
			break;
 8005594:	46c0      	nop			; (mov r8, r8)
	}
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	bdb0      	pop	{r4, r5, r7, pc}
 800559c:	20000231 	.word	0x20000231
 80055a0:	20000238 	.word	0x20000238
 80055a4:	20000234 	.word	0x20000234
 80055a8:	20000233 	.word	0x20000233
 80055ac:	20000232 	.word	0x20000232
 80055b0:	20000230 	.word	0x20000230

080055b4 <SpiralCube_Set_State>:

void SpiralCube_Set_State()
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	y = 7;
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <SpiralCube_Set_State+0x1c>)
 80055ba:	2207      	movs	r2, #7
 80055bc:	701a      	strb	r2, [r3, #0]
	directRotate = COUNTER_CLOCKWISE;
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <SpiralCube_Set_State+0x20>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	701a      	strb	r2, [r3, #0]
	axisDirection = Y_AXIS_1;
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <SpiralCube_Set_State+0x24>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000234 	.word	0x20000234
 80055d4:	20000232 	.word	0x20000232
 80055d8:	20000231 	.word	0x20000231

080055dc <TransmitData>:
#include "transmit_data.h"

extern SPI_HandleTypeDef hspi1;

void TransmitData(uint8_t column_data[], uint8_t layer_data) //ok
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	000a      	movs	r2, r1
 80055e6:	1cfb      	adds	r3, r7, #3
 80055e8:	701a      	strb	r2, [r3, #0]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 80055ea:	2308      	movs	r3, #8
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	1cfa      	adds	r2, r7, #3
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 80055f4:	2301      	movs	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e00d      	b.n	8005616 <TransmitData+0x3a>
	{
		dataOut[i] = column_data[i-1];
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	18d3      	adds	r3, r2, r3
 8005602:	7819      	ldrb	r1, [r3, #0]
 8005604:	2308      	movs	r3, #8
 8005606:	18fa      	adds	r2, r7, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	18d3      	adds	r3, r2, r3
 800560c:	1c0a      	adds	r2, r1, #0
 800560e:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3301      	adds	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b08      	cmp	r3, #8
 800561a:	ddee      	ble.n	80055fa <TransmitData+0x1e>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 800561c:	2390      	movs	r3, #144	; 0x90
 800561e:	05db      	lsls	r3, r3, #23
 8005620:	2200      	movs	r2, #0
 8005622:	2140      	movs	r1, #64	; 0x40
 8005624:	0018      	movs	r0, r3
 8005626:	f7fb fce0 	bl	8000fea <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 800562a:	2308      	movs	r3, #8
 800562c:	18f9      	adds	r1, r7, r3
 800562e:	4808      	ldr	r0, [pc, #32]	; (8005650 <TransmitData+0x74>)
 8005630:	2364      	movs	r3, #100	; 0x64
 8005632:	2209      	movs	r2, #9
 8005634:	f7fc fb9c 	bl	8001d70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8005638:	2390      	movs	r3, #144	; 0x90
 800563a:	05db      	lsls	r3, r3, #23
 800563c:	2201      	movs	r2, #1
 800563e:	2140      	movs	r1, #64	; 0x40
 8005640:	0018      	movs	r0, r3
 8005642:	f7fb fcd2 	bl	8000fea <HAL_GPIO_WritePin>
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	46bd      	mov	sp, r7
 800564a:	b006      	add	sp, #24
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	20000094 	.word	0x20000094

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	20000014 	.word	0x20000014

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	2600      	movs	r6, #0
 8005664:	4d0c      	ldr	r5, [pc, #48]	; (8005698 <__libc_init_array+0x38>)
 8005666:	4c0d      	ldr	r4, [pc, #52]	; (800569c <__libc_init_array+0x3c>)
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	10a4      	asrs	r4, r4, #2
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	2600      	movs	r6, #0
 8005672:	f001 f8d7 	bl	8006824 <_init>
 8005676:	4d0a      	ldr	r5, [pc, #40]	; (80056a0 <__libc_init_array+0x40>)
 8005678:	4c0a      	ldr	r4, [pc, #40]	; (80056a4 <__libc_init_array+0x44>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	00b3      	lsls	r3, r6, #2
 8005686:	58eb      	ldr	r3, [r5, r3]
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	00b3      	lsls	r3, r6, #2
 8005690:	58eb      	ldr	r3, [r5, r3]
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	08006a2c 	.word	0x08006a2c
 800569c:	08006a2c 	.word	0x08006a2c
 80056a0:	08006a2c 	.word	0x08006a2c
 80056a4:	08006a30 	.word	0x08006a30

080056a8 <memset>:
 80056a8:	0003      	movs	r3, r0
 80056aa:	1882      	adds	r2, r0, r2
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	7019      	strb	r1, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <srand>:
 80056b8:	4b11      	ldr	r3, [pc, #68]	; (8005700 <srand+0x48>)
 80056ba:	b570      	push	{r4, r5, r6, lr}
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	0004      	movs	r4, r0
 80056c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d116      	bne.n	80056f4 <srand+0x3c>
 80056c6:	2018      	movs	r0, #24
 80056c8:	f000 f892 	bl	80057f0 <malloc>
 80056cc:	1e02      	subs	r2, r0, #0
 80056ce:	63a8      	str	r0, [r5, #56]	; 0x38
 80056d0:	d104      	bne.n	80056dc <srand+0x24>
 80056d2:	2142      	movs	r1, #66	; 0x42
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <srand+0x4c>)
 80056d6:	480c      	ldr	r0, [pc, #48]	; (8005708 <srand+0x50>)
 80056d8:	f000 f85c 	bl	8005794 <__assert_func>
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <srand+0x54>)
 80056de:	2100      	movs	r1, #0
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <srand+0x58>)
 80056e4:	6043      	str	r3, [r0, #4]
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <srand+0x5c>)
 80056e8:	6083      	str	r3, [r0, #8]
 80056ea:	230b      	movs	r3, #11
 80056ec:	8183      	strh	r3, [r0, #12]
 80056ee:	2001      	movs	r0, #1
 80056f0:	6110      	str	r0, [r2, #16]
 80056f2:	6151      	str	r1, [r2, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80056f8:	611c      	str	r4, [r3, #16]
 80056fa:	615a      	str	r2, [r3, #20]
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	20000014 	.word	0x20000014
 8005704:	080068e8 	.word	0x080068e8
 8005708:	080068ff 	.word	0x080068ff
 800570c:	abcd330e 	.word	0xabcd330e
 8005710:	e66d1234 	.word	0xe66d1234
 8005714:	0005deec 	.word	0x0005deec

08005718 <rand>:
 8005718:	4b16      	ldr	r3, [pc, #88]	; (8005774 <rand+0x5c>)
 800571a:	b510      	push	{r4, lr}
 800571c:	681c      	ldr	r4, [r3, #0]
 800571e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d116      	bne.n	8005752 <rand+0x3a>
 8005724:	2018      	movs	r0, #24
 8005726:	f000 f863 	bl	80057f0 <malloc>
 800572a:	1e02      	subs	r2, r0, #0
 800572c:	63a0      	str	r0, [r4, #56]	; 0x38
 800572e:	d104      	bne.n	800573a <rand+0x22>
 8005730:	214e      	movs	r1, #78	; 0x4e
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <rand+0x60>)
 8005734:	4811      	ldr	r0, [pc, #68]	; (800577c <rand+0x64>)
 8005736:	f000 f82d 	bl	8005794 <__assert_func>
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <rand+0x68>)
 800573c:	2100      	movs	r1, #0
 800573e:	6003      	str	r3, [r0, #0]
 8005740:	4b10      	ldr	r3, [pc, #64]	; (8005784 <rand+0x6c>)
 8005742:	6043      	str	r3, [r0, #4]
 8005744:	4b10      	ldr	r3, [pc, #64]	; (8005788 <rand+0x70>)
 8005746:	6083      	str	r3, [r0, #8]
 8005748:	230b      	movs	r3, #11
 800574a:	8183      	strh	r3, [r0, #12]
 800574c:	2001      	movs	r0, #1
 800574e:	6110      	str	r0, [r2, #16]
 8005750:	6151      	str	r1, [r2, #20]
 8005752:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <rand+0x74>)
 8005756:	6920      	ldr	r0, [r4, #16]
 8005758:	6961      	ldr	r1, [r4, #20]
 800575a:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <rand+0x78>)
 800575c:	f7fa fd6a 	bl	8000234 <__aeabi_lmul>
 8005760:	2201      	movs	r2, #1
 8005762:	2300      	movs	r3, #0
 8005764:	1880      	adds	r0, r0, r2
 8005766:	4159      	adcs	r1, r3
 8005768:	6120      	str	r0, [r4, #16]
 800576a:	6161      	str	r1, [r4, #20]
 800576c:	0048      	lsls	r0, r1, #1
 800576e:	0840      	lsrs	r0, r0, #1
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	20000014 	.word	0x20000014
 8005778:	080068e8 	.word	0x080068e8
 800577c:	080068ff 	.word	0x080068ff
 8005780:	abcd330e 	.word	0xabcd330e
 8005784:	e66d1234 	.word	0xe66d1234
 8005788:	0005deec 	.word	0x0005deec
 800578c:	4c957f2d 	.word	0x4c957f2d
 8005790:	5851f42d 	.word	0x5851f42d

08005794 <__assert_func>:
 8005794:	b530      	push	{r4, r5, lr}
 8005796:	0014      	movs	r4, r2
 8005798:	001a      	movs	r2, r3
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <__assert_func+0x2c>)
 800579c:	0005      	movs	r5, r0
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	b085      	sub	sp, #20
 80057a2:	68d8      	ldr	r0, [r3, #12]
 80057a4:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <__assert_func+0x30>)
 80057a6:	2c00      	cmp	r4, #0
 80057a8:	d101      	bne.n	80057ae <__assert_func+0x1a>
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <__assert_func+0x34>)
 80057ac:	001c      	movs	r4, r3
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	9100      	str	r1, [sp, #0]
 80057b2:	002b      	movs	r3, r5
 80057b4:	4905      	ldr	r1, [pc, #20]	; (80057cc <__assert_func+0x38>)
 80057b6:	9402      	str	r4, [sp, #8]
 80057b8:	f000 f80a 	bl	80057d0 <fiprintf>
 80057bc:	f000 fcc8 	bl	8006150 <abort>
 80057c0:	20000014 	.word	0x20000014
 80057c4:	0800695a 	.word	0x0800695a
 80057c8:	08006995 	.word	0x08006995
 80057cc:	08006967 	.word	0x08006967

080057d0 <fiprintf>:
 80057d0:	b40e      	push	{r1, r2, r3}
 80057d2:	b503      	push	{r0, r1, lr}
 80057d4:	0001      	movs	r1, r0
 80057d6:	ab03      	add	r3, sp, #12
 80057d8:	4804      	ldr	r0, [pc, #16]	; (80057ec <fiprintf+0x1c>)
 80057da:	cb04      	ldmia	r3!, {r2}
 80057dc:	6800      	ldr	r0, [r0, #0]
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	f000 f91a 	bl	8005a18 <_vfiprintf_r>
 80057e4:	b002      	add	sp, #8
 80057e6:	bc08      	pop	{r3}
 80057e8:	b003      	add	sp, #12
 80057ea:	4718      	bx	r3
 80057ec:	20000014 	.word	0x20000014

080057f0 <malloc>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4b03      	ldr	r3, [pc, #12]	; (8005800 <malloc+0x10>)
 80057f4:	0001      	movs	r1, r0
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	f000 f870 	bl	80058dc <_malloc_r>
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	20000014 	.word	0x20000014

08005804 <_free_r>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	0005      	movs	r5, r0
 8005808:	2900      	cmp	r1, #0
 800580a:	d010      	beq.n	800582e <_free_r+0x2a>
 800580c:	1f0c      	subs	r4, r1, #4
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	da00      	bge.n	8005816 <_free_r+0x12>
 8005814:	18e4      	adds	r4, r4, r3
 8005816:	0028      	movs	r0, r5
 8005818:	f000 feec 	bl	80065f4 <__malloc_lock>
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <_free_r+0x90>)
 800581e:	6813      	ldr	r3, [r2, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <_free_r+0x2c>
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	6014      	str	r4, [r2, #0]
 8005828:	0028      	movs	r0, r5
 800582a:	f000 feeb 	bl	8006604 <__malloc_unlock>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	42a3      	cmp	r3, r4
 8005832:	d908      	bls.n	8005846 <_free_r+0x42>
 8005834:	6821      	ldr	r1, [r4, #0]
 8005836:	1860      	adds	r0, r4, r1
 8005838:	4283      	cmp	r3, r0
 800583a:	d1f3      	bne.n	8005824 <_free_r+0x20>
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	1841      	adds	r1, r0, r1
 8005842:	6021      	str	r1, [r4, #0]
 8005844:	e7ee      	b.n	8005824 <_free_r+0x20>
 8005846:	001a      	movs	r2, r3
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <_free_r+0x4e>
 800584e:	42a3      	cmp	r3, r4
 8005850:	d9f9      	bls.n	8005846 <_free_r+0x42>
 8005852:	6811      	ldr	r1, [r2, #0]
 8005854:	1850      	adds	r0, r2, r1
 8005856:	42a0      	cmp	r0, r4
 8005858:	d10b      	bne.n	8005872 <_free_r+0x6e>
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	1809      	adds	r1, r1, r0
 800585e:	1850      	adds	r0, r2, r1
 8005860:	6011      	str	r1, [r2, #0]
 8005862:	4283      	cmp	r3, r0
 8005864:	d1e0      	bne.n	8005828 <_free_r+0x24>
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	1841      	adds	r1, r0, r1
 800586c:	6011      	str	r1, [r2, #0]
 800586e:	6053      	str	r3, [r2, #4]
 8005870:	e7da      	b.n	8005828 <_free_r+0x24>
 8005872:	42a0      	cmp	r0, r4
 8005874:	d902      	bls.n	800587c <_free_r+0x78>
 8005876:	230c      	movs	r3, #12
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	e7d5      	b.n	8005828 <_free_r+0x24>
 800587c:	6821      	ldr	r1, [r4, #0]
 800587e:	1860      	adds	r0, r4, r1
 8005880:	4283      	cmp	r3, r0
 8005882:	d103      	bne.n	800588c <_free_r+0x88>
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	1841      	adds	r1, r0, r1
 800588a:	6021      	str	r1, [r4, #0]
 800588c:	6063      	str	r3, [r4, #4]
 800588e:	6054      	str	r4, [r2, #4]
 8005890:	e7ca      	b.n	8005828 <_free_r+0x24>
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	2000023c 	.word	0x2000023c

08005898 <sbrk_aligned>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4e0f      	ldr	r6, [pc, #60]	; (80058d8 <sbrk_aligned+0x40>)
 800589c:	000d      	movs	r5, r1
 800589e:	6831      	ldr	r1, [r6, #0]
 80058a0:	0004      	movs	r4, r0
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d102      	bne.n	80058ac <sbrk_aligned+0x14>
 80058a6:	f000 fb73 	bl	8005f90 <_sbrk_r>
 80058aa:	6030      	str	r0, [r6, #0]
 80058ac:	0029      	movs	r1, r5
 80058ae:	0020      	movs	r0, r4
 80058b0:	f000 fb6e 	bl	8005f90 <_sbrk_r>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d00a      	beq.n	80058ce <sbrk_aligned+0x36>
 80058b8:	2303      	movs	r3, #3
 80058ba:	1cc5      	adds	r5, r0, #3
 80058bc:	439d      	bics	r5, r3
 80058be:	42a8      	cmp	r0, r5
 80058c0:	d007      	beq.n	80058d2 <sbrk_aligned+0x3a>
 80058c2:	1a29      	subs	r1, r5, r0
 80058c4:	0020      	movs	r0, r4
 80058c6:	f000 fb63 	bl	8005f90 <_sbrk_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d101      	bne.n	80058d2 <sbrk_aligned+0x3a>
 80058ce:	2501      	movs	r5, #1
 80058d0:	426d      	negs	r5, r5
 80058d2:	0028      	movs	r0, r5
 80058d4:	bd70      	pop	{r4, r5, r6, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	20000240 	.word	0x20000240

080058dc <_malloc_r>:
 80058dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058de:	2203      	movs	r2, #3
 80058e0:	1ccb      	adds	r3, r1, #3
 80058e2:	4393      	bics	r3, r2
 80058e4:	3308      	adds	r3, #8
 80058e6:	0006      	movs	r6, r0
 80058e8:	001f      	movs	r7, r3
 80058ea:	2b0c      	cmp	r3, #12
 80058ec:	d232      	bcs.n	8005954 <_malloc_r+0x78>
 80058ee:	270c      	movs	r7, #12
 80058f0:	42b9      	cmp	r1, r7
 80058f2:	d831      	bhi.n	8005958 <_malloc_r+0x7c>
 80058f4:	0030      	movs	r0, r6
 80058f6:	f000 fe7d 	bl	80065f4 <__malloc_lock>
 80058fa:	4d32      	ldr	r5, [pc, #200]	; (80059c4 <_malloc_r+0xe8>)
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	001c      	movs	r4, r3
 8005900:	2c00      	cmp	r4, #0
 8005902:	d12e      	bne.n	8005962 <_malloc_r+0x86>
 8005904:	0039      	movs	r1, r7
 8005906:	0030      	movs	r0, r6
 8005908:	f7ff ffc6 	bl	8005898 <sbrk_aligned>
 800590c:	0004      	movs	r4, r0
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d11e      	bne.n	8005950 <_malloc_r+0x74>
 8005912:	682c      	ldr	r4, [r5, #0]
 8005914:	0025      	movs	r5, r4
 8005916:	2d00      	cmp	r5, #0
 8005918:	d14a      	bne.n	80059b0 <_malloc_r+0xd4>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	0029      	movs	r1, r5
 800591e:	18e3      	adds	r3, r4, r3
 8005920:	0030      	movs	r0, r6
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	f000 fb34 	bl	8005f90 <_sbrk_r>
 8005928:	9b01      	ldr	r3, [sp, #4]
 800592a:	4283      	cmp	r3, r0
 800592c:	d143      	bne.n	80059b6 <_malloc_r+0xda>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	3703      	adds	r7, #3
 8005932:	1aff      	subs	r7, r7, r3
 8005934:	2303      	movs	r3, #3
 8005936:	439f      	bics	r7, r3
 8005938:	3708      	adds	r7, #8
 800593a:	2f0c      	cmp	r7, #12
 800593c:	d200      	bcs.n	8005940 <_malloc_r+0x64>
 800593e:	270c      	movs	r7, #12
 8005940:	0039      	movs	r1, r7
 8005942:	0030      	movs	r0, r6
 8005944:	f7ff ffa8 	bl	8005898 <sbrk_aligned>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d034      	beq.n	80059b6 <_malloc_r+0xda>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	19df      	adds	r7, r3, r7
 8005950:	6027      	str	r7, [r4, #0]
 8005952:	e013      	b.n	800597c <_malloc_r+0xa0>
 8005954:	2b00      	cmp	r3, #0
 8005956:	dacb      	bge.n	80058f0 <_malloc_r+0x14>
 8005958:	230c      	movs	r3, #12
 800595a:	2500      	movs	r5, #0
 800595c:	6033      	str	r3, [r6, #0]
 800595e:	0028      	movs	r0, r5
 8005960:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	1bd1      	subs	r1, r2, r7
 8005966:	d420      	bmi.n	80059aa <_malloc_r+0xce>
 8005968:	290b      	cmp	r1, #11
 800596a:	d917      	bls.n	800599c <_malloc_r+0xc0>
 800596c:	19e2      	adds	r2, r4, r7
 800596e:	6027      	str	r7, [r4, #0]
 8005970:	42a3      	cmp	r3, r4
 8005972:	d111      	bne.n	8005998 <_malloc_r+0xbc>
 8005974:	602a      	str	r2, [r5, #0]
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	0030      	movs	r0, r6
 800597e:	0025      	movs	r5, r4
 8005980:	f000 fe40 	bl	8006604 <__malloc_unlock>
 8005984:	2207      	movs	r2, #7
 8005986:	350b      	adds	r5, #11
 8005988:	1d23      	adds	r3, r4, #4
 800598a:	4395      	bics	r5, r2
 800598c:	1aea      	subs	r2, r5, r3
 800598e:	429d      	cmp	r5, r3
 8005990:	d0e5      	beq.n	800595e <_malloc_r+0x82>
 8005992:	1b5b      	subs	r3, r3, r5
 8005994:	50a3      	str	r3, [r4, r2]
 8005996:	e7e2      	b.n	800595e <_malloc_r+0x82>
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	e7ec      	b.n	8005976 <_malloc_r+0x9a>
 800599c:	6862      	ldr	r2, [r4, #4]
 800599e:	42a3      	cmp	r3, r4
 80059a0:	d101      	bne.n	80059a6 <_malloc_r+0xca>
 80059a2:	602a      	str	r2, [r5, #0]
 80059a4:	e7ea      	b.n	800597c <_malloc_r+0xa0>
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	e7e8      	b.n	800597c <_malloc_r+0xa0>
 80059aa:	0023      	movs	r3, r4
 80059ac:	6864      	ldr	r4, [r4, #4]
 80059ae:	e7a7      	b.n	8005900 <_malloc_r+0x24>
 80059b0:	002c      	movs	r4, r5
 80059b2:	686d      	ldr	r5, [r5, #4]
 80059b4:	e7af      	b.n	8005916 <_malloc_r+0x3a>
 80059b6:	230c      	movs	r3, #12
 80059b8:	0030      	movs	r0, r6
 80059ba:	6033      	str	r3, [r6, #0]
 80059bc:	f000 fe22 	bl	8006604 <__malloc_unlock>
 80059c0:	e7cd      	b.n	800595e <_malloc_r+0x82>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	2000023c 	.word	0x2000023c

080059c8 <__sfputc_r>:
 80059c8:	6893      	ldr	r3, [r2, #8]
 80059ca:	b510      	push	{r4, lr}
 80059cc:	3b01      	subs	r3, #1
 80059ce:	6093      	str	r3, [r2, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da04      	bge.n	80059de <__sfputc_r+0x16>
 80059d4:	6994      	ldr	r4, [r2, #24]
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	db07      	blt.n	80059ea <__sfputc_r+0x22>
 80059da:	290a      	cmp	r1, #10
 80059dc:	d005      	beq.n	80059ea <__sfputc_r+0x22>
 80059de:	6813      	ldr	r3, [r2, #0]
 80059e0:	1c58      	adds	r0, r3, #1
 80059e2:	6010      	str	r0, [r2, #0]
 80059e4:	7019      	strb	r1, [r3, #0]
 80059e6:	0008      	movs	r0, r1
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	f000 fae3 	bl	8005fb4 <__swbuf_r>
 80059ee:	0001      	movs	r1, r0
 80059f0:	e7f9      	b.n	80059e6 <__sfputc_r+0x1e>

080059f2 <__sfputs_r>:
 80059f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f4:	0006      	movs	r6, r0
 80059f6:	000f      	movs	r7, r1
 80059f8:	0014      	movs	r4, r2
 80059fa:	18d5      	adds	r5, r2, r3
 80059fc:	42ac      	cmp	r4, r5
 80059fe:	d101      	bne.n	8005a04 <__sfputs_r+0x12>
 8005a00:	2000      	movs	r0, #0
 8005a02:	e007      	b.n	8005a14 <__sfputs_r+0x22>
 8005a04:	7821      	ldrb	r1, [r4, #0]
 8005a06:	003a      	movs	r2, r7
 8005a08:	0030      	movs	r0, r6
 8005a0a:	f7ff ffdd 	bl	80059c8 <__sfputc_r>
 8005a0e:	3401      	adds	r4, #1
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d1f3      	bne.n	80059fc <__sfputs_r+0xa>
 8005a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a18 <_vfiprintf_r>:
 8005a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1a:	b0a1      	sub	sp, #132	; 0x84
 8005a1c:	0006      	movs	r6, r0
 8005a1e:	000c      	movs	r4, r1
 8005a20:	001f      	movs	r7, r3
 8005a22:	9203      	str	r2, [sp, #12]
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d004      	beq.n	8005a32 <_vfiprintf_r+0x1a>
 8005a28:	6983      	ldr	r3, [r0, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <_vfiprintf_r+0x1a>
 8005a2e:	f000 fcc5 	bl	80063bc <__sinit>
 8005a32:	4b8e      	ldr	r3, [pc, #568]	; (8005c6c <_vfiprintf_r+0x254>)
 8005a34:	429c      	cmp	r4, r3
 8005a36:	d11c      	bne.n	8005a72 <_vfiprintf_r+0x5a>
 8005a38:	6874      	ldr	r4, [r6, #4]
 8005a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a3c:	07db      	lsls	r3, r3, #31
 8005a3e:	d405      	bmi.n	8005a4c <_vfiprintf_r+0x34>
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	059b      	lsls	r3, r3, #22
 8005a44:	d402      	bmi.n	8005a4c <_vfiprintf_r+0x34>
 8005a46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a48:	f000 fd59 	bl	80064fe <__retarget_lock_acquire_recursive>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	071b      	lsls	r3, r3, #28
 8005a50:	d502      	bpl.n	8005a58 <_vfiprintf_r+0x40>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d11d      	bne.n	8005a94 <_vfiprintf_r+0x7c>
 8005a58:	0021      	movs	r1, r4
 8005a5a:	0030      	movs	r0, r6
 8005a5c:	f000 fb00 	bl	8006060 <__swsetup_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d017      	beq.n	8005a94 <_vfiprintf_r+0x7c>
 8005a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a66:	07db      	lsls	r3, r3, #31
 8005a68:	d50d      	bpl.n	8005a86 <_vfiprintf_r+0x6e>
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	4240      	negs	r0, r0
 8005a6e:	b021      	add	sp, #132	; 0x84
 8005a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a72:	4b7f      	ldr	r3, [pc, #508]	; (8005c70 <_vfiprintf_r+0x258>)
 8005a74:	429c      	cmp	r4, r3
 8005a76:	d101      	bne.n	8005a7c <_vfiprintf_r+0x64>
 8005a78:	68b4      	ldr	r4, [r6, #8]
 8005a7a:	e7de      	b.n	8005a3a <_vfiprintf_r+0x22>
 8005a7c:	4b7d      	ldr	r3, [pc, #500]	; (8005c74 <_vfiprintf_r+0x25c>)
 8005a7e:	429c      	cmp	r4, r3
 8005a80:	d1db      	bne.n	8005a3a <_vfiprintf_r+0x22>
 8005a82:	68f4      	ldr	r4, [r6, #12]
 8005a84:	e7d9      	b.n	8005a3a <_vfiprintf_r+0x22>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	059b      	lsls	r3, r3, #22
 8005a8a:	d4ee      	bmi.n	8005a6a <_vfiprintf_r+0x52>
 8005a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a8e:	f000 fd37 	bl	8006500 <__retarget_lock_release_recursive>
 8005a92:	e7ea      	b.n	8005a6a <_vfiprintf_r+0x52>
 8005a94:	2300      	movs	r3, #0
 8005a96:	ad08      	add	r5, sp, #32
 8005a98:	616b      	str	r3, [r5, #20]
 8005a9a:	3320      	adds	r3, #32
 8005a9c:	766b      	strb	r3, [r5, #25]
 8005a9e:	3310      	adds	r3, #16
 8005aa0:	76ab      	strb	r3, [r5, #26]
 8005aa2:	9707      	str	r7, [sp, #28]
 8005aa4:	9f03      	ldr	r7, [sp, #12]
 8005aa6:	783b      	ldrb	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <_vfiprintf_r+0x98>
 8005aac:	2b25      	cmp	r3, #37	; 0x25
 8005aae:	d14e      	bne.n	8005b4e <_vfiprintf_r+0x136>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	1afb      	subs	r3, r7, r3
 8005ab4:	9305      	str	r3, [sp, #20]
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	429f      	cmp	r7, r3
 8005aba:	d00d      	beq.n	8005ad8 <_vfiprintf_r+0xc0>
 8005abc:	9b05      	ldr	r3, [sp, #20]
 8005abe:	0021      	movs	r1, r4
 8005ac0:	0030      	movs	r0, r6
 8005ac2:	9a03      	ldr	r2, [sp, #12]
 8005ac4:	f7ff ff95 	bl	80059f2 <__sfputs_r>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d100      	bne.n	8005ace <_vfiprintf_r+0xb6>
 8005acc:	e0b5      	b.n	8005c3a <_vfiprintf_r+0x222>
 8005ace:	696a      	ldr	r2, [r5, #20]
 8005ad0:	9b05      	ldr	r3, [sp, #20]
 8005ad2:	4694      	mov	ip, r2
 8005ad4:	4463      	add	r3, ip
 8005ad6:	616b      	str	r3, [r5, #20]
 8005ad8:	783b      	ldrb	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d100      	bne.n	8005ae0 <_vfiprintf_r+0xc8>
 8005ade:	e0ac      	b.n	8005c3a <_vfiprintf_r+0x222>
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	1c7b      	adds	r3, r7, #1
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	4252      	negs	r2, r2
 8005aea:	606a      	str	r2, [r5, #4]
 8005aec:	a904      	add	r1, sp, #16
 8005aee:	3254      	adds	r2, #84	; 0x54
 8005af0:	1852      	adds	r2, r2, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	60eb      	str	r3, [r5, #12]
 8005af6:	60ab      	str	r3, [r5, #8]
 8005af8:	7013      	strb	r3, [r2, #0]
 8005afa:	65ab      	str	r3, [r5, #88]	; 0x58
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	2205      	movs	r2, #5
 8005b00:	7819      	ldrb	r1, [r3, #0]
 8005b02:	485d      	ldr	r0, [pc, #372]	; (8005c78 <_vfiprintf_r+0x260>)
 8005b04:	f000 fd6a 	bl	80065dc <memchr>
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	1c5f      	adds	r7, r3, #1
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d120      	bne.n	8005b52 <_vfiprintf_r+0x13a>
 8005b10:	682a      	ldr	r2, [r5, #0]
 8005b12:	06d3      	lsls	r3, r2, #27
 8005b14:	d504      	bpl.n	8005b20 <_vfiprintf_r+0x108>
 8005b16:	2353      	movs	r3, #83	; 0x53
 8005b18:	a904      	add	r1, sp, #16
 8005b1a:	185b      	adds	r3, r3, r1
 8005b1c:	2120      	movs	r1, #32
 8005b1e:	7019      	strb	r1, [r3, #0]
 8005b20:	0713      	lsls	r3, r2, #28
 8005b22:	d504      	bpl.n	8005b2e <_vfiprintf_r+0x116>
 8005b24:	2353      	movs	r3, #83	; 0x53
 8005b26:	a904      	add	r1, sp, #16
 8005b28:	185b      	adds	r3, r3, r1
 8005b2a:	212b      	movs	r1, #43	; 0x2b
 8005b2c:	7019      	strb	r1, [r3, #0]
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b2a      	cmp	r3, #42	; 0x2a
 8005b34:	d016      	beq.n	8005b64 <_vfiprintf_r+0x14c>
 8005b36:	2100      	movs	r1, #0
 8005b38:	68eb      	ldr	r3, [r5, #12]
 8005b3a:	9f03      	ldr	r7, [sp, #12]
 8005b3c:	783a      	ldrb	r2, [r7, #0]
 8005b3e:	1c78      	adds	r0, r7, #1
 8005b40:	3a30      	subs	r2, #48	; 0x30
 8005b42:	4684      	mov	ip, r0
 8005b44:	2a09      	cmp	r2, #9
 8005b46:	d94f      	bls.n	8005be8 <_vfiprintf_r+0x1d0>
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d111      	bne.n	8005b70 <_vfiprintf_r+0x158>
 8005b4c:	e017      	b.n	8005b7e <_vfiprintf_r+0x166>
 8005b4e:	3701      	adds	r7, #1
 8005b50:	e7a9      	b.n	8005aa6 <_vfiprintf_r+0x8e>
 8005b52:	4b49      	ldr	r3, [pc, #292]	; (8005c78 <_vfiprintf_r+0x260>)
 8005b54:	682a      	ldr	r2, [r5, #0]
 8005b56:	1ac0      	subs	r0, r0, r3
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4083      	lsls	r3, r0
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	9703      	str	r7, [sp, #12]
 8005b62:	e7cb      	b.n	8005afc <_vfiprintf_r+0xe4>
 8005b64:	9b07      	ldr	r3, [sp, #28]
 8005b66:	1d19      	adds	r1, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	9107      	str	r1, [sp, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db01      	blt.n	8005b74 <_vfiprintf_r+0x15c>
 8005b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b72:	e004      	b.n	8005b7e <_vfiprintf_r+0x166>
 8005b74:	425b      	negs	r3, r3
 8005b76:	60eb      	str	r3, [r5, #12]
 8005b78:	2302      	movs	r3, #2
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	602b      	str	r3, [r5, #0]
 8005b7e:	783b      	ldrb	r3, [r7, #0]
 8005b80:	2b2e      	cmp	r3, #46	; 0x2e
 8005b82:	d10a      	bne.n	8005b9a <_vfiprintf_r+0x182>
 8005b84:	787b      	ldrb	r3, [r7, #1]
 8005b86:	2b2a      	cmp	r3, #42	; 0x2a
 8005b88:	d137      	bne.n	8005bfa <_vfiprintf_r+0x1e2>
 8005b8a:	9b07      	ldr	r3, [sp, #28]
 8005b8c:	3702      	adds	r7, #2
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	9207      	str	r2, [sp, #28]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db2d      	blt.n	8005bf4 <_vfiprintf_r+0x1dc>
 8005b98:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	7839      	ldrb	r1, [r7, #0]
 8005b9e:	4837      	ldr	r0, [pc, #220]	; (8005c7c <_vfiprintf_r+0x264>)
 8005ba0:	f000 fd1c 	bl	80065dc <memchr>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d007      	beq.n	8005bb8 <_vfiprintf_r+0x1a0>
 8005ba8:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <_vfiprintf_r+0x264>)
 8005baa:	682a      	ldr	r2, [r5, #0]
 8005bac:	1ac0      	subs	r0, r0, r3
 8005bae:	2340      	movs	r3, #64	; 0x40
 8005bb0:	4083      	lsls	r3, r0
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	3701      	adds	r7, #1
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	7839      	ldrb	r1, [r7, #0]
 8005bba:	1c7b      	adds	r3, r7, #1
 8005bbc:	2206      	movs	r2, #6
 8005bbe:	4830      	ldr	r0, [pc, #192]	; (8005c80 <_vfiprintf_r+0x268>)
 8005bc0:	9303      	str	r3, [sp, #12]
 8005bc2:	7629      	strb	r1, [r5, #24]
 8005bc4:	f000 fd0a 	bl	80065dc <memchr>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d045      	beq.n	8005c58 <_vfiprintf_r+0x240>
 8005bcc:	4b2d      	ldr	r3, [pc, #180]	; (8005c84 <_vfiprintf_r+0x26c>)
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d127      	bne.n	8005c22 <_vfiprintf_r+0x20a>
 8005bd2:	2207      	movs	r2, #7
 8005bd4:	9b07      	ldr	r3, [sp, #28]
 8005bd6:	3307      	adds	r3, #7
 8005bd8:	4393      	bics	r3, r2
 8005bda:	3308      	adds	r3, #8
 8005bdc:	9307      	str	r3, [sp, #28]
 8005bde:	696b      	ldr	r3, [r5, #20]
 8005be0:	9a04      	ldr	r2, [sp, #16]
 8005be2:	189b      	adds	r3, r3, r2
 8005be4:	616b      	str	r3, [r5, #20]
 8005be6:	e75d      	b.n	8005aa4 <_vfiprintf_r+0x8c>
 8005be8:	210a      	movs	r1, #10
 8005bea:	434b      	muls	r3, r1
 8005bec:	4667      	mov	r7, ip
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	3909      	subs	r1, #9
 8005bf2:	e7a3      	b.n	8005b3c <_vfiprintf_r+0x124>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	425b      	negs	r3, r3
 8005bf8:	e7ce      	b.n	8005b98 <_vfiprintf_r+0x180>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	001a      	movs	r2, r3
 8005bfe:	3701      	adds	r7, #1
 8005c00:	606b      	str	r3, [r5, #4]
 8005c02:	7839      	ldrb	r1, [r7, #0]
 8005c04:	1c78      	adds	r0, r7, #1
 8005c06:	3930      	subs	r1, #48	; 0x30
 8005c08:	4684      	mov	ip, r0
 8005c0a:	2909      	cmp	r1, #9
 8005c0c:	d903      	bls.n	8005c16 <_vfiprintf_r+0x1fe>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c3      	beq.n	8005b9a <_vfiprintf_r+0x182>
 8005c12:	9209      	str	r2, [sp, #36]	; 0x24
 8005c14:	e7c1      	b.n	8005b9a <_vfiprintf_r+0x182>
 8005c16:	230a      	movs	r3, #10
 8005c18:	435a      	muls	r2, r3
 8005c1a:	4667      	mov	r7, ip
 8005c1c:	1852      	adds	r2, r2, r1
 8005c1e:	3b09      	subs	r3, #9
 8005c20:	e7ef      	b.n	8005c02 <_vfiprintf_r+0x1ea>
 8005c22:	ab07      	add	r3, sp, #28
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	0022      	movs	r2, r4
 8005c28:	0029      	movs	r1, r5
 8005c2a:	0030      	movs	r0, r6
 8005c2c:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <_vfiprintf_r+0x270>)
 8005c2e:	e000      	b.n	8005c32 <_vfiprintf_r+0x21a>
 8005c30:	bf00      	nop
 8005c32:	9004      	str	r0, [sp, #16]
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	3301      	adds	r3, #1
 8005c38:	d1d1      	bne.n	8005bde <_vfiprintf_r+0x1c6>
 8005c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c3c:	07db      	lsls	r3, r3, #31
 8005c3e:	d405      	bmi.n	8005c4c <_vfiprintf_r+0x234>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	059b      	lsls	r3, r3, #22
 8005c44:	d402      	bmi.n	8005c4c <_vfiprintf_r+0x234>
 8005c46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c48:	f000 fc5a 	bl	8006500 <__retarget_lock_release_recursive>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	065b      	lsls	r3, r3, #25
 8005c50:	d500      	bpl.n	8005c54 <_vfiprintf_r+0x23c>
 8005c52:	e70a      	b.n	8005a6a <_vfiprintf_r+0x52>
 8005c54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c56:	e70a      	b.n	8005a6e <_vfiprintf_r+0x56>
 8005c58:	ab07      	add	r3, sp, #28
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	0022      	movs	r2, r4
 8005c5e:	0029      	movs	r1, r5
 8005c60:	0030      	movs	r0, r6
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <_vfiprintf_r+0x270>)
 8005c64:	f000 f882 	bl	8005d6c <_printf_i>
 8005c68:	e7e3      	b.n	8005c32 <_vfiprintf_r+0x21a>
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	080069ec 	.word	0x080069ec
 8005c70:	08006a0c 	.word	0x08006a0c
 8005c74:	080069cc 	.word	0x080069cc
 8005c78:	08006996 	.word	0x08006996
 8005c7c:	0800699c 	.word	0x0800699c
 8005c80:	080069a0 	.word	0x080069a0
 8005c84:	00000000 	.word	0x00000000
 8005c88:	080059f3 	.word	0x080059f3

08005c8c <_printf_common>:
 8005c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8e:	0015      	movs	r5, r2
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	688a      	ldr	r2, [r1, #8]
 8005c94:	690b      	ldr	r3, [r1, #16]
 8005c96:	000c      	movs	r4, r1
 8005c98:	9000      	str	r0, [sp, #0]
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	da00      	bge.n	8005ca0 <_printf_common+0x14>
 8005c9e:	0013      	movs	r3, r2
 8005ca0:	0022      	movs	r2, r4
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	3243      	adds	r2, #67	; 0x43
 8005ca6:	7812      	ldrb	r2, [r2, #0]
 8005ca8:	2a00      	cmp	r2, #0
 8005caa:	d001      	beq.n	8005cb0 <_printf_common+0x24>
 8005cac:	3301      	adds	r3, #1
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	069b      	lsls	r3, r3, #26
 8005cb4:	d502      	bpl.n	8005cbc <_printf_common+0x30>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	3302      	adds	r3, #2
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	2306      	movs	r3, #6
 8005cc0:	0017      	movs	r7, r2
 8005cc2:	401f      	ands	r7, r3
 8005cc4:	421a      	tst	r2, r3
 8005cc6:	d027      	beq.n	8005d18 <_printf_common+0x8c>
 8005cc8:	0023      	movs	r3, r4
 8005cca:	3343      	adds	r3, #67	; 0x43
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	1e5a      	subs	r2, r3, #1
 8005cd0:	4193      	sbcs	r3, r2
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	0692      	lsls	r2, r2, #26
 8005cd6:	d430      	bmi.n	8005d3a <_printf_common+0xae>
 8005cd8:	0022      	movs	r2, r4
 8005cda:	9901      	ldr	r1, [sp, #4]
 8005cdc:	9800      	ldr	r0, [sp, #0]
 8005cde:	9e08      	ldr	r6, [sp, #32]
 8005ce0:	3243      	adds	r2, #67	; 0x43
 8005ce2:	47b0      	blx	r6
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d025      	beq.n	8005d34 <_printf_common+0xa8>
 8005ce8:	2306      	movs	r3, #6
 8005cea:	6820      	ldr	r0, [r4, #0]
 8005cec:	682a      	ldr	r2, [r5, #0]
 8005cee:	68e1      	ldr	r1, [r4, #12]
 8005cf0:	2500      	movs	r5, #0
 8005cf2:	4003      	ands	r3, r0
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d103      	bne.n	8005d00 <_printf_common+0x74>
 8005cf8:	1a8d      	subs	r5, r1, r2
 8005cfa:	43eb      	mvns	r3, r5
 8005cfc:	17db      	asrs	r3, r3, #31
 8005cfe:	401d      	ands	r5, r3
 8005d00:	68a3      	ldr	r3, [r4, #8]
 8005d02:	6922      	ldr	r2, [r4, #16]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	dd01      	ble.n	8005d0c <_printf_common+0x80>
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	18ed      	adds	r5, r5, r3
 8005d0c:	2700      	movs	r7, #0
 8005d0e:	42bd      	cmp	r5, r7
 8005d10:	d120      	bne.n	8005d54 <_printf_common+0xc8>
 8005d12:	2000      	movs	r0, #0
 8005d14:	e010      	b.n	8005d38 <_printf_common+0xac>
 8005d16:	3701      	adds	r7, #1
 8005d18:	68e3      	ldr	r3, [r4, #12]
 8005d1a:	682a      	ldr	r2, [r5, #0]
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	42bb      	cmp	r3, r7
 8005d20:	ddd2      	ble.n	8005cc8 <_printf_common+0x3c>
 8005d22:	0022      	movs	r2, r4
 8005d24:	2301      	movs	r3, #1
 8005d26:	9901      	ldr	r1, [sp, #4]
 8005d28:	9800      	ldr	r0, [sp, #0]
 8005d2a:	9e08      	ldr	r6, [sp, #32]
 8005d2c:	3219      	adds	r2, #25
 8005d2e:	47b0      	blx	r6
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d1f0      	bne.n	8005d16 <_printf_common+0x8a>
 8005d34:	2001      	movs	r0, #1
 8005d36:	4240      	negs	r0, r0
 8005d38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d3a:	2030      	movs	r0, #48	; 0x30
 8005d3c:	18e1      	adds	r1, r4, r3
 8005d3e:	3143      	adds	r1, #67	; 0x43
 8005d40:	7008      	strb	r0, [r1, #0]
 8005d42:	0021      	movs	r1, r4
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	3145      	adds	r1, #69	; 0x45
 8005d48:	7809      	ldrb	r1, [r1, #0]
 8005d4a:	18a2      	adds	r2, r4, r2
 8005d4c:	3243      	adds	r2, #67	; 0x43
 8005d4e:	3302      	adds	r3, #2
 8005d50:	7011      	strb	r1, [r2, #0]
 8005d52:	e7c1      	b.n	8005cd8 <_printf_common+0x4c>
 8005d54:	0022      	movs	r2, r4
 8005d56:	2301      	movs	r3, #1
 8005d58:	9901      	ldr	r1, [sp, #4]
 8005d5a:	9800      	ldr	r0, [sp, #0]
 8005d5c:	9e08      	ldr	r6, [sp, #32]
 8005d5e:	321a      	adds	r2, #26
 8005d60:	47b0      	blx	r6
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d0e6      	beq.n	8005d34 <_printf_common+0xa8>
 8005d66:	3701      	adds	r7, #1
 8005d68:	e7d1      	b.n	8005d0e <_printf_common+0x82>
	...

08005d6c <_printf_i>:
 8005d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6e:	b08b      	sub	sp, #44	; 0x2c
 8005d70:	9206      	str	r2, [sp, #24]
 8005d72:	000a      	movs	r2, r1
 8005d74:	3243      	adds	r2, #67	; 0x43
 8005d76:	9307      	str	r3, [sp, #28]
 8005d78:	9005      	str	r0, [sp, #20]
 8005d7a:	9204      	str	r2, [sp, #16]
 8005d7c:	7e0a      	ldrb	r2, [r1, #24]
 8005d7e:	000c      	movs	r4, r1
 8005d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d82:	2a78      	cmp	r2, #120	; 0x78
 8005d84:	d807      	bhi.n	8005d96 <_printf_i+0x2a>
 8005d86:	2a62      	cmp	r2, #98	; 0x62
 8005d88:	d809      	bhi.n	8005d9e <_printf_i+0x32>
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	d100      	bne.n	8005d90 <_printf_i+0x24>
 8005d8e:	e0c1      	b.n	8005f14 <_printf_i+0x1a8>
 8005d90:	2a58      	cmp	r2, #88	; 0x58
 8005d92:	d100      	bne.n	8005d96 <_printf_i+0x2a>
 8005d94:	e08c      	b.n	8005eb0 <_printf_i+0x144>
 8005d96:	0026      	movs	r6, r4
 8005d98:	3642      	adds	r6, #66	; 0x42
 8005d9a:	7032      	strb	r2, [r6, #0]
 8005d9c:	e022      	b.n	8005de4 <_printf_i+0x78>
 8005d9e:	0010      	movs	r0, r2
 8005da0:	3863      	subs	r0, #99	; 0x63
 8005da2:	2815      	cmp	r0, #21
 8005da4:	d8f7      	bhi.n	8005d96 <_printf_i+0x2a>
 8005da6:	f7fa f9af 	bl	8000108 <__gnu_thumb1_case_shi>
 8005daa:	0016      	.short	0x0016
 8005dac:	fff6001f 	.word	0xfff6001f
 8005db0:	fff6fff6 	.word	0xfff6fff6
 8005db4:	001ffff6 	.word	0x001ffff6
 8005db8:	fff6fff6 	.word	0xfff6fff6
 8005dbc:	fff6fff6 	.word	0xfff6fff6
 8005dc0:	003600a8 	.word	0x003600a8
 8005dc4:	fff6009a 	.word	0xfff6009a
 8005dc8:	00b9fff6 	.word	0x00b9fff6
 8005dcc:	0036fff6 	.word	0x0036fff6
 8005dd0:	fff6fff6 	.word	0xfff6fff6
 8005dd4:	009e      	.short	0x009e
 8005dd6:	0026      	movs	r6, r4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	3642      	adds	r6, #66	; 0x42
 8005ddc:	1d11      	adds	r1, r2, #4
 8005dde:	6019      	str	r1, [r3, #0]
 8005de0:	6813      	ldr	r3, [r2, #0]
 8005de2:	7033      	strb	r3, [r6, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0a7      	b.n	8005f38 <_printf_i+0x1cc>
 8005de8:	6808      	ldr	r0, [r1, #0]
 8005dea:	6819      	ldr	r1, [r3, #0]
 8005dec:	1d0a      	adds	r2, r1, #4
 8005dee:	0605      	lsls	r5, r0, #24
 8005df0:	d50b      	bpl.n	8005e0a <_printf_i+0x9e>
 8005df2:	680d      	ldr	r5, [r1, #0]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	da03      	bge.n	8005e02 <_printf_i+0x96>
 8005dfa:	232d      	movs	r3, #45	; 0x2d
 8005dfc:	9a04      	ldr	r2, [sp, #16]
 8005dfe:	426d      	negs	r5, r5
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	4b61      	ldr	r3, [pc, #388]	; (8005f88 <_printf_i+0x21c>)
 8005e04:	270a      	movs	r7, #10
 8005e06:	9303      	str	r3, [sp, #12]
 8005e08:	e01b      	b.n	8005e42 <_printf_i+0xd6>
 8005e0a:	680d      	ldr	r5, [r1, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	0641      	lsls	r1, r0, #25
 8005e10:	d5f1      	bpl.n	8005df6 <_printf_i+0x8a>
 8005e12:	b22d      	sxth	r5, r5
 8005e14:	e7ef      	b.n	8005df6 <_printf_i+0x8a>
 8005e16:	680d      	ldr	r5, [r1, #0]
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	1d08      	adds	r0, r1, #4
 8005e1c:	6018      	str	r0, [r3, #0]
 8005e1e:	062e      	lsls	r6, r5, #24
 8005e20:	d501      	bpl.n	8005e26 <_printf_i+0xba>
 8005e22:	680d      	ldr	r5, [r1, #0]
 8005e24:	e003      	b.n	8005e2e <_printf_i+0xc2>
 8005e26:	066d      	lsls	r5, r5, #25
 8005e28:	d5fb      	bpl.n	8005e22 <_printf_i+0xb6>
 8005e2a:	680d      	ldr	r5, [r1, #0]
 8005e2c:	b2ad      	uxth	r5, r5
 8005e2e:	4b56      	ldr	r3, [pc, #344]	; (8005f88 <_printf_i+0x21c>)
 8005e30:	2708      	movs	r7, #8
 8005e32:	9303      	str	r3, [sp, #12]
 8005e34:	2a6f      	cmp	r2, #111	; 0x6f
 8005e36:	d000      	beq.n	8005e3a <_printf_i+0xce>
 8005e38:	3702      	adds	r7, #2
 8005e3a:	0023      	movs	r3, r4
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	3343      	adds	r3, #67	; 0x43
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	60a3      	str	r3, [r4, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	db03      	blt.n	8005e52 <_printf_i+0xe6>
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	6821      	ldr	r1, [r4, #0]
 8005e4e:	4391      	bics	r1, r2
 8005e50:	6021      	str	r1, [r4, #0]
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	d102      	bne.n	8005e5c <_printf_i+0xf0>
 8005e56:	9e04      	ldr	r6, [sp, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00c      	beq.n	8005e76 <_printf_i+0x10a>
 8005e5c:	9e04      	ldr	r6, [sp, #16]
 8005e5e:	0028      	movs	r0, r5
 8005e60:	0039      	movs	r1, r7
 8005e62:	f7fa f9e1 	bl	8000228 <__aeabi_uidivmod>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	3e01      	subs	r6, #1
 8005e6a:	5c5b      	ldrb	r3, [r3, r1]
 8005e6c:	7033      	strb	r3, [r6, #0]
 8005e6e:	002b      	movs	r3, r5
 8005e70:	0005      	movs	r5, r0
 8005e72:	429f      	cmp	r7, r3
 8005e74:	d9f3      	bls.n	8005e5e <_printf_i+0xf2>
 8005e76:	2f08      	cmp	r7, #8
 8005e78:	d109      	bne.n	8005e8e <_printf_i+0x122>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	07db      	lsls	r3, r3, #31
 8005e7e:	d506      	bpl.n	8005e8e <_printf_i+0x122>
 8005e80:	6863      	ldr	r3, [r4, #4]
 8005e82:	6922      	ldr	r2, [r4, #16]
 8005e84:	4293      	cmp	r3, r2
 8005e86:	dc02      	bgt.n	8005e8e <_printf_i+0x122>
 8005e88:	2330      	movs	r3, #48	; 0x30
 8005e8a:	3e01      	subs	r6, #1
 8005e8c:	7033      	strb	r3, [r6, #0]
 8005e8e:	9b04      	ldr	r3, [sp, #16]
 8005e90:	1b9b      	subs	r3, r3, r6
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	0021      	movs	r1, r4
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	9805      	ldr	r0, [sp, #20]
 8005e9c:	9b06      	ldr	r3, [sp, #24]
 8005e9e:	aa09      	add	r2, sp, #36	; 0x24
 8005ea0:	f7ff fef4 	bl	8005c8c <_printf_common>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d14c      	bne.n	8005f42 <_printf_i+0x1d6>
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	4240      	negs	r0, r0
 8005eac:	b00b      	add	sp, #44	; 0x2c
 8005eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb0:	3145      	adds	r1, #69	; 0x45
 8005eb2:	700a      	strb	r2, [r1, #0]
 8005eb4:	4a34      	ldr	r2, [pc, #208]	; (8005f88 <_printf_i+0x21c>)
 8005eb6:	9203      	str	r2, [sp, #12]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	6821      	ldr	r1, [r4, #0]
 8005ebc:	ca20      	ldmia	r2!, {r5}
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	0608      	lsls	r0, r1, #24
 8005ec2:	d516      	bpl.n	8005ef2 <_printf_i+0x186>
 8005ec4:	07cb      	lsls	r3, r1, #31
 8005ec6:	d502      	bpl.n	8005ece <_printf_i+0x162>
 8005ec8:	2320      	movs	r3, #32
 8005eca:	4319      	orrs	r1, r3
 8005ecc:	6021      	str	r1, [r4, #0]
 8005ece:	2710      	movs	r7, #16
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	d1b2      	bne.n	8005e3a <_printf_i+0xce>
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	439a      	bics	r2, r3
 8005eda:	6022      	str	r2, [r4, #0]
 8005edc:	e7ad      	b.n	8005e3a <_printf_i+0xce>
 8005ede:	2220      	movs	r2, #32
 8005ee0:	6809      	ldr	r1, [r1, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	6022      	str	r2, [r4, #0]
 8005ee6:	0022      	movs	r2, r4
 8005ee8:	2178      	movs	r1, #120	; 0x78
 8005eea:	3245      	adds	r2, #69	; 0x45
 8005eec:	7011      	strb	r1, [r2, #0]
 8005eee:	4a27      	ldr	r2, [pc, #156]	; (8005f8c <_printf_i+0x220>)
 8005ef0:	e7e1      	b.n	8005eb6 <_printf_i+0x14a>
 8005ef2:	0648      	lsls	r0, r1, #25
 8005ef4:	d5e6      	bpl.n	8005ec4 <_printf_i+0x158>
 8005ef6:	b2ad      	uxth	r5, r5
 8005ef8:	e7e4      	b.n	8005ec4 <_printf_i+0x158>
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	680d      	ldr	r5, [r1, #0]
 8005efe:	1d10      	adds	r0, r2, #4
 8005f00:	6949      	ldr	r1, [r1, #20]
 8005f02:	6018      	str	r0, [r3, #0]
 8005f04:	6813      	ldr	r3, [r2, #0]
 8005f06:	062e      	lsls	r6, r5, #24
 8005f08:	d501      	bpl.n	8005f0e <_printf_i+0x1a2>
 8005f0a:	6019      	str	r1, [r3, #0]
 8005f0c:	e002      	b.n	8005f14 <_printf_i+0x1a8>
 8005f0e:	066d      	lsls	r5, r5, #25
 8005f10:	d5fb      	bpl.n	8005f0a <_printf_i+0x19e>
 8005f12:	8019      	strh	r1, [r3, #0]
 8005f14:	2300      	movs	r3, #0
 8005f16:	9e04      	ldr	r6, [sp, #16]
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	e7bb      	b.n	8005e94 <_printf_i+0x128>
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	1d11      	adds	r1, r2, #4
 8005f20:	6019      	str	r1, [r3, #0]
 8005f22:	6816      	ldr	r6, [r2, #0]
 8005f24:	2100      	movs	r1, #0
 8005f26:	0030      	movs	r0, r6
 8005f28:	6862      	ldr	r2, [r4, #4]
 8005f2a:	f000 fb57 	bl	80065dc <memchr>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d001      	beq.n	8005f36 <_printf_i+0x1ca>
 8005f32:	1b80      	subs	r0, r0, r6
 8005f34:	6060      	str	r0, [r4, #4]
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9a04      	ldr	r2, [sp, #16]
 8005f3e:	7013      	strb	r3, [r2, #0]
 8005f40:	e7a8      	b.n	8005e94 <_printf_i+0x128>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	0032      	movs	r2, r6
 8005f46:	9906      	ldr	r1, [sp, #24]
 8005f48:	9805      	ldr	r0, [sp, #20]
 8005f4a:	9d07      	ldr	r5, [sp, #28]
 8005f4c:	47a8      	blx	r5
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d0aa      	beq.n	8005ea8 <_printf_i+0x13c>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	079b      	lsls	r3, r3, #30
 8005f56:	d415      	bmi.n	8005f84 <_printf_i+0x218>
 8005f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5a:	68e0      	ldr	r0, [r4, #12]
 8005f5c:	4298      	cmp	r0, r3
 8005f5e:	daa5      	bge.n	8005eac <_printf_i+0x140>
 8005f60:	0018      	movs	r0, r3
 8005f62:	e7a3      	b.n	8005eac <_printf_i+0x140>
 8005f64:	0022      	movs	r2, r4
 8005f66:	2301      	movs	r3, #1
 8005f68:	9906      	ldr	r1, [sp, #24]
 8005f6a:	9805      	ldr	r0, [sp, #20]
 8005f6c:	9e07      	ldr	r6, [sp, #28]
 8005f6e:	3219      	adds	r2, #25
 8005f70:	47b0      	blx	r6
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	d098      	beq.n	8005ea8 <_printf_i+0x13c>
 8005f76:	3501      	adds	r5, #1
 8005f78:	68e3      	ldr	r3, [r4, #12]
 8005f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	42ab      	cmp	r3, r5
 8005f80:	dcf0      	bgt.n	8005f64 <_printf_i+0x1f8>
 8005f82:	e7e9      	b.n	8005f58 <_printf_i+0x1ec>
 8005f84:	2500      	movs	r5, #0
 8005f86:	e7f7      	b.n	8005f78 <_printf_i+0x20c>
 8005f88:	080069a7 	.word	0x080069a7
 8005f8c:	080069b8 	.word	0x080069b8

08005f90 <_sbrk_r>:
 8005f90:	2300      	movs	r3, #0
 8005f92:	b570      	push	{r4, r5, r6, lr}
 8005f94:	4d06      	ldr	r5, [pc, #24]	; (8005fb0 <_sbrk_r+0x20>)
 8005f96:	0004      	movs	r4, r0
 8005f98:	0008      	movs	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fa fc62 	bl	8000864 <_sbrk>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d103      	bne.n	8005fac <_sbrk_r+0x1c>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d000      	beq.n	8005fac <_sbrk_r+0x1c>
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	20000248 	.word	0x20000248

08005fb4 <__swbuf_r>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	0005      	movs	r5, r0
 8005fb8:	000e      	movs	r6, r1
 8005fba:	0014      	movs	r4, r2
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d004      	beq.n	8005fca <__swbuf_r+0x16>
 8005fc0:	6983      	ldr	r3, [r0, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <__swbuf_r+0x16>
 8005fc6:	f000 f9f9 	bl	80063bc <__sinit>
 8005fca:	4b22      	ldr	r3, [pc, #136]	; (8006054 <__swbuf_r+0xa0>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d12e      	bne.n	800602e <__swbuf_r+0x7a>
 8005fd0:	686c      	ldr	r4, [r5, #4]
 8005fd2:	69a3      	ldr	r3, [r4, #24]
 8005fd4:	60a3      	str	r3, [r4, #8]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	071b      	lsls	r3, r3, #28
 8005fda:	d532      	bpl.n	8006042 <__swbuf_r+0x8e>
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02f      	beq.n	8006042 <__swbuf_r+0x8e>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	b2f7      	uxtb	r7, r6
 8005fe8:	1a98      	subs	r0, r3, r2
 8005fea:	6963      	ldr	r3, [r4, #20]
 8005fec:	b2f6      	uxtb	r6, r6
 8005fee:	4283      	cmp	r3, r0
 8005ff0:	dc05      	bgt.n	8005ffe <__swbuf_r+0x4a>
 8005ff2:	0021      	movs	r1, r4
 8005ff4:	0028      	movs	r0, r5
 8005ff6:	f000 f93f 	bl	8006278 <_fflush_r>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d127      	bne.n	800604e <__swbuf_r+0x9a>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	3001      	adds	r0, #1
 8006002:	3b01      	subs	r3, #1
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	6022      	str	r2, [r4, #0]
 800600c:	701f      	strb	r7, [r3, #0]
 800600e:	6963      	ldr	r3, [r4, #20]
 8006010:	4283      	cmp	r3, r0
 8006012:	d004      	beq.n	800601e <__swbuf_r+0x6a>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	07db      	lsls	r3, r3, #31
 8006018:	d507      	bpl.n	800602a <__swbuf_r+0x76>
 800601a:	2e0a      	cmp	r6, #10
 800601c:	d105      	bne.n	800602a <__swbuf_r+0x76>
 800601e:	0021      	movs	r1, r4
 8006020:	0028      	movs	r0, r5
 8006022:	f000 f929 	bl	8006278 <_fflush_r>
 8006026:	2800      	cmp	r0, #0
 8006028:	d111      	bne.n	800604e <__swbuf_r+0x9a>
 800602a:	0030      	movs	r0, r6
 800602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <__swbuf_r+0xa4>)
 8006030:	429c      	cmp	r4, r3
 8006032:	d101      	bne.n	8006038 <__swbuf_r+0x84>
 8006034:	68ac      	ldr	r4, [r5, #8]
 8006036:	e7cc      	b.n	8005fd2 <__swbuf_r+0x1e>
 8006038:	4b08      	ldr	r3, [pc, #32]	; (800605c <__swbuf_r+0xa8>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d1c9      	bne.n	8005fd2 <__swbuf_r+0x1e>
 800603e:	68ec      	ldr	r4, [r5, #12]
 8006040:	e7c7      	b.n	8005fd2 <__swbuf_r+0x1e>
 8006042:	0021      	movs	r1, r4
 8006044:	0028      	movs	r0, r5
 8006046:	f000 f80b 	bl	8006060 <__swsetup_r>
 800604a:	2800      	cmp	r0, #0
 800604c:	d0c9      	beq.n	8005fe2 <__swbuf_r+0x2e>
 800604e:	2601      	movs	r6, #1
 8006050:	4276      	negs	r6, r6
 8006052:	e7ea      	b.n	800602a <__swbuf_r+0x76>
 8006054:	080069ec 	.word	0x080069ec
 8006058:	08006a0c 	.word	0x08006a0c
 800605c:	080069cc 	.word	0x080069cc

08006060 <__swsetup_r>:
 8006060:	4b37      	ldr	r3, [pc, #220]	; (8006140 <__swsetup_r+0xe0>)
 8006062:	b570      	push	{r4, r5, r6, lr}
 8006064:	681d      	ldr	r5, [r3, #0]
 8006066:	0006      	movs	r6, r0
 8006068:	000c      	movs	r4, r1
 800606a:	2d00      	cmp	r5, #0
 800606c:	d005      	beq.n	800607a <__swsetup_r+0x1a>
 800606e:	69ab      	ldr	r3, [r5, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <__swsetup_r+0x1a>
 8006074:	0028      	movs	r0, r5
 8006076:	f000 f9a1 	bl	80063bc <__sinit>
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <__swsetup_r+0xe4>)
 800607c:	429c      	cmp	r4, r3
 800607e:	d10f      	bne.n	80060a0 <__swsetup_r+0x40>
 8006080:	686c      	ldr	r4, [r5, #4]
 8006082:	230c      	movs	r3, #12
 8006084:	5ee2      	ldrsh	r2, [r4, r3]
 8006086:	b293      	uxth	r3, r2
 8006088:	0711      	lsls	r1, r2, #28
 800608a:	d42d      	bmi.n	80060e8 <__swsetup_r+0x88>
 800608c:	06d9      	lsls	r1, r3, #27
 800608e:	d411      	bmi.n	80060b4 <__swsetup_r+0x54>
 8006090:	2309      	movs	r3, #9
 8006092:	2001      	movs	r0, #1
 8006094:	6033      	str	r3, [r6, #0]
 8006096:	3337      	adds	r3, #55	; 0x37
 8006098:	4313      	orrs	r3, r2
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	4240      	negs	r0, r0
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	4b29      	ldr	r3, [pc, #164]	; (8006148 <__swsetup_r+0xe8>)
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d101      	bne.n	80060aa <__swsetup_r+0x4a>
 80060a6:	68ac      	ldr	r4, [r5, #8]
 80060a8:	e7eb      	b.n	8006082 <__swsetup_r+0x22>
 80060aa:	4b28      	ldr	r3, [pc, #160]	; (800614c <__swsetup_r+0xec>)
 80060ac:	429c      	cmp	r4, r3
 80060ae:	d1e8      	bne.n	8006082 <__swsetup_r+0x22>
 80060b0:	68ec      	ldr	r4, [r5, #12]
 80060b2:	e7e6      	b.n	8006082 <__swsetup_r+0x22>
 80060b4:	075b      	lsls	r3, r3, #29
 80060b6:	d513      	bpl.n	80060e0 <__swsetup_r+0x80>
 80060b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d008      	beq.n	80060d0 <__swsetup_r+0x70>
 80060be:	0023      	movs	r3, r4
 80060c0:	3344      	adds	r3, #68	; 0x44
 80060c2:	4299      	cmp	r1, r3
 80060c4:	d002      	beq.n	80060cc <__swsetup_r+0x6c>
 80060c6:	0030      	movs	r0, r6
 80060c8:	f7ff fb9c 	bl	8005804 <_free_r>
 80060cc:	2300      	movs	r3, #0
 80060ce:	6363      	str	r3, [r4, #52]	; 0x34
 80060d0:	2224      	movs	r2, #36	; 0x24
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	4393      	bics	r3, r2
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	2300      	movs	r3, #0
 80060da:	6063      	str	r3, [r4, #4]
 80060dc:	6923      	ldr	r3, [r4, #16]
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	2308      	movs	r3, #8
 80060e2:	89a2      	ldrh	r2, [r4, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <__swsetup_r+0xa6>
 80060ee:	21a0      	movs	r1, #160	; 0xa0
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	0089      	lsls	r1, r1, #2
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	400b      	ands	r3, r1
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <__swsetup_r+0xa6>
 80060fe:	0021      	movs	r1, r4
 8006100:	0030      	movs	r0, r6
 8006102:	f000 fa27 	bl	8006554 <__smakebuf_r>
 8006106:	220c      	movs	r2, #12
 8006108:	5ea3      	ldrsh	r3, [r4, r2]
 800610a:	2001      	movs	r0, #1
 800610c:	001a      	movs	r2, r3
 800610e:	b299      	uxth	r1, r3
 8006110:	4002      	ands	r2, r0
 8006112:	4203      	tst	r3, r0
 8006114:	d00f      	beq.n	8006136 <__swsetup_r+0xd6>
 8006116:	2200      	movs	r2, #0
 8006118:	60a2      	str	r2, [r4, #8]
 800611a:	6962      	ldr	r2, [r4, #20]
 800611c:	4252      	negs	r2, r2
 800611e:	61a2      	str	r2, [r4, #24]
 8006120:	2000      	movs	r0, #0
 8006122:	6922      	ldr	r2, [r4, #16]
 8006124:	4282      	cmp	r2, r0
 8006126:	d1ba      	bne.n	800609e <__swsetup_r+0x3e>
 8006128:	060a      	lsls	r2, r1, #24
 800612a:	d5b8      	bpl.n	800609e <__swsetup_r+0x3e>
 800612c:	2240      	movs	r2, #64	; 0x40
 800612e:	4313      	orrs	r3, r2
 8006130:	81a3      	strh	r3, [r4, #12]
 8006132:	3801      	subs	r0, #1
 8006134:	e7b3      	b.n	800609e <__swsetup_r+0x3e>
 8006136:	0788      	lsls	r0, r1, #30
 8006138:	d400      	bmi.n	800613c <__swsetup_r+0xdc>
 800613a:	6962      	ldr	r2, [r4, #20]
 800613c:	60a2      	str	r2, [r4, #8]
 800613e:	e7ef      	b.n	8006120 <__swsetup_r+0xc0>
 8006140:	20000014 	.word	0x20000014
 8006144:	080069ec 	.word	0x080069ec
 8006148:	08006a0c 	.word	0x08006a0c
 800614c:	080069cc 	.word	0x080069cc

08006150 <abort>:
 8006150:	2006      	movs	r0, #6
 8006152:	b510      	push	{r4, lr}
 8006154:	f000 fa88 	bl	8006668 <raise>
 8006158:	2001      	movs	r0, #1
 800615a:	f7fa fb11 	bl	8000780 <_exit>
	...

08006160 <__sflush_r>:
 8006160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006162:	898b      	ldrh	r3, [r1, #12]
 8006164:	0005      	movs	r5, r0
 8006166:	000c      	movs	r4, r1
 8006168:	071a      	lsls	r2, r3, #28
 800616a:	d45f      	bmi.n	800622c <__sflush_r+0xcc>
 800616c:	684a      	ldr	r2, [r1, #4]
 800616e:	2a00      	cmp	r2, #0
 8006170:	dc04      	bgt.n	800617c <__sflush_r+0x1c>
 8006172:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006174:	2a00      	cmp	r2, #0
 8006176:	dc01      	bgt.n	800617c <__sflush_r+0x1c>
 8006178:	2000      	movs	r0, #0
 800617a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800617c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800617e:	2f00      	cmp	r7, #0
 8006180:	d0fa      	beq.n	8006178 <__sflush_r+0x18>
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	682e      	ldr	r6, [r5, #0]
 8006188:	602a      	str	r2, [r5, #0]
 800618a:	001a      	movs	r2, r3
 800618c:	0149      	lsls	r1, r1, #5
 800618e:	400a      	ands	r2, r1
 8006190:	420b      	tst	r3, r1
 8006192:	d034      	beq.n	80061fe <__sflush_r+0x9e>
 8006194:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	075b      	lsls	r3, r3, #29
 800619a:	d506      	bpl.n	80061aa <__sflush_r+0x4a>
 800619c:	6863      	ldr	r3, [r4, #4]
 800619e:	1ac0      	subs	r0, r0, r3
 80061a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <__sflush_r+0x4a>
 80061a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a8:	1ac0      	subs	r0, r0, r3
 80061aa:	0002      	movs	r2, r0
 80061ac:	6a21      	ldr	r1, [r4, #32]
 80061ae:	2300      	movs	r3, #0
 80061b0:	0028      	movs	r0, r5
 80061b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80061b4:	47b8      	blx	r7
 80061b6:	89a1      	ldrh	r1, [r4, #12]
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d106      	bne.n	80061ca <__sflush_r+0x6a>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	2b1d      	cmp	r3, #29
 80061c0:	d831      	bhi.n	8006226 <__sflush_r+0xc6>
 80061c2:	4a2c      	ldr	r2, [pc, #176]	; (8006274 <__sflush_r+0x114>)
 80061c4:	40da      	lsrs	r2, r3
 80061c6:	07d3      	lsls	r3, r2, #31
 80061c8:	d52d      	bpl.n	8006226 <__sflush_r+0xc6>
 80061ca:	2300      	movs	r3, #0
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	04cb      	lsls	r3, r1, #19
 80061d4:	d505      	bpl.n	80061e2 <__sflush_r+0x82>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	d102      	bne.n	80061e0 <__sflush_r+0x80>
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d100      	bne.n	80061e2 <__sflush_r+0x82>
 80061e0:	6560      	str	r0, [r4, #84]	; 0x54
 80061e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061e4:	602e      	str	r6, [r5, #0]
 80061e6:	2900      	cmp	r1, #0
 80061e8:	d0c6      	beq.n	8006178 <__sflush_r+0x18>
 80061ea:	0023      	movs	r3, r4
 80061ec:	3344      	adds	r3, #68	; 0x44
 80061ee:	4299      	cmp	r1, r3
 80061f0:	d002      	beq.n	80061f8 <__sflush_r+0x98>
 80061f2:	0028      	movs	r0, r5
 80061f4:	f7ff fb06 	bl	8005804 <_free_r>
 80061f8:	2000      	movs	r0, #0
 80061fa:	6360      	str	r0, [r4, #52]	; 0x34
 80061fc:	e7bd      	b.n	800617a <__sflush_r+0x1a>
 80061fe:	2301      	movs	r3, #1
 8006200:	0028      	movs	r0, r5
 8006202:	6a21      	ldr	r1, [r4, #32]
 8006204:	47b8      	blx	r7
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	d1c5      	bne.n	8006196 <__sflush_r+0x36>
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0c2      	beq.n	8006196 <__sflush_r+0x36>
 8006210:	2b1d      	cmp	r3, #29
 8006212:	d001      	beq.n	8006218 <__sflush_r+0xb8>
 8006214:	2b16      	cmp	r3, #22
 8006216:	d101      	bne.n	800621c <__sflush_r+0xbc>
 8006218:	602e      	str	r6, [r5, #0]
 800621a:	e7ad      	b.n	8006178 <__sflush_r+0x18>
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	89a2      	ldrh	r2, [r4, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	e7a9      	b.n	800617a <__sflush_r+0x1a>
 8006226:	2340      	movs	r3, #64	; 0x40
 8006228:	430b      	orrs	r3, r1
 800622a:	e7fa      	b.n	8006222 <__sflush_r+0xc2>
 800622c:	690f      	ldr	r7, [r1, #16]
 800622e:	2f00      	cmp	r7, #0
 8006230:	d0a2      	beq.n	8006178 <__sflush_r+0x18>
 8006232:	680a      	ldr	r2, [r1, #0]
 8006234:	600f      	str	r7, [r1, #0]
 8006236:	1bd2      	subs	r2, r2, r7
 8006238:	9201      	str	r2, [sp, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	079b      	lsls	r3, r3, #30
 800623e:	d100      	bne.n	8006242 <__sflush_r+0xe2>
 8006240:	694a      	ldr	r2, [r1, #20]
 8006242:	60a2      	str	r2, [r4, #8]
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dc00      	bgt.n	800624c <__sflush_r+0xec>
 800624a:	e795      	b.n	8006178 <__sflush_r+0x18>
 800624c:	003a      	movs	r2, r7
 800624e:	0028      	movs	r0, r5
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	6a21      	ldr	r1, [r4, #32]
 8006254:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006256:	47b0      	blx	r6
 8006258:	2800      	cmp	r0, #0
 800625a:	dc06      	bgt.n	800626a <__sflush_r+0x10a>
 800625c:	2340      	movs	r3, #64	; 0x40
 800625e:	2001      	movs	r0, #1
 8006260:	89a2      	ldrh	r2, [r4, #12]
 8006262:	4240      	negs	r0, r0
 8006264:	4313      	orrs	r3, r2
 8006266:	81a3      	strh	r3, [r4, #12]
 8006268:	e787      	b.n	800617a <__sflush_r+0x1a>
 800626a:	9b01      	ldr	r3, [sp, #4]
 800626c:	183f      	adds	r7, r7, r0
 800626e:	1a1b      	subs	r3, r3, r0
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	e7e7      	b.n	8006244 <__sflush_r+0xe4>
 8006274:	20400001 	.word	0x20400001

08006278 <_fflush_r>:
 8006278:	690b      	ldr	r3, [r1, #16]
 800627a:	b570      	push	{r4, r5, r6, lr}
 800627c:	0005      	movs	r5, r0
 800627e:	000c      	movs	r4, r1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <_fflush_r+0x12>
 8006284:	2500      	movs	r5, #0
 8006286:	0028      	movs	r0, r5
 8006288:	bd70      	pop	{r4, r5, r6, pc}
 800628a:	2800      	cmp	r0, #0
 800628c:	d004      	beq.n	8006298 <_fflush_r+0x20>
 800628e:	6983      	ldr	r3, [r0, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <_fflush_r+0x20>
 8006294:	f000 f892 	bl	80063bc <__sinit>
 8006298:	4b14      	ldr	r3, [pc, #80]	; (80062ec <_fflush_r+0x74>)
 800629a:	429c      	cmp	r4, r3
 800629c:	d11b      	bne.n	80062d6 <_fflush_r+0x5e>
 800629e:	686c      	ldr	r4, [r5, #4]
 80062a0:	220c      	movs	r2, #12
 80062a2:	5ea3      	ldrsh	r3, [r4, r2]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0ed      	beq.n	8006284 <_fflush_r+0xc>
 80062a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062aa:	07d2      	lsls	r2, r2, #31
 80062ac:	d404      	bmi.n	80062b8 <_fflush_r+0x40>
 80062ae:	059b      	lsls	r3, r3, #22
 80062b0:	d402      	bmi.n	80062b8 <_fflush_r+0x40>
 80062b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b4:	f000 f923 	bl	80064fe <__retarget_lock_acquire_recursive>
 80062b8:	0028      	movs	r0, r5
 80062ba:	0021      	movs	r1, r4
 80062bc:	f7ff ff50 	bl	8006160 <__sflush_r>
 80062c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062c2:	0005      	movs	r5, r0
 80062c4:	07db      	lsls	r3, r3, #31
 80062c6:	d4de      	bmi.n	8006286 <_fflush_r+0xe>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	059b      	lsls	r3, r3, #22
 80062cc:	d4db      	bmi.n	8006286 <_fflush_r+0xe>
 80062ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d0:	f000 f916 	bl	8006500 <__retarget_lock_release_recursive>
 80062d4:	e7d7      	b.n	8006286 <_fflush_r+0xe>
 80062d6:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <_fflush_r+0x78>)
 80062d8:	429c      	cmp	r4, r3
 80062da:	d101      	bne.n	80062e0 <_fflush_r+0x68>
 80062dc:	68ac      	ldr	r4, [r5, #8]
 80062de:	e7df      	b.n	80062a0 <_fflush_r+0x28>
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <_fflush_r+0x7c>)
 80062e2:	429c      	cmp	r4, r3
 80062e4:	d1dc      	bne.n	80062a0 <_fflush_r+0x28>
 80062e6:	68ec      	ldr	r4, [r5, #12]
 80062e8:	e7da      	b.n	80062a0 <_fflush_r+0x28>
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	080069ec 	.word	0x080069ec
 80062f0:	08006a0c 	.word	0x08006a0c
 80062f4:	080069cc 	.word	0x080069cc

080062f8 <std>:
 80062f8:	2300      	movs	r3, #0
 80062fa:	b510      	push	{r4, lr}
 80062fc:	0004      	movs	r4, r0
 80062fe:	6003      	str	r3, [r0, #0]
 8006300:	6043      	str	r3, [r0, #4]
 8006302:	6083      	str	r3, [r0, #8]
 8006304:	8181      	strh	r1, [r0, #12]
 8006306:	6643      	str	r3, [r0, #100]	; 0x64
 8006308:	0019      	movs	r1, r3
 800630a:	81c2      	strh	r2, [r0, #14]
 800630c:	6103      	str	r3, [r0, #16]
 800630e:	6143      	str	r3, [r0, #20]
 8006310:	6183      	str	r3, [r0, #24]
 8006312:	2208      	movs	r2, #8
 8006314:	305c      	adds	r0, #92	; 0x5c
 8006316:	f7ff f9c7 	bl	80056a8 <memset>
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <std+0x38>)
 800631c:	6224      	str	r4, [r4, #32]
 800631e:	6263      	str	r3, [r4, #36]	; 0x24
 8006320:	4b04      	ldr	r3, [pc, #16]	; (8006334 <std+0x3c>)
 8006322:	62a3      	str	r3, [r4, #40]	; 0x28
 8006324:	4b04      	ldr	r3, [pc, #16]	; (8006338 <std+0x40>)
 8006326:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006328:	4b04      	ldr	r3, [pc, #16]	; (800633c <std+0x44>)
 800632a:	6323      	str	r3, [r4, #48]	; 0x30
 800632c:	bd10      	pop	{r4, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	080066a9 	.word	0x080066a9
 8006334:	080066d1 	.word	0x080066d1
 8006338:	08006709 	.word	0x08006709
 800633c:	08006735 	.word	0x08006735

08006340 <_cleanup_r>:
 8006340:	b510      	push	{r4, lr}
 8006342:	4902      	ldr	r1, [pc, #8]	; (800634c <_cleanup_r+0xc>)
 8006344:	f000 f8ba 	bl	80064bc <_fwalk_reent>
 8006348:	bd10      	pop	{r4, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	08006279 	.word	0x08006279

08006350 <__sfmoreglue>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	2568      	movs	r5, #104	; 0x68
 8006354:	1e4a      	subs	r2, r1, #1
 8006356:	4355      	muls	r5, r2
 8006358:	000e      	movs	r6, r1
 800635a:	0029      	movs	r1, r5
 800635c:	3174      	adds	r1, #116	; 0x74
 800635e:	f7ff fabd 	bl	80058dc <_malloc_r>
 8006362:	1e04      	subs	r4, r0, #0
 8006364:	d008      	beq.n	8006378 <__sfmoreglue+0x28>
 8006366:	2100      	movs	r1, #0
 8006368:	002a      	movs	r2, r5
 800636a:	6001      	str	r1, [r0, #0]
 800636c:	6046      	str	r6, [r0, #4]
 800636e:	300c      	adds	r0, #12
 8006370:	60a0      	str	r0, [r4, #8]
 8006372:	3268      	adds	r2, #104	; 0x68
 8006374:	f7ff f998 	bl	80056a8 <memset>
 8006378:	0020      	movs	r0, r4
 800637a:	bd70      	pop	{r4, r5, r6, pc}

0800637c <__sfp_lock_acquire>:
 800637c:	b510      	push	{r4, lr}
 800637e:	4802      	ldr	r0, [pc, #8]	; (8006388 <__sfp_lock_acquire+0xc>)
 8006380:	f000 f8bd 	bl	80064fe <__retarget_lock_acquire_recursive>
 8006384:	bd10      	pop	{r4, pc}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	20000245 	.word	0x20000245

0800638c <__sfp_lock_release>:
 800638c:	b510      	push	{r4, lr}
 800638e:	4802      	ldr	r0, [pc, #8]	; (8006398 <__sfp_lock_release+0xc>)
 8006390:	f000 f8b6 	bl	8006500 <__retarget_lock_release_recursive>
 8006394:	bd10      	pop	{r4, pc}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	20000245 	.word	0x20000245

0800639c <__sinit_lock_acquire>:
 800639c:	b510      	push	{r4, lr}
 800639e:	4802      	ldr	r0, [pc, #8]	; (80063a8 <__sinit_lock_acquire+0xc>)
 80063a0:	f000 f8ad 	bl	80064fe <__retarget_lock_acquire_recursive>
 80063a4:	bd10      	pop	{r4, pc}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	20000246 	.word	0x20000246

080063ac <__sinit_lock_release>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4802      	ldr	r0, [pc, #8]	; (80063b8 <__sinit_lock_release+0xc>)
 80063b0:	f000 f8a6 	bl	8006500 <__retarget_lock_release_recursive>
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	20000246 	.word	0x20000246

080063bc <__sinit>:
 80063bc:	b513      	push	{r0, r1, r4, lr}
 80063be:	0004      	movs	r4, r0
 80063c0:	f7ff ffec 	bl	800639c <__sinit_lock_acquire>
 80063c4:	69a3      	ldr	r3, [r4, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <__sinit+0x14>
 80063ca:	f7ff ffef 	bl	80063ac <__sinit_lock_release>
 80063ce:	bd13      	pop	{r0, r1, r4, pc}
 80063d0:	64a3      	str	r3, [r4, #72]	; 0x48
 80063d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80063d4:	6523      	str	r3, [r4, #80]	; 0x50
 80063d6:	4b13      	ldr	r3, [pc, #76]	; (8006424 <__sinit+0x68>)
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <__sinit+0x6c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	d101      	bne.n	80063e8 <__sinit+0x2c>
 80063e4:	2301      	movs	r3, #1
 80063e6:	61a3      	str	r3, [r4, #24]
 80063e8:	0020      	movs	r0, r4
 80063ea:	f000 f81f 	bl	800642c <__sfp>
 80063ee:	6060      	str	r0, [r4, #4]
 80063f0:	0020      	movs	r0, r4
 80063f2:	f000 f81b 	bl	800642c <__sfp>
 80063f6:	60a0      	str	r0, [r4, #8]
 80063f8:	0020      	movs	r0, r4
 80063fa:	f000 f817 	bl	800642c <__sfp>
 80063fe:	2200      	movs	r2, #0
 8006400:	2104      	movs	r1, #4
 8006402:	60e0      	str	r0, [r4, #12]
 8006404:	6860      	ldr	r0, [r4, #4]
 8006406:	f7ff ff77 	bl	80062f8 <std>
 800640a:	2201      	movs	r2, #1
 800640c:	2109      	movs	r1, #9
 800640e:	68a0      	ldr	r0, [r4, #8]
 8006410:	f7ff ff72 	bl	80062f8 <std>
 8006414:	2202      	movs	r2, #2
 8006416:	2112      	movs	r1, #18
 8006418:	68e0      	ldr	r0, [r4, #12]
 800641a:	f7ff ff6d 	bl	80062f8 <std>
 800641e:	2301      	movs	r3, #1
 8006420:	61a3      	str	r3, [r4, #24]
 8006422:	e7d2      	b.n	80063ca <__sinit+0xe>
 8006424:	080068e4 	.word	0x080068e4
 8006428:	08006341 	.word	0x08006341

0800642c <__sfp>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	0007      	movs	r7, r0
 8006430:	f7ff ffa4 	bl	800637c <__sfp_lock_acquire>
 8006434:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <__sfp+0x88>)
 8006436:	681e      	ldr	r6, [r3, #0]
 8006438:	69b3      	ldr	r3, [r6, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <__sfp+0x18>
 800643e:	0030      	movs	r0, r6
 8006440:	f7ff ffbc 	bl	80063bc <__sinit>
 8006444:	3648      	adds	r6, #72	; 0x48
 8006446:	68b4      	ldr	r4, [r6, #8]
 8006448:	6873      	ldr	r3, [r6, #4]
 800644a:	3b01      	subs	r3, #1
 800644c:	d504      	bpl.n	8006458 <__sfp+0x2c>
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d022      	beq.n	800649a <__sfp+0x6e>
 8006454:	6836      	ldr	r6, [r6, #0]
 8006456:	e7f6      	b.n	8006446 <__sfp+0x1a>
 8006458:	220c      	movs	r2, #12
 800645a:	5ea5      	ldrsh	r5, [r4, r2]
 800645c:	2d00      	cmp	r5, #0
 800645e:	d11a      	bne.n	8006496 <__sfp+0x6a>
 8006460:	0020      	movs	r0, r4
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <__sfp+0x8c>)
 8006464:	3058      	adds	r0, #88	; 0x58
 8006466:	60e3      	str	r3, [r4, #12]
 8006468:	6665      	str	r5, [r4, #100]	; 0x64
 800646a:	f000 f847 	bl	80064fc <__retarget_lock_init_recursive>
 800646e:	f7ff ff8d 	bl	800638c <__sfp_lock_release>
 8006472:	0020      	movs	r0, r4
 8006474:	2208      	movs	r2, #8
 8006476:	0029      	movs	r1, r5
 8006478:	6025      	str	r5, [r4, #0]
 800647a:	60a5      	str	r5, [r4, #8]
 800647c:	6065      	str	r5, [r4, #4]
 800647e:	6125      	str	r5, [r4, #16]
 8006480:	6165      	str	r5, [r4, #20]
 8006482:	61a5      	str	r5, [r4, #24]
 8006484:	305c      	adds	r0, #92	; 0x5c
 8006486:	f7ff f90f 	bl	80056a8 <memset>
 800648a:	6365      	str	r5, [r4, #52]	; 0x34
 800648c:	63a5      	str	r5, [r4, #56]	; 0x38
 800648e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006490:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006492:	0020      	movs	r0, r4
 8006494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006496:	3468      	adds	r4, #104	; 0x68
 8006498:	e7d7      	b.n	800644a <__sfp+0x1e>
 800649a:	2104      	movs	r1, #4
 800649c:	0038      	movs	r0, r7
 800649e:	f7ff ff57 	bl	8006350 <__sfmoreglue>
 80064a2:	1e04      	subs	r4, r0, #0
 80064a4:	6030      	str	r0, [r6, #0]
 80064a6:	d1d5      	bne.n	8006454 <__sfp+0x28>
 80064a8:	f7ff ff70 	bl	800638c <__sfp_lock_release>
 80064ac:	230c      	movs	r3, #12
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	e7ef      	b.n	8006492 <__sfp+0x66>
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	080068e4 	.word	0x080068e4
 80064b8:	ffff0001 	.word	0xffff0001

080064bc <_fwalk_reent>:
 80064bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064be:	0004      	movs	r4, r0
 80064c0:	0006      	movs	r6, r0
 80064c2:	2700      	movs	r7, #0
 80064c4:	9101      	str	r1, [sp, #4]
 80064c6:	3448      	adds	r4, #72	; 0x48
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	68a5      	ldr	r5, [r4, #8]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	d504      	bpl.n	80064e0 <_fwalk_reent+0x24>
 80064d6:	6824      	ldr	r4, [r4, #0]
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d1f5      	bne.n	80064c8 <_fwalk_reent+0xc>
 80064dc:	0038      	movs	r0, r7
 80064de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064e0:	89ab      	ldrh	r3, [r5, #12]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d908      	bls.n	80064f8 <_fwalk_reent+0x3c>
 80064e6:	220e      	movs	r2, #14
 80064e8:	5eab      	ldrsh	r3, [r5, r2]
 80064ea:	3301      	adds	r3, #1
 80064ec:	d004      	beq.n	80064f8 <_fwalk_reent+0x3c>
 80064ee:	0029      	movs	r1, r5
 80064f0:	0030      	movs	r0, r6
 80064f2:	9b01      	ldr	r3, [sp, #4]
 80064f4:	4798      	blx	r3
 80064f6:	4307      	orrs	r7, r0
 80064f8:	3568      	adds	r5, #104	; 0x68
 80064fa:	e7e8      	b.n	80064ce <_fwalk_reent+0x12>

080064fc <__retarget_lock_init_recursive>:
 80064fc:	4770      	bx	lr

080064fe <__retarget_lock_acquire_recursive>:
 80064fe:	4770      	bx	lr

08006500 <__retarget_lock_release_recursive>:
 8006500:	4770      	bx	lr
	...

08006504 <__swhatbuf_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	000e      	movs	r6, r1
 8006508:	001d      	movs	r5, r3
 800650a:	230e      	movs	r3, #14
 800650c:	5ec9      	ldrsh	r1, [r1, r3]
 800650e:	0014      	movs	r4, r2
 8006510:	b096      	sub	sp, #88	; 0x58
 8006512:	2900      	cmp	r1, #0
 8006514:	da08      	bge.n	8006528 <__swhatbuf_r+0x24>
 8006516:	220c      	movs	r2, #12
 8006518:	5eb3      	ldrsh	r3, [r6, r2]
 800651a:	2200      	movs	r2, #0
 800651c:	602a      	str	r2, [r5, #0]
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	d411      	bmi.n	8006546 <__swhatbuf_r+0x42>
 8006522:	2380      	movs	r3, #128	; 0x80
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	e00f      	b.n	8006548 <__swhatbuf_r+0x44>
 8006528:	466a      	mov	r2, sp
 800652a:	f000 f92f 	bl	800678c <_fstat_r>
 800652e:	2800      	cmp	r0, #0
 8006530:	dbf1      	blt.n	8006516 <__swhatbuf_r+0x12>
 8006532:	23f0      	movs	r3, #240	; 0xf0
 8006534:	9901      	ldr	r1, [sp, #4]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	4019      	ands	r1, r3
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <__swhatbuf_r+0x4c>)
 800653c:	18c9      	adds	r1, r1, r3
 800653e:	424b      	negs	r3, r1
 8006540:	4159      	adcs	r1, r3
 8006542:	6029      	str	r1, [r5, #0]
 8006544:	e7ed      	b.n	8006522 <__swhatbuf_r+0x1e>
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	2000      	movs	r0, #0
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	b016      	add	sp, #88	; 0x58
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	ffffe000 	.word	0xffffe000

08006554 <__smakebuf_r>:
 8006554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006556:	2602      	movs	r6, #2
 8006558:	898b      	ldrh	r3, [r1, #12]
 800655a:	0005      	movs	r5, r0
 800655c:	000c      	movs	r4, r1
 800655e:	4233      	tst	r3, r6
 8006560:	d006      	beq.n	8006570 <__smakebuf_r+0x1c>
 8006562:	0023      	movs	r3, r4
 8006564:	3347      	adds	r3, #71	; 0x47
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	2301      	movs	r3, #1
 800656c:	6163      	str	r3, [r4, #20]
 800656e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006570:	466a      	mov	r2, sp
 8006572:	ab01      	add	r3, sp, #4
 8006574:	f7ff ffc6 	bl	8006504 <__swhatbuf_r>
 8006578:	9900      	ldr	r1, [sp, #0]
 800657a:	0007      	movs	r7, r0
 800657c:	0028      	movs	r0, r5
 800657e:	f7ff f9ad 	bl	80058dc <_malloc_r>
 8006582:	2800      	cmp	r0, #0
 8006584:	d108      	bne.n	8006598 <__smakebuf_r+0x44>
 8006586:	220c      	movs	r2, #12
 8006588:	5ea3      	ldrsh	r3, [r4, r2]
 800658a:	059a      	lsls	r2, r3, #22
 800658c:	d4ef      	bmi.n	800656e <__smakebuf_r+0x1a>
 800658e:	2203      	movs	r2, #3
 8006590:	4393      	bics	r3, r2
 8006592:	431e      	orrs	r6, r3
 8006594:	81a6      	strh	r6, [r4, #12]
 8006596:	e7e4      	b.n	8006562 <__smakebuf_r+0xe>
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <__smakebuf_r+0x84>)
 800659a:	62ab      	str	r3, [r5, #40]	; 0x28
 800659c:	2380      	movs	r3, #128	; 0x80
 800659e:	89a2      	ldrh	r2, [r4, #12]
 80065a0:	6020      	str	r0, [r4, #0]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	81a3      	strh	r3, [r4, #12]
 80065a6:	9b00      	ldr	r3, [sp, #0]
 80065a8:	6120      	str	r0, [r4, #16]
 80065aa:	6163      	str	r3, [r4, #20]
 80065ac:	9b01      	ldr	r3, [sp, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <__smakebuf_r+0x7a>
 80065b2:	0028      	movs	r0, r5
 80065b4:	230e      	movs	r3, #14
 80065b6:	5ee1      	ldrsh	r1, [r4, r3]
 80065b8:	f000 f8fa 	bl	80067b0 <_isatty_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d006      	beq.n	80065ce <__smakebuf_r+0x7a>
 80065c0:	2203      	movs	r2, #3
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	4393      	bics	r3, r2
 80065c6:	001a      	movs	r2, r3
 80065c8:	2301      	movs	r3, #1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	89a0      	ldrh	r0, [r4, #12]
 80065d0:	4307      	orrs	r7, r0
 80065d2:	81a7      	strh	r7, [r4, #12]
 80065d4:	e7cb      	b.n	800656e <__smakebuf_r+0x1a>
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	08006341 	.word	0x08006341

080065dc <memchr>:
 80065dc:	b2c9      	uxtb	r1, r1
 80065de:	1882      	adds	r2, r0, r2
 80065e0:	4290      	cmp	r0, r2
 80065e2:	d101      	bne.n	80065e8 <memchr+0xc>
 80065e4:	2000      	movs	r0, #0
 80065e6:	4770      	bx	lr
 80065e8:	7803      	ldrb	r3, [r0, #0]
 80065ea:	428b      	cmp	r3, r1
 80065ec:	d0fb      	beq.n	80065e6 <memchr+0xa>
 80065ee:	3001      	adds	r0, #1
 80065f0:	e7f6      	b.n	80065e0 <memchr+0x4>
	...

080065f4 <__malloc_lock>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4802      	ldr	r0, [pc, #8]	; (8006600 <__malloc_lock+0xc>)
 80065f8:	f7ff ff81 	bl	80064fe <__retarget_lock_acquire_recursive>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	20000244 	.word	0x20000244

08006604 <__malloc_unlock>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4802      	ldr	r0, [pc, #8]	; (8006610 <__malloc_unlock+0xc>)
 8006608:	f7ff ff7a 	bl	8006500 <__retarget_lock_release_recursive>
 800660c:	bd10      	pop	{r4, pc}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	20000244 	.word	0x20000244

08006614 <_raise_r>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	0004      	movs	r4, r0
 8006618:	000d      	movs	r5, r1
 800661a:	291f      	cmp	r1, #31
 800661c:	d904      	bls.n	8006628 <_raise_r+0x14>
 800661e:	2316      	movs	r3, #22
 8006620:	6003      	str	r3, [r0, #0]
 8006622:	2001      	movs	r0, #1
 8006624:	4240      	negs	r0, r0
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <_raise_r+0x24>
 800662e:	008a      	lsls	r2, r1, #2
 8006630:	189b      	adds	r3, r3, r2
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2a00      	cmp	r2, #0
 8006636:	d108      	bne.n	800664a <_raise_r+0x36>
 8006638:	0020      	movs	r0, r4
 800663a:	f000 f831 	bl	80066a0 <_getpid_r>
 800663e:	002a      	movs	r2, r5
 8006640:	0001      	movs	r1, r0
 8006642:	0020      	movs	r0, r4
 8006644:	f000 f81a 	bl	800667c <_kill_r>
 8006648:	e7ed      	b.n	8006626 <_raise_r+0x12>
 800664a:	2000      	movs	r0, #0
 800664c:	2a01      	cmp	r2, #1
 800664e:	d0ea      	beq.n	8006626 <_raise_r+0x12>
 8006650:	1c51      	adds	r1, r2, #1
 8006652:	d103      	bne.n	800665c <_raise_r+0x48>
 8006654:	2316      	movs	r3, #22
 8006656:	3001      	adds	r0, #1
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	e7e4      	b.n	8006626 <_raise_r+0x12>
 800665c:	2400      	movs	r4, #0
 800665e:	0028      	movs	r0, r5
 8006660:	601c      	str	r4, [r3, #0]
 8006662:	4790      	blx	r2
 8006664:	0020      	movs	r0, r4
 8006666:	e7de      	b.n	8006626 <_raise_r+0x12>

08006668 <raise>:
 8006668:	b510      	push	{r4, lr}
 800666a:	4b03      	ldr	r3, [pc, #12]	; (8006678 <raise+0x10>)
 800666c:	0001      	movs	r1, r0
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	f7ff ffd0 	bl	8006614 <_raise_r>
 8006674:	bd10      	pop	{r4, pc}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	20000014 	.word	0x20000014

0800667c <_kill_r>:
 800667c:	2300      	movs	r3, #0
 800667e:	b570      	push	{r4, r5, r6, lr}
 8006680:	4d06      	ldr	r5, [pc, #24]	; (800669c <_kill_r+0x20>)
 8006682:	0004      	movs	r4, r0
 8006684:	0008      	movs	r0, r1
 8006686:	0011      	movs	r1, r2
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	f7fa f869 	bl	8000760 <_kill>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d103      	bne.n	800669a <_kill_r+0x1e>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d000      	beq.n	800669a <_kill_r+0x1e>
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	20000248 	.word	0x20000248

080066a0 <_getpid_r>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	f7fa f857 	bl	8000754 <_getpid>
 80066a6:	bd10      	pop	{r4, pc}

080066a8 <__sread>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	000c      	movs	r4, r1
 80066ac:	250e      	movs	r5, #14
 80066ae:	5f49      	ldrsh	r1, [r1, r5]
 80066b0:	f000 f8a4 	bl	80067fc <_read_r>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	db03      	blt.n	80066c0 <__sread+0x18>
 80066b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80066ba:	181b      	adds	r3, r3, r0
 80066bc:	6563      	str	r3, [r4, #84]	; 0x54
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	4a02      	ldr	r2, [pc, #8]	; (80066cc <__sread+0x24>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	81a3      	strh	r3, [r4, #12]
 80066c8:	e7f9      	b.n	80066be <__sread+0x16>
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	ffffefff 	.word	0xffffefff

080066d0 <__swrite>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	001f      	movs	r7, r3
 80066d4:	898b      	ldrh	r3, [r1, #12]
 80066d6:	0005      	movs	r5, r0
 80066d8:	000c      	movs	r4, r1
 80066da:	0016      	movs	r6, r2
 80066dc:	05db      	lsls	r3, r3, #23
 80066de:	d505      	bpl.n	80066ec <__swrite+0x1c>
 80066e0:	230e      	movs	r3, #14
 80066e2:	5ec9      	ldrsh	r1, [r1, r3]
 80066e4:	2200      	movs	r2, #0
 80066e6:	2302      	movs	r3, #2
 80066e8:	f000 f874 	bl	80067d4 <_lseek_r>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	4a05      	ldr	r2, [pc, #20]	; (8006704 <__swrite+0x34>)
 80066f0:	0028      	movs	r0, r5
 80066f2:	4013      	ands	r3, r2
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	0032      	movs	r2, r6
 80066f8:	230e      	movs	r3, #14
 80066fa:	5ee1      	ldrsh	r1, [r4, r3]
 80066fc:	003b      	movs	r3, r7
 80066fe:	f000 f81f 	bl	8006740 <_write_r>
 8006702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006704:	ffffefff 	.word	0xffffefff

08006708 <__sseek>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	000c      	movs	r4, r1
 800670c:	250e      	movs	r5, #14
 800670e:	5f49      	ldrsh	r1, [r1, r5]
 8006710:	f000 f860 	bl	80067d4 <_lseek_r>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	1c42      	adds	r2, r0, #1
 8006718:	d103      	bne.n	8006722 <__sseek+0x1a>
 800671a:	4a05      	ldr	r2, [pc, #20]	; (8006730 <__sseek+0x28>)
 800671c:	4013      	ands	r3, r2
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	bd70      	pop	{r4, r5, r6, pc}
 8006722:	2280      	movs	r2, #128	; 0x80
 8006724:	0152      	lsls	r2, r2, #5
 8006726:	4313      	orrs	r3, r2
 8006728:	81a3      	strh	r3, [r4, #12]
 800672a:	6560      	str	r0, [r4, #84]	; 0x54
 800672c:	e7f8      	b.n	8006720 <__sseek+0x18>
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	ffffefff 	.word	0xffffefff

08006734 <__sclose>:
 8006734:	b510      	push	{r4, lr}
 8006736:	230e      	movs	r3, #14
 8006738:	5ec9      	ldrsh	r1, [r1, r3]
 800673a:	f000 f815 	bl	8006768 <_close_r>
 800673e:	bd10      	pop	{r4, pc}

08006740 <_write_r>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	0004      	movs	r4, r0
 8006744:	0008      	movs	r0, r1
 8006746:	0011      	movs	r1, r2
 8006748:	001a      	movs	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	4d05      	ldr	r5, [pc, #20]	; (8006764 <_write_r+0x24>)
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa f83f 	bl	80007d2 <_write>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d103      	bne.n	8006760 <_write_r+0x20>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d000      	beq.n	8006760 <_write_r+0x20>
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20000248 	.word	0x20000248

08006768 <_close_r>:
 8006768:	2300      	movs	r3, #0
 800676a:	b570      	push	{r4, r5, r6, lr}
 800676c:	4d06      	ldr	r5, [pc, #24]	; (8006788 <_close_r+0x20>)
 800676e:	0004      	movs	r4, r0
 8006770:	0008      	movs	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa f849 	bl	800080a <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d103      	bne.n	8006784 <_close_r+0x1c>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d000      	beq.n	8006784 <_close_r+0x1c>
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	bd70      	pop	{r4, r5, r6, pc}
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	20000248 	.word	0x20000248

0800678c <_fstat_r>:
 800678c:	2300      	movs	r3, #0
 800678e:	b570      	push	{r4, r5, r6, lr}
 8006790:	4d06      	ldr	r5, [pc, #24]	; (80067ac <_fstat_r+0x20>)
 8006792:	0004      	movs	r4, r0
 8006794:	0008      	movs	r0, r1
 8006796:	0011      	movs	r1, r2
 8006798:	602b      	str	r3, [r5, #0]
 800679a:	f7fa f840 	bl	800081e <_fstat>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d103      	bne.n	80067aa <_fstat_r+0x1e>
 80067a2:	682b      	ldr	r3, [r5, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d000      	beq.n	80067aa <_fstat_r+0x1e>
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	20000248 	.word	0x20000248

080067b0 <_isatty_r>:
 80067b0:	2300      	movs	r3, #0
 80067b2:	b570      	push	{r4, r5, r6, lr}
 80067b4:	4d06      	ldr	r5, [pc, #24]	; (80067d0 <_isatty_r+0x20>)
 80067b6:	0004      	movs	r4, r0
 80067b8:	0008      	movs	r0, r1
 80067ba:	602b      	str	r3, [r5, #0]
 80067bc:	f7fa f83d 	bl	800083a <_isatty>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d103      	bne.n	80067cc <_isatty_r+0x1c>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d000      	beq.n	80067cc <_isatty_r+0x1c>
 80067ca:	6023      	str	r3, [r4, #0]
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20000248 	.word	0x20000248

080067d4 <_lseek_r>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	0004      	movs	r4, r0
 80067d8:	0008      	movs	r0, r1
 80067da:	0011      	movs	r1, r2
 80067dc:	001a      	movs	r2, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	4d05      	ldr	r5, [pc, #20]	; (80067f8 <_lseek_r+0x24>)
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fa f832 	bl	800084c <_lseek>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d103      	bne.n	80067f4 <_lseek_r+0x20>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d000      	beq.n	80067f4 <_lseek_r+0x20>
 80067f2:	6023      	str	r3, [r4, #0]
 80067f4:	bd70      	pop	{r4, r5, r6, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	20000248 	.word	0x20000248

080067fc <_read_r>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	0004      	movs	r4, r0
 8006800:	0008      	movs	r0, r1
 8006802:	0011      	movs	r1, r2
 8006804:	001a      	movs	r2, r3
 8006806:	2300      	movs	r3, #0
 8006808:	4d05      	ldr	r5, [pc, #20]	; (8006820 <_read_r+0x24>)
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7f9 ffc4 	bl	8000798 <_read>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d103      	bne.n	800681c <_read_r+0x20>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d000      	beq.n	800681c <_read_r+0x20>
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	bd70      	pop	{r4, r5, r6, pc}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	20000248 	.word	0x20000248

08006824 <_init>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr

08006830 <_fini>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006836:	bc08      	pop	{r3}
 8006838:	469e      	mov	lr, r3
 800683a:	4770      	bx	lr
