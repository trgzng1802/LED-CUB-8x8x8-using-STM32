
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e94  08006e94  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006e94  08006e94  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e94  08006e94  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000078  08006f14  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08006f14  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111fe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003299  00000000  00000000  0003129e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00034538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  00035128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b36f  00000000  00000000  00035b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001393f  00000000  00000000  00050eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d60a  00000000  00000000  0006483e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000316c  00000000  00000000  000f1e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c94 	.word	0x08006c94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006c94 	.word	0x08006c94

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <HAL_UART_RxCpltCallback+0x34>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d10b      	bne.n	80002bc <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80002a4:	4908      	ldr	r1, [pc, #32]	; (80002c8 <HAL_UART_RxCpltCallback+0x38>)
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <HAL_UART_RxCpltCallback+0x34>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	0018      	movs	r0, r3
 80002ac:	f002 f890 	bl	80023d0 <HAL_UART_Receive_IT>
		currentEffect = rxData - 48;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <HAL_UART_RxCpltCallback+0x38>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	3b30      	subs	r3, #48	; 0x30
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_UART_RxCpltCallback+0x3c>)
 80002ba:	701a      	strb	r2, [r3, #0]
	}
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000f8 	.word	0x200000f8
 80002c8:	2000017c 	.word	0x2000017c
 80002cc:	20000010 	.word	0x20000010

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b5b0      	push	{r4, r5, r7, lr}
 80002d2:	b096      	sub	sp, #88	; 0x58
 80002d4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d6:	f000 fb51 	bl	800097c <HAL_Init>

  /* USER CODE BEGIN Init */

  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 80002da:	2390      	movs	r3, #144	; 0x90
 80002dc:	05d9      	lsls	r1, r3, #23
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <main+0x60>)
 80002e0:	2202      	movs	r2, #2
 80002e2:	0018      	movs	r0, r3
 80002e4:	f003 faed 	bl	80038c2 <Btn_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f82c 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f8f8 	bl	80004e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002f0:	f000 f888 	bl	8000404 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002f4:	f000 f8c4 	bl	8000480 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData, 1);
 80002f8:	490e      	ldr	r1, [pc, #56]	; (8000334 <main+0x64>)
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <main+0x68>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	0018      	movs	r0, r3
 8000300:	f002 f866 	bl	80023d0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Btn_Handle(&button1);
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <main+0x60>)
 8000306:	0018      	movs	r0, r3
 8000308:	f003 fa4d 	bl	80037a6 <Btn_Handle>
	  Led_cube_Handle(currentEffect, hspi1);
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <main+0x6c>)
 800030e:	781d      	ldrb	r5, [r3, #0]
 8000310:	4c0b      	ldr	r4, [pc, #44]	; (8000340 <main+0x70>)
 8000312:	466b      	mov	r3, sp
 8000314:	0018      	movs	r0, r3
 8000316:	0023      	movs	r3, r4
 8000318:	330c      	adds	r3, #12
 800031a:	2258      	movs	r2, #88	; 0x58
 800031c:	0019      	movs	r1, r3
 800031e:	f005 fbf1 	bl	8005b04 <memcpy>
 8000322:	6821      	ldr	r1, [r4, #0]
 8000324:	6862      	ldr	r2, [r4, #4]
 8000326:	68a3      	ldr	r3, [r4, #8]
 8000328:	0028      	movs	r0, r5
 800032a:	f004 ffb9 	bl	80052a0 <Led_cube_Handle>
	  Btn_Handle(&button1);
 800032e:	e7e9      	b.n	8000304 <main+0x34>
 8000330:	20000180 	.word	0x20000180
 8000334:	2000017c 	.word	0x2000017c
 8000338:	200000f8 	.word	0x200000f8
 800033c:	20000010 	.word	0x20000010
 8000340:	20000094 	.word	0x20000094

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b099      	sub	sp, #100	; 0x64
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	242c      	movs	r4, #44	; 0x2c
 800034c:	193b      	adds	r3, r7, r4
 800034e:	0018      	movs	r0, r3
 8000350:	2334      	movs	r3, #52	; 0x34
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f005 fbde 	bl	8005b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035a:	231c      	movs	r3, #28
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	2310      	movs	r3, #16
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f005 fbd6 	bl	8005b16 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	2318      	movs	r3, #24
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f005 fbcf 	bl	8005b16 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000378:	0021      	movs	r1, r4
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2201      	movs	r2, #1
 800037e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2201      	movs	r2, #1
 8000384:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2202      	movs	r2, #2
 800038a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	0252      	lsls	r2, r2, #9
 8000392:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	0352      	lsls	r2, r2, #13
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2200      	movs	r2, #0
 80003a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 fe4b 	bl	8001040 <HAL_RCC_OscConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f8ef 	bl	8000590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b2:	211c      	movs	r1, #28
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2207      	movs	r2, #7
 80003b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2202      	movs	r2, #2
 80003be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2101      	movs	r1, #1
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f9bb 	bl	800174c <HAL_RCC_ClockConfig>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003da:	f000 f8d9 	bl	8000590 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2201      	movs	r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fb27 	bl	8001a40 <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003f6:	f000 f8cb 	bl	8000590 <Error_Handler>
  }
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b019      	add	sp, #100	; 0x64
 8000400:	bd90      	pop	{r4, r7, pc}
	...

08000404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_SPI1_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_SPI1_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_SPI1_Init+0x74>)
 8000410:	2282      	movs	r2, #130	; 0x82
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_SPI1_Init+0x74>)
 800041e:	22e0      	movs	r2, #224	; 0xe0
 8000420:	00d2      	lsls	r2, r2, #3
 8000422:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_SPI1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_SPI1_Init+0x74>)
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_SPI1_Init+0x74>)
 800043a:	2220      	movs	r2, #32
 800043c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_SPI1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_SPI1_Init+0x74>)
 8000452:	2207      	movs	r2, #7
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_SPI1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_SPI1_Init+0x74>)
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fbd9 	bl	8001c1c <HAL_SPI_Init>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f88f 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000094 	.word	0x20000094
 800047c:	40013000 	.word	0x40013000

08000480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 8000486:	4a15      	ldr	r2, [pc, #84]	; (80004dc <MX_USART1_UART_Init+0x5c>)
 8000488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 800048c:	22e1      	movs	r2, #225	; 0xe1
 800048e:	0252      	lsls	r2, r2, #9
 8000490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 80004a6:	2204      	movs	r2, #4
 80004a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <MX_USART1_UART_Init+0x58>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 ff2f 	bl	8002328 <HAL_UART_Init>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004ce:	f000 f85f 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000f8 	.word	0x200000f8
 80004dc:	40013800 	.word	0x40013800

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b089      	sub	sp, #36	; 0x24
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	240c      	movs	r4, #12
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f005 fb10 	bl	8005b16 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_GPIO_Init+0xac>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <MX_GPIO_Init+0xac>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	03c9      	lsls	r1, r1, #15
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_GPIO_Init+0xac>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	03db      	lsls	r3, r3, #15
 800050c:	4013      	ands	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_GPIO_Init+0xac>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <MX_GPIO_Init+0xac>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	0289      	lsls	r1, r1, #10
 800051c:	430a      	orrs	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <MX_GPIO_Init+0xac>)
 8000522:	695a      	ldr	r2, [r3, #20]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	029b      	lsls	r3, r3, #10
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 800052e:	2390      	movs	r3, #144	; 0x90
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	2200      	movs	r2, #0
 8000534:	2140      	movs	r1, #64	; 0x40
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fd65 	bl	8001006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2202      	movs	r2, #2
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2201      	movs	r2, #1
 800054c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	193a      	adds	r2, r7, r4
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fbd0 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 800055c:	0021      	movs	r1, r4
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2240      	movs	r2, #64	; 0x40
 8000562:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2201      	movs	r2, #1
 8000568:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2203      	movs	r2, #3
 8000574:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 8000576:	187a      	adds	r2, r7, r1
 8000578:	2390      	movs	r3, #144	; 0x90
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fbbc 	bl	8000cfc <HAL_GPIO_Init>

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b009      	add	sp, #36	; 0x24
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x8>
	...

0800059c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x44>)
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_MspInit+0x44>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	430a      	orrs	r2, r1
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x44>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	2201      	movs	r2, #1
 80005b4:	4013      	ands	r3, r2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_MspInit+0x44>)
 80005bc:	69da      	ldr	r2, [r3, #28]
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_MspInit+0x44>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0549      	lsls	r1, r1, #21
 80005c4:	430a      	orrs	r2, r1
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_MspInit+0x44>)
 80005ca:	69da      	ldr	r2, [r3, #28]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	055b      	lsls	r3, r3, #21
 80005d0:	4013      	ands	r3, r2
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b08b      	sub	sp, #44	; 0x2c
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	2414      	movs	r4, #20
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	0018      	movs	r0, r3
 80005f2:	2314      	movs	r3, #20
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f005 fa8d 	bl	8005b16 <memset>
  if(hspi->Instance==SPI1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <HAL_SPI_MspInit+0x90>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d132      	bne.n	800066c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <HAL_SPI_MspInit+0x94>)
 8000608:	699a      	ldr	r2, [r3, #24]
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_SPI_MspInit+0x94>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0149      	lsls	r1, r1, #5
 8000610:	430a      	orrs	r2, r1
 8000612:	619a      	str	r2, [r3, #24]
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <HAL_SPI_MspInit+0x94>)
 8000616:	699a      	ldr	r2, [r3, #24]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	015b      	lsls	r3, r3, #5
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_SPI_MspInit+0x94>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_SPI_MspInit+0x94>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0289      	lsls	r1, r1, #10
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_SPI_MspInit+0x94>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	029b      	lsls	r3, r3, #10
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800063e:	0021      	movs	r1, r4
 8000640:	187b      	adds	r3, r7, r1
 8000642:	22a0      	movs	r2, #160	; 0xa0
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2203      	movs	r2, #3
 8000656:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	187a      	adds	r2, r7, r1
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fb48 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b00b      	add	sp, #44	; 0x2c
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	40013000 	.word	0x40013000
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b08b      	sub	sp, #44	; 0x2c
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	2414      	movs	r4, #20
 8000686:	193b      	adds	r3, r7, r4
 8000688:	0018      	movs	r0, r3
 800068a:	2314      	movs	r3, #20
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f005 fa41 	bl	8005b16 <memset>
  if(huart->Instance==USART1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <HAL_UART_MspInit+0xa4>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d13b      	bne.n	8000716 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_UART_MspInit+0xa8>)
 80006a0:	699a      	ldr	r2, [r3, #24]
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <HAL_UART_MspInit+0xa8>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	01c9      	lsls	r1, r1, #7
 80006a8:	430a      	orrs	r2, r1
 80006aa:	619a      	str	r2, [r3, #24]
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <HAL_UART_MspInit+0xa8>)
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	01db      	lsls	r3, r3, #7
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <HAL_UART_MspInit+0xa8>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_UART_MspInit+0xa8>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0289      	lsls	r1, r1, #10
 80006c4:	430a      	orrs	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <HAL_UART_MspInit+0xa8>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	029b      	lsls	r3, r3, #10
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	22c0      	movs	r2, #192	; 0xc0
 80006da:	00d2      	lsls	r2, r2, #3
 80006dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	0021      	movs	r1, r4
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2202      	movs	r2, #2
 80006e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2203      	movs	r2, #3
 80006f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2201      	movs	r2, #1
 80006f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	187a      	adds	r2, r7, r1
 80006fa:	2390      	movs	r3, #144	; 0x90
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fafb 	bl	8000cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	201b      	movs	r0, #27
 800070c:	f000 fa46 	bl	8000b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000710:	201b      	movs	r0, #27
 8000712:	f000 fa58 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b00b      	add	sp, #44	; 0x2c
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40013800 	.word	0x40013800
 8000724:	40021000 	.word	0x40021000

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f95e 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <USART1_IRQHandler+0x14>)
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fe98 	bl	8002494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000f8 	.word	0x200000f8

08000770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	return 1;
 8000774:	2301      	movs	r3, #1
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <_kill>:

int _kill(int pid, int sig)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000786:	f005 f993 	bl	8005ab0 <__errno>
 800078a:	0003      	movs	r3, r0
 800078c:	2216      	movs	r2, #22
 800078e:	601a      	str	r2, [r3, #0]
	return -1;
 8000790:	2301      	movs	r3, #1
 8000792:	425b      	negs	r3, r3
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	b002      	add	sp, #8
 800079a:	bd80      	pop	{r7, pc}

0800079c <_exit>:

void _exit (int status)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007a4:	2301      	movs	r3, #1
 80007a6:	425a      	negs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ffe5 	bl	800077c <_kill>
	while (1) {}		/* Make sure we hang here */
 80007b2:	e7fe      	b.n	80007b2 <_exit+0x16>

080007b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	e00a      	b.n	80007dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007c6:	e000      	b.n	80007ca <_read+0x16>
 80007c8:	bf00      	nop
 80007ca:	0001      	movs	r1, r0
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	60ba      	str	r2, [r7, #8]
 80007d2:	b2ca      	uxtb	r2, r1
 80007d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbf0      	blt.n	80007c6 <_read+0x12>
	}

return len;
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b006      	add	sp, #24
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	e009      	b.n	8000814 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	0018      	movs	r0, r3
 800080a:	e000      	b.n	800080e <_write+0x20>
 800080c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf1      	blt.n	8000800 <_write+0x12>
	}
	return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	0018      	movs	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	b006      	add	sp, #24
 8000824:	bd80      	pop	{r7, pc}

08000826 <_close>:

int _close(int file)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	return -1;
 800082e:	2301      	movs	r3, #1
 8000830:	425b      	negs	r3, r3
}
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}

0800083a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0192      	lsls	r2, r2, #6
 800084a:	605a      	str	r2, [r3, #4]
	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}

08000856 <_isatty>:

int _isatty(int file)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	return 1;
 800085e:	2301      	movs	r3, #1
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}

08000868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <_sbrk+0x5c>)
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <_sbrk+0x60>)
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x64>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <_sbrk+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d207      	bcs.n	80008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b0:	f005 f8fe 	bl	8005ab0 <__errno>
 80008b4:	0003      	movs	r3, r0
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	425b      	negs	r3, r3
 80008be:	e009      	b.n	80008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	18d2      	adds	r2, r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <_sbrk+0x64>)
 80008d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b006      	add	sp, #24
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20001800 	.word	0x20001800
 80008e0:	00000400 	.word	0x00000400
 80008e4:	20000198 	.word	0x20000198
 80008e8:	20000258 	.word	0x20000258

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <LoopForever+0x6>)
    LDR R1, [R0]
 80008fe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000900:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <LoopForever+0xa>)
    CMP R1, R2
 8000904:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000906:	d105      	bne.n	8000914 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800090a:	4913      	ldr	r1, [pc, #76]	; (8000958 <LoopForever+0x12>)
    STR R1, [R0]
 800090c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800090e:	4813      	ldr	r0, [pc, #76]	; (800095c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000910:	4913      	ldr	r1, [pc, #76]	; (8000960 <LoopForever+0x1a>)
    STR R1, [R0]
 8000912:	6001      	str	r1, [r0, #0]

08000914 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000916:	4914      	ldr	r1, [pc, #80]	; (8000968 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <LoopForever+0x26>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800092c:	4c11      	ldr	r4, [pc, #68]	; (8000974 <LoopForever+0x2e>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093a:	f7ff ffd7 	bl	80008ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800093e:	f005 f8bd 	bl	8005abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fcc5 	bl	80002d0 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800094c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000950:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000954:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000958:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800095c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000960:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800096c:	08006e9c 	.word	0x08006e9c
  ldr r2, =_sbss
 8000970:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000974:	20000254 	.word	0x20000254

08000978 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_IRQHandler>
	...

0800097c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <HAL_Init+0x24>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_Init+0x24>)
 8000986:	2110      	movs	r1, #16
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800098c:	2001      	movs	r0, #1
 800098e:	f000 f809 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000992:	f7ff fe03 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x5c>)
 80009ae:	681c      	ldr	r4, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x60>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	0019      	movs	r1, r3
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	0098      	lsls	r0, r3, #2
 80009ba:	f7ff fbaf 	bl	800011c <__udivsi3>
 80009be:	0003      	movs	r3, r0
 80009c0:	0019      	movs	r1, r3
 80009c2:	0020      	movs	r0, r4
 80009c4:	f7ff fbaa 	bl	800011c <__udivsi3>
 80009c8:	0003      	movs	r3, r0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 f90b 	bl	8000be6 <HAL_SYSTICK_Config>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e00f      	b.n	80009f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d80b      	bhi.n	80009f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 f8d8 	bl	8000b9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_InitTick+0x64>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b003      	add	sp, #12
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	18d2      	adds	r2, r2, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	2000019c 	.word	0x2000019c

08000a30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	2000019c 	.word	0x2000019c

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b7f      	cmp	r3, #127	; 0x7f
 8000a56:	d809      	bhi.n	8000a6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	231f      	movs	r3, #31
 8000a60:	401a      	ands	r2, r3
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_EnableIRQ+0x30>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	4091      	lsls	r1, r2
 8000a68:	000a      	movs	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
  }
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b002      	add	sp, #8
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a8c:	d828      	bhi.n	8000ae0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8e:	4a2f      	ldr	r2, [pc, #188]	; (8000b4c <__NVIC_SetPriority+0xd4>)
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	33c0      	adds	r3, #192	; 0xc0
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	589b      	ldr	r3, [r3, r2]
 8000a9e:	1dfa      	adds	r2, r7, #7
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	00d2      	lsls	r2, r2, #3
 8000aaa:	21ff      	movs	r1, #255	; 0xff
 8000aac:	4091      	lsls	r1, r2
 8000aae:	000a      	movs	r2, r1
 8000ab0:	43d2      	mvns	r2, r2
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	22ff      	movs	r2, #255	; 0xff
 8000abc:	401a      	ands	r2, r3
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	4003      	ands	r3, r0
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000acc:	481f      	ldr	r0, [pc, #124]	; (8000b4c <__NVIC_SetPriority+0xd4>)
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	33c0      	adds	r3, #192	; 0xc0
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ade:	e031      	b.n	8000b44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <__NVIC_SetPriority+0xd8>)
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	230f      	movs	r3, #15
 8000aea:	400b      	ands	r3, r1
 8000aec:	3b08      	subs	r3, #8
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	3306      	adds	r3, #6
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	3304      	adds	r3, #4
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1dfa      	adds	r2, r7, #7
 8000afc:	7812      	ldrb	r2, [r2, #0]
 8000afe:	0011      	movs	r1, r2
 8000b00:	2203      	movs	r2, #3
 8000b02:	400a      	ands	r2, r1
 8000b04:	00d2      	lsls	r2, r2, #3
 8000b06:	21ff      	movs	r1, #255	; 0xff
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	43d2      	mvns	r2, r2
 8000b0e:	401a      	ands	r2, r3
 8000b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	401a      	ands	r2, r3
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	2303      	movs	r3, #3
 8000b22:	4003      	ands	r3, r0
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b28:	4809      	ldr	r0, [pc, #36]	; (8000b50 <__NVIC_SetPriority+0xd8>)
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	001c      	movs	r4, r3
 8000b30:	230f      	movs	r3, #15
 8000b32:	4023      	ands	r3, r4
 8000b34:	3b08      	subs	r3, #8
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	3306      	adds	r3, #6
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	18c3      	adds	r3, r0, r3
 8000b40:	3304      	adds	r3, #4
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b003      	add	sp, #12
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	045b      	lsls	r3, r3, #17
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d301      	bcc.n	8000b6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e010      	b.n	8000b8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <SysTick_Config+0x44>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	3a01      	subs	r2, #1
 8000b72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b74:	2301      	movs	r3, #1
 8000b76:	425b      	negs	r3, r3
 8000b78:	2103      	movs	r1, #3
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff ff7c 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x44>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x44>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	1c02      	adds	r2, r0, #0
 8000bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff5d 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	0002      	movs	r2, r0
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff33 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ffaf 	bl	8000b54 <SysTick_Config>
 8000bf6:	0003      	movs	r3, r0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2221      	movs	r2, #33	; 0x21
 8000c0c:	5c9b      	ldrb	r3, [r3, r2]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d008      	beq.n	8000c26 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2204      	movs	r2, #4
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	2100      	movs	r1, #0
 8000c20:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e020      	b.n	8000c68 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	210e      	movs	r1, #14
 8000c32:	438a      	bics	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	438a      	bics	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4091      	lsls	r1, r2
 8000c52:	000a      	movs	r2, r1
 8000c54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2221      	movs	r2, #33	; 0x21
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2220      	movs	r2, #32
 8000c62:	2100      	movs	r1, #0
 8000c64:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c78:	210f      	movs	r1, #15
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2221      	movs	r2, #33	; 0x21
 8000c84:	5c9b      	ldrb	r3, [r3, r2]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d006      	beq.n	8000c9a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e028      	b.n	8000cec <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	210e      	movs	r1, #14
 8000ca6:	438a      	bics	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	438a      	bics	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	000a      	movs	r2, r1
 8000cc8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2221      	movs	r2, #33	; 0x21
 8000cce:	2101      	movs	r1, #1
 8000cd0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2220      	movs	r2, #32
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d004      	beq.n	8000cec <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	0010      	movs	r0, r2
 8000cea:	4798      	blx	r3
    } 
  }
  return status;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b004      	add	sp, #16
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0a:	e149      	b.n	8000fa0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <HAL_GPIO_Init+0x28>
 8000d22:	e13a      	b.n	8000f9a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d005      	beq.n	8000d3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d017      	beq.n	8000dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d123      	bne.n	8000e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	58d3      	ldr	r3, [r2, r3]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2207      	movs	r2, #7
 8000df8:	4013      	ands	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2107      	movs	r1, #7
 8000e12:	400b      	ands	r3, r1
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	6939      	ldr	r1, [r7, #16]
 8000e2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	029b      	lsls	r3, r3, #10
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d100      	bne.n	8000e70 <HAL_GPIO_Init+0x174>
 8000e6e:	e094      	b.n	8000f9a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4013      	ands	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e88:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <HAL_GPIO_Init+0x2c0>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	589b      	ldr	r3, [r3, r2]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	2390      	movs	r3, #144	; 0x90
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x1d6>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a41      	ldr	r2, [pc, #260]	; (8000fc0 <HAL_GPIO_Init+0x2c4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x1d2>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a40      	ldr	r2, [pc, #256]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x1ce>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x1d8>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x1d8>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x1d8>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	400a      	ands	r2, r1
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	; (8000fbc <HAL_GPIO_Init+0x2c0>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	029b      	lsls	r3, r3, #10
 8000f34:	4013      	ands	r3, r2
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	035b      	lsls	r3, r3, #13
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	039b      	lsls	r3, r3, #14
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	40da      	lsrs	r2, r3
 8000fa8:	1e13      	subs	r3, r2, #0
 8000faa:	d000      	beq.n	8000fae <HAL_GPIO_Init+0x2b2>
 8000fac:	e6ae      	b.n	8000d0c <HAL_GPIO_Init+0x10>
  } 
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	40010400 	.word	0x40010400

08000fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	000a      	movs	r2, r1
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	1cba      	adds	r2, r7, #2
 8000fe0:	8812      	ldrh	r2, [r2, #0]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d004      	beq.n	8000ff0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e003      	b.n	8000ff8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
  }
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	0008      	movs	r0, r1
 8001010:	0011      	movs	r1, r2
 8001012:	1cbb      	adds	r3, r7, #2
 8001014:	1c02      	adds	r2, r0, #0
 8001016:	801a      	strh	r2, [r3, #0]
 8001018:	1c7b      	adds	r3, r7, #1
 800101a:	1c0a      	adds	r2, r1, #0
 800101c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101e:	1c7b      	adds	r3, r7, #1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001026:	1cbb      	adds	r3, r7, #2
 8001028:	881a      	ldrh	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800102e:	e003      	b.n	8001038 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001030:	1cbb      	adds	r3, r7, #2
 8001032:	881a      	ldrh	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f000 fb76 	bl	8001740 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	4013      	ands	r3, r2
 800105c:	d100      	bne.n	8001060 <HAL_RCC_OscConfig+0x20>
 800105e:	e08e      	b.n	800117e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001060:	4bc5      	ldr	r3, [pc, #788]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	220c      	movs	r2, #12
 8001066:	4013      	ands	r3, r2
 8001068:	2b04      	cmp	r3, #4
 800106a:	d00e      	beq.n	800108a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800106c:	4bc2      	ldr	r3, [pc, #776]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	220c      	movs	r2, #12
 8001072:	4013      	ands	r3, r2
 8001074:	2b08      	cmp	r3, #8
 8001076:	d117      	bne.n	80010a8 <HAL_RCC_OscConfig+0x68>
 8001078:	4bbf      	ldr	r3, [pc, #764]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	23c0      	movs	r3, #192	; 0xc0
 800107e:	025b      	lsls	r3, r3, #9
 8001080:	401a      	ands	r2, r3
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	429a      	cmp	r2, r3
 8001088:	d10e      	bne.n	80010a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108a:	4bbb      	ldr	r3, [pc, #748]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x58>
 8001096:	e071      	b.n	800117c <HAL_RCC_OscConfig+0x13c>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d000      	beq.n	80010a2 <HAL_RCC_OscConfig+0x62>
 80010a0:	e06c      	b.n	800117c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 fb4c 	bl	8001740 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d107      	bne.n	80010c0 <HAL_RCC_OscConfig+0x80>
 80010b0:	4bb1      	ldr	r3, [pc, #708]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4bb0      	ldr	r3, [pc, #704]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0249      	lsls	r1, r1, #9
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e02f      	b.n	8001120 <HAL_RCC_OscConfig+0xe0>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0xa2>
 80010c8:	4bab      	ldr	r3, [pc, #684]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4baa      	ldr	r3, [pc, #680]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010ce:	49ab      	ldr	r1, [pc, #684]	; (800137c <HAL_RCC_OscConfig+0x33c>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	4ba8      	ldr	r3, [pc, #672]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4ba7      	ldr	r3, [pc, #668]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010da:	49a9      	ldr	r1, [pc, #676]	; (8001380 <HAL_RCC_OscConfig+0x340>)
 80010dc:	400a      	ands	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e01e      	b.n	8001120 <HAL_RCC_OscConfig+0xe0>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d10e      	bne.n	8001108 <HAL_RCC_OscConfig+0xc8>
 80010ea:	4ba3      	ldr	r3, [pc, #652]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4ba2      	ldr	r3, [pc, #648]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	02c9      	lsls	r1, r1, #11
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	4b9f      	ldr	r3, [pc, #636]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b9e      	ldr	r3, [pc, #632]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0249      	lsls	r1, r1, #9
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xe0>
 8001108:	4b9b      	ldr	r3, [pc, #620]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b9a      	ldr	r3, [pc, #616]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800110e:	499b      	ldr	r1, [pc, #620]	; (800137c <HAL_RCC_OscConfig+0x33c>)
 8001110:	400a      	ands	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	4b98      	ldr	r3, [pc, #608]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b97      	ldr	r3, [pc, #604]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800111a:	4999      	ldr	r1, [pc, #612]	; (8001380 <HAL_RCC_OscConfig+0x340>)
 800111c:	400a      	ands	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d014      	beq.n	8001152 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fc82 	bl	8000a30 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001132:	f7ff fc7d 	bl	8000a30 <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b64      	cmp	r3, #100	; 0x64
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e2fd      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001144:	4b8c      	ldr	r3, [pc, #560]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	029b      	lsls	r3, r3, #10
 800114c:	4013      	ands	r3, r2
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0xf2>
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fc6d 	bl	8000a30 <HAL_GetTick>
 8001156:	0003      	movs	r3, r0
 8001158:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fc68 	bl	8000a30 <HAL_GetTick>
 8001160:	0002      	movs	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e2e8      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	4b82      	ldr	r3, [pc, #520]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	029b      	lsls	r3, r3, #10
 8001176:	4013      	ands	r3, r2
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x11c>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2202      	movs	r2, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x14a>
 8001188:	e06c      	b.n	8001264 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800118a:	4b7b      	ldr	r3, [pc, #492]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	220c      	movs	r2, #12
 8001190:	4013      	ands	r3, r2
 8001192:	d00e      	beq.n	80011b2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001194:	4b78      	ldr	r3, [pc, #480]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	220c      	movs	r2, #12
 800119a:	4013      	ands	r3, r2
 800119c:	2b08      	cmp	r3, #8
 800119e:	d11f      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1a0>
 80011a0:	4b75      	ldr	r3, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	23c0      	movs	r3, #192	; 0xc0
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	401a      	ands	r2, r3
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d116      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	4b71      	ldr	r3, [pc, #452]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2202      	movs	r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x188>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e2bb      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b6b      	ldr	r3, [pc, #428]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	22f8      	movs	r2, #248	; 0xf8
 80011ce:	4393      	bics	r3, r2
 80011d0:	0019      	movs	r1, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00da      	lsls	r2, r3, #3
 80011d8:	4b67      	ldr	r3, [pc, #412]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	e041      	b.n	8001264 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d024      	beq.n	8001232 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e8:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b62      	ldr	r3, [pc, #392]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc1c 	bl	8000a30 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc17 	bl	8000a30 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e297      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	4b59      	ldr	r3, [pc, #356]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d0f1      	beq.n	80011fe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	22f8      	movs	r2, #248	; 0xf8
 8001220:	4393      	bics	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	00da      	lsls	r2, r3, #3
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e018      	b.n	8001264 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001232:	4b51      	ldr	r3, [pc, #324]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001238:	2101      	movs	r1, #1
 800123a:	438a      	bics	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fbf7 	bl	8000a30 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fbf2 	bl	8000a30 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e272      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	d1f1      	bne.n	8001248 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	4013      	ands	r3, r2
 800126c:	d036      	beq.n	80012dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d019      	beq.n	80012aa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	4b40      	ldr	r3, [pc, #256]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800127c:	2101      	movs	r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fbd5 	bl	8000a30 <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff fbd0 	bl	8000a30 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e250      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d0f1      	beq.n	800128c <HAL_RCC_OscConfig+0x24c>
 80012a8:	e018      	b.n	80012dc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80012ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	438a      	bics	r2, r1
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbbb 	bl	8000a30 <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fbb6 	bl	8000a30 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e236      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d1f1      	bne.n	80012c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2204      	movs	r2, #4
 80012e2:	4013      	ands	r3, r2
 80012e4:	d100      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2a8>
 80012e6:	e0b5      	b.n	8001454 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e8:	201f      	movs	r0, #31
 80012ea:	183b      	adds	r3, r7, r0
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	4013      	ands	r3, r2
 80012fa:	d110      	bne.n	800131e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80012fe:	69da      	ldr	r2, [r3, #28]
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	0549      	lsls	r1, r1, #21
 8001306:	430a      	orrs	r2, r1
 8001308:	61da      	str	r2, [r3, #28]
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	055b      	lsls	r3, r3, #21
 8001312:	4013      	ands	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001318:	183b      	adds	r3, r7, r0
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_OscConfig+0x344>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4013      	ands	r3, r2
 8001328:	d11a      	bne.n	8001360 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_RCC_OscConfig+0x344>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_RCC_OscConfig+0x344>)
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	0049      	lsls	r1, r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001338:	f7ff fb7a 	bl	8000a30 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001342:	f7ff fb75 	bl	8000a30 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1f5      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x344>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4013      	ands	r3, r2
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d10f      	bne.n	8001388 <HAL_RCC_OscConfig+0x348>
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	4b02      	ldr	r3, [pc, #8]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800136e:	2101      	movs	r1, #1
 8001370:	430a      	orrs	r2, r1
 8001372:	621a      	str	r2, [r3, #32]
 8001374:	e036      	b.n	80013e4 <HAL_RCC_OscConfig+0x3a4>
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	40021000 	.word	0x40021000
 800137c:	fffeffff 	.word	0xfffeffff
 8001380:	fffbffff 	.word	0xfffbffff
 8001384:	40007000 	.word	0x40007000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10c      	bne.n	80013aa <HAL_RCC_OscConfig+0x36a>
 8001390:	4bca      	ldr	r3, [pc, #808]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	4bc9      	ldr	r3, [pc, #804]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001396:	2101      	movs	r1, #1
 8001398:	438a      	bics	r2, r1
 800139a:	621a      	str	r2, [r3, #32]
 800139c:	4bc7      	ldr	r3, [pc, #796]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800139e:	6a1a      	ldr	r2, [r3, #32]
 80013a0:	4bc6      	ldr	r3, [pc, #792]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013a2:	2104      	movs	r1, #4
 80013a4:	438a      	bics	r2, r1
 80013a6:	621a      	str	r2, [r3, #32]
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x3a4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x38c>
 80013b2:	4bc2      	ldr	r3, [pc, #776]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013b4:	6a1a      	ldr	r2, [r3, #32]
 80013b6:	4bc1      	ldr	r3, [pc, #772]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013b8:	2104      	movs	r1, #4
 80013ba:	430a      	orrs	r2, r1
 80013bc:	621a      	str	r2, [r3, #32]
 80013be:	4bbf      	ldr	r3, [pc, #764]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	4bbe      	ldr	r3, [pc, #760]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	621a      	str	r2, [r3, #32]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0x3a4>
 80013cc:	4bbb      	ldr	r3, [pc, #748]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	4bba      	ldr	r3, [pc, #744]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	438a      	bics	r2, r1
 80013d6:	621a      	str	r2, [r3, #32]
 80013d8:	4bb8      	ldr	r3, [pc, #736]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	4bb7      	ldr	r3, [pc, #732]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80013de:	2104      	movs	r1, #4
 80013e0:	438a      	bics	r2, r1
 80013e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d014      	beq.n	8001416 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fb20 	bl	8000a30 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	e009      	b.n	800140a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fb1b 	bl	8000a30 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	4aaf      	ldr	r2, [pc, #700]	; (80016c0 <HAL_RCC_OscConfig+0x680>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e19a      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	4bac      	ldr	r3, [pc, #688]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x3b6>
 8001414:	e013      	b.n	800143e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fb0b 	bl	8000a30 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e009      	b.n	8001434 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fb06 	bl	8000a30 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	4aa5      	ldr	r2, [pc, #660]	; (80016c0 <HAL_RCC_OscConfig+0x680>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e185      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001434:	4ba1      	ldr	r3, [pc, #644]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800143e:	231f      	movs	r3, #31
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001448:	4b9c      	ldr	r3, [pc, #624]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	4b9b      	ldr	r3, [pc, #620]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800144e:	499d      	ldr	r1, [pc, #628]	; (80016c4 <HAL_RCC_OscConfig+0x684>)
 8001450:	400a      	ands	r2, r1
 8001452:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2210      	movs	r2, #16
 800145a:	4013      	ands	r3, r2
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d12a      	bne.n	80014bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001466:	4b95      	ldr	r3, [pc, #596]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146a:	4b94      	ldr	r3, [pc, #592]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800146c:	2104      	movs	r1, #4
 800146e:	430a      	orrs	r2, r1
 8001470:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001472:	4b92      	ldr	r3, [pc, #584]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001476:	4b91      	ldr	r3, [pc, #580]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001478:	2101      	movs	r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fad7 	bl	8000a30 <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001488:	f7ff fad2 	bl	8000a30 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e152      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800149a:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f1      	beq.n	8001488 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014a4:	4b85      	ldr	r3, [pc, #532]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a8:	22f8      	movs	r2, #248	; 0xf8
 80014aa:	4393      	bics	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	00da      	lsls	r2, r3, #3
 80014b4:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ba:	e034      	b.n	8001526 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	3305      	adds	r3, #5
 80014c2:	d111      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014c4:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014ca:	2104      	movs	r1, #4
 80014cc:	438a      	bics	r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014d0:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	22f8      	movs	r2, #248	; 0xf8
 80014d6:	4393      	bics	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	00da      	lsls	r2, r3, #3
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014e2:	430a      	orrs	r2, r1
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
 80014e6:	e01e      	b.n	8001526 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014e8:	4b74      	ldr	r3, [pc, #464]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ec:	4b73      	ldr	r3, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014ee:	2104      	movs	r1, #4
 80014f0:	430a      	orrs	r2, r1
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014f4:	4b71      	ldr	r3, [pc, #452]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f8:	4b70      	ldr	r3, [pc, #448]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fa96 	bl	8000a30 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800150a:	f7ff fa91 	bl	8000a30 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e111      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800151c:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001520:	2202      	movs	r2, #2
 8001522:	4013      	ands	r3, r2
 8001524:	d1f1      	bne.n	800150a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2220      	movs	r2, #32
 800152c:	4013      	ands	r3, r2
 800152e:	d05c      	beq.n	80015ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001530:	4b62      	ldr	r3, [pc, #392]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	220c      	movs	r2, #12
 8001536:	4013      	ands	r3, r2
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d00e      	beq.n	800155a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800153c:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	220c      	movs	r2, #12
 8001542:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001544:	2b08      	cmp	r3, #8
 8001546:	d114      	bne.n	8001572 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001548:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	23c0      	movs	r3, #192	; 0xc0
 800154e:	025b      	lsls	r3, r3, #9
 8001550:	401a      	ands	r2, r3
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	429a      	cmp	r2, r3
 8001558:	d10b      	bne.n	8001572 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800155a:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800155c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	4013      	ands	r3, r2
 8001564:	d040      	beq.n	80015e8 <HAL_RCC_OscConfig+0x5a8>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d03c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0e6      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800157a:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800157c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157e:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0249      	lsls	r1, r1, #9
 8001584:	430a      	orrs	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fa52 	bl	8000a30 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001592:	f7ff fa4d 	bl	8000a30 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0cd      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015a4:	4b45      	ldr	r3, [pc, #276]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80015a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	025b      	lsls	r3, r3, #9
 80015ac:	4013      	ands	r3, r2
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x552>
 80015b0:	e01b      	b.n	80015ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015b2:	4b42      	ldr	r3, [pc, #264]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80015b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b6:	4b41      	ldr	r3, [pc, #260]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80015b8:	4943      	ldr	r1, [pc, #268]	; (80016c8 <HAL_RCC_OscConfig+0x688>)
 80015ba:	400a      	ands	r2, r1
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fa37 	bl	8000a30 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c8:	f7ff fa32 	bl	8000a30 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0b2      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x588>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5b4>
 80015f2:	e0a4      	b.n	800173e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	220c      	movs	r2, #12
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x5c2>
 8001600:	e078      	b.n	80016f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2b02      	cmp	r3, #2
 8001608:	d14c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001610:	492e      	ldr	r1, [pc, #184]	; (80016cc <HAL_RCC_OscConfig+0x68c>)
 8001612:	400a      	ands	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fa0b 	bl	8000a30 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fa06 	bl	8000a30 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e086      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	049b      	lsls	r3, r3, #18
 800163a:	4013      	ands	r3, r2
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	220f      	movs	r2, #15
 8001644:	4393      	bics	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800164e:	430a      	orrs	r2, r1
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_RCC_OscConfig+0x690>)
 8001658:	4013      	ands	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	431a      	orrs	r2, r3
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001668:	430a      	orrs	r2, r1
 800166a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	0449      	lsls	r1, r1, #17
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff f9d9 	bl	8000a30 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff f9d4 	bl	8000a30 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e054      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x644>
 80016a2:	e04c      	b.n	800173e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_RCC_OscConfig+0x67c>)
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <HAL_RCC_OscConfig+0x68c>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff f9be 	bl	8000a30 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x6a6>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40021000 	.word	0x40021000
 80016c0:	00001388 	.word	0x00001388
 80016c4:	efffffff 	.word	0xefffffff
 80016c8:	fffeffff 	.word	0xfffeffff
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f9ac 	bl	8000a30 <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e02c      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_RCC_OscConfig+0x708>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	049b      	lsls	r3, r3, #18
 80016ee:	4013      	ands	r3, r2
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x694>
 80016f2:	e024      	b.n	800173e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e01f      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x708>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x708>)
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	025b      	lsls	r3, r3, #9
 8001712:	401a      	ands	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	429a      	cmp	r2, r3
 800171a:	d10e      	bne.n	800173a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	220f      	movs	r2, #15
 8001720:	401a      	ands	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d107      	bne.n	800173a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	23f0      	movs	r3, #240	; 0xf0
 800172e:	039b      	lsls	r3, r3, #14
 8001730:	401a      	ands	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b008      	add	sp, #32
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000

0800174c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0bf      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4013      	ands	r3, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d911      	bls.n	8001792 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2201      	movs	r2, #1
 8001774:	4393      	bics	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0a6      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2204      	movs	r2, #4
 80017a2:	4013      	ands	r3, r2
 80017a4:	d006      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017a6:	4b51      	ldr	r3, [pc, #324]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80017ac:	21e0      	movs	r1, #224	; 0xe0
 80017ae:	00c9      	lsls	r1, r1, #3
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	22f0      	movs	r2, #240	; 0xf0
 80017ba:	4393      	bics	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4013      	ands	r3, r2
 80017d0:	d04c      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d120      	bne.n	8001828 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07a      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	049b      	lsls	r3, r3, #18
 80017fa:	4013      	ands	r3, r2
 80017fc:	d114      	bne.n	8001828 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06e      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	4013      	ands	r3, r2
 8001814:	d108      	bne.n	8001828 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e062      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e05b      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4393      	bics	r3, r2
 8001830:	0019      	movs	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff f8f8 	bl	8000a30 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001844:	e009      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001846:	f7ff f8f3 	bl	8000a30 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_RCC_ClockConfig+0x1a4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e042      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	220c      	movs	r2, #12
 8001860:	401a      	ands	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1ec      	bne.n	8001846 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d211      	bcs.n	800189e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	4393      	bics	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x19c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e020      	b.n	80018e0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_RCC_ClockConfig+0x1a8>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018bc:	f000 f820 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018c0:	0001      	movs	r1, r0
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1a0>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	220f      	movs	r2, #15
 80018ca:	4013      	ands	r3, r2
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x1ac>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	000a      	movs	r2, r1
 80018d2:	40da      	lsrs	r2, r3
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1b0>)
 80018d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff f863 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	00001388 	.word	0x00001388
 80018f4:	fffff8ff 	.word	0xfffff8ff
 80018f8:	08006ccc 	.word	0x08006ccc
 80018fc:	20000000 	.word	0x20000000

08001900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08f      	sub	sp, #60	; 0x3c
 8001904:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001906:	2314      	movs	r3, #20
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	4a38      	ldr	r2, [pc, #224]	; (80019ec <HAL_RCC_GetSysClockFreq+0xec>)
 800190c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800190e:	c313      	stmia	r3!, {r0, r1, r4}
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4a36      	ldr	r2, [pc, #216]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001918:	ca13      	ldmia	r2!, {r0, r1, r4}
 800191a:	c313      	stmia	r3!, {r0, r1, r4}
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	220c      	movs	r2, #12
 800193e:	4013      	ands	r3, r2
 8001940:	2b0c      	cmp	r3, #12
 8001942:	d047      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001944:	d849      	bhi.n	80019da <HAL_RCC_GetSysClockFreq+0xda>
 8001946:	2b04      	cmp	r3, #4
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x50>
 800194a:	2b08      	cmp	r3, #8
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x56>
 800194e:	e044      	b.n	80019da <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001954:	e044      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	220f      	movs	r2, #15
 800195c:	4013      	ands	r3, r2
 800195e:	2214      	movs	r2, #20
 8001960:	18ba      	adds	r2, r7, r2
 8001962:	5cd3      	ldrb	r3, [r2, r3]
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	220f      	movs	r2, #15
 800196c:	4013      	ands	r3, r2
 800196e:	1d3a      	adds	r2, r7, #4
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	401a      	ands	r2, r3
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	429a      	cmp	r2, r3
 8001982:	d109      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001986:	481c      	ldr	r0, [pc, #112]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001988:	f7fe fbc8 	bl	800011c <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	4353      	muls	r3, r2
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
 8001996:	e01a      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199a:	23c0      	movs	r3, #192	; 0xc0
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	401a      	ands	r2, r3
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d109      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <HAL_RCC_GetSysClockFreq+0xfc>)
 80019ac:	f7fe fbb6 	bl	800011c <__udivsi3>
 80019b0:	0003      	movs	r3, r0
 80019b2:	001a      	movs	r2, r3
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	4353      	muls	r3, r2
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ba:	e008      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019be:	480e      	ldr	r0, [pc, #56]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c0:	f7fe fbac 	bl	800011c <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	4353      	muls	r3, r2
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d2:	e005      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_GetSysClockFreq+0xfc>)
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d8:	e002      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b00f      	add	sp, #60	; 0x3c
 80019e8:	bd90      	pop	{r4, r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	08006cac 	.word	0x08006cac
 80019f0:	08006cbc 	.word	0x08006cbc
 80019f4:	40021000 	.word	0x40021000
 80019f8:	007a1200 	.word	0x007a1200
 80019fc:	02dc6c00 	.word	0x02dc6c00

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a18:	f7ff fff2 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a1c:	0001      	movs	r1, r0
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	000b      	movs	r3, r1
}    
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08006cdc 	.word	0x08006cdc

08001a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a5c:	e08e      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2017      	movs	r0, #23
 8001a60:	183b      	adds	r3, r7, r0
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	055b      	lsls	r3, r3, #21
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d110      	bne.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	0549      	lsls	r1, r1, #21
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	61da      	str	r2, [r3, #28]
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	055b      	lsls	r3, r3, #21
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8e:	183b      	adds	r3, r7, r0
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d11a      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7fe ffbf 	bl	8000a30 <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	e008      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab8:	f7fe ffba 	bl	8000a30 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e097      	b.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	23c0      	movs	r3, #192	; 0xc0
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d034      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	23c0      	movs	r3, #192	; 0xc0
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d02c      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0249      	lsls	r1, r1, #9
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b16:	493e      	ldr	r1, [pc, #248]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ff81 	bl	8000a30 <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b32:	e009      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7fe ff7c 	bl	8000a30 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4a35      	ldr	r2, [pc, #212]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e058      	b.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b66:	2317      	movs	r3, #23
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b76:	4928      	ldr	r1, [pc, #160]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	2210      	movs	r2, #16
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	029b      	lsls	r3, r3, #10
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	4393      	bics	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	2240      	movs	r2, #64	; 0x40
 8001bea:	4393      	bics	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b006      	add	sp, #24
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	fffffcff 	.word	0xfffffcff
 8001c10:	fffeffff 	.word	0xfffeffff
 8001c14:	00001388 	.word	0x00001388
 8001c18:	efffffff 	.word	0xefffffff

08001c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0a8      	b.n	8001d80 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	2382      	movs	r3, #130	; 0x82
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d009      	beq.n	8001c56 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
 8001c48:	e005      	b.n	8001c56 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	225d      	movs	r2, #93	; 0x5d
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	225c      	movs	r2, #92	; 0x5c
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fcb6 	bl	80005e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	225d      	movs	r2, #93	; 0x5d
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2140      	movs	r1, #64	; 0x40
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	23e0      	movs	r3, #224	; 0xe0
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d902      	bls.n	8001ca2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e002      	b.n	8001ca8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	015b      	lsls	r3, r3, #5
 8001ca6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	23f0      	movs	r3, #240	; 0xf0
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d008      	beq.n	8001cc6 <HAL_SPI_Init+0xaa>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	23e0      	movs	r3, #224	; 0xe0
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d002      	beq.n	8001cc6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	2382      	movs	r3, #130	; 0x82
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	2384      	movs	r3, #132	; 0x84
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	400b      	ands	r3, r1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2101      	movs	r1, #1
 8001cec:	400b      	ands	r3, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6999      	ldr	r1, [r3, #24]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2138      	movs	r1, #56	; 0x38
 8001d02:	400b      	ands	r3, r1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	0011      	movs	r1, r2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	019b      	lsls	r3, r3, #6
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2110      	movs	r1, #16
 8001d34:	400b      	ands	r3, r1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	400b      	ands	r3, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	23f0      	movs	r3, #240	; 0xf0
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	015b      	lsls	r3, r3, #5
 8001d56:	401a      	ands	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4907      	ldr	r1, [pc, #28]	; (8001d88 <HAL_SPI_Init+0x16c>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	225d      	movs	r2, #93	; 0x5d
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b004      	add	sp, #16
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	fffff7ff 	.word	0xfffff7ff

08001d8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	1dbb      	adds	r3, r7, #6
 8001d9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	225c      	movs	r2, #92	; 0x5c
 8001da8:	5c9b      	ldrb	r3, [r3, r2]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_SPI_Transmit+0x26>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e140      	b.n	8002034 <HAL_SPI_Transmit+0x2a8>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	225c      	movs	r2, #92	; 0x5c
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dba:	f7fe fe39 	bl	8000a30 <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001dc2:	2316      	movs	r3, #22
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	1dba      	adds	r2, r7, #6
 8001dc8:	8812      	ldrh	r2, [r2, #0]
 8001dca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	225d      	movs	r2, #93	; 0x5d
 8001dd0:	5c9b      	ldrb	r3, [r3, r2]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d004      	beq.n	8001de2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001dd8:	231f      	movs	r3, #31
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2202      	movs	r2, #2
 8001dde:	701a      	strb	r2, [r3, #0]
    goto error;
 8001de0:	e11d      	b.n	800201e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_SPI_Transmit+0x64>
 8001de8:	1dbb      	adds	r3, r7, #6
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001df0:	231f      	movs	r3, #31
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001df8:	e111      	b.n	800201e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	225d      	movs	r2, #93	; 0x5d
 8001dfe:	2103      	movs	r1, #3
 8001e00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1dba      	adds	r2, r7, #6
 8001e12:	8812      	ldrh	r2, [r2, #0]
 8001e14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1dba      	adds	r2, r7, #6
 8001e1a:	8812      	ldrh	r2, [r2, #0]
 8001e1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2244      	movs	r2, #68	; 0x44
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2246      	movs	r2, #70	; 0x46
 8001e30:	2100      	movs	r1, #0
 8001e32:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d110      	bne.n	8001e6e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2140      	movs	r1, #64	; 0x40
 8001e58:	438a      	bics	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	01c9      	lsls	r1, r1, #7
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2240      	movs	r2, #64	; 0x40
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d007      	beq.n	8001e8c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2140      	movs	r1, #64	; 0x40
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	23e0      	movs	r3, #224	; 0xe0
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d94e      	bls.n	8001f36 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_SPI_Transmit+0x11e>
 8001ea0:	2316      	movs	r3, #22
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d13f      	bne.n	8001f2a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	881a      	ldrh	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	1c9a      	adds	r2, r3, #2
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ece:	e02c      	b.n	8001f2a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d112      	bne.n	8001f04 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	1c9a      	adds	r2, r3, #2
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f02:	e012      	b.n	8001f2a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f04:	f7fe fd94 	bl	8000a30 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d802      	bhi.n	8001f1a <HAL_SPI_Transmit+0x18e>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_SPI_Transmit+0x194>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d104      	bne.n	8001f2a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001f20:	231f      	movs	r3, #31
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2203      	movs	r2, #3
 8001f26:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f28:	e079      	b.n	800201e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1cd      	bne.n	8001ed0 <HAL_SPI_Transmit+0x144>
 8001f34:	e04f      	b.n	8001fd6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_SPI_Transmit+0x1bc>
 8001f3e:	2316      	movs	r3, #22
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d141      	bne.n	8001fcc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	330c      	adds	r3, #12
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001f6e:	e02d      	b.n	8001fcc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d113      	bne.n	8001fa6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	330c      	adds	r3, #12
 8001f88:	7812      	ldrb	r2, [r2, #0]
 8001f8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fa4:	e012      	b.n	8001fcc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fa6:	f7fe fd43 	bl	8000a30 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d802      	bhi.n	8001fbc <HAL_SPI_Transmit+0x230>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_SPI_Transmit+0x236>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d104      	bne.n	8001fcc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	701a      	strb	r2, [r3, #0]
          goto error;
 8001fca:	e028      	b.n	800201e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1cc      	bne.n	8001f70 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f95d 	bl	800229c <SPI_EndRxTxTransaction>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e000      	b.n	800201e <HAL_SPI_Transmit+0x292>
  }

error:
 800201c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	225d      	movs	r2, #93	; 0x5d
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	225c      	movs	r2, #92	; 0x5c
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800202e:	231f      	movs	r3, #31
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b008      	add	sp, #32
 800203a:	bd80      	pop	{r7, pc}

0800203c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800204c:	f7fe fcf0 	bl	8000a30 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	18d3      	adds	r3, r2, r3
 800205a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800205c:	f7fe fce8 	bl	8000a30 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	0d1b      	lsrs	r3, r3, #20
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	4353      	muls	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002072:	e058      	b.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	d055      	beq.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800207a:	f7fe fcd9 	bl	8000a30 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	429a      	cmp	r2, r3
 8002088:	d902      	bls.n	8002090 <SPI_WaitFlagStateUntilTimeout+0x54>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d142      	bne.n	8002116 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	21e0      	movs	r1, #224	; 0xe0
 800209c:	438a      	bics	r2, r1
 800209e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	2382      	movs	r3, #130	; 0x82
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d113      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d005      	beq.n	80020c4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	438a      	bics	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	019b      	lsls	r3, r3, #6
 80020dc:	429a      	cmp	r2, r3
 80020de:	d110      	bne.n	8002102 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	491a      	ldr	r1, [pc, #104]	; (8002154 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0189      	lsls	r1, r1, #6
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	225d      	movs	r2, #93	; 0x5d
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	225c      	movs	r2, #92	; 0x5c
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e017      	b.n	8002146 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3b01      	subs	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	4013      	ands	r3, r2
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	425a      	negs	r2, r3
 8002136:	4153      	adcs	r3, r2
 8002138:	b2db      	uxtb	r3, r3
 800213a:	001a      	movs	r2, r3
 800213c:	1dfb      	adds	r3, r7, #7
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d197      	bne.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b008      	add	sp, #32
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	20000000 	.word	0x20000000
 8002154:	ffffdfff 	.word	0xffffdfff

08002158 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002166:	2317      	movs	r3, #23
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800216e:	f7fe fc5f 	bl	8000a30 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	18d3      	adds	r3, r2, r3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800217e:	f7fe fc57 	bl	8000a30 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	0013      	movs	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	189b      	adds	r3, r3, r2
 8002198:	00da      	lsls	r2, r3, #3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	0d1b      	lsrs	r3, r3, #20
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	4353      	muls	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80021a4:	e068      	b.n	8002278 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	23c0      	movs	r3, #192	; 0xc0
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d10a      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	2117      	movs	r1, #23
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	d055      	beq.n	8002278 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021cc:	f7fe fc30 	bl	8000a30 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	429a      	cmp	r2, r3
 80021da:	d902      	bls.n	80021e2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d142      	bne.n	8002268 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	21e0      	movs	r1, #224	; 0xe0
 80021ee:	438a      	bics	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	2382      	movs	r3, #130	; 0x82
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d113      	bne.n	8002226 <SPI_WaitFifoStateUntilTimeout+0xce>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	429a      	cmp	r2, r3
 8002208:	d005      	beq.n	8002216 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	429a      	cmp	r2, r3
 8002214:	d107      	bne.n	8002226 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2140      	movs	r1, #64	; 0x40
 8002222:	438a      	bics	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	429a      	cmp	r2, r3
 8002230:	d110      	bne.n	8002254 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4916      	ldr	r1, [pc, #88]	; (8002298 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800223e:	400a      	ands	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	0189      	lsls	r1, r1, #6
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	225d      	movs	r2, #93	; 0x5d
 8002258:	2101      	movs	r1, #1
 800225a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	225c      	movs	r2, #92	; 0x5c
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e010      	b.n	800228a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	3b01      	subs	r3, #1
 8002276:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d18e      	bne.n	80021a6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b00a      	add	sp, #40	; 0x28
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	20000000 	.word	0x20000000
 8002298:	ffffdfff 	.word	0xffffdfff

0800229c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	0159      	lsls	r1, r3, #5
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	0013      	movs	r3, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	f7ff ff4e 	bl	8002158 <SPI_WaitFifoStateUntilTimeout>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d007      	beq.n	80022d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c4:	2220      	movs	r2, #32
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e027      	b.n	8002320 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	0013      	movs	r3, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	f7ff fead 	bl	800203c <SPI_WaitFlagStateUntilTimeout>
 80022e2:	1e03      	subs	r3, r0, #0
 80022e4:	d007      	beq.n	80022f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	2220      	movs	r2, #32
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e014      	b.n	8002320 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	00d9      	lsls	r1, r3, #3
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	0013      	movs	r3, r2
 8002304:	2200      	movs	r2, #0
 8002306:	f7ff ff27 	bl	8002158 <SPI_WaitFifoStateUntilTimeout>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d007      	beq.n	800231e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	2220      	movs	r2, #32
 8002314:	431a      	orrs	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e000      	b.n	8002320 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e044      	b.n	80023c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2274      	movs	r2, #116	; 0x74
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f7fe f995 	bl	800067c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2224      	movs	r2, #36	; 0x24
 8002356:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2101      	movs	r1, #1
 8002364:	438a      	bics	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 fb86 	bl	8002a7c <UART_SetConfig>
 8002370:	0003      	movs	r3, r0
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e024      	b.n	80023c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fcb9 	bl	8002cfc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	490d      	ldr	r1, [pc, #52]	; (80023cc <HAL_UART_Init+0xa4>)
 8002396:	400a      	ands	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	212a      	movs	r1, #42	; 0x2a
 80023a6:	438a      	bics	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fd51 	bl	8002e64 <UART_CheckIdleState>
 80023c2:	0003      	movs	r3, r0
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	ffffb7ff 	.word	0xffffb7ff

080023d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	1dbb      	adds	r3, r7, #6
 80023dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d150      	bne.n	8002488 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_UART_Receive_IT+0x24>
 80023ec:	1dbb      	adds	r3, r7, #6
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e048      	b.n	800248a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	015b      	lsls	r3, r3, #5
 8002400:	429a      	cmp	r2, r3
 8002402:	d109      	bne.n	8002418 <HAL_UART_Receive_IT+0x48>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d001      	beq.n	8002418 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e038      	b.n	800248a <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2274      	movs	r2, #116	; 0x74
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_UART_Receive_IT+0x56>
 8002422:	2302      	movs	r3, #2
 8002424:	e031      	b.n	800248a <HAL_UART_Receive_IT+0xba>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2274      	movs	r2, #116	; 0x74
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	4013      	ands	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002442:	f3ef 8310 	mrs	r3, PRIMASK
 8002446:	613b      	str	r3, [r7, #16]
  return(result);
 8002448:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	2301      	movs	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f383 8810 	msr	PRIMASK, r3
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	04c9      	lsls	r1, r1, #19
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f383 8810 	msr	PRIMASK, r3
}
 8002474:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002476:	1dbb      	adds	r3, r7, #6
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 fdfc 	bl	800307c <UART_Start_Receive_IT>
 8002484:	0003      	movs	r3, r0
 8002486:	e000      	b.n	800248a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b008      	add	sp, #32
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b0ab      	sub	sp, #172	; 0xac
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	22a4      	movs	r2, #164	; 0xa4
 80024a4:	18b9      	adds	r1, r7, r2
 80024a6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	20a0      	movs	r0, #160	; 0xa0
 80024b0:	1839      	adds	r1, r7, r0
 80024b2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	219c      	movs	r1, #156	; 0x9c
 80024bc:	1879      	adds	r1, r7, r1
 80024be:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024c0:	0011      	movs	r1, r2
 80024c2:	18bb      	adds	r3, r7, r2
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a99      	ldr	r2, [pc, #612]	; (800272c <HAL_UART_IRQHandler+0x298>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	2298      	movs	r2, #152	; 0x98
 80024cc:	18bc      	adds	r4, r7, r2
 80024ce:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80024d0:	18bb      	adds	r3, r7, r2
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d114      	bne.n	8002502 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2220      	movs	r2, #32
 80024de:	4013      	ands	r3, r2
 80024e0:	d00f      	beq.n	8002502 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024e2:	183b      	adds	r3, r7, r0
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2220      	movs	r2, #32
 80024e8:	4013      	ands	r3, r2
 80024ea:	d00a      	beq.n	8002502 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d100      	bne.n	80024f6 <HAL_UART_IRQHandler+0x62>
 80024f4:	e296      	b.n	8002a24 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	0010      	movs	r0, r2
 80024fe:	4798      	blx	r3
      }
      return;
 8002500:	e290      	b.n	8002a24 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002502:	2398      	movs	r3, #152	; 0x98
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d100      	bne.n	800250e <HAL_UART_IRQHandler+0x7a>
 800250c:	e114      	b.n	8002738 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800250e:	239c      	movs	r3, #156	; 0x9c
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d106      	bne.n	8002528 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800251a:	23a0      	movs	r3, #160	; 0xa0
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a83      	ldr	r2, [pc, #524]	; (8002730 <HAL_UART_IRQHandler+0x29c>)
 8002522:	4013      	ands	r3, r2
 8002524:	d100      	bne.n	8002528 <HAL_UART_IRQHandler+0x94>
 8002526:	e107      	b.n	8002738 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002528:	23a4      	movs	r3, #164	; 0xa4
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d012      	beq.n	800255a <HAL_UART_IRQHandler+0xc6>
 8002534:	23a0      	movs	r3, #160	; 0xa0
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4013      	ands	r3, r2
 8002540:	d00b      	beq.n	800255a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2201      	movs	r2, #1
 8002548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	589b      	ldr	r3, [r3, r2]
 8002550:	2201      	movs	r2, #1
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800255a:	23a4      	movs	r3, #164	; 0xa4
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2202      	movs	r2, #2
 8002562:	4013      	ands	r3, r2
 8002564:	d011      	beq.n	800258a <HAL_UART_IRQHandler+0xf6>
 8002566:	239c      	movs	r3, #156	; 0x9c
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d00b      	beq.n	800258a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2202      	movs	r2, #2
 8002578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	589b      	ldr	r3, [r3, r2]
 8002580:	2204      	movs	r2, #4
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2180      	movs	r1, #128	; 0x80
 8002588:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800258a:	23a4      	movs	r3, #164	; 0xa4
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2204      	movs	r2, #4
 8002592:	4013      	ands	r3, r2
 8002594:	d011      	beq.n	80025ba <HAL_UART_IRQHandler+0x126>
 8002596:	239c      	movs	r3, #156	; 0x9c
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2204      	movs	r2, #4
 80025a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	589b      	ldr	r3, [r3, r2]
 80025b0:	2202      	movs	r2, #2
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025ba:	23a4      	movs	r3, #164	; 0xa4
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	4013      	ands	r3, r2
 80025c4:	d017      	beq.n	80025f6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025c6:	23a0      	movs	r3, #160	; 0xa0
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2220      	movs	r2, #32
 80025ce:	4013      	ands	r3, r2
 80025d0:	d105      	bne.n	80025de <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025d2:	239c      	movs	r3, #156	; 0x9c
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025dc:	d00b      	beq.n	80025f6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2208      	movs	r2, #8
 80025e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	589b      	ldr	r3, [r3, r2]
 80025ec:	2208      	movs	r2, #8
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025f6:	23a4      	movs	r3, #164	; 0xa4
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4013      	ands	r3, r2
 8002602:	d013      	beq.n	800262c <HAL_UART_IRQHandler+0x198>
 8002604:	23a0      	movs	r3, #160	; 0xa0
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	04db      	lsls	r3, r3, #19
 800260e:	4013      	ands	r3, r2
 8002610:	d00c      	beq.n	800262c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	589b      	ldr	r3, [r3, r2]
 8002622:	2220      	movs	r2, #32
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	589b      	ldr	r3, [r3, r2]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d100      	bne.n	8002638 <HAL_UART_IRQHandler+0x1a4>
 8002636:	e1f7      	b.n	8002a28 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002638:	23a4      	movs	r3, #164	; 0xa4
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2220      	movs	r2, #32
 8002640:	4013      	ands	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002644:	23a0      	movs	r3, #160	; 0xa0
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2220      	movs	r2, #32
 800264c:	4013      	ands	r3, r2
 800264e:	d008      	beq.n	8002662 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	0010      	movs	r0, r2
 8002660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	589b      	ldr	r3, [r3, r2]
 8002668:	2194      	movs	r1, #148	; 0x94
 800266a:	187a      	adds	r2, r7, r1
 800266c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	4013      	ands	r3, r2
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d004      	beq.n	8002686 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800267c:	187b      	adds	r3, r7, r1
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2228      	movs	r2, #40	; 0x28
 8002682:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002684:	d047      	beq.n	8002716 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 fda7 	bl	80031dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	4013      	ands	r3, r2
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d137      	bne.n	800270c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269c:	f3ef 8310 	mrs	r3, PRIMASK
 80026a0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80026a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a4:	2090      	movs	r0, #144	; 0x90
 80026a6:	183a      	adds	r2, r7, r0
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	2301      	movs	r3, #1
 80026ac:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2140      	movs	r1, #64	; 0x40
 80026c2:	438a      	bics	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	183b      	adds	r3, r7, r0
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ce:	f383 8810 	msr	PRIMASK, r3
}
 80026d2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_UART_IRQHandler+0x2a0>)
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7fe fac1 	bl	8000c70 <HAL_DMA_Abort_IT>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d01a      	beq.n	8002728 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	0018      	movs	r0, r3
 80026fe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	e012      	b.n	8002728 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f000 f9a5 	bl	8002a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270a:	e00d      	b.n	8002728 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 f9a0 	bl	8002a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002714:	e008      	b.n	8002728 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f99b 	bl	8002a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	2100      	movs	r1, #0
 8002724:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002726:	e17f      	b.n	8002a28 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	46c0      	nop			; (mov r8, r8)
    return;
 800272a:	e17d      	b.n	8002a28 <HAL_UART_IRQHandler+0x594>
 800272c:	0000080f 	.word	0x0000080f
 8002730:	04000120 	.word	0x04000120
 8002734:	080032a1 	.word	0x080032a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	2b01      	cmp	r3, #1
 800273e:	d000      	beq.n	8002742 <HAL_UART_IRQHandler+0x2ae>
 8002740:	e131      	b.n	80029a6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002742:	23a4      	movs	r3, #164	; 0xa4
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2210      	movs	r2, #16
 800274a:	4013      	ands	r3, r2
 800274c:	d100      	bne.n	8002750 <HAL_UART_IRQHandler+0x2bc>
 800274e:	e12a      	b.n	80029a6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002750:	23a0      	movs	r3, #160	; 0xa0
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2210      	movs	r2, #16
 8002758:	4013      	ands	r3, r2
 800275a:	d100      	bne.n	800275e <HAL_UART_IRQHandler+0x2ca>
 800275c:	e123      	b.n	80029a6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2210      	movs	r2, #16
 8002764:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	4013      	ands	r3, r2
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d000      	beq.n	8002776 <HAL_UART_IRQHandler+0x2e2>
 8002774:	e09b      	b.n	80028ae <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	217e      	movs	r1, #126	; 0x7e
 8002780:	187b      	adds	r3, r7, r1
 8002782:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002784:	187b      	adds	r3, r7, r1
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d100      	bne.n	800278e <HAL_UART_IRQHandler+0x2fa>
 800278c:	e14e      	b.n	8002a2c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2258      	movs	r2, #88	; 0x58
 8002792:	5a9b      	ldrh	r3, [r3, r2]
 8002794:	187a      	adds	r2, r7, r1
 8002796:	8812      	ldrh	r2, [r2, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d300      	bcc.n	800279e <HAL_UART_IRQHandler+0x30a>
 800279c:	e146      	b.n	8002a2c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	187a      	adds	r2, r7, r1
 80027a2:	215a      	movs	r1, #90	; 0x5a
 80027a4:	8812      	ldrh	r2, [r2, #0]
 80027a6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d06e      	beq.n	8002890 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8310 	mrs	r3, PRIMASK
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80027bc:	2301      	movs	r3, #1
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	499a      	ldr	r1, [pc, #616]	; (8002a3c <HAL_UART_IRQHandler+0x5a8>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e4:	f3ef 8310 	mrs	r3, PRIMASK
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ec:	677b      	str	r3, [r7, #116]	; 0x74
 80027ee:	2301      	movs	r3, #1
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	438a      	bics	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002810:	f383 8810 	msr	PRIMASK, r3
}
 8002814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002816:	f3ef 8310 	mrs	r3, PRIMASK
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800281c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281e:	673b      	str	r3, [r7, #112]	; 0x70
 8002820:	2301      	movs	r3, #1
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2140      	movs	r1, #64	; 0x40
 8002838:	438a      	bics	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800283e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002854:	f3ef 8310 	mrs	r3, PRIMASK
 8002858:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800285a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800285e:	2301      	movs	r3, #1
 8002860:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002864:	f383 8810 	msr	PRIMASK, r3
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2110      	movs	r1, #16
 8002876:	438a      	bics	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002880:	f383 8810 	msr	PRIMASK, r3
}
 8002884:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	0018      	movs	r0, r3
 800288c:	f7fe f9b8 	bl	8000c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2258      	movs	r2, #88	; 0x58
 8002894:	5a9a      	ldrh	r2, [r3, r2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	215a      	movs	r1, #90	; 0x5a
 800289a:	5a5b      	ldrh	r3, [r3, r1]
 800289c:	b29b      	uxth	r3, r3
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0011      	movs	r1, r2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f8dc 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028ac:	e0be      	b.n	8002a2c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2258      	movs	r2, #88	; 0x58
 80028b2:	5a99      	ldrh	r1, [r3, r2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	225a      	movs	r2, #90	; 0x5a
 80028b8:	5a9b      	ldrh	r3, [r3, r2]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	208e      	movs	r0, #142	; 0x8e
 80028be:	183b      	adds	r3, r7, r0
 80028c0:	1a8a      	subs	r2, r1, r2
 80028c2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	225a      	movs	r2, #90	; 0x5a
 80028c8:	5a9b      	ldrh	r3, [r3, r2]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d100      	bne.n	80028d2 <HAL_UART_IRQHandler+0x43e>
 80028d0:	e0ae      	b.n	8002a30 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d100      	bne.n	80028dc <HAL_UART_IRQHandler+0x448>
 80028da:	e0a9      	b.n	8002a30 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028dc:	f3ef 8310 	mrs	r3, PRIMASK
 80028e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80028e2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e4:	2488      	movs	r4, #136	; 0x88
 80028e6:	193a      	adds	r2, r7, r4
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	494f      	ldr	r1, [pc, #316]	; (8002a40 <HAL_UART_IRQHandler+0x5ac>)
 8002902:	400a      	ands	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	193b      	adds	r3, r7, r4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f383 8810 	msr	PRIMASK, r3
}
 8002912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002914:	f3ef 8310 	mrs	r3, PRIMASK
 8002918:	61bb      	str	r3, [r7, #24]
  return(result);
 800291a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291c:	2484      	movs	r4, #132	; 0x84
 800291e:	193a      	adds	r2, r7, r4
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	438a      	bics	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	193b      	adds	r3, r7, r4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f383 8810 	msr	PRIMASK, r3
}
 800294a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295e:	f3ef 8310 	mrs	r3, PRIMASK
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002966:	2480      	movs	r4, #128	; 0x80
 8002968:	193a      	adds	r2, r7, r4
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	2301      	movs	r3, #1
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2110      	movs	r1, #16
 8002984:	438a      	bics	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	193b      	adds	r3, r7, r4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	f383 8810 	msr	PRIMASK, r3
}
 8002994:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002996:	183b      	adds	r3, r7, r0
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0011      	movs	r1, r2
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f860 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029a4:	e044      	b.n	8002a30 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029a6:	23a4      	movs	r3, #164	; 0xa4
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	035b      	lsls	r3, r3, #13
 80029b0:	4013      	ands	r3, r2
 80029b2:	d010      	beq.n	80029d6 <HAL_UART_IRQHandler+0x542>
 80029b4:	239c      	movs	r3, #156	; 0x9c
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	03db      	lsls	r3, r3, #15
 80029be:	4013      	ands	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	0352      	lsls	r2, r2, #13
 80029ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 fe10 	bl	80035f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029d4:	e02f      	b.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029d6:	23a4      	movs	r3, #164	; 0xa4
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	4013      	ands	r3, r2
 80029e0:	d00f      	beq.n	8002a02 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029e2:	23a0      	movs	r3, #160	; 0xa0
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01e      	beq.n	8002a34 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	0010      	movs	r0, r2
 80029fe:	4798      	blx	r3
    }
    return;
 8002a00:	e018      	b.n	8002a34 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a02:	23a4      	movs	r3, #164	; 0xa4
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
 8002a0e:	23a0      	movs	r3, #160	; 0xa0
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	4013      	ands	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 fc56 	bl	80032ce <UART_EndTransmit_IT>
    return;
 8002a22:	e008      	b.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	e006      	b.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	e004      	b.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	e002      	b.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	e000      	b.n	8002a36 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002a34:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b02b      	add	sp, #172	; 0xac
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	fffffeff 	.word	0xfffffeff
 8002a40:	fffffedf 	.word	0xfffffedf

08002a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	1cbb      	adds	r3, r7, #2
 8002a70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a84:	231e      	movs	r3, #30
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a8d      	ldr	r2, [pc, #564]	; (8002ce0 <UART_SetConfig+0x264>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a88      	ldr	r2, [pc, #544]	; (8002ce4 <UART_SetConfig+0x268>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a7f      	ldr	r2, [pc, #508]	; (8002ce8 <UART_SetConfig+0x26c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a7b      	ldr	r2, [pc, #492]	; (8002cec <UART_SetConfig+0x270>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d127      	bne.n	8002b52 <UART_SetConfig+0xd6>
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <UART_SetConfig+0x274>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	2203      	movs	r2, #3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d00d      	beq.n	8002b2a <UART_SetConfig+0xae>
 8002b0e:	d81b      	bhi.n	8002b48 <UART_SetConfig+0xcc>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d014      	beq.n	8002b3e <UART_SetConfig+0xc2>
 8002b14:	d818      	bhi.n	8002b48 <UART_SetConfig+0xcc>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <UART_SetConfig+0xa4>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d00a      	beq.n	8002b34 <UART_SetConfig+0xb8>
 8002b1e:	e013      	b.n	8002b48 <UART_SetConfig+0xcc>
 8002b20:	231f      	movs	r3, #31
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e021      	b.n	8002b6e <UART_SetConfig+0xf2>
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2202      	movs	r2, #2
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e01c      	b.n	8002b6e <UART_SetConfig+0xf2>
 8002b34:	231f      	movs	r3, #31
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2204      	movs	r2, #4
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e017      	b.n	8002b6e <UART_SetConfig+0xf2>
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2208      	movs	r2, #8
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e012      	b.n	8002b6e <UART_SetConfig+0xf2>
 8002b48:	231f      	movs	r3, #31
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e00d      	b.n	8002b6e <UART_SetConfig+0xf2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a67      	ldr	r2, [pc, #412]	; (8002cf4 <UART_SetConfig+0x278>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d104      	bne.n	8002b66 <UART_SetConfig+0xea>
 8002b5c:	231f      	movs	r3, #31
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e003      	b.n	8002b6e <UART_SetConfig+0xf2>
 8002b66:	231f      	movs	r3, #31
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d15d      	bne.n	8002c36 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002b7a:	231f      	movs	r3, #31
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d015      	beq.n	8002bb0 <UART_SetConfig+0x134>
 8002b84:	dc18      	bgt.n	8002bb8 <UART_SetConfig+0x13c>
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00d      	beq.n	8002ba6 <UART_SetConfig+0x12a>
 8002b8a:	dc15      	bgt.n	8002bb8 <UART_SetConfig+0x13c>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <UART_SetConfig+0x11a>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d005      	beq.n	8002ba0 <UART_SetConfig+0x124>
 8002b94:	e010      	b.n	8002bb8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b96:	f7fe ff3d 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	61bb      	str	r3, [r7, #24]
        break;
 8002b9e:	e012      	b.n	8002bc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba0:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <UART_SetConfig+0x27c>)
 8002ba2:	61bb      	str	r3, [r7, #24]
        break;
 8002ba4:	e00f      	b.n	8002bc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ba6:	f7fe feab 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 8002baa:	0003      	movs	r3, r0
 8002bac:	61bb      	str	r3, [r7, #24]
        break;
 8002bae:	e00a      	b.n	8002bc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	61bb      	str	r3, [r7, #24]
        break;
 8002bb6:	e006      	b.n	8002bc6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bbc:	231e      	movs	r3, #30
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
        break;
 8002bc4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d100      	bne.n	8002bce <UART_SetConfig+0x152>
 8002bcc:	e07b      	b.n	8002cc6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	005a      	lsls	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	18d2      	adds	r2, r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	0019      	movs	r1, r3
 8002be0:	0010      	movs	r0, r2
 8002be2:	f7fd fa9b 	bl	800011c <__udivsi3>
 8002be6:	0003      	movs	r3, r0
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b0f      	cmp	r3, #15
 8002bf0:	d91c      	bls.n	8002c2c <UART_SetConfig+0x1b0>
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	025b      	lsls	r3, r3, #9
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d217      	bcs.n	8002c2c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	200e      	movs	r0, #14
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	210f      	movs	r1, #15
 8002c06:	438a      	bics	r2, r1
 8002c08:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2207      	movs	r2, #7
 8002c12:	4013      	ands	r3, r2
 8002c14:	b299      	uxth	r1, r3
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	183a      	adds	r2, r7, r0
 8002c1a:	8812      	ldrh	r2, [r2, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	183a      	adds	r2, r7, r0
 8002c26:	8812      	ldrh	r2, [r2, #0]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	e04c      	b.n	8002cc6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c2c:	231e      	movs	r3, #30
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e047      	b.n	8002cc6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c36:	231f      	movs	r3, #31
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d015      	beq.n	8002c6c <UART_SetConfig+0x1f0>
 8002c40:	dc18      	bgt.n	8002c74 <UART_SetConfig+0x1f8>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d00d      	beq.n	8002c62 <UART_SetConfig+0x1e6>
 8002c46:	dc15      	bgt.n	8002c74 <UART_SetConfig+0x1f8>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <UART_SetConfig+0x1d6>
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d005      	beq.n	8002c5c <UART_SetConfig+0x1e0>
 8002c50:	e010      	b.n	8002c74 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c52:	f7fe fedf 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8002c56:	0003      	movs	r3, r0
 8002c58:	61bb      	str	r3, [r7, #24]
        break;
 8002c5a:	e012      	b.n	8002c82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <UART_SetConfig+0x27c>)
 8002c5e:	61bb      	str	r3, [r7, #24]
        break;
 8002c60:	e00f      	b.n	8002c82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c62:	f7fe fe4d 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]
        break;
 8002c6a:	e00a      	b.n	8002c82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	61bb      	str	r3, [r7, #24]
        break;
 8002c72:	e006      	b.n	8002c82 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c78:	231e      	movs	r3, #30
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
        break;
 8002c80:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01e      	beq.n	8002cc6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	085a      	lsrs	r2, r3, #1
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	18d2      	adds	r2, r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f7fd fa3f 	bl	800011c <__udivsi3>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	d909      	bls.n	8002cbe <UART_SetConfig+0x242>
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	025b      	lsls	r3, r3, #9
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d204      	bcs.n	8002cbe <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	60da      	str	r2, [r3, #12]
 8002cbc:	e003      	b.n	8002cc6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002cbe:	231e      	movs	r3, #30
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002cd2:	231e      	movs	r3, #30
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	781b      	ldrb	r3, [r3, #0]
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b008      	add	sp, #32
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	efff69f3 	.word	0xefff69f3
 8002ce4:	ffffcfff 	.word	0xffffcfff
 8002ce8:	fffff4ff 	.word	0xfffff4ff
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40004400 	.word	0x40004400
 8002cf8:	007a1200 	.word	0x007a1200

08002cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a4a      	ldr	r2, [pc, #296]	; (8002e40 <UART_AdvFeatureConfig+0x144>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <UART_AdvFeatureConfig+0x148>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d00b      	beq.n	8002d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <UART_AdvFeatureConfig+0x14c>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2208      	movs	r2, #8
 8002d70:	4013      	ands	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <UART_AdvFeatureConfig+0x150>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2210      	movs	r2, #16
 8002d92:	4013      	ands	r3, r2
 8002d94:	d00b      	beq.n	8002dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <UART_AdvFeatureConfig+0x154>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2220      	movs	r2, #32
 8002db4:	4013      	ands	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <UART_AdvFeatureConfig+0x158>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d01d      	beq.n	8002e16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <UART_AdvFeatureConfig+0x15c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	035b      	lsls	r3, r3, #13
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d10b      	bne.n	8002e16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <UART_AdvFeatureConfig+0x160>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <UART_AdvFeatureConfig+0x164>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
  }
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	fffdffff 	.word	0xfffdffff
 8002e44:	fffeffff 	.word	0xfffeffff
 8002e48:	fffbffff 	.word	0xfffbffff
 8002e4c:	ffff7fff 	.word	0xffff7fff
 8002e50:	ffffefff 	.word	0xffffefff
 8002e54:	ffffdfff 	.word	0xffffdfff
 8002e58:	ffefffff 	.word	0xffefffff
 8002e5c:	ff9fffff 	.word	0xff9fffff
 8002e60:	fff7ffff 	.word	0xfff7ffff

08002e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	2100      	movs	r1, #0
 8002e72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e74:	f7fd fddc 	bl	8000a30 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2208      	movs	r2, #8
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d10c      	bne.n	8002ea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	0391      	lsls	r1, r2, #14
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <UART_CheckIdleState+0x8c>)
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f000 f82c 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d001      	beq.n	8002ea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e021      	b.n	8002ee8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d10c      	bne.n	8002ecc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	03d1      	lsls	r1, r2, #15
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <UART_CheckIdleState+0x8c>)
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f000 f818 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d001      	beq.n	8002ecc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e00d      	b.n	8002ee8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2274      	movs	r2, #116	; 0x74
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	01ffffff 	.word	0x01ffffff

08002ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b094      	sub	sp, #80	; 0x50
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f04:	e0a3      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f08:	3301      	adds	r3, #1
 8002f0a:	d100      	bne.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002f0c:	e09f      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fd fd8f 	bl	8000a30 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13d      	bne.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f24:	f3ef 8310 	mrs	r3, PRIMASK
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	494c      	ldr	r1, [pc, #304]	; (8003078 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f60:	2301      	movs	r3, #1
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	f383 8810 	msr	PRIMASK, r3
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2101      	movs	r1, #1
 8002f78:	438a      	bics	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2274      	movs	r2, #116	; 0x74
 8002f98:	2100      	movs	r1, #0
 8002f9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e067      	b.n	8003070 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d050      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d146      	bne.n	800304e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fca:	f3ef 8310 	mrs	r3, PRIMASK
 8002fce:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f383 8810 	msr	PRIMASK, r3
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4923      	ldr	r1, [pc, #140]	; (8003078 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002fec:	400a      	ands	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f383 8810 	msr	PRIMASK, r3
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	61fb      	str	r3, [r7, #28]
  return(result);
 8003002:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003004:	64bb      	str	r3, [r7, #72]	; 0x48
 8003006:	2301      	movs	r3, #1
 8003008:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	438a      	bics	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	2120      	movs	r1, #32
 8003040:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2274      	movs	r2, #116	; 0x74
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e010      	b.n	8003070 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	425a      	negs	r2, r3
 800305e:	4153      	adcs	r3, r2
 8003060:	b2db      	uxtb	r3, r3
 8003062:	001a      	movs	r2, r3
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d100      	bne.n	800306e <UART_WaitOnFlagUntilTimeout+0x17a>
 800306c:	e74b      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b014      	add	sp, #80	; 0x50
 8003076:	bd80      	pop	{r7, pc}
 8003078:	fffffe5f 	.word	0xfffffe5f

0800307c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	1dbb      	adds	r3, r7, #6
 8003088:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1dba      	adds	r2, r7, #6
 8003094:	2158      	movs	r1, #88	; 0x58
 8003096:	8812      	ldrh	r2, [r2, #0]
 8003098:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1dba      	adds	r2, r7, #6
 800309e:	215a      	movs	r1, #90	; 0x5a
 80030a0:	8812      	ldrh	r2, [r2, #0]
 80030a2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	015b      	lsls	r3, r3, #5
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d10d      	bne.n	80030d2 <UART_Start_Receive_IT+0x56>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <UART_Start_Receive_IT+0x4c>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	225c      	movs	r2, #92	; 0x5c
 80030c2:	4943      	ldr	r1, [pc, #268]	; (80031d0 <UART_Start_Receive_IT+0x154>)
 80030c4:	5299      	strh	r1, [r3, r2]
 80030c6:	e02e      	b.n	8003126 <UART_Start_Receive_IT+0xaa>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	225c      	movs	r2, #92	; 0x5c
 80030cc:	21ff      	movs	r1, #255	; 0xff
 80030ce:	5299      	strh	r1, [r3, r2]
 80030d0:	e029      	b.n	8003126 <UART_Start_Receive_IT+0xaa>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <UART_Start_Receive_IT+0x7a>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <UART_Start_Receive_IT+0x70>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	225c      	movs	r2, #92	; 0x5c
 80030e6:	21ff      	movs	r1, #255	; 0xff
 80030e8:	5299      	strh	r1, [r3, r2]
 80030ea:	e01c      	b.n	8003126 <UART_Start_Receive_IT+0xaa>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	225c      	movs	r2, #92	; 0x5c
 80030f0:	217f      	movs	r1, #127	; 0x7f
 80030f2:	5299      	strh	r1, [r3, r2]
 80030f4:	e017      	b.n	8003126 <UART_Start_Receive_IT+0xaa>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	055b      	lsls	r3, r3, #21
 80030fe:	429a      	cmp	r2, r3
 8003100:	d10d      	bne.n	800311e <UART_Start_Receive_IT+0xa2>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <UART_Start_Receive_IT+0x98>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	225c      	movs	r2, #92	; 0x5c
 800310e:	217f      	movs	r1, #127	; 0x7f
 8003110:	5299      	strh	r1, [r3, r2]
 8003112:	e008      	b.n	8003126 <UART_Start_Receive_IT+0xaa>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	225c      	movs	r2, #92	; 0x5c
 8003118:	213f      	movs	r1, #63	; 0x3f
 800311a:	5299      	strh	r1, [r3, r2]
 800311c:	e003      	b.n	8003126 <UART_Start_Receive_IT+0xaa>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	225c      	movs	r2, #92	; 0x5c
 8003122:	2100      	movs	r1, #0
 8003124:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	2100      	movs	r1, #0
 800312c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2222      	movs	r2, #34	; 0x22
 8003132:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003134:	f3ef 8310 	mrs	r3, PRIMASK
 8003138:	61fb      	str	r3, [r7, #28]
  return(result);
 800313a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	2301      	movs	r3, #1
 8003140:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	015b      	lsls	r3, r3, #5
 800316e:	429a      	cmp	r2, r3
 8003170:	d107      	bne.n	8003182 <UART_Start_Receive_IT+0x106>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <UART_Start_Receive_IT+0x158>)
 800317e:	665a      	str	r2, [r3, #100]	; 0x64
 8003180:	e002      	b.n	8003188 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <UART_Start_Receive_IT+0x15c>)
 8003186:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2274      	movs	r2, #116	; 0x74
 800318c:	2100      	movs	r1, #0
 800318e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	613b      	str	r3, [r7, #16]
  return(result);
 8003196:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
 800319a:	2301      	movs	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2190      	movs	r1, #144	; 0x90
 80031b2:	0049      	lsls	r1, r1, #1
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f383 8810 	msr	PRIMASK, r3
}
 80031c2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b00c      	add	sp, #48	; 0x30
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	000001ff 	.word	0x000001ff
 80031d4:	0800348d 	.word	0x0800348d
 80031d8:	08003325 	.word	0x08003325

080031dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	617b      	str	r3, [r7, #20]
  return(result);
 80031ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4925      	ldr	r1, [pc, #148]	; (800329c <UART_EndRxTransfer+0xc0>)
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003216:	f3ef 8310 	mrs	r3, PRIMASK
 800321a:	623b      	str	r3, [r7, #32]
  return(result);
 800321c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
 8003220:	2301      	movs	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f383 8810 	msr	PRIMASK, r3
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	438a      	bics	r2, r1
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	f383 8810 	msr	PRIMASK, r3
}
 8003246:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324c:	2b01      	cmp	r3, #1
 800324e:	d118      	bne.n	8003282 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003250:	f3ef 8310 	mrs	r3, PRIMASK
 8003254:	60bb      	str	r3, [r7, #8]
  return(result);
 8003256:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325a:	2301      	movs	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2110      	movs	r1, #16
 8003272:	438a      	bics	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b00e      	add	sp, #56	; 0x38
 800329a:	bd80      	pop	{r7, pc}
 800329c:	fffffedf 	.word	0xfffffedf

080032a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	225a      	movs	r2, #90	; 0x5a
 80032b2:	2100      	movs	r1, #0
 80032b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2252      	movs	r2, #82	; 0x52
 80032ba:	2100      	movs	r1, #0
 80032bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff fbc7 	bl	8002a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b004      	add	sp, #16
 80032cc:	bd80      	pop	{r7, pc}

080032ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d6:	f3ef 8310 	mrs	r3, PRIMASK
 80032da:	60bb      	str	r3, [r7, #8]
  return(result);
 80032dc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	2301      	movs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2140      	movs	r1, #64	; 0x40
 80032f8:	438a      	bics	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f7ff fb94 	bl	8002a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b006      	add	sp, #24
 8003322:	bd80      	pop	{r7, pc}

08003324 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b090      	sub	sp, #64	; 0x40
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800332c:	203e      	movs	r0, #62	; 0x3e
 800332e:	183b      	adds	r3, r7, r0
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	215c      	movs	r1, #92	; 0x5c
 8003334:	5a52      	ldrh	r2, [r2, r1]
 8003336:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800333c:	2b22      	cmp	r3, #34	; 0x22
 800333e:	d000      	beq.n	8003342 <UART_RxISR_8BIT+0x1e>
 8003340:	e095      	b.n	800346e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	213c      	movs	r1, #60	; 0x3c
 8003348:	187b      	adds	r3, r7, r1
 800334a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800334c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800334e:	187b      	adds	r3, r7, r1
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	183b      	adds	r3, r7, r0
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b2d9      	uxtb	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	400a      	ands	r2, r1
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	225a      	movs	r2, #90	; 0x5a
 8003372:	5a9b      	ldrh	r3, [r3, r2]
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b299      	uxth	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	225a      	movs	r2, #90	; 0x5a
 800337e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	225a      	movs	r2, #90	; 0x5a
 8003384:	5a9b      	ldrh	r3, [r3, r2]
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d178      	bne.n	800347e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338c:	f3ef 8310 	mrs	r3, PRIMASK
 8003390:	61bb      	str	r3, [r7, #24]
  return(result);
 8003392:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
 8003396:	2301      	movs	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4936      	ldr	r1, [pc, #216]	; (8003488 <UART_RxISR_8BIT+0x164>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
 80033c8:	2301      	movs	r3, #1
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	2b01      	cmp	r3, #1
 8003402:	d12f      	bne.n	8003464 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003410:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2110      	movs	r1, #16
 800342c:	438a      	bics	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2210      	movs	r2, #16
 8003444:	4013      	ands	r3, r2
 8003446:	2b10      	cmp	r3, #16
 8003448:	d103      	bne.n	8003452 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2210      	movs	r2, #16
 8003450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2258      	movs	r2, #88	; 0x58
 8003456:	5a9a      	ldrh	r2, [r3, r2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff fb01 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003462:	e00c      	b.n	800347e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f7fc ff12 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 800346c:	e007      	b.n	800347e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2108      	movs	r1, #8
 800347a:	430a      	orrs	r2, r1
 800347c:	619a      	str	r2, [r3, #24]
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b010      	add	sp, #64	; 0x40
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	fffffedf 	.word	0xfffffedf

0800348c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b090      	sub	sp, #64	; 0x40
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003494:	203e      	movs	r0, #62	; 0x3e
 8003496:	183b      	adds	r3, r7, r0
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	215c      	movs	r1, #92	; 0x5c
 800349c:	5a52      	ldrh	r2, [r2, r1]
 800349e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a4:	2b22      	cmp	r3, #34	; 0x22
 80034a6:	d000      	beq.n	80034aa <UART_RxISR_16BIT+0x1e>
 80034a8:	e095      	b.n	80035d6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	213c      	movs	r1, #60	; 0x3c
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80034b4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	183a      	adds	r2, r7, r0
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	4013      	ands	r3, r2
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	225a      	movs	r2, #90	; 0x5a
 80034da:	5a9b      	ldrh	r3, [r3, r2]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b299      	uxth	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	225a      	movs	r2, #90	; 0x5a
 80034e6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	225a      	movs	r2, #90	; 0x5a
 80034ec:	5a9b      	ldrh	r3, [r3, r2]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d178      	bne.n	80035e6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	617b      	str	r3, [r7, #20]
  return(result);
 80034fa:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
 80034fe:	2301      	movs	r3, #1
 8003500:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4936      	ldr	r1, [pc, #216]	; (80035f0 <UART_RxISR_16BIT+0x164>)
 8003516:	400a      	ands	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	623b      	str	r3, [r7, #32]
  return(result);
 800352c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
 8003530:	2301      	movs	r3, #1
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003568:	2b01      	cmp	r3, #1
 800356a:	d12f      	bne.n	80035cc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003572:	f3ef 8310 	mrs	r3, PRIMASK
 8003576:	60bb      	str	r3, [r7, #8]
  return(result);
 8003578:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357c:	2301      	movs	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2110      	movs	r1, #16
 8003594:	438a      	bics	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2210      	movs	r2, #16
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d103      	bne.n	80035ba <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2210      	movs	r2, #16
 80035b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2258      	movs	r2, #88	; 0x58
 80035be:	5a9a      	ldrh	r2, [r3, r2]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0011      	movs	r1, r2
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7ff fa4d 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035ca:	e00c      	b.n	80035e6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7fc fe5e 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 80035d4:	e007      	b.n	80035e6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2108      	movs	r1, #8
 80035e2:	430a      	orrs	r2, r1
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b010      	add	sp, #64	; 0x40
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	fffffedf 	.word	0xfffffedf

080035f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle(SPI_HandleTypeDef hspi1)
{
 8003604:	b084      	sub	sp, #16
 8003606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003608:	b09d      	sub	sp, #116	; 0x74
 800360a:	af18      	add	r7, sp, #96	; 0x60
 800360c:	2428      	movs	r4, #40	; 0x28
 800360e:	193c      	adds	r4, r7, r4
 8003610:	6020      	str	r0, [r4, #0]
 8003612:	6061      	str	r1, [r4, #4]
 8003614:	60a2      	str	r2, [r4, #8]
 8003616:	60e3      	str	r3, [r4, #12]
	for (int i = 0; i < 8; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e007      	b.n	800362e <AroundEdgeCube_Handle+0x2a>
	{
		column_around_edge[i] = 0;
 800361e:	4a3d      	ldr	r2, [pc, #244]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	18d3      	adds	r3, r2, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b07      	cmp	r3, #7
 8003632:	ddf4      	ble.n	800361e <AroundEdgeCube_Handle+0x1a>
	}
	layer_around_edge = 0;
 8003634:	4b38      	ldr	r3, [pc, #224]	; (8003718 <AroundEdgeCube_Handle+0x114>)
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <AroundEdgeCube_Handle+0x118>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <AroundEdgeCube_Handle+0x44>
 8003642:	2b01      	cmp	r3, #1
 8003644:	d02f      	beq.n	80036a6 <AroundEdgeCube_Handle+0xa2>
				column_around_edge[i] = 0;
			}
			TransmitData(column_around_edge, layer_around_edge, hspi1);
			position_layer = TOP_N_BOTTOM_CUBE;
		default:
			break;
 8003646:	e05c      	b.n	8003702 <AroundEdgeCube_Handle+0xfe>
			layer_around_edge = 0x81;
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <AroundEdgeCube_Handle+0x114>)
 800364a:	2281      	movs	r2, #129	; 0x81
 800364c:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 8003650:	22ff      	movs	r2, #255	; 0xff
 8003652:	71da      	strb	r2, [r3, #7]
 8003654:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 8003656:	79da      	ldrb	r2, [r3, #7]
 8003658:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 800365a:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800365c:	2301      	movs	r3, #1
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	e007      	b.n	8003672 <AroundEdgeCube_Handle+0x6e>
				column_around_edge[i] = 0x81;
 8003662:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	18d3      	adds	r3, r2, r3
 8003668:	2281      	movs	r2, #129	; 0x81
 800366a:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3301      	adds	r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b06      	cmp	r3, #6
 8003676:	ddf4      	ble.n	8003662 <AroundEdgeCube_Handle+0x5e>
			TransmitData(column_around_edge, layer_around_edge, hspi1);
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <AroundEdgeCube_Handle+0x114>)
 800367a:	781e      	ldrb	r6, [r3, #0]
 800367c:	2328      	movs	r3, #40	; 0x28
 800367e:	18fc      	adds	r4, r7, r3
 8003680:	4d24      	ldr	r5, [pc, #144]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 8003682:	466b      	mov	r3, sp
 8003684:	0018      	movs	r0, r3
 8003686:	0023      	movs	r3, r4
 8003688:	3308      	adds	r3, #8
 800368a:	225c      	movs	r2, #92	; 0x5c
 800368c:	0019      	movs	r1, r3
 800368e:	f002 fa39 	bl	8005b04 <memcpy>
 8003692:	6822      	ldr	r2, [r4, #0]
 8003694:	6863      	ldr	r3, [r4, #4]
 8003696:	0031      	movs	r1, r6
 8003698:	0028      	movs	r0, r5
 800369a:	f002 f9c5 	bl	8005a28 <TransmitData>
			position_layer = MIDDLE_CUBE;
 800369e:	4b1f      	ldr	r3, [pc, #124]	; (800371c <AroundEdgeCube_Handle+0x118>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
			break;
 80036a4:	e02e      	b.n	8003704 <AroundEdgeCube_Handle+0x100>
			layer_around_edge = 0x7e;
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <AroundEdgeCube_Handle+0x114>)
 80036a8:	227e      	movs	r2, #126	; 0x7e
 80036aa:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 80036ae:	2281      	movs	r2, #129	; 0x81
 80036b0:	71da      	strb	r2, [r3, #7]
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 80036b4:	79da      	ldrb	r2, [r3, #7]
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 80036b8:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 80036ba:	2301      	movs	r3, #1
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	e007      	b.n	80036d0 <AroundEdgeCube_Handle+0xcc>
				column_around_edge[i] = 0;
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	18d3      	adds	r3, r2, r3
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3301      	adds	r3, #1
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	ddf4      	ble.n	80036c0 <AroundEdgeCube_Handle+0xbc>
			TransmitData(column_around_edge, layer_around_edge, hspi1);
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <AroundEdgeCube_Handle+0x114>)
 80036d8:	781e      	ldrb	r6, [r3, #0]
 80036da:	2328      	movs	r3, #40	; 0x28
 80036dc:	18fc      	adds	r4, r7, r3
 80036de:	4d0d      	ldr	r5, [pc, #52]	; (8003714 <AroundEdgeCube_Handle+0x110>)
 80036e0:	466b      	mov	r3, sp
 80036e2:	0018      	movs	r0, r3
 80036e4:	0023      	movs	r3, r4
 80036e6:	3308      	adds	r3, #8
 80036e8:	225c      	movs	r2, #92	; 0x5c
 80036ea:	0019      	movs	r1, r3
 80036ec:	f002 fa0a 	bl	8005b04 <memcpy>
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	0031      	movs	r1, r6
 80036f6:	0028      	movs	r0, r5
 80036f8:	f002 f996 	bl	8005a28 <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <AroundEdgeCube_Handle+0x118>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
			break;
 8003702:	46c0      	nop			; (mov r8, r8)
	}
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b005      	add	sp, #20
 800370a:	bcf0      	pop	{r4, r5, r6, r7}
 800370c:	bc08      	pop	{r3}
 800370e:	b004      	add	sp, #16
 8003710:	4718      	bx	r3
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	200001a4 	.word	0x200001a4
 8003718:	200001a0 	.word	0x200001a0
 800371c:	200001ac 	.word	0x200001ac

08003720 <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <AroundEdgeCube_Set_State+0x38>)
 8003728:	2205      	movs	r2, #5
 800372a:	701a      	strb	r2, [r3, #0]
	layer_around_edge = 0;
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <AroundEdgeCube_Set_State+0x3c>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	e007      	b.n	8003748 <AroundEdgeCube_Set_State+0x28>
	{
		column_around_edge[i] = 0;
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <AroundEdgeCube_Set_State+0x40>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	18d3      	adds	r3, r2, r3
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3301      	adds	r3, #1
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b07      	cmp	r3, #7
 800374c:	ddf4      	ble.n	8003738 <AroundEdgeCube_Set_State+0x18>
	}
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000010 	.word	0x20000010
 800375c:	200001a0 	.word	0x200001a0
 8003760:	200001a4 	.word	0x200001a4

08003764 <Btn_press_short_Callback>:
{

}

__weak void Btn_press_short_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	000a      	movs	r2, r1
 800376e:	1cbb      	adds	r3, r7, #2
 8003770:	801a      	strh	r2, [r3, #0]

}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b002      	add	sp, #8
 8003778:	bd80      	pop	{r7, pc}

0800377a <Btn_release_Callback>:

__weak void Btn_release_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	000a      	movs	r2, r1
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	801a      	strh	r2, [r3, #0]

}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}

08003790 <Btn_press_timeout_Callback>:

__weak void Btn_press_timeout_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	000a      	movs	r2, r1
 800379a:	1cbb      	adds	r3, r7, #2
 800379c:	801a      	strh	r2, [r3, #0]

}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b002      	add	sp, #8
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <Btn_Handle>:

void Btn_Handle(Btn_Typedef *BtnX)
{
 80037a6:	b5b0      	push	{r4, r5, r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
//*****************Loc nhieu******************//
	uint8_t status = HAL_GPIO_ReadPin(BtnX->GPIOx, BtnX->GPIO_Pin);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8a9b      	ldrh	r3, [r3, #20]
 80037b6:	250f      	movs	r5, #15
 80037b8:	197c      	adds	r4, r7, r5
 80037ba:	0019      	movs	r1, r3
 80037bc:	0010      	movs	r0, r2
 80037be:	f7fd fc05 	bl	8000fcc <HAL_GPIO_ReadPin>
 80037c2:	0003      	movs	r3, r0
 80037c4:	7023      	strb	r3, [r4, #0]
	if (status != BtnX->Btn_filter)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	789b      	ldrb	r3, [r3, #2]
 80037ca:	197a      	adds	r2, r7, r5
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d00b      	beq.n	80037ea <Btn_Handle+0x44>
	{
		BtnX->Btn_filter = status;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	197a      	adds	r2, r7, r5
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	709a      	strb	r2, [r3, #2]
		BtnX->Is_debouncing = 1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	70da      	strb	r2, [r3, #3]
		BtnX->Time_debounce = HAL_GetTick();
 80037e0:	f7fd f926 	bl	8000a30 <HAL_GetTick>
 80037e4:	0002      	movs	r2, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	609a      	str	r2, [r3, #8]
	}

//*****************Xac nhan tin hieu******************//
	if (BtnX->Is_debouncing && (HAL_GetTick()-BtnX->Time_debounce >= 15))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	78db      	ldrb	r3, [r3, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <Btn_Handle+0x6a>
 80037f2:	f7fd f91d 	bl	8000a30 <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b0e      	cmp	r3, #14
 8003800:	d906      	bls.n	8003810 <Btn_Handle+0x6a>
	{
		BtnX->Btn_current = BtnX->Btn_filter;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	789a      	ldrb	r2, [r3, #2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	701a      	strb	r2, [r3, #0]
		BtnX->Is_debouncing = 0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	70da      	strb	r2, [r3, #3]
	}

//*****************Nhan nha******************//
	if (BtnX->Btn_current != BtnX->Btn_last)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	429a      	cmp	r2, r3
 800381a:	d035      	beq.n	8003888 <Btn_Handle+0xe2>
	{
		if (BtnX->Btn_current == 0)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d110      	bne.n	8003846 <Btn_Handle+0xa0>
		{
			BtnX->Is_press_timeout = 1;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	711a      	strb	r2, [r3, #4]
			Btn_press_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8a9b      	ldrh	r3, [r3, #20]
 8003832:	0019      	movs	r1, r3
 8003834:	0010      	movs	r0, r2
 8003836:	f001 fcff 	bl	8005238 <Btn_press_Callback>
			BtnX->Time_start_press = HAL_GetTick();
 800383a:	f7fd f8f9 	bl	8000a30 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e01c      	b.n	8003880 <Btn_Handle+0xda>
		} else
		{
			if (HAL_GetTick() - BtnX->Time_start_press <= 1000)
 8003846:	f7fd f8f3 	bl	8000a30 <HAL_GetTick>
 800384a:	0002      	movs	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	1ad2      	subs	r2, r2, r3
 8003852:	23fa      	movs	r3, #250	; 0xfa
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	429a      	cmp	r2, r3
 8003858:	d807      	bhi.n	800386a <Btn_Handle+0xc4>
			{
				Btn_press_short_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8a9b      	ldrh	r3, [r3, #20]
 8003862:	0019      	movs	r1, r3
 8003864:	0010      	movs	r0, r2
 8003866:	f7ff ff7d 	bl	8003764 <Btn_press_short_Callback>
			}
			Btn_release_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8a9b      	ldrh	r3, [r3, #20]
 8003872:	0019      	movs	r1, r3
 8003874:	0010      	movs	r0, r2
 8003876:	f7ff ff80 	bl	800377a <Btn_release_Callback>
			BtnX->Is_press_timeout = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	711a      	strb	r2, [r3, #4]
		}
		BtnX->Btn_last = BtnX->Btn_current;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	705a      	strb	r2, [r3, #1]
	}
	//*****************Nhan giu******************//
	if (BtnX->Is_press_timeout && (HAL_GetTick() - BtnX->Time_start_press >= 2000))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d014      	beq.n	80038ba <Btn_Handle+0x114>
 8003890:	f7fd f8ce 	bl	8000a30 <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	23fa      	movs	r3, #250	; 0xfa
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d30a      	bcc.n	80038ba <Btn_Handle+0x114>
	{
		Btn_press_timeout_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8a9b      	ldrh	r3, [r3, #20]
 80038ac:	0019      	movs	r1, r3
 80038ae:	0010      	movs	r0, r2
 80038b0:	f7ff ff6e 	bl	8003790 <Btn_press_timeout_Callback>
		BtnX->Is_press_timeout = 0;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	711a      	strb	r2, [r3, #4]
	}
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b004      	add	sp, #16
 80038c0:	bdb0      	pop	{r4, r5, r7, pc}

080038c2 <Btn_Init>:

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	1dbb      	adds	r3, r7, #6
 80038ce:	801a      	strh	r2, [r3, #0]
	BtnX->GPIOx = GPIOx;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1dba      	adds	r2, r7, #6
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	829a      	strh	r2, [r3, #20]

}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube(SPI_HandleTypeDef hspi1)
{
 80038e6:	b084      	sub	sp, #16
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	b09d      	sub	sp, #116	; 0x74
 80038ec:	af18      	add	r7, sp, #96	; 0x60
 80038ee:	2428      	movs	r4, #40	; 0x28
 80038f0:	193c      	adds	r4, r7, r4
 80038f2:	6020      	str	r0, [r4, #0]
 80038f4:	6061      	str	r1, [r4, #4]
 80038f6:	60a2      	str	r2, [r4, #8]
 80038f8:	60e3      	str	r3, [r4, #12]
	uint8_t column[8], layer;
	layer = 0x00;
 80038fa:	230b      	movs	r3, #11
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e007      	b.n	8003918 <clearCube+0x32>
	{
		column[i] = 0x00;
 8003908:	003a      	movs	r2, r7
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b07      	cmp	r3, #7
 800391c:	ddf4      	ble.n	8003908 <clearCube+0x22>
	}
	TransmitData(column, layer, hspi1);
 800391e:	2328      	movs	r3, #40	; 0x28
 8003920:	18fc      	adds	r4, r7, r3
 8003922:	230b      	movs	r3, #11
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	781e      	ldrb	r6, [r3, #0]
 8003928:	003d      	movs	r5, r7
 800392a:	466b      	mov	r3, sp
 800392c:	0018      	movs	r0, r3
 800392e:	0023      	movs	r3, r4
 8003930:	3308      	adds	r3, #8
 8003932:	225c      	movs	r2, #92	; 0x5c
 8003934:	0019      	movs	r1, r3
 8003936:	f002 f8e5 	bl	8005b04 <memcpy>
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	6863      	ldr	r3, [r4, #4]
 800393e:	0031      	movs	r1, r6
 8003940:	0028      	movs	r0, r5
 8003942:	f002 f871 	bl	8005a28 <TransmitData>
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b005      	add	sp, #20
 800394c:	bcf0      	pop	{r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	b004      	add	sp, #16
 8003952:	4718      	bx	r3

08003954 <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle(SPI_HandleTypeDef hspi1)
{
 8003954:	b084      	sub	sp, #16
 8003956:	b5b0      	push	{r4, r5, r7, lr}
 8003958:	b096      	sub	sp, #88	; 0x58
 800395a:	af16      	add	r7, sp, #88	; 0x58
 800395c:	2410      	movs	r4, #16
 800395e:	193c      	adds	r4, r7, r4
 8003960:	6020      	str	r0, [r4, #0]
 8003962:	6061      	str	r1, [r4, #4]
 8003964:	60a2      	str	r2, [r4, #8]
 8003966:	60e3      	str	r3, [r4, #12]
	switch (w_number)
 8003968:	4bc2      	ldr	r3, [pc, #776]	; (8003c74 <CountDownCube_Handle+0x320>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b09      	cmp	r3, #9
 800396e:	d900      	bls.n	8003972 <CountDownCube_Handle+0x1e>
 8003970:	e306      	b.n	8003f80 <CountDownCube_Handle+0x62c>
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	4bc0      	ldr	r3, [pc, #768]	; (8003c78 <CountDownCube_Handle+0x324>)
 8003976:	18d3      	adds	r3, r2, r3
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	469f      	mov	pc, r3
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 800397c:	f7fd f858 	bl	8000a30 <HAL_GetTick>
 8003980:	0002      	movs	r2, r0
 8003982:	4bbe      	ldr	r3, [pc, #760]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2246      	movs	r2, #70	; 0x46
 800398a:	4293      	cmp	r3, r2
 800398c:	d32f      	bcc.n	80039ee <CountDownCube_Handle+0x9a>
			{
				if (direction == 1 && (i < 8))  i++;
 800398e:	4bbc      	ldr	r3, [pc, #752]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <CountDownCube_Handle+0x54>
 8003996:	4bbb      	ldr	r3, [pc, #748]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b07      	cmp	r3, #7
 800399c:	dc04      	bgt.n	80039a8 <CountDownCube_Handle+0x54>
 800399e:	4bb9      	ldr	r3, [pc, #740]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	4bb7      	ldr	r3, [pc, #732]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039a6:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 80039a8:	4bb6      	ldr	r3, [pc, #728]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b07      	cmp	r3, #7
 80039ae:	dd02      	ble.n	80039b6 <CountDownCube_Handle+0x62>
 80039b0:	4bb3      	ldr	r3, [pc, #716]	; (8003c80 <CountDownCube_Handle+0x32c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80039b6:	4bb2      	ldr	r3, [pc, #712]	; (8003c80 <CountDownCube_Handle+0x32c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d108      	bne.n	80039d0 <CountDownCube_Handle+0x7c>
 80039be:	4bb1      	ldr	r3, [pc, #708]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dd04      	ble.n	80039d0 <CountDownCube_Handle+0x7c>
 80039c6:	4baf      	ldr	r3, [pc, #700]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	4bad      	ldr	r3, [pc, #692]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039ce:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80039d0:	4bac      	ldr	r3, [pc, #688]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <CountDownCube_Handle+0x90>
				{
					direction = 1;
 80039d8:	4ba9      	ldr	r3, [pc, #676]	; (8003c80 <CountDownCube_Handle+0x32c>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 80039de:	4ba5      	ldr	r3, [pc, #660]	; (8003c74 <CountDownCube_Handle+0x320>)
 80039e0:	2208      	movs	r2, #8
 80039e2:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80039e4:	f7fd f824 	bl	8000a30 <HAL_GetTick>
 80039e8:	0002      	movs	r2, r0
 80039ea:	4ba4      	ldr	r3, [pc, #656]	; (8003c7c <CountDownCube_Handle+0x328>)
 80039ec:	601a      	str	r2, [r3, #0]
			}

			DigitNine(i, hspi1);
 80039ee:	4ba5      	ldr	r3, [pc, #660]	; (8003c84 <CountDownCube_Handle+0x330>)
 80039f0:	681d      	ldr	r5, [r3, #0]
 80039f2:	2310      	movs	r3, #16
 80039f4:	18fc      	adds	r4, r7, r3
 80039f6:	466b      	mov	r3, sp
 80039f8:	0018      	movs	r0, r3
 80039fa:	0023      	movs	r3, r4
 80039fc:	330c      	adds	r3, #12
 80039fe:	2258      	movs	r2, #88	; 0x58
 8003a00:	0019      	movs	r1, r3
 8003a02:	f002 f87f 	bl	8005b04 <memcpy>
 8003a06:	6821      	ldr	r1, [r4, #0]
 8003a08:	6862      	ldr	r2, [r4, #4]
 8003a0a:	68a3      	ldr	r3, [r4, #8]
 8003a0c:	0028      	movs	r0, r5
 8003a0e:	f000 faef 	bl	8003ff0 <DigitNine>
		break;
 8003a12:	e2b6      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003a14:	f7fd f80c 	bl	8000a30 <HAL_GetTick>
 8003a18:	0002      	movs	r2, r0
 8003a1a:	4b98      	ldr	r3, [pc, #608]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2246      	movs	r2, #70	; 0x46
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d32f      	bcc.n	8003a86 <CountDownCube_Handle+0x132>
			{

				if (direction == 1 && (i < 8))  i++;
 8003a26:	4b96      	ldr	r3, [pc, #600]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <CountDownCube_Handle+0xec>
 8003a2e:	4b95      	ldr	r3, [pc, #596]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b07      	cmp	r3, #7
 8003a34:	dc04      	bgt.n	8003a40 <CountDownCube_Handle+0xec>
 8003a36:	4b93      	ldr	r3, [pc, #588]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	4b91      	ldr	r3, [pc, #580]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a3e:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003a40:	4b90      	ldr	r3, [pc, #576]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b07      	cmp	r3, #7
 8003a46:	dd02      	ble.n	8003a4e <CountDownCube_Handle+0xfa>
 8003a48:	4b8d      	ldr	r3, [pc, #564]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003a4e:	4b8c      	ldr	r3, [pc, #560]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <CountDownCube_Handle+0x114>
 8003a56:	4b8b      	ldr	r3, [pc, #556]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	dd04      	ble.n	8003a68 <CountDownCube_Handle+0x114>
 8003a5e:	4b89      	ldr	r3, [pc, #548]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	4b87      	ldr	r3, [pc, #540]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a66:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003a68:	4b86      	ldr	r3, [pc, #536]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <CountDownCube_Handle+0x128>
				{
					direction = 1;
 8003a70:	4b83      	ldr	r3, [pc, #524]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <CountDownCube_Handle+0x320>)
 8003a78:	2207      	movs	r2, #7
 8003a7a:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003a7c:	f7fc ffd8 	bl	8000a30 <HAL_GetTick>
 8003a80:	0002      	movs	r2, r0
 8003a82:	4b7e      	ldr	r3, [pc, #504]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003a84:	601a      	str	r2, [r3, #0]
			}

			DigitEight(i, hspi1);
 8003a86:	4b7f      	ldr	r3, [pc, #508]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003a88:	681d      	ldr	r5, [r3, #0]
 8003a8a:	2310      	movs	r3, #16
 8003a8c:	18fc      	adds	r4, r7, r3
 8003a8e:	466b      	mov	r3, sp
 8003a90:	0018      	movs	r0, r3
 8003a92:	0023      	movs	r3, r4
 8003a94:	330c      	adds	r3, #12
 8003a96:	2258      	movs	r2, #88	; 0x58
 8003a98:	0019      	movs	r1, r3
 8003a9a:	f002 f833 	bl	8005b04 <memcpy>
 8003a9e:	6821      	ldr	r1, [r4, #0]
 8003aa0:	6862      	ldr	r2, [r4, #4]
 8003aa2:	68a3      	ldr	r3, [r4, #8]
 8003aa4:	0028      	movs	r0, r5
 8003aa6:	f000 fb3d 	bl	8004124 <DigitEight>
		break;
 8003aaa:	e26a      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003aac:	f7fc ffc0 	bl	8000a30 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	4b72      	ldr	r3, [pc, #456]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2246      	movs	r2, #70	; 0x46
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d32f      	bcc.n	8003b1e <CountDownCube_Handle+0x1ca>
			{

				if (direction == 1 && (i < 8))  i++;
 8003abe:	4b70      	ldr	r3, [pc, #448]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d108      	bne.n	8003ad8 <CountDownCube_Handle+0x184>
 8003ac6:	4b6f      	ldr	r3, [pc, #444]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b07      	cmp	r3, #7
 8003acc:	dc04      	bgt.n	8003ad8 <CountDownCube_Handle+0x184>
 8003ace:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	4b6b      	ldr	r3, [pc, #428]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003ad6:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003ad8:	4b6a      	ldr	r3, [pc, #424]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b07      	cmp	r3, #7
 8003ade:	dd02      	ble.n	8003ae6 <CountDownCube_Handle+0x192>
 8003ae0:	4b67      	ldr	r3, [pc, #412]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003ae6:	4b66      	ldr	r3, [pc, #408]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <CountDownCube_Handle+0x1ac>
 8003aee:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dd04      	ble.n	8003b00 <CountDownCube_Handle+0x1ac>
 8003af6:	4b63      	ldr	r3, [pc, #396]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003afe:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003b00:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <CountDownCube_Handle+0x1c0>
				{
					direction = 1;
 8003b08:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 8003b0e:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <CountDownCube_Handle+0x320>)
 8003b10:	2206      	movs	r2, #6
 8003b12:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003b14:	f7fc ff8c 	bl	8000a30 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	4b58      	ldr	r3, [pc, #352]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003b1c:	601a      	str	r2, [r3, #0]
			}

			DigitSeven(i, hspi1);
 8003b1e:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b20:	681d      	ldr	r5, [r3, #0]
 8003b22:	2310      	movs	r3, #16
 8003b24:	18fc      	adds	r4, r7, r3
 8003b26:	466b      	mov	r3, sp
 8003b28:	0018      	movs	r0, r3
 8003b2a:	0023      	movs	r3, r4
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	2258      	movs	r2, #88	; 0x58
 8003b30:	0019      	movs	r1, r3
 8003b32:	f001 ffe7 	bl	8005b04 <memcpy>
 8003b36:	6821      	ldr	r1, [r4, #0]
 8003b38:	6862      	ldr	r2, [r4, #4]
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	f000 fb41 	bl	80041c4 <DigitSeven>

			break;
 8003b42:	e21e      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003b44:	f7fc ff74 	bl	8000a30 <HAL_GetTick>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2246      	movs	r2, #70	; 0x46
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d32f      	bcc.n	8003bb6 <CountDownCube_Handle+0x262>
			{

				if (direction == 1 && (i < 8))  i++;
 8003b56:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <CountDownCube_Handle+0x21c>
 8003b5e:	4b49      	ldr	r3, [pc, #292]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b07      	cmp	r3, #7
 8003b64:	dc04      	bgt.n	8003b70 <CountDownCube_Handle+0x21c>
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b6e:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003b70:	4b44      	ldr	r3, [pc, #272]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	dd02      	ble.n	8003b7e <CountDownCube_Handle+0x22a>
 8003b78:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003b7e:	4b40      	ldr	r3, [pc, #256]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <CountDownCube_Handle+0x244>
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	dd04      	ble.n	8003b98 <CountDownCube_Handle+0x244>
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1e5a      	subs	r2, r3, #1
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b96:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <CountDownCube_Handle+0x258>
				{
					direction = 1;
 8003ba0:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <CountDownCube_Handle+0x320>)
 8003ba8:	2205      	movs	r2, #5
 8003baa:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003bac:	f7fc ff40 	bl	8000a30 <HAL_GetTick>
 8003bb0:	0002      	movs	r2, r0
 8003bb2:	4b32      	ldr	r3, [pc, #200]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003bb4:	601a      	str	r2, [r3, #0]
			}

			DigitSix(i, hspi1);
 8003bb6:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003bb8:	681d      	ldr	r5, [r3, #0]
 8003bba:	2310      	movs	r3, #16
 8003bbc:	18fc      	adds	r4, r7, r3
 8003bbe:	466b      	mov	r3, sp
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	0023      	movs	r3, r4
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	2258      	movs	r2, #88	; 0x58
 8003bc8:	0019      	movs	r1, r3
 8003bca:	f001 ff9b 	bl	8005b04 <memcpy>
 8003bce:	6821      	ldr	r1, [r4, #0]
 8003bd0:	6862      	ldr	r2, [r4, #4]
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	0028      	movs	r0, r5
 8003bd6:	f000 fb51 	bl	800427c <DigitSix>

			break;
 8003bda:	e1d2      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003bdc:	f7fc ff28 	bl	8000a30 <HAL_GetTick>
 8003be0:	0002      	movs	r2, r0
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2246      	movs	r2, #70	; 0x46
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d32f      	bcc.n	8003c4e <CountDownCube_Handle+0x2fa>
			{

				if (direction == 1 && (i < 8))  i++;
 8003bee:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <CountDownCube_Handle+0x2b4>
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b07      	cmp	r3, #7
 8003bfc:	dc04      	bgt.n	8003c08 <CountDownCube_Handle+0x2b4>
 8003bfe:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c06:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003c08:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b07      	cmp	r3, #7
 8003c0e:	dd02      	ble.n	8003c16 <CountDownCube_Handle+0x2c2>
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d108      	bne.n	8003c30 <CountDownCube_Handle+0x2dc>
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dd04      	ble.n	8003c30 <CountDownCube_Handle+0x2dc>
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	1e5a      	subs	r2, r3, #1
 8003c2c:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c2e:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <CountDownCube_Handle+0x2f0>
				{
					direction = 1;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <CountDownCube_Handle+0x32c>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <CountDownCube_Handle+0x320>)
 8003c40:	2204      	movs	r2, #4
 8003c42:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003c44:	f7fc fef4 	bl	8000a30 <HAL_GetTick>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <CountDownCube_Handle+0x328>)
 8003c4c:	601a      	str	r2, [r3, #0]
			}

			DigitFive(i, hspi1);
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <CountDownCube_Handle+0x330>)
 8003c50:	681d      	ldr	r5, [r3, #0]
 8003c52:	2310      	movs	r3, #16
 8003c54:	18fc      	adds	r4, r7, r3
 8003c56:	466b      	mov	r3, sp
 8003c58:	0018      	movs	r0, r3
 8003c5a:	0023      	movs	r3, r4
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	2258      	movs	r2, #88	; 0x58
 8003c60:	0019      	movs	r1, r3
 8003c62:	f001 ff4f 	bl	8005b04 <memcpy>
 8003c66:	6821      	ldr	r1, [r4, #0]
 8003c68:	6862      	ldr	r2, [r4, #4]
 8003c6a:	68a3      	ldr	r3, [r4, #8]
 8003c6c:	0028      	movs	r0, r5
 8003c6e:	f000 fbb9 	bl	80043e4 <DigitFive>
			break;
 8003c72:	e186      	b.n	8003f82 <CountDownCube_Handle+0x62e>
 8003c74:	20000009 	.word	0x20000009
 8003c78:	08006ce4 	.word	0x08006ce4
 8003c7c:	200001b8 	.word	0x200001b8
 8003c80:	2000000c 	.word	0x2000000c
 8003c84:	200001bc 	.word	0x200001bc

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003c88:	f7fc fed2 	bl	8000a30 <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	4bc0      	ldr	r3, [pc, #768]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2246      	movs	r2, #70	; 0x46
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d32f      	bcc.n	8003cfa <CountDownCube_Handle+0x3a6>
			{

				if (direction == 1 && (i < 8))  i++;
 8003c9a:	4bbe      	ldr	r3, [pc, #760]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <CountDownCube_Handle+0x360>
 8003ca2:	4bbd      	ldr	r3, [pc, #756]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b07      	cmp	r3, #7
 8003ca8:	dc04      	bgt.n	8003cb4 <CountDownCube_Handle+0x360>
 8003caa:	4bbb      	ldr	r3, [pc, #748]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	4bb9      	ldr	r3, [pc, #740]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003cb2:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003cb4:	4bb8      	ldr	r3, [pc, #736]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b07      	cmp	r3, #7
 8003cba:	dd02      	ble.n	8003cc2 <CountDownCube_Handle+0x36e>
 8003cbc:	4bb5      	ldr	r3, [pc, #724]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003cc2:	4bb4      	ldr	r3, [pc, #720]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d108      	bne.n	8003cdc <CountDownCube_Handle+0x388>
 8003cca:	4bb3      	ldr	r3, [pc, #716]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	dd04      	ble.n	8003cdc <CountDownCube_Handle+0x388>
 8003cd2:	4bb1      	ldr	r3, [pc, #708]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	4baf      	ldr	r3, [pc, #700]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003cda:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003cdc:	4bae      	ldr	r3, [pc, #696]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <CountDownCube_Handle+0x39c>
				{
					direction = 1;
 8003ce4:	4bab      	ldr	r3, [pc, #684]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 8003cea:	4bac      	ldr	r3, [pc, #688]	; (8003f9c <CountDownCube_Handle+0x648>)
 8003cec:	2203      	movs	r2, #3
 8003cee:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003cf0:	f7fc fe9e 	bl	8000a30 <HAL_GetTick>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	4ba6      	ldr	r3, [pc, #664]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003cf8:	601a      	str	r2, [r3, #0]
			}

			DigitFour(i, hspi1);
 8003cfa:	4ba7      	ldr	r3, [pc, #668]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	2310      	movs	r3, #16
 8003d00:	18fc      	adds	r4, r7, r3
 8003d02:	466b      	mov	r3, sp
 8003d04:	0018      	movs	r0, r3
 8003d06:	0023      	movs	r3, r4
 8003d08:	330c      	adds	r3, #12
 8003d0a:	2258      	movs	r2, #88	; 0x58
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	f001 fef9 	bl	8005b04 <memcpy>
 8003d12:	6821      	ldr	r1, [r4, #0]
 8003d14:	6862      	ldr	r2, [r4, #4]
 8003d16:	68a3      	ldr	r3, [r4, #8]
 8003d18:	0028      	movs	r0, r5
 8003d1a:	f000 fc17 	bl	800454c <DigitFour>
			break;
 8003d1e:	e130      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003d20:	f7fc fe86 	bl	8000a30 <HAL_GetTick>
 8003d24:	0002      	movs	r2, r0
 8003d26:	4b9a      	ldr	r3, [pc, #616]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2246      	movs	r2, #70	; 0x46
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d32f      	bcc.n	8003d92 <CountDownCube_Handle+0x43e>
			{

				if (direction == 1 && (i < 8))  i++;
 8003d32:	4b98      	ldr	r3, [pc, #608]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d108      	bne.n	8003d4c <CountDownCube_Handle+0x3f8>
 8003d3a:	4b97      	ldr	r3, [pc, #604]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b07      	cmp	r3, #7
 8003d40:	dc04      	bgt.n	8003d4c <CountDownCube_Handle+0x3f8>
 8003d42:	4b95      	ldr	r3, [pc, #596]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	4b93      	ldr	r3, [pc, #588]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d4a:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003d4c:	4b92      	ldr	r3, [pc, #584]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b07      	cmp	r3, #7
 8003d52:	dd02      	ble.n	8003d5a <CountDownCube_Handle+0x406>
 8003d54:	4b8f      	ldr	r3, [pc, #572]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003d5a:	4b8e      	ldr	r3, [pc, #568]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d108      	bne.n	8003d74 <CountDownCube_Handle+0x420>
 8003d62:	4b8d      	ldr	r3, [pc, #564]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dd04      	ble.n	8003d74 <CountDownCube_Handle+0x420>
 8003d6a:	4b8b      	ldr	r3, [pc, #556]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	4b89      	ldr	r3, [pc, #548]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d72:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <CountDownCube_Handle+0x434>
				{
					direction = 1;
 8003d7c:	4b85      	ldr	r3, [pc, #532]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 8003d82:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <CountDownCube_Handle+0x648>)
 8003d84:	2202      	movs	r2, #2
 8003d86:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003d88:	f7fc fe52 	bl	8000a30 <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	4b80      	ldr	r3, [pc, #512]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003d90:	601a      	str	r2, [r3, #0]
			}

			DigitThree(i, hspi1);
 8003d92:	4b81      	ldr	r3, [pc, #516]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003d94:	681d      	ldr	r5, [r3, #0]
 8003d96:	2310      	movs	r3, #16
 8003d98:	18fc      	adds	r4, r7, r3
 8003d9a:	466b      	mov	r3, sp
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	0023      	movs	r3, r4
 8003da0:	330c      	adds	r3, #12
 8003da2:	2258      	movs	r2, #88	; 0x58
 8003da4:	0019      	movs	r1, r3
 8003da6:	f001 fead 	bl	8005b04 <memcpy>
 8003daa:	6821      	ldr	r1, [r4, #0]
 8003dac:	6862      	ldr	r2, [r4, #4]
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	0028      	movs	r0, r5
 8003db2:	f000 fc45 	bl	8004640 <DigitThree>
			break;
 8003db6:	e0e4      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003db8:	f7fc fe3a 	bl	8000a30 <HAL_GetTick>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2246      	movs	r2, #70	; 0x46
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d32f      	bcc.n	8003e2a <CountDownCube_Handle+0x4d6>
			{

				if (direction == 1 && (i < 8))  i++;
 8003dca:	4b72      	ldr	r3, [pc, #456]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d108      	bne.n	8003de4 <CountDownCube_Handle+0x490>
 8003dd2:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b07      	cmp	r3, #7
 8003dd8:	dc04      	bgt.n	8003de4 <CountDownCube_Handle+0x490>
 8003dda:	4b6f      	ldr	r3, [pc, #444]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	4b6d      	ldr	r3, [pc, #436]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003de2:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003de4:	4b6c      	ldr	r3, [pc, #432]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	dd02      	ble.n	8003df2 <CountDownCube_Handle+0x49e>
 8003dec:	4b69      	ldr	r3, [pc, #420]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003df2:	4b68      	ldr	r3, [pc, #416]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <CountDownCube_Handle+0x4b8>
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dd04      	ble.n	8003e0c <CountDownCube_Handle+0x4b8>
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e0a:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003e0c:	4b62      	ldr	r3, [pc, #392]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <CountDownCube_Handle+0x4cc>
				{
					direction = 1;
 8003e14:	4b5f      	ldr	r3, [pc, #380]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 8003e1a:	4b60      	ldr	r3, [pc, #384]	; (8003f9c <CountDownCube_Handle+0x648>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003e20:	f7fc fe06 	bl	8000a30 <HAL_GetTick>
 8003e24:	0002      	movs	r2, r0
 8003e26:	4b5a      	ldr	r3, [pc, #360]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003e28:	601a      	str	r2, [r3, #0]
			}

			DigitTwo(i, hspi1);
 8003e2a:	4b5b      	ldr	r3, [pc, #364]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e2c:	681d      	ldr	r5, [r3, #0]
 8003e2e:	2310      	movs	r3, #16
 8003e30:	18fc      	adds	r4, r7, r3
 8003e32:	466b      	mov	r3, sp
 8003e34:	0018      	movs	r0, r3
 8003e36:	0023      	movs	r3, r4
 8003e38:	330c      	adds	r3, #12
 8003e3a:	2258      	movs	r2, #88	; 0x58
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	f001 fe61 	bl	8005b04 <memcpy>
 8003e42:	6821      	ldr	r1, [r4, #0]
 8003e44:	6862      	ldr	r2, [r4, #4]
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	0028      	movs	r0, r5
 8003e4a:	f000 fc7b 	bl	8004744 <DigitTwo>
			break;
 8003e4e:	e098      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003e50:	f7fc fdee 	bl	8000a30 <HAL_GetTick>
 8003e54:	0002      	movs	r2, r0
 8003e56:	4b4e      	ldr	r3, [pc, #312]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2246      	movs	r2, #70	; 0x46
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d32f      	bcc.n	8003ec2 <CountDownCube_Handle+0x56e>
			{

				if (direction == 1 && (i < 8))  i++;
 8003e62:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <CountDownCube_Handle+0x528>
 8003e6a:	4b4b      	ldr	r3, [pc, #300]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b07      	cmp	r3, #7
 8003e70:	dc04      	bgt.n	8003e7c <CountDownCube_Handle+0x528>
 8003e72:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e7a:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003e7c:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	dd02      	ble.n	8003e8a <CountDownCube_Handle+0x536>
 8003e84:	4b43      	ldr	r3, [pc, #268]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003e8a:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <CountDownCube_Handle+0x550>
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	dd04      	ble.n	8003ea4 <CountDownCube_Handle+0x550>
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	1e5a      	subs	r2, r3, #1
 8003ea0:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003ea2:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <CountDownCube_Handle+0x564>
				{
					direction = 1;
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <CountDownCube_Handle+0x648>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003eb8:	f7fc fdba 	bl	8000a30 <HAL_GetTick>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003ec0:	601a      	str	r2, [r3, #0]
			}

			DigitOne(i, hspi1);
 8003ec2:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	18fc      	adds	r4, r7, r3
 8003eca:	466b      	mov	r3, sp
 8003ecc:	0018      	movs	r0, r3
 8003ece:	0023      	movs	r3, r4
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	2258      	movs	r2, #88	; 0x58
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	f001 fe15 	bl	8005b04 <memcpy>
 8003eda:	6821      	ldr	r1, [r4, #0]
 8003edc:	6862      	ldr	r2, [r4, #4]
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	0028      	movs	r0, r5
 8003ee2:	f000 fcfb 	bl	80048dc <DigitOne>
			break;
 8003ee6:	e04c      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003ee8:	f7fc fda2 	bl	8000a30 <HAL_GetTick>
 8003eec:	0002      	movs	r2, r0
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2246      	movs	r2, #70	; 0x46
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d32f      	bcc.n	8003f5a <CountDownCube_Handle+0x606>
			{

				if (direction == 1 && (i < 8))  i++;
 8003efa:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <CountDownCube_Handle+0x5c0>
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b07      	cmp	r3, #7
 8003f08:	dc04      	bgt.n	8003f14 <CountDownCube_Handle+0x5c0>
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f12:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b07      	cmp	r3, #7
 8003f1a:	dd02      	ble.n	8003f22 <CountDownCube_Handle+0x5ce>
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003f22:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <CountDownCube_Handle+0x5e8>
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	dd04      	ble.n	8003f3c <CountDownCube_Handle+0x5e8>
 8003f32:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f3a:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <CountDownCube_Handle+0x5fc>
				{
					direction = 1;
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <CountDownCube_Handle+0x640>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <CountDownCube_Handle+0x648>)
 8003f4c:	2209      	movs	r2, #9
 8003f4e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003f50:	f7fc fd6e 	bl	8000a30 <HAL_GetTick>
 8003f54:	0002      	movs	r2, r0
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <CountDownCube_Handle+0x63c>)
 8003f58:	601a      	str	r2, [r3, #0]
			}

			DigitZero(i, hspi1);
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <CountDownCube_Handle+0x644>)
 8003f5c:	681d      	ldr	r5, [r3, #0]
 8003f5e:	2310      	movs	r3, #16
 8003f60:	18fc      	adds	r4, r7, r3
 8003f62:	466b      	mov	r3, sp
 8003f64:	0018      	movs	r0, r3
 8003f66:	0023      	movs	r3, r4
 8003f68:	330c      	adds	r3, #12
 8003f6a:	2258      	movs	r2, #88	; 0x58
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	f001 fdc9 	bl	8005b04 <memcpy>
 8003f72:	6821      	ldr	r1, [r4, #0]
 8003f74:	6862      	ldr	r2, [r4, #4]
 8003f76:	68a3      	ldr	r3, [r4, #8]
 8003f78:	0028      	movs	r0, r5
 8003f7a:	f000 fd63 	bl	8004a44 <DigitZero>
			break;
 8003f7e:	e000      	b.n	8003f82 <CountDownCube_Handle+0x62e>

		default:
			break;
 8003f80:	46c0      	nop			; (mov r8, r8)
	}
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bcb0      	pop	{r4, r5, r7}
 8003f88:	bc08      	pop	{r3}
 8003f8a:	b004      	add	sp, #16
 8003f8c:	4718      	bx	r3
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	200001b8 	.word	0x200001b8
 8003f94:	2000000c 	.word	0x2000000c
 8003f98:	200001bc 	.word	0x200001bc
 8003f9c:	20000009 	.word	0x20000009

08003fa0 <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 8003fa6:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <CountDownCube_Set_Sate+0x40>)
 8003fa8:	2206      	movs	r2, #6
 8003faa:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <CountDownCube_Set_Sate+0x44>)
 8003fae:	2209      	movs	r2, #9
 8003fb0:	701a      	strb	r2, [r3, #0]
	direction = 1;
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <CountDownCube_Set_Sate+0x48>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	e007      	b.n	8003fce <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 8003fbe:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <CountDownCube_Set_Sate+0x4c>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	18d3      	adds	r3, r2, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	ddf4      	ble.n	8003fbe <CountDownCube_Set_Sate+0x1e>
	}
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	20000010 	.word	0x20000010
 8003fe4:	20000009 	.word	0x20000009
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	200001b0 	.word	0x200001b0

08003ff0 <DigitNine>:

void DigitNine(int i,SPI_HandleTypeDef hspi1)
{
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff4:	b09b      	sub	sp, #108	; 0x6c
 8003ff6:	af18      	add	r7, sp, #96	; 0x60
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	2004      	movs	r0, #4
 8003ffc:	2618      	movs	r6, #24
 8003ffe:	1980      	adds	r0, r0, r6
 8004000:	2408      	movs	r4, #8
 8004002:	46a4      	mov	ip, r4
 8004004:	44bc      	add	ip, r7
 8004006:	4460      	add	r0, ip
 8004008:	6001      	str	r1, [r0, #0]
 800400a:	6042      	str	r2, [r0, #4]
 800400c:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x7e;
 800400e:	4a44      	ldr	r2, [pc, #272]	; (8004120 <DigitNine+0x130>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	227e      	movs	r2, #126	; 0x7e
 8004016:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81, hspi1);
 8004018:	2304      	movs	r3, #4
 800401a:	199b      	adds	r3, r3, r6
 800401c:	2208      	movs	r2, #8
 800401e:	18b9      	adds	r1, r7, r2
 8004020:	185c      	adds	r4, r3, r1
 8004022:	4d3f      	ldr	r5, [pc, #252]	; (8004120 <DigitNine+0x130>)
 8004024:	466b      	mov	r3, sp
 8004026:	0018      	movs	r0, r3
 8004028:	0023      	movs	r3, r4
 800402a:	3308      	adds	r3, #8
 800402c:	225c      	movs	r2, #92	; 0x5c
 800402e:	0019      	movs	r1, r3
 8004030:	f001 fd68 	bl	8005b04 <memcpy>
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	6863      	ldr	r3, [r4, #4]
 8004038:	2181      	movs	r1, #129	; 0x81
 800403a:	0028      	movs	r0, r5
 800403c:	f001 fcf4 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xc3;
 8004040:	4a37      	ldr	r2, [pc, #220]	; (8004120 <DigitNine+0x130>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	22c3      	movs	r2, #195	; 0xc3
 8004048:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60, hspi1);
 800404a:	2304      	movs	r3, #4
 800404c:	199b      	adds	r3, r3, r6
 800404e:	2208      	movs	r2, #8
 8004050:	18b9      	adds	r1, r7, r2
 8004052:	185c      	adds	r4, r3, r1
 8004054:	4d32      	ldr	r5, [pc, #200]	; (8004120 <DigitNine+0x130>)
 8004056:	466b      	mov	r3, sp
 8004058:	0018      	movs	r0, r3
 800405a:	0023      	movs	r3, r4
 800405c:	3308      	adds	r3, #8
 800405e:	225c      	movs	r2, #92	; 0x5c
 8004060:	0019      	movs	r1, r3
 8004062:	f001 fd4f 	bl	8005b04 <memcpy>
 8004066:	6822      	ldr	r2, [r4, #0]
 8004068:	6863      	ldr	r3, [r4, #4]
 800406a:	2160      	movs	r1, #96	; 0x60
 800406c:	0028      	movs	r0, r5
 800406e:	f001 fcdb 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x03;
 8004072:	4a2b      	ldr	r2, [pc, #172]	; (8004120 <DigitNine+0x130>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	18d3      	adds	r3, r2, r3
 8004078:	2203      	movs	r2, #3
 800407a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c, hspi1);
 800407c:	2304      	movs	r3, #4
 800407e:	199b      	adds	r3, r3, r6
 8004080:	2208      	movs	r2, #8
 8004082:	18b9      	adds	r1, r7, r2
 8004084:	185c      	adds	r4, r3, r1
 8004086:	4d26      	ldr	r5, [pc, #152]	; (8004120 <DigitNine+0x130>)
 8004088:	466b      	mov	r3, sp
 800408a:	0018      	movs	r0, r3
 800408c:	0023      	movs	r3, r4
 800408e:	3308      	adds	r3, #8
 8004090:	225c      	movs	r2, #92	; 0x5c
 8004092:	0019      	movs	r1, r3
 8004094:	f001 fd36 	bl	8005b04 <memcpy>
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	210c      	movs	r1, #12
 800409e:	0028      	movs	r0, r5
 80040a0:	f001 fcc2 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xff;
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <DigitNine+0x130>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	22ff      	movs	r2, #255	; 0xff
 80040ac:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02, hspi1);
 80040ae:	2304      	movs	r3, #4
 80040b0:	199b      	adds	r3, r3, r6
 80040b2:	2208      	movs	r2, #8
 80040b4:	18b9      	adds	r1, r7, r2
 80040b6:	185c      	adds	r4, r3, r1
 80040b8:	4d19      	ldr	r5, [pc, #100]	; (8004120 <DigitNine+0x130>)
 80040ba:	466b      	mov	r3, sp
 80040bc:	0018      	movs	r0, r3
 80040be:	0023      	movs	r3, r4
 80040c0:	3308      	adds	r3, #8
 80040c2:	225c      	movs	r2, #92	; 0x5c
 80040c4:	0019      	movs	r1, r3
 80040c6:	f001 fd1d 	bl	8005b04 <memcpy>
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	2102      	movs	r1, #2
 80040d0:	0028      	movs	r0, r5
 80040d2:	f001 fca9 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x7f;
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <DigitNine+0x130>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	18d3      	adds	r3, r2, r3
 80040dc:	227f      	movs	r2, #127	; 0x7f
 80040de:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 80040e0:	2304      	movs	r3, #4
 80040e2:	199b      	adds	r3, r3, r6
 80040e4:	2208      	movs	r2, #8
 80040e6:	18ba      	adds	r2, r7, r2
 80040e8:	189c      	adds	r4, r3, r2
 80040ea:	4d0d      	ldr	r5, [pc, #52]	; (8004120 <DigitNine+0x130>)
 80040ec:	466b      	mov	r3, sp
 80040ee:	0018      	movs	r0, r3
 80040f0:	0023      	movs	r3, r4
 80040f2:	3308      	adds	r3, #8
 80040f4:	225c      	movs	r2, #92	; 0x5c
 80040f6:	0019      	movs	r1, r3
 80040f8:	f001 fd04 	bl	8005b04 <memcpy>
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	6863      	ldr	r3, [r4, #4]
 8004100:	2110      	movs	r1, #16
 8004102:	0028      	movs	r0, r5
 8004104:	f001 fc90 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 8004108:	4a05      	ldr	r2, [pc, #20]	; (8004120 <DigitNine+0x130>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	18d3      	adds	r3, r2, r3
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	b003      	add	sp, #12
 8004118:	bcf0      	pop	{r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	b004      	add	sp, #16
 800411e:	4718      	bx	r3
 8004120:	200001b0 	.word	0x200001b0

08004124 <DigitEight>:

void DigitEight(int i,SPI_HandleTypeDef hspi1)
{
 8004124:	b084      	sub	sp, #16
 8004126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004128:	b09b      	sub	sp, #108	; 0x6c
 800412a:	af18      	add	r7, sp, #96	; 0x60
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	2004      	movs	r0, #4
 8004130:	2618      	movs	r6, #24
 8004132:	1980      	adds	r0, r0, r6
 8004134:	2408      	movs	r4, #8
 8004136:	46a4      	mov	ip, r4
 8004138:	44bc      	add	ip, r7
 800413a:	4460      	add	r0, ip
 800413c:	6001      	str	r1, [r0, #0]
 800413e:	6042      	str	r2, [r0, #4]
 8004140:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xc3;
 8004142:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <DigitEight+0x9c>)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	22c3      	movs	r2, #195	; 0xc3
 800414a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66, hspi1);
 800414c:	2304      	movs	r3, #4
 800414e:	199b      	adds	r3, r3, r6
 8004150:	2208      	movs	r2, #8
 8004152:	18b9      	adds	r1, r7, r2
 8004154:	185c      	adds	r4, r3, r1
 8004156:	4d1a      	ldr	r5, [pc, #104]	; (80041c0 <DigitEight+0x9c>)
 8004158:	466b      	mov	r3, sp
 800415a:	0018      	movs	r0, r3
 800415c:	0023      	movs	r3, r4
 800415e:	3308      	adds	r3, #8
 8004160:	225c      	movs	r2, #92	; 0x5c
 8004162:	0019      	movs	r1, r3
 8004164:	f001 fcce 	bl	8005b04 <memcpy>
 8004168:	6822      	ldr	r2, [r4, #0]
 800416a:	6863      	ldr	r3, [r4, #4]
 800416c:	2166      	movs	r1, #102	; 0x66
 800416e:	0028      	movs	r0, r5
 8004170:	f001 fc5a 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x7e;
 8004174:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <DigitEight+0x9c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	227e      	movs	r2, #126	; 0x7e
 800417c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99, hspi1);
 800417e:	2304      	movs	r3, #4
 8004180:	199b      	adds	r3, r3, r6
 8004182:	2208      	movs	r2, #8
 8004184:	18ba      	adds	r2, r7, r2
 8004186:	189c      	adds	r4, r3, r2
 8004188:	4d0d      	ldr	r5, [pc, #52]	; (80041c0 <DigitEight+0x9c>)
 800418a:	466b      	mov	r3, sp
 800418c:	0018      	movs	r0, r3
 800418e:	0023      	movs	r3, r4
 8004190:	3308      	adds	r3, #8
 8004192:	225c      	movs	r2, #92	; 0x5c
 8004194:	0019      	movs	r1, r3
 8004196:	f001 fcb5 	bl	8005b04 <memcpy>
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	2199      	movs	r1, #153	; 0x99
 80041a0:	0028      	movs	r0, r5
 80041a2:	f001 fc41 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 80041a6:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <DigitEight+0x9c>)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b003      	add	sp, #12
 80041b6:	bcf0      	pop	{r4, r5, r6, r7}
 80041b8:	bc08      	pop	{r3}
 80041ba:	b004      	add	sp, #16
 80041bc:	4718      	bx	r3
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	200001b0 	.word	0x200001b0

080041c4 <DigitSeven>:

void DigitSeven(int i,SPI_HandleTypeDef hspi1)
{
 80041c4:	b084      	sub	sp, #16
 80041c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c8:	b09d      	sub	sp, #116	; 0x74
 80041ca:	af18      	add	r7, sp, #96	; 0x60
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	2004      	movs	r0, #4
 80041d0:	2428      	movs	r4, #40	; 0x28
 80041d2:	1900      	adds	r0, r0, r4
 80041d4:	19c0      	adds	r0, r0, r7
 80041d6:	6001      	str	r1, [r0, #0]
 80041d8:	6042      	str	r2, [r0, #4]
 80041da:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xff;
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <DigitSeven+0xb4>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	18d3      	adds	r3, r2, r3
 80041e2:	22ff      	movs	r2, #255	; 0xff
 80041e4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0, hspi1);
 80041e6:	2304      	movs	r3, #4
 80041e8:	191b      	adds	r3, r3, r4
 80041ea:	19dc      	adds	r4, r3, r7
 80041ec:	4d22      	ldr	r5, [pc, #136]	; (8004278 <DigitSeven+0xb4>)
 80041ee:	466b      	mov	r3, sp
 80041f0:	0018      	movs	r0, r3
 80041f2:	0023      	movs	r3, r4
 80041f4:	3308      	adds	r3, #8
 80041f6:	225c      	movs	r2, #92	; 0x5c
 80041f8:	0019      	movs	r1, r3
 80041fa:	f001 fc83 	bl	8005b04 <memcpy>
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	6863      	ldr	r3, [r4, #4]
 8004202:	21c0      	movs	r1, #192	; 0xc0
 8004204:	0028      	movs	r0, r5
 8004206:	f001 fc0f 	bl	8005a28 <TransmitData>

	for (int j = 0; j < 6; j++)
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e024      	b.n	800425a <DigitSeven+0x96>
	{
		column_countdown[i] = 0x03 << j;
 8004210:	2203      	movs	r2, #3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	409a      	lsls	r2, r3
 8004216:	0013      	movs	r3, r2
 8004218:	b2d9      	uxtb	r1, r3
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <DigitSeven+0xb4>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	18d3      	adds	r3, r2, r3
 8004220:	1c0a      	adds	r2, r1, #0
 8004222:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j, hspi1);
 8004224:	2220      	movs	r2, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	411a      	asrs	r2, r3
 800422a:	0013      	movs	r3, r2
 800422c:	b2de      	uxtb	r6, r3
 800422e:	2304      	movs	r3, #4
 8004230:	2228      	movs	r2, #40	; 0x28
 8004232:	189b      	adds	r3, r3, r2
 8004234:	19dc      	adds	r4, r3, r7
 8004236:	4d10      	ldr	r5, [pc, #64]	; (8004278 <DigitSeven+0xb4>)
 8004238:	466b      	mov	r3, sp
 800423a:	0018      	movs	r0, r3
 800423c:	0023      	movs	r3, r4
 800423e:	3308      	adds	r3, #8
 8004240:	225c      	movs	r2, #92	; 0x5c
 8004242:	0019      	movs	r1, r3
 8004244:	f001 fc5e 	bl	8005b04 <memcpy>
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	6863      	ldr	r3, [r4, #4]
 800424c:	0031      	movs	r1, r6
 800424e:	0028      	movs	r0, r5
 8004250:	f001 fbea 	bl	8005a28 <TransmitData>
	for (int j = 0; j < 6; j++)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b05      	cmp	r3, #5
 800425e:	ddd7      	ble.n	8004210 <DigitSeven+0x4c>
	}

	column_countdown[i] = 0;
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <DigitSeven+0xb4>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	18d3      	adds	r3, r2, r3
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b005      	add	sp, #20
 8004270:	bcf0      	pop	{r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	b004      	add	sp, #16
 8004276:	4718      	bx	r3
 8004278:	200001b0 	.word	0x200001b0

0800427c <DigitSix>:

void DigitSix(int i,SPI_HandleTypeDef hspi1)
{
 800427c:	b084      	sub	sp, #16
 800427e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004280:	b09b      	sub	sp, #108	; 0x6c
 8004282:	af18      	add	r7, sp, #96	; 0x60
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	2004      	movs	r0, #4
 8004288:	2618      	movs	r6, #24
 800428a:	1980      	adds	r0, r0, r6
 800428c:	2408      	movs	r4, #8
 800428e:	46a4      	mov	ip, r4
 8004290:	44bc      	add	ip, r7
 8004292:	4460      	add	r0, ip
 8004294:	6001      	str	r1, [r0, #0]
 8004296:	6042      	str	r2, [r0, #4]
 8004298:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xff;
 800429a:	4a51      	ldr	r2, [pc, #324]	; (80043e0 <DigitSix+0x164>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	18d3      	adds	r3, r2, r3
 80042a0:	22ff      	movs	r2, #255	; 0xff
 80042a2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42, hspi1);
 80042a4:	2304      	movs	r3, #4
 80042a6:	199b      	adds	r3, r3, r6
 80042a8:	2208      	movs	r2, #8
 80042aa:	18b9      	adds	r1, r7, r2
 80042ac:	185c      	adds	r4, r3, r1
 80042ae:	4d4c      	ldr	r5, [pc, #304]	; (80043e0 <DigitSix+0x164>)
 80042b0:	466b      	mov	r3, sp
 80042b2:	0018      	movs	r0, r3
 80042b4:	0023      	movs	r3, r4
 80042b6:	3308      	adds	r3, #8
 80042b8:	225c      	movs	r2, #92	; 0x5c
 80042ba:	0019      	movs	r1, r3
 80042bc:	f001 fc22 	bl	8005b04 <memcpy>
 80042c0:	6822      	ldr	r2, [r4, #0]
 80042c2:	6863      	ldr	r3, [r4, #4]
 80042c4:	2142      	movs	r1, #66	; 0x42
 80042c6:	0028      	movs	r0, r5
 80042c8:	f001 fbae 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xc3;
 80042cc:	4a44      	ldr	r2, [pc, #272]	; (80043e0 <DigitSix+0x164>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	18d3      	adds	r3, r2, r3
 80042d2:	22c3      	movs	r2, #195	; 0xc3
 80042d4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c, hspi1);
 80042d6:	2304      	movs	r3, #4
 80042d8:	199b      	adds	r3, r3, r6
 80042da:	2208      	movs	r2, #8
 80042dc:	18b9      	adds	r1, r7, r2
 80042de:	185c      	adds	r4, r3, r1
 80042e0:	4d3f      	ldr	r5, [pc, #252]	; (80043e0 <DigitSix+0x164>)
 80042e2:	466b      	mov	r3, sp
 80042e4:	0018      	movs	r0, r3
 80042e6:	0023      	movs	r3, r4
 80042e8:	3308      	adds	r3, #8
 80042ea:	225c      	movs	r2, #92	; 0x5c
 80042ec:	0019      	movs	r1, r3
 80042ee:	f001 fc09 	bl	8005b04 <memcpy>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	210c      	movs	r1, #12
 80042f8:	0028      	movs	r0, r5
 80042fa:	f001 fb95 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x7f;
 80042fe:	4a38      	ldr	r2, [pc, #224]	; (80043e0 <DigitSix+0x164>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	18d3      	adds	r3, r2, r3
 8004304:	227f      	movs	r2, #127	; 0x7f
 8004306:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80, hspi1);
 8004308:	2304      	movs	r3, #4
 800430a:	199b      	adds	r3, r3, r6
 800430c:	2208      	movs	r2, #8
 800430e:	18b9      	adds	r1, r7, r2
 8004310:	185c      	adds	r4, r3, r1
 8004312:	4d33      	ldr	r5, [pc, #204]	; (80043e0 <DigitSix+0x164>)
 8004314:	466b      	mov	r3, sp
 8004316:	0018      	movs	r0, r3
 8004318:	0023      	movs	r3, r4
 800431a:	3308      	adds	r3, #8
 800431c:	225c      	movs	r2, #92	; 0x5c
 800431e:	0019      	movs	r1, r3
 8004320:	f001 fbf0 	bl	8005b04 <memcpy>
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	0028      	movs	r0, r5
 800432c:	f001 fb7c 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xc0;
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <DigitSix+0x164>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	18d3      	adds	r3, r2, r3
 8004336:	22c0      	movs	r2, #192	; 0xc0
 8004338:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20, hspi1);
 800433a:	2304      	movs	r3, #4
 800433c:	199b      	adds	r3, r3, r6
 800433e:	2208      	movs	r2, #8
 8004340:	18b9      	adds	r1, r7, r2
 8004342:	185c      	adds	r4, r3, r1
 8004344:	4d26      	ldr	r5, [pc, #152]	; (80043e0 <DigitSix+0x164>)
 8004346:	466b      	mov	r3, sp
 8004348:	0018      	movs	r0, r3
 800434a:	0023      	movs	r3, r4
 800434c:	3308      	adds	r3, #8
 800434e:	225c      	movs	r2, #92	; 0x5c
 8004350:	0019      	movs	r1, r3
 8004352:	f001 fbd7 	bl	8005b04 <memcpy>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	6863      	ldr	r3, [r4, #4]
 800435a:	2120      	movs	r1, #32
 800435c:	0028      	movs	r0, r5
 800435e:	f001 fb63 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xfe;
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <DigitSix+0x164>)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	22fe      	movs	r2, #254	; 0xfe
 800436a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 800436c:	2304      	movs	r3, #4
 800436e:	199b      	adds	r3, r3, r6
 8004370:	2208      	movs	r2, #8
 8004372:	18b9      	adds	r1, r7, r2
 8004374:	185c      	adds	r4, r3, r1
 8004376:	4d1a      	ldr	r5, [pc, #104]	; (80043e0 <DigitSix+0x164>)
 8004378:	466b      	mov	r3, sp
 800437a:	0018      	movs	r0, r3
 800437c:	0023      	movs	r3, r4
 800437e:	3308      	adds	r3, #8
 8004380:	225c      	movs	r2, #92	; 0x5c
 8004382:	0019      	movs	r1, r3
 8004384:	f001 fbbe 	bl	8005b04 <memcpy>
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	2110      	movs	r1, #16
 800438e:	0028      	movs	r0, r5
 8004390:	f001 fb4a 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x7e;
 8004394:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <DigitSix+0x164>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	18d3      	adds	r3, r2, r3
 800439a:	227e      	movs	r2, #126	; 0x7e
 800439c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01, hspi1);
 800439e:	2304      	movs	r3, #4
 80043a0:	199b      	adds	r3, r3, r6
 80043a2:	2208      	movs	r2, #8
 80043a4:	18ba      	adds	r2, r7, r2
 80043a6:	189c      	adds	r4, r3, r2
 80043a8:	4d0d      	ldr	r5, [pc, #52]	; (80043e0 <DigitSix+0x164>)
 80043aa:	466b      	mov	r3, sp
 80043ac:	0018      	movs	r0, r3
 80043ae:	0023      	movs	r3, r4
 80043b0:	3308      	adds	r3, #8
 80043b2:	225c      	movs	r2, #92	; 0x5c
 80043b4:	0019      	movs	r1, r3
 80043b6:	f001 fba5 	bl	8005b04 <memcpy>
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	2101      	movs	r1, #1
 80043c0:	0028      	movs	r0, r5
 80043c2:	f001 fb31 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 80043c6:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <DigitSix+0x164>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	18d3      	adds	r3, r2, r3
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b003      	add	sp, #12
 80043d6:	bcf0      	pop	{r4, r5, r6, r7}
 80043d8:	bc08      	pop	{r3}
 80043da:	b004      	add	sp, #16
 80043dc:	4718      	bx	r3
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	200001b0 	.word	0x200001b0

080043e4 <DigitFive>:

void DigitFive(int i,SPI_HandleTypeDef hspi1)
{
 80043e4:	b084      	sub	sp, #16
 80043e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e8:	b09b      	sub	sp, #108	; 0x6c
 80043ea:	af18      	add	r7, sp, #96	; 0x60
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	2004      	movs	r0, #4
 80043f0:	2618      	movs	r6, #24
 80043f2:	1980      	adds	r0, r0, r6
 80043f4:	2408      	movs	r4, #8
 80043f6:	46a4      	mov	ip, r4
 80043f8:	44bc      	add	ip, r7
 80043fa:	4460      	add	r0, ip
 80043fc:	6001      	str	r1, [r0, #0]
 80043fe:	6042      	str	r2, [r0, #4]
 8004400:	6083      	str	r3, [r0, #8]

	column_countdown[i] = 0xff;
 8004402:	4a51      	ldr	r2, [pc, #324]	; (8004548 <DigitFive+0x164>)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	18d3      	adds	r3, r2, r3
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0,hspi1);
 800440c:	2304      	movs	r3, #4
 800440e:	199b      	adds	r3, r3, r6
 8004410:	2208      	movs	r2, #8
 8004412:	18b9      	adds	r1, r7, r2
 8004414:	185c      	adds	r4, r3, r1
 8004416:	4d4c      	ldr	r5, [pc, #304]	; (8004548 <DigitFive+0x164>)
 8004418:	466b      	mov	r3, sp
 800441a:	0018      	movs	r0, r3
 800441c:	0023      	movs	r3, r4
 800441e:	3308      	adds	r3, #8
 8004420:	225c      	movs	r2, #92	; 0x5c
 8004422:	0019      	movs	r1, r3
 8004424:	f001 fb6e 	bl	8005b04 <memcpy>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	6863      	ldr	r3, [r4, #4]
 800442c:	21c0      	movs	r1, #192	; 0xc0
 800442e:	0028      	movs	r0, r5
 8004430:	f001 fafa 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xc0;
 8004434:	4a44      	ldr	r2, [pc, #272]	; (8004548 <DigitFive+0x164>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	18d3      	adds	r3, r2, r3
 800443a:	22c0      	movs	r2, #192	; 0xc0
 800443c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20,hspi1);
 800443e:	2304      	movs	r3, #4
 8004440:	199b      	adds	r3, r3, r6
 8004442:	2208      	movs	r2, #8
 8004444:	18b9      	adds	r1, r7, r2
 8004446:	185c      	adds	r4, r3, r1
 8004448:	4d3f      	ldr	r5, [pc, #252]	; (8004548 <DigitFive+0x164>)
 800444a:	466b      	mov	r3, sp
 800444c:	0018      	movs	r0, r3
 800444e:	0023      	movs	r3, r4
 8004450:	3308      	adds	r3, #8
 8004452:	225c      	movs	r2, #92	; 0x5c
 8004454:	0019      	movs	r1, r3
 8004456:	f001 fb55 	bl	8005b04 <memcpy>
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	2120      	movs	r1, #32
 8004460:	0028      	movs	r0, r5
 8004462:	f001 fae1 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xfe;
 8004466:	4a38      	ldr	r2, [pc, #224]	; (8004548 <DigitFive+0x164>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	18d3      	adds	r3, r2, r3
 800446c:	22fe      	movs	r2, #254	; 0xfe
 800446e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10,hspi1);
 8004470:	2304      	movs	r3, #4
 8004472:	199b      	adds	r3, r3, r6
 8004474:	2208      	movs	r2, #8
 8004476:	18b9      	adds	r1, r7, r2
 8004478:	185c      	adds	r4, r3, r1
 800447a:	4d33      	ldr	r5, [pc, #204]	; (8004548 <DigitFive+0x164>)
 800447c:	466b      	mov	r3, sp
 800447e:	0018      	movs	r0, r3
 8004480:	0023      	movs	r3, r4
 8004482:	3308      	adds	r3, #8
 8004484:	225c      	movs	r2, #92	; 0x5c
 8004486:	0019      	movs	r1, r3
 8004488:	f001 fb3c 	bl	8005b04 <memcpy>
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	2110      	movs	r1, #16
 8004492:	0028      	movs	r0, r5
 8004494:	f001 fac8 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x03;
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <DigitFive+0x164>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	18d3      	adds	r3, r2, r3
 800449e:	2203      	movs	r2, #3
 80044a0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c,hspi1);
 80044a2:	2304      	movs	r3, #4
 80044a4:	199b      	adds	r3, r3, r6
 80044a6:	2208      	movs	r2, #8
 80044a8:	18b9      	adds	r1, r7, r2
 80044aa:	185c      	adds	r4, r3, r1
 80044ac:	4d26      	ldr	r5, [pc, #152]	; (8004548 <DigitFive+0x164>)
 80044ae:	466b      	mov	r3, sp
 80044b0:	0018      	movs	r0, r3
 80044b2:	0023      	movs	r3, r4
 80044b4:	3308      	adds	r3, #8
 80044b6:	225c      	movs	r2, #92	; 0x5c
 80044b8:	0019      	movs	r1, r3
 80044ba:	f001 fb23 	bl	8005b04 <memcpy>
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	6863      	ldr	r3, [r4, #4]
 80044c2:	210c      	movs	r1, #12
 80044c4:	0028      	movs	r0, r5
 80044c6:	f001 faaf 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x83;
 80044ca:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <DigitFive+0x164>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	18d3      	adds	r3, r2, r3
 80044d0:	2283      	movs	r2, #131	; 0x83
 80044d2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02,hspi1);
 80044d4:	2304      	movs	r3, #4
 80044d6:	199b      	adds	r3, r3, r6
 80044d8:	2208      	movs	r2, #8
 80044da:	18b9      	adds	r1, r7, r2
 80044dc:	185c      	adds	r4, r3, r1
 80044de:	4d1a      	ldr	r5, [pc, #104]	; (8004548 <DigitFive+0x164>)
 80044e0:	466b      	mov	r3, sp
 80044e2:	0018      	movs	r0, r3
 80044e4:	0023      	movs	r3, r4
 80044e6:	3308      	adds	r3, #8
 80044e8:	225c      	movs	r2, #92	; 0x5c
 80044ea:	0019      	movs	r1, r3
 80044ec:	f001 fb0a 	bl	8005b04 <memcpy>
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	2102      	movs	r1, #2
 80044f6:	0028      	movs	r0, r5
 80044f8:	f001 fa96 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x7e;
 80044fc:	4a12      	ldr	r2, [pc, #72]	; (8004548 <DigitFive+0x164>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	18d3      	adds	r3, r2, r3
 8004502:	227e      	movs	r2, #126	; 0x7e
 8004504:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01,hspi1);
 8004506:	2304      	movs	r3, #4
 8004508:	199b      	adds	r3, r3, r6
 800450a:	2208      	movs	r2, #8
 800450c:	18ba      	adds	r2, r7, r2
 800450e:	189c      	adds	r4, r3, r2
 8004510:	4d0d      	ldr	r5, [pc, #52]	; (8004548 <DigitFive+0x164>)
 8004512:	466b      	mov	r3, sp
 8004514:	0018      	movs	r0, r3
 8004516:	0023      	movs	r3, r4
 8004518:	3308      	adds	r3, #8
 800451a:	225c      	movs	r2, #92	; 0x5c
 800451c:	0019      	movs	r1, r3
 800451e:	f001 faf1 	bl	8005b04 <memcpy>
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	2101      	movs	r1, #1
 8004528:	0028      	movs	r0, r5
 800452a:	f001 fa7d 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 800452e:	4a06      	ldr	r2, [pc, #24]	; (8004548 <DigitFive+0x164>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b003      	add	sp, #12
 800453e:	bcf0      	pop	{r4, r5, r6, r7}
 8004540:	bc08      	pop	{r3}
 8004542:	b004      	add	sp, #16
 8004544:	4718      	bx	r3
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	200001b0 	.word	0x200001b0

0800454c <DigitFour>:

void DigitFour(int i,SPI_HandleTypeDef hspi1)
{
 800454c:	b084      	sub	sp, #16
 800454e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004550:	b09d      	sub	sp, #116	; 0x74
 8004552:	af18      	add	r7, sp, #96	; 0x60
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	2004      	movs	r0, #4
 8004558:	2628      	movs	r6, #40	; 0x28
 800455a:	1980      	adds	r0, r0, r6
 800455c:	19c0      	adds	r0, r0, r7
 800455e:	6001      	str	r1, [r0, #0]
 8004560:	6042      	str	r2, [r0, #4]
 8004562:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x06;
 8004564:	4a34      	ldr	r2, [pc, #208]	; (8004638 <DigitFour+0xec>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	18d3      	adds	r3, r2, r3
 800456a:	2206      	movs	r2, #6
 800456c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3, hspi1);
 800456e:	2304      	movs	r3, #4
 8004570:	199b      	adds	r3, r3, r6
 8004572:	19dc      	adds	r4, r3, r7
 8004574:	4d30      	ldr	r5, [pc, #192]	; (8004638 <DigitFour+0xec>)
 8004576:	466b      	mov	r3, sp
 8004578:	0018      	movs	r0, r3
 800457a:	0023      	movs	r3, r4
 800457c:	3308      	adds	r3, #8
 800457e:	225c      	movs	r2, #92	; 0x5c
 8004580:	0019      	movs	r1, r3
 8004582:	f001 fabf 	bl	8005b04 <memcpy>
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	21f3      	movs	r1, #243	; 0xf3
 800458c:	0028      	movs	r0, r5
 800458e:	f001 fa4b 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xff;
 8004592:	4a29      	ldr	r2, [pc, #164]	; (8004638 <DigitFour+0xec>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	18d3      	adds	r3, r2, r3
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c, hspi1);
 800459c:	2304      	movs	r3, #4
 800459e:	199b      	adds	r3, r3, r6
 80045a0:	19dc      	adds	r4, r3, r7
 80045a2:	4d25      	ldr	r5, [pc, #148]	; (8004638 <DigitFour+0xec>)
 80045a4:	466b      	mov	r3, sp
 80045a6:	0018      	movs	r0, r3
 80045a8:	0023      	movs	r3, r4
 80045aa:	3308      	adds	r3, #8
 80045ac:	225c      	movs	r2, #92	; 0x5c
 80045ae:	0019      	movs	r1, r3
 80045b0:	f001 faa8 	bl	8005b04 <memcpy>
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	210c      	movs	r1, #12
 80045ba:	0028      	movs	r0, r5
 80045bc:	f001 fa34 	bl	8005a28 <TransmitData>

	for (int j = 0; j < 4; j++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e028      	b.n	8004618 <DigitFour+0xcc>
	{
	column_countdown[i] = 0x08 << j;
 80045c6:	2208      	movs	r2, #8
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	409a      	lsls	r2, r3
 80045cc:	0013      	movs	r3, r2
 80045ce:	b2d9      	uxtb	r1, r3
 80045d0:	4a19      	ldr	r2, [pc, #100]	; (8004638 <DigitFour+0xec>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	1c0a      	adds	r2, r1, #0
 80045d8:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	411a      	asrs	r2, r3
 80045e0:	0013      	movs	r3, r2
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	4b15      	ldr	r3, [pc, #84]	; (800463c <DigitFour+0xf0>)
 80045e6:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown, hspi1);
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <DigitFour+0xf0>)
 80045ea:	781e      	ldrb	r6, [r3, #0]
 80045ec:	2304      	movs	r3, #4
 80045ee:	2228      	movs	r2, #40	; 0x28
 80045f0:	189b      	adds	r3, r3, r2
 80045f2:	19dc      	adds	r4, r3, r7
 80045f4:	4d10      	ldr	r5, [pc, #64]	; (8004638 <DigitFour+0xec>)
 80045f6:	466b      	mov	r3, sp
 80045f8:	0018      	movs	r0, r3
 80045fa:	0023      	movs	r3, r4
 80045fc:	3308      	adds	r3, #8
 80045fe:	225c      	movs	r2, #92	; 0x5c
 8004600:	0019      	movs	r1, r3
 8004602:	f001 fa7f 	bl	8005b04 <memcpy>
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	6863      	ldr	r3, [r4, #4]
 800460a:	0031      	movs	r1, r6
 800460c:	0028      	movs	r0, r5
 800460e:	f001 fa0b 	bl	8005a28 <TransmitData>
	for (int j = 0; j < 4; j++)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b03      	cmp	r3, #3
 800461c:	ddd3      	ble.n	80045c6 <DigitFour+0x7a>
	}

	column_countdown[i] = 0;
 800461e:	4a06      	ldr	r2, [pc, #24]	; (8004638 <DigitFour+0xec>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	18d3      	adds	r3, r2, r3
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	b005      	add	sp, #20
 800462e:	bcf0      	pop	{r4, r5, r6, r7}
 8004630:	bc08      	pop	{r3}
 8004632:	b004      	add	sp, #16
 8004634:	4718      	bx	r3
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	200001b0 	.word	0x200001b0
 800463c:	200001ad 	.word	0x200001ad

08004640 <DigitThree>:

void DigitThree(int i, SPI_HandleTypeDef hspi1)
{
 8004640:	b084      	sub	sp, #16
 8004642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004644:	b09b      	sub	sp, #108	; 0x6c
 8004646:	af18      	add	r7, sp, #96	; 0x60
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	2004      	movs	r0, #4
 800464c:	2618      	movs	r6, #24
 800464e:	1980      	adds	r0, r0, r6
 8004650:	2408      	movs	r4, #8
 8004652:	46a4      	mov	ip, r4
 8004654:	44bc      	add	ip, r7
 8004656:	4460      	add	r0, ip
 8004658:	6001      	str	r1, [r0, #0]
 800465a:	6042      	str	r2, [r0, #4]
 800465c:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x7e;
 800465e:	4a38      	ldr	r2, [pc, #224]	; (8004740 <DigitThree+0x100>)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	227e      	movs	r2, #126	; 0x7e
 8004666:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81, hspi1);
 8004668:	2304      	movs	r3, #4
 800466a:	199b      	adds	r3, r3, r6
 800466c:	2208      	movs	r2, #8
 800466e:	18b9      	adds	r1, r7, r2
 8004670:	185c      	adds	r4, r3, r1
 8004672:	4d33      	ldr	r5, [pc, #204]	; (8004740 <DigitThree+0x100>)
 8004674:	466b      	mov	r3, sp
 8004676:	0018      	movs	r0, r3
 8004678:	0023      	movs	r3, r4
 800467a:	3308      	adds	r3, #8
 800467c:	225c      	movs	r2, #92	; 0x5c
 800467e:	0019      	movs	r1, r3
 8004680:	f001 fa40 	bl	8005b04 <memcpy>
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	2181      	movs	r1, #129	; 0x81
 800468a:	0028      	movs	r0, r5
 800468c:	f001 f9cc 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xe7;
 8004690:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <DigitThree+0x100>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	18d3      	adds	r3, r2, r3
 8004696:	22e7      	movs	r2, #231	; 0xe7
 8004698:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42, hspi1);
 800469a:	2304      	movs	r3, #4
 800469c:	199b      	adds	r3, r3, r6
 800469e:	2208      	movs	r2, #8
 80046a0:	18b9      	adds	r1, r7, r2
 80046a2:	185c      	adds	r4, r3, r1
 80046a4:	4d26      	ldr	r5, [pc, #152]	; (8004740 <DigitThree+0x100>)
 80046a6:	466b      	mov	r3, sp
 80046a8:	0018      	movs	r0, r3
 80046aa:	0023      	movs	r3, r4
 80046ac:	3308      	adds	r3, #8
 80046ae:	225c      	movs	r2, #92	; 0x5c
 80046b0:	0019      	movs	r1, r3
 80046b2:	f001 fa27 	bl	8005b04 <memcpy>
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	6863      	ldr	r3, [r4, #4]
 80046ba:	2142      	movs	r1, #66	; 0x42
 80046bc:	0028      	movs	r0, r5
 80046be:	f001 f9b3 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xc3;
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <DigitThree+0x100>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	22c3      	movs	r2, #195	; 0xc3
 80046ca:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24, hspi1);
 80046cc:	2304      	movs	r3, #4
 80046ce:	199b      	adds	r3, r3, r6
 80046d0:	2208      	movs	r2, #8
 80046d2:	18b9      	adds	r1, r7, r2
 80046d4:	185c      	adds	r4, r3, r1
 80046d6:	4d1a      	ldr	r5, [pc, #104]	; (8004740 <DigitThree+0x100>)
 80046d8:	466b      	mov	r3, sp
 80046da:	0018      	movs	r0, r3
 80046dc:	0023      	movs	r3, r4
 80046de:	3308      	adds	r3, #8
 80046e0:	225c      	movs	r2, #92	; 0x5c
 80046e2:	0019      	movs	r1, r3
 80046e4:	f001 fa0e 	bl	8005b04 <memcpy>
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	6863      	ldr	r3, [r4, #4]
 80046ec:	2124      	movs	r1, #36	; 0x24
 80046ee:	0028      	movs	r0, r5
 80046f0:	f001 f99a 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x06;
 80046f4:	4a12      	ldr	r2, [pc, #72]	; (8004740 <DigitThree+0x100>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	18d3      	adds	r3, r2, r3
 80046fa:	2206      	movs	r2, #6
 80046fc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18, hspi1);
 80046fe:	2304      	movs	r3, #4
 8004700:	199b      	adds	r3, r3, r6
 8004702:	2208      	movs	r2, #8
 8004704:	18ba      	adds	r2, r7, r2
 8004706:	189c      	adds	r4, r3, r2
 8004708:	4d0d      	ldr	r5, [pc, #52]	; (8004740 <DigitThree+0x100>)
 800470a:	466b      	mov	r3, sp
 800470c:	0018      	movs	r0, r3
 800470e:	0023      	movs	r3, r4
 8004710:	3308      	adds	r3, #8
 8004712:	225c      	movs	r2, #92	; 0x5c
 8004714:	0019      	movs	r1, r3
 8004716:	f001 f9f5 	bl	8005b04 <memcpy>
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	2118      	movs	r1, #24
 8004720:	0028      	movs	r0, r5
 8004722:	f001 f981 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 8004726:	4a06      	ldr	r2, [pc, #24]	; (8004740 <DigitThree+0x100>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	18d3      	adds	r3, r2, r3
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	46bd      	mov	sp, r7
 8004734:	b003      	add	sp, #12
 8004736:	bcf0      	pop	{r4, r5, r6, r7}
 8004738:	bc08      	pop	{r3}
 800473a:	b004      	add	sp, #16
 800473c:	4718      	bx	r3
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	200001b0 	.word	0x200001b0

08004744 <DigitTwo>:

void DigitTwo(int i, SPI_HandleTypeDef hspi1)
{
 8004744:	b084      	sub	sp, #16
 8004746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004748:	b09b      	sub	sp, #108	; 0x6c
 800474a:	af18      	add	r7, sp, #96	; 0x60
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	2004      	movs	r0, #4
 8004750:	2618      	movs	r6, #24
 8004752:	1980      	adds	r0, r0, r6
 8004754:	2408      	movs	r4, #8
 8004756:	46a4      	mov	ip, r4
 8004758:	44bc      	add	ip, r7
 800475a:	4460      	add	r0, ip
 800475c:	6001      	str	r1, [r0, #0]
 800475e:	6042      	str	r2, [r0, #4]
 8004760:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x7e;
 8004762:	4a5d      	ldr	r2, [pc, #372]	; (80048d8 <DigitTwo+0x194>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	18d3      	adds	r3, r2, r3
 8004768:	227e      	movs	r2, #126	; 0x7e
 800476a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80, hspi1);
 800476c:	2304      	movs	r3, #4
 800476e:	199b      	adds	r3, r3, r6
 8004770:	2208      	movs	r2, #8
 8004772:	18b9      	adds	r1, r7, r2
 8004774:	185c      	adds	r4, r3, r1
 8004776:	4d58      	ldr	r5, [pc, #352]	; (80048d8 <DigitTwo+0x194>)
 8004778:	466b      	mov	r3, sp
 800477a:	0018      	movs	r0, r3
 800477c:	0023      	movs	r3, r4
 800477e:	3308      	adds	r3, #8
 8004780:	225c      	movs	r2, #92	; 0x5c
 8004782:	0019      	movs	r1, r3
 8004784:	f001 f9be 	bl	8005b04 <memcpy>
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	0028      	movs	r0, r5
 8004790:	f001 f94a 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xc3;
 8004794:	4a50      	ldr	r2, [pc, #320]	; (80048d8 <DigitTwo+0x194>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	18d3      	adds	r3, r2, r3
 800479a:	22c3      	movs	r2, #195	; 0xc3
 800479c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40, hspi1);
 800479e:	2304      	movs	r3, #4
 80047a0:	199b      	adds	r3, r3, r6
 80047a2:	2208      	movs	r2, #8
 80047a4:	18b9      	adds	r1, r7, r2
 80047a6:	185c      	adds	r4, r3, r1
 80047a8:	4d4b      	ldr	r5, [pc, #300]	; (80048d8 <DigitTwo+0x194>)
 80047aa:	466b      	mov	r3, sp
 80047ac:	0018      	movs	r0, r3
 80047ae:	0023      	movs	r3, r4
 80047b0:	3308      	adds	r3, #8
 80047b2:	225c      	movs	r2, #92	; 0x5c
 80047b4:	0019      	movs	r1, r3
 80047b6:	f001 f9a5 	bl	8005b04 <memcpy>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	2140      	movs	r1, #64	; 0x40
 80047c0:	0028      	movs	r0, r5
 80047c2:	f001 f931 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x83;
 80047c6:	4a44      	ldr	r2, [pc, #272]	; (80048d8 <DigitTwo+0x194>)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	18d3      	adds	r3, r2, r3
 80047cc:	2283      	movs	r2, #131	; 0x83
 80047ce:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20, hspi1);
 80047d0:	2304      	movs	r3, #4
 80047d2:	199b      	adds	r3, r3, r6
 80047d4:	2208      	movs	r2, #8
 80047d6:	18b9      	adds	r1, r7, r2
 80047d8:	185c      	adds	r4, r3, r1
 80047da:	4d3f      	ldr	r5, [pc, #252]	; (80048d8 <DigitTwo+0x194>)
 80047dc:	466b      	mov	r3, sp
 80047de:	0018      	movs	r0, r3
 80047e0:	0023      	movs	r3, r4
 80047e2:	3308      	adds	r3, #8
 80047e4:	225c      	movs	r2, #92	; 0x5c
 80047e6:	0019      	movs	r1, r3
 80047e8:	f001 f98c 	bl	8005b04 <memcpy>
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	2120      	movs	r1, #32
 80047f2:	0028      	movs	r0, r5
 80047f4:	f001 f918 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x0e;
 80047f8:	4a37      	ldr	r2, [pc, #220]	; (80048d8 <DigitTwo+0x194>)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	18d3      	adds	r3, r2, r3
 80047fe:	220e      	movs	r2, #14
 8004800:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 8004802:	2304      	movs	r3, #4
 8004804:	199b      	adds	r3, r3, r6
 8004806:	2208      	movs	r2, #8
 8004808:	18b9      	adds	r1, r7, r2
 800480a:	185c      	adds	r4, r3, r1
 800480c:	4d32      	ldr	r5, [pc, #200]	; (80048d8 <DigitTwo+0x194>)
 800480e:	466b      	mov	r3, sp
 8004810:	0018      	movs	r0, r3
 8004812:	0023      	movs	r3, r4
 8004814:	3308      	adds	r3, #8
 8004816:	225c      	movs	r2, #92	; 0x5c
 8004818:	0019      	movs	r1, r3
 800481a:	f001 f973 	bl	8005b04 <memcpy>
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	2110      	movs	r1, #16
 8004824:	0028      	movs	r0, r5
 8004826:	f001 f8ff 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x1c;
 800482a:	4a2b      	ldr	r2, [pc, #172]	; (80048d8 <DigitTwo+0x194>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	18d3      	adds	r3, r2, r3
 8004830:	221c      	movs	r2, #28
 8004832:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08, hspi1);
 8004834:	2304      	movs	r3, #4
 8004836:	199b      	adds	r3, r3, r6
 8004838:	2208      	movs	r2, #8
 800483a:	18b9      	adds	r1, r7, r2
 800483c:	185c      	adds	r4, r3, r1
 800483e:	4d26      	ldr	r5, [pc, #152]	; (80048d8 <DigitTwo+0x194>)
 8004840:	466b      	mov	r3, sp
 8004842:	0018      	movs	r0, r3
 8004844:	0023      	movs	r3, r4
 8004846:	3308      	adds	r3, #8
 8004848:	225c      	movs	r2, #92	; 0x5c
 800484a:	0019      	movs	r1, r3
 800484c:	f001 f95a 	bl	8005b04 <memcpy>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	2108      	movs	r1, #8
 8004856:	0028      	movs	r0, r5
 8004858:	f001 f8e6 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x70;
 800485c:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <DigitTwo+0x194>)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	18d3      	adds	r3, r2, r3
 8004862:	2270      	movs	r2, #112	; 0x70
 8004864:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04, hspi1);
 8004866:	2304      	movs	r3, #4
 8004868:	199b      	adds	r3, r3, r6
 800486a:	2208      	movs	r2, #8
 800486c:	18b9      	adds	r1, r7, r2
 800486e:	185c      	adds	r4, r3, r1
 8004870:	4d19      	ldr	r5, [pc, #100]	; (80048d8 <DigitTwo+0x194>)
 8004872:	466b      	mov	r3, sp
 8004874:	0018      	movs	r0, r3
 8004876:	0023      	movs	r3, r4
 8004878:	3308      	adds	r3, #8
 800487a:	225c      	movs	r2, #92	; 0x5c
 800487c:	0019      	movs	r1, r3
 800487e:	f001 f941 	bl	8005b04 <memcpy>
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	2104      	movs	r1, #4
 8004888:	0028      	movs	r0, r5
 800488a:	f001 f8cd 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xff;
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <DigitTwo+0x194>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	22ff      	movs	r2, #255	; 0xff
 8004896:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03, hspi1);
 8004898:	2304      	movs	r3, #4
 800489a:	199b      	adds	r3, r3, r6
 800489c:	2208      	movs	r2, #8
 800489e:	18ba      	adds	r2, r7, r2
 80048a0:	189c      	adds	r4, r3, r2
 80048a2:	4d0d      	ldr	r5, [pc, #52]	; (80048d8 <DigitTwo+0x194>)
 80048a4:	466b      	mov	r3, sp
 80048a6:	0018      	movs	r0, r3
 80048a8:	0023      	movs	r3, r4
 80048aa:	3308      	adds	r3, #8
 80048ac:	225c      	movs	r2, #92	; 0x5c
 80048ae:	0019      	movs	r1, r3
 80048b0:	f001 f928 	bl	8005b04 <memcpy>
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	6863      	ldr	r3, [r4, #4]
 80048b8:	2103      	movs	r1, #3
 80048ba:	0028      	movs	r0, r5
 80048bc:	f001 f8b4 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 80048c0:	4a05      	ldr	r2, [pc, #20]	; (80048d8 <DigitTwo+0x194>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	18d3      	adds	r3, r2, r3
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b003      	add	sp, #12
 80048d0:	bcf0      	pop	{r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	b004      	add	sp, #16
 80048d6:	4718      	bx	r3
 80048d8:	200001b0 	.word	0x200001b0

080048dc <DigitOne>:

void DigitOne(int i, SPI_HandleTypeDef hspi1)
{
 80048dc:	b084      	sub	sp, #16
 80048de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e0:	b09b      	sub	sp, #108	; 0x6c
 80048e2:	af18      	add	r7, sp, #96	; 0x60
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	2004      	movs	r0, #4
 80048e8:	2618      	movs	r6, #24
 80048ea:	1980      	adds	r0, r0, r6
 80048ec:	2408      	movs	r4, #8
 80048ee:	46a4      	mov	ip, r4
 80048f0:	44bc      	add	ip, r7
 80048f2:	4460      	add	r0, ip
 80048f4:	6001      	str	r1, [r0, #0]
 80048f6:	6042      	str	r2, [r0, #4]
 80048f8:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0xff;
 80048fa:	4a51      	ldr	r2, [pc, #324]	; (8004a40 <DigitOne+0x164>)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	18d3      	adds	r3, r2, r3
 8004900:	22ff      	movs	r2, #255	; 0xff
 8004902:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01, hspi1);
 8004904:	2304      	movs	r3, #4
 8004906:	199b      	adds	r3, r3, r6
 8004908:	2208      	movs	r2, #8
 800490a:	18b9      	adds	r1, r7, r2
 800490c:	185c      	adds	r4, r3, r1
 800490e:	4d4c      	ldr	r5, [pc, #304]	; (8004a40 <DigitOne+0x164>)
 8004910:	466b      	mov	r3, sp
 8004912:	0018      	movs	r0, r3
 8004914:	0023      	movs	r3, r4
 8004916:	3308      	adds	r3, #8
 8004918:	225c      	movs	r2, #92	; 0x5c
 800491a:	0019      	movs	r1, r3
 800491c:	f001 f8f2 	bl	8005b04 <memcpy>
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	2101      	movs	r1, #1
 8004926:	0028      	movs	r0, r5
 8004928:	f001 f87e 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x98;
 800492c:	4a44      	ldr	r2, [pc, #272]	; (8004a40 <DigitOne+0x164>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	18d3      	adds	r3, r2, r3
 8004932:	2298      	movs	r2, #152	; 0x98
 8004934:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08, hspi1);
 8004936:	2304      	movs	r3, #4
 8004938:	199b      	adds	r3, r3, r6
 800493a:	2208      	movs	r2, #8
 800493c:	18b9      	adds	r1, r7, r2
 800493e:	185c      	adds	r4, r3, r1
 8004940:	4d3f      	ldr	r5, [pc, #252]	; (8004a40 <DigitOne+0x164>)
 8004942:	466b      	mov	r3, sp
 8004944:	0018      	movs	r0, r3
 8004946:	0023      	movs	r3, r4
 8004948:	3308      	adds	r3, #8
 800494a:	225c      	movs	r2, #92	; 0x5c
 800494c:	0019      	movs	r1, r3
 800494e:	f001 f8d9 	bl	8005b04 <memcpy>
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	2108      	movs	r1, #8
 8004958:	0028      	movs	r0, r5
 800495a:	f001 f865 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xd8;
 800495e:	4a38      	ldr	r2, [pc, #224]	; (8004a40 <DigitOne+0x164>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	22d8      	movs	r2, #216	; 0xd8
 8004966:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10, hspi1);
 8004968:	2304      	movs	r3, #4
 800496a:	199b      	adds	r3, r3, r6
 800496c:	2208      	movs	r2, #8
 800496e:	18b9      	adds	r1, r7, r2
 8004970:	185c      	adds	r4, r3, r1
 8004972:	4d33      	ldr	r5, [pc, #204]	; (8004a40 <DigitOne+0x164>)
 8004974:	466b      	mov	r3, sp
 8004976:	0018      	movs	r0, r3
 8004978:	0023      	movs	r3, r4
 800497a:	3308      	adds	r3, #8
 800497c:	225c      	movs	r2, #92	; 0x5c
 800497e:	0019      	movs	r1, r3
 8004980:	f001 f8c0 	bl	8005b04 <memcpy>
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	2110      	movs	r1, #16
 800498a:	0028      	movs	r0, r5
 800498c:	f001 f84c 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x78;
 8004990:	4a2b      	ldr	r2, [pc, #172]	; (8004a40 <DigitOne+0x164>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	18d3      	adds	r3, r2, r3
 8004996:	2278      	movs	r2, #120	; 0x78
 8004998:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20, hspi1);
 800499a:	2304      	movs	r3, #4
 800499c:	199b      	adds	r3, r3, r6
 800499e:	2208      	movs	r2, #8
 80049a0:	18b9      	adds	r1, r7, r2
 80049a2:	185c      	adds	r4, r3, r1
 80049a4:	4d26      	ldr	r5, [pc, #152]	; (8004a40 <DigitOne+0x164>)
 80049a6:	466b      	mov	r3, sp
 80049a8:	0018      	movs	r0, r3
 80049aa:	0023      	movs	r3, r4
 80049ac:	3308      	adds	r3, #8
 80049ae:	225c      	movs	r2, #92	; 0x5c
 80049b0:	0019      	movs	r1, r3
 80049b2:	f001 f8a7 	bl	8005b04 <memcpy>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	2120      	movs	r1, #32
 80049bc:	0028      	movs	r0, r5
 80049be:	f001 f833 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x38;
 80049c2:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <DigitOne+0x164>)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	18d3      	adds	r3, r2, r3
 80049c8:	2238      	movs	r2, #56	; 0x38
 80049ca:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40, hspi1);
 80049cc:	2304      	movs	r3, #4
 80049ce:	199b      	adds	r3, r3, r6
 80049d0:	2208      	movs	r2, #8
 80049d2:	18b9      	adds	r1, r7, r2
 80049d4:	185c      	adds	r4, r3, r1
 80049d6:	4d1a      	ldr	r5, [pc, #104]	; (8004a40 <DigitOne+0x164>)
 80049d8:	466b      	mov	r3, sp
 80049da:	0018      	movs	r0, r3
 80049dc:	0023      	movs	r3, r4
 80049de:	3308      	adds	r3, #8
 80049e0:	225c      	movs	r2, #92	; 0x5c
 80049e2:	0019      	movs	r1, r3
 80049e4:	f001 f88e 	bl	8005b04 <memcpy>
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	2140      	movs	r1, #64	; 0x40
 80049ee:	0028      	movs	r0, r5
 80049f0:	f001 f81a 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x18;
 80049f4:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <DigitOne+0x164>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	18d3      	adds	r3, r2, r3
 80049fa:	2218      	movs	r2, #24
 80049fc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86, hspi1);
 80049fe:	2304      	movs	r3, #4
 8004a00:	199b      	adds	r3, r3, r6
 8004a02:	2208      	movs	r2, #8
 8004a04:	18ba      	adds	r2, r7, r2
 8004a06:	189c      	adds	r4, r3, r2
 8004a08:	4d0d      	ldr	r5, [pc, #52]	; (8004a40 <DigitOne+0x164>)
 8004a0a:	466b      	mov	r3, sp
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	0023      	movs	r3, r4
 8004a10:	3308      	adds	r3, #8
 8004a12:	225c      	movs	r2, #92	; 0x5c
 8004a14:	0019      	movs	r1, r3
 8004a16:	f001 f875 	bl	8005b04 <memcpy>
 8004a1a:	6822      	ldr	r2, [r4, #0]
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	2186      	movs	r1, #134	; 0x86
 8004a20:	0028      	movs	r0, r5
 8004a22:	f001 f801 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 8004a26:	4a06      	ldr	r2, [pc, #24]	; (8004a40 <DigitOne+0x164>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	18d3      	adds	r3, r2, r3
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b003      	add	sp, #12
 8004a36:	bcf0      	pop	{r4, r5, r6, r7}
 8004a38:	bc08      	pop	{r3}
 8004a3a:	b004      	add	sp, #16
 8004a3c:	4718      	bx	r3
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	200001b0 	.word	0x200001b0

08004a44 <DigitZero>:

void DigitZero(int i, SPI_HandleTypeDef hspi1)
{
 8004a44:	b084      	sub	sp, #16
 8004a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a48:	b09b      	sub	sp, #108	; 0x6c
 8004a4a:	af18      	add	r7, sp, #96	; 0x60
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	2004      	movs	r0, #4
 8004a50:	2618      	movs	r6, #24
 8004a52:	1980      	adds	r0, r0, r6
 8004a54:	2408      	movs	r4, #8
 8004a56:	46a4      	mov	ip, r4
 8004a58:	44bc      	add	ip, r7
 8004a5a:	4460      	add	r0, ip
 8004a5c:	6001      	str	r1, [r0, #0]
 8004a5e:	6042      	str	r2, [r0, #4]
 8004a60:	6083      	str	r3, [r0, #8]
	column_countdown[i] = 0x3c;
 8004a62:	4a2b      	ldr	r2, [pc, #172]	; (8004b10 <DigitZero+0xcc>)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	18d3      	adds	r3, r2, r3
 8004a68:	223c      	movs	r2, #60	; 0x3c
 8004a6a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81, hspi1);
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	199b      	adds	r3, r3, r6
 8004a70:	2208      	movs	r2, #8
 8004a72:	18b9      	adds	r1, r7, r2
 8004a74:	185c      	adds	r4, r3, r1
 8004a76:	4d26      	ldr	r5, [pc, #152]	; (8004b10 <DigitZero+0xcc>)
 8004a78:	466b      	mov	r3, sp
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	0023      	movs	r3, r4
 8004a7e:	3308      	adds	r3, #8
 8004a80:	225c      	movs	r2, #92	; 0x5c
 8004a82:	0019      	movs	r1, r3
 8004a84:	f001 f83e 	bl	8005b04 <memcpy>
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	2181      	movs	r1, #129	; 0x81
 8004a8e:	0028      	movs	r0, r5
 8004a90:	f000 ffca 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0x66;
 8004a94:	4a1e      	ldr	r2, [pc, #120]	; (8004b10 <DigitZero+0xcc>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	18d3      	adds	r3, r2, r3
 8004a9a:	2266      	movs	r2, #102	; 0x66
 8004a9c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42, hspi1);
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	199b      	adds	r3, r3, r6
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	18b9      	adds	r1, r7, r2
 8004aa6:	185c      	adds	r4, r3, r1
 8004aa8:	4d19      	ldr	r5, [pc, #100]	; (8004b10 <DigitZero+0xcc>)
 8004aaa:	466b      	mov	r3, sp
 8004aac:	0018      	movs	r0, r3
 8004aae:	0023      	movs	r3, r4
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	225c      	movs	r2, #92	; 0x5c
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	f001 f825 	bl	8005b04 <memcpy>
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	6863      	ldr	r3, [r4, #4]
 8004abe:	2142      	movs	r1, #66	; 0x42
 8004ac0:	0028      	movs	r0, r5
 8004ac2:	f000 ffb1 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0xc3;
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <DigitZero+0xcc>)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	18d3      	adds	r3, r2, r3
 8004acc:	22c3      	movs	r2, #195	; 0xc3
 8004ace:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c, hspi1);
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	199b      	adds	r3, r3, r6
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	18ba      	adds	r2, r7, r2
 8004ad8:	189c      	adds	r4, r3, r2
 8004ada:	4d0d      	ldr	r5, [pc, #52]	; (8004b10 <DigitZero+0xcc>)
 8004adc:	466b      	mov	r3, sp
 8004ade:	0018      	movs	r0, r3
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	225c      	movs	r2, #92	; 0x5c
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	f001 f80c 	bl	8005b04 <memcpy>
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	213c      	movs	r1, #60	; 0x3c
 8004af2:	0028      	movs	r0, r5
 8004af4:	f000 ff98 	bl	8005a28 <TransmitData>

	column_countdown[i] = 0;
 8004af8:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <DigitZero+0xcc>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	18d3      	adds	r3, r2, r3
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b003      	add	sp, #12
 8004b08:	bcf0      	pop	{r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4718      	bx	r3
 8004b10:	200001b0 	.word	0x200001b0

08004b14 <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle(SPI_HandleTypeDef hspi1)
{
 8004b14:	b084      	sub	sp, #16
 8004b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b18:	b0a1      	sub	sp, #132	; 0x84
 8004b1a:	af18      	add	r7, sp, #96	; 0x60
 8004b1c:	2438      	movs	r4, #56	; 0x38
 8004b1e:	193c      	adds	r4, r7, r4
 8004b20:	6020      	str	r0, [r4, #0]
 8004b22:	6061      	str	r1, [r4, #4]
 8004b24:	60a2      	str	r2, [r4, #8]
 8004b26:	60e3      	str	r3, [r4, #12]

	switch (size_layer)
 8004b28:	4b99      	ldr	r3, [pc, #612]	; (8004d90 <DiagonalCube_Handle+0x27c>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d100      	bne.n	8004b32 <DiagonalCube_Handle+0x1e>
 8004b30:	e0da      	b.n	8004ce8 <DiagonalCube_Handle+0x1d4>
 8004b32:	dd00      	ble.n	8004b36 <DiagonalCube_Handle+0x22>
 8004b34:	e11c      	b.n	8004d70 <DiagonalCube_Handle+0x25c>
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d100      	bne.n	8004b3c <DiagonalCube_Handle+0x28>
 8004b3a:	e090      	b.n	8004c5e <DiagonalCube_Handle+0x14a>
 8004b3c:	dd00      	ble.n	8004b40 <DiagonalCube_Handle+0x2c>
 8004b3e:	e117      	b.n	8004d70 <DiagonalCube_Handle+0x25c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <DiagonalCube_Handle+0x36>
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d045      	beq.n	8004bd4 <DiagonalCube_Handle+0xc0>
				size_layer = SMALLEST;
				time_start = HAL_GetTick();
			}
			break;
		default:
			break;
 8004b48:	e112      	b.n	8004d70 <DiagonalCube_Handle+0x25c>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004b4a:	f7fb ff71 	bl	8000a30 <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	4b90      	ldr	r3, [pc, #576]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2296      	movs	r2, #150	; 0x96
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d200      	bcs.n	8004b5e <DiagonalCube_Handle+0x4a>
 8004b5c:	e10a      	b.n	8004d74 <DiagonalCube_Handle+0x260>
				layer_diagonal = 0x18;
 8004b5e:	4b8e      	ldr	r3, [pc, #568]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004b60:	2218      	movs	r2, #24
 8004b62:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 8004b64:	2303      	movs	r3, #3
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e007      	b.n	8004b7a <DiagonalCube_Handle+0x66>
					column_diagonal[i] = 0x18;
 8004b6a:	4a8c      	ldr	r2, [pc, #560]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	18d3      	adds	r3, r2, r3
 8004b70:	2218      	movs	r2, #24
 8004b72:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	3301      	adds	r3, #1
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	ddf4      	ble.n	8004b6a <DiagonalCube_Handle+0x56>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 8004b80:	4b85      	ldr	r3, [pc, #532]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004b82:	781e      	ldrb	r6, [r3, #0]
 8004b84:	2338      	movs	r3, #56	; 0x38
 8004b86:	18fc      	adds	r4, r7, r3
 8004b88:	4d84      	ldr	r5, [pc, #528]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004b8a:	466b      	mov	r3, sp
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	0023      	movs	r3, r4
 8004b90:	3308      	adds	r3, #8
 8004b92:	225c      	movs	r2, #92	; 0x5c
 8004b94:	0019      	movs	r1, r3
 8004b96:	f000 ffb5 	bl	8005b04 <memcpy>
 8004b9a:	6822      	ldr	r2, [r4, #0]
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	0031      	movs	r1, r6
 8004ba0:	0028      	movs	r0, r5
 8004ba2:	f000 ff41 	bl	8005a28 <TransmitData>
				for (int i = 0; i < 8; i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e007      	b.n	8004bbc <DiagonalCube_Handle+0xa8>
					column_diagonal[i] = 0;
 8004bac:	4a7b      	ldr	r2, [pc, #492]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	18d3      	adds	r3, r2, r3
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	ddf4      	ble.n	8004bac <DiagonalCube_Handle+0x98>
				size_layer = MEDIUM;
 8004bc2:	4b73      	ldr	r3, [pc, #460]	; (8004d90 <DiagonalCube_Handle+0x27c>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004bc8:	f7fb ff32 	bl	8000a30 <HAL_GetTick>
 8004bcc:	0002      	movs	r2, r0
 8004bce:	4b71      	ldr	r3, [pc, #452]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004bd0:	601a      	str	r2, [r3, #0]
			break;
 8004bd2:	e0cf      	b.n	8004d74 <DiagonalCube_Handle+0x260>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004bd4:	f7fb ff2c 	bl	8000a30 <HAL_GetTick>
 8004bd8:	0002      	movs	r2, r0
 8004bda:	4b6e      	ldr	r3, [pc, #440]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2296      	movs	r2, #150	; 0x96
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d200      	bcs.n	8004be8 <DiagonalCube_Handle+0xd4>
 8004be6:	e0c7      	b.n	8004d78 <DiagonalCube_Handle+0x264>
				layer_diagonal = 0x24;
 8004be8:	4b6b      	ldr	r3, [pc, #428]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004bea:	2224      	movs	r2, #36	; 0x24
 8004bec:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004bee:	2302      	movs	r3, #2
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e007      	b.n	8004c04 <DiagonalCube_Handle+0xf0>
					column_diagonal[i] = 0x3c;
 8004bf4:	4a69      	ldr	r2, [pc, #420]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	18d3      	adds	r3, r2, r3
 8004bfa:	223c      	movs	r2, #60	; 0x3c
 8004bfc:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3301      	adds	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	ddf4      	ble.n	8004bf4 <DiagonalCube_Handle+0xe0>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 8004c0a:	4b63      	ldr	r3, [pc, #396]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004c0c:	781e      	ldrb	r6, [r3, #0]
 8004c0e:	2338      	movs	r3, #56	; 0x38
 8004c10:	18fc      	adds	r4, r7, r3
 8004c12:	4d62      	ldr	r5, [pc, #392]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004c14:	466b      	mov	r3, sp
 8004c16:	0018      	movs	r0, r3
 8004c18:	0023      	movs	r3, r4
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	225c      	movs	r2, #92	; 0x5c
 8004c1e:	0019      	movs	r1, r3
 8004c20:	f000 ff70 	bl	8005b04 <memcpy>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	0031      	movs	r1, r6
 8004c2a:	0028      	movs	r0, r5
 8004c2c:	f000 fefc 	bl	8005a28 <TransmitData>
				for (int i = 0; i < 8; i++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e007      	b.n	8004c46 <DiagonalCube_Handle+0x132>
					column_diagonal[i] = 0;
 8004c36:	4a59      	ldr	r2, [pc, #356]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3301      	adds	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b07      	cmp	r3, #7
 8004c4a:	ddf4      	ble.n	8004c36 <DiagonalCube_Handle+0x122>
				size_layer = LARGE;
 8004c4c:	4b50      	ldr	r3, [pc, #320]	; (8004d90 <DiagonalCube_Handle+0x27c>)
 8004c4e:	2202      	movs	r2, #2
 8004c50:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004c52:	f7fb feed 	bl	8000a30 <HAL_GetTick>
 8004c56:	0002      	movs	r2, r0
 8004c58:	4b4e      	ldr	r3, [pc, #312]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004c5a:	601a      	str	r2, [r3, #0]
			break;
 8004c5c:	e08c      	b.n	8004d78 <DiagonalCube_Handle+0x264>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004c5e:	f7fb fee7 	bl	8000a30 <HAL_GetTick>
 8004c62:	0002      	movs	r2, r0
 8004c64:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2296      	movs	r2, #150	; 0x96
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d200      	bcs.n	8004c72 <DiagonalCube_Handle+0x15e>
 8004c70:	e084      	b.n	8004d7c <DiagonalCube_Handle+0x268>
				layer_diagonal = 0x42;
 8004c72:	4b49      	ldr	r3, [pc, #292]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004c74:	2242      	movs	r2, #66	; 0x42
 8004c76:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004c78:	2301      	movs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e007      	b.n	8004c8e <DiagonalCube_Handle+0x17a>
					column_diagonal[i] = 0x7e;
 8004c7e:	4a47      	ldr	r2, [pc, #284]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	18d3      	adds	r3, r2, r3
 8004c84:	227e      	movs	r2, #126	; 0x7e
 8004c86:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	ddf4      	ble.n	8004c7e <DiagonalCube_Handle+0x16a>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 8004c94:	4b40      	ldr	r3, [pc, #256]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004c96:	781e      	ldrb	r6, [r3, #0]
 8004c98:	2338      	movs	r3, #56	; 0x38
 8004c9a:	18fc      	adds	r4, r7, r3
 8004c9c:	4d3f      	ldr	r5, [pc, #252]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004c9e:	466b      	mov	r3, sp
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	0023      	movs	r3, r4
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	225c      	movs	r2, #92	; 0x5c
 8004ca8:	0019      	movs	r1, r3
 8004caa:	f000 ff2b 	bl	8005b04 <memcpy>
 8004cae:	6822      	ldr	r2, [r4, #0]
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	0031      	movs	r1, r6
 8004cb4:	0028      	movs	r0, r5
 8004cb6:	f000 feb7 	bl	8005a28 <TransmitData>
				for (int i = 0; i < 8; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	e007      	b.n	8004cd0 <DiagonalCube_Handle+0x1bc>
					column_diagonal[i] = 0;
 8004cc0:	4a36      	ldr	r2, [pc, #216]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	18d3      	adds	r3, r2, r3
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b07      	cmp	r3, #7
 8004cd4:	ddf4      	ble.n	8004cc0 <DiagonalCube_Handle+0x1ac>
				size_layer = LARGEST;
 8004cd6:	4b2e      	ldr	r3, [pc, #184]	; (8004d90 <DiagonalCube_Handle+0x27c>)
 8004cd8:	2203      	movs	r2, #3
 8004cda:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004cdc:	f7fb fea8 	bl	8000a30 <HAL_GetTick>
 8004ce0:	0002      	movs	r2, r0
 8004ce2:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004ce4:	601a      	str	r2, [r3, #0]
			break;
 8004ce6:	e049      	b.n	8004d7c <DiagonalCube_Handle+0x268>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004ce8:	f7fb fea2 	bl	8000a30 <HAL_GetTick>
 8004cec:	0002      	movs	r2, r0
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2296      	movs	r2, #150	; 0x96
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d342      	bcc.n	8004d80 <DiagonalCube_Handle+0x26c>
				layer_diagonal= 0x81;
 8004cfa:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004cfc:	2281      	movs	r2, #129	; 0x81
 8004cfe:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	e007      	b.n	8004d16 <DiagonalCube_Handle+0x202>
					column_diagonal[i] = 0xff;
 8004d06:	4a25      	ldr	r2, [pc, #148]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	18d3      	adds	r3, r2, r3
 8004d0c:	22ff      	movs	r2, #255	; 0xff
 8004d0e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3301      	adds	r3, #1
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b07      	cmp	r3, #7
 8004d1a:	ddf4      	ble.n	8004d06 <DiagonalCube_Handle+0x1f2>
				TransmitData(column_diagonal, layer_diagonal, hspi1);
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <DiagonalCube_Handle+0x284>)
 8004d1e:	781e      	ldrb	r6, [r3, #0]
 8004d20:	2338      	movs	r3, #56	; 0x38
 8004d22:	18fc      	adds	r4, r7, r3
 8004d24:	4d1d      	ldr	r5, [pc, #116]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004d26:	466b      	mov	r3, sp
 8004d28:	0018      	movs	r0, r3
 8004d2a:	0023      	movs	r3, r4
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	225c      	movs	r2, #92	; 0x5c
 8004d30:	0019      	movs	r1, r3
 8004d32:	f000 fee7 	bl	8005b04 <memcpy>
 8004d36:	6822      	ldr	r2, [r4, #0]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	0031      	movs	r1, r6
 8004d3c:	0028      	movs	r0, r5
 8004d3e:	f000 fe73 	bl	8005a28 <TransmitData>
				for (int i = 0; i < 8; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	e007      	b.n	8004d58 <DiagonalCube_Handle+0x244>
					column_diagonal[i] = 0;
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <DiagonalCube_Handle+0x288>)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	18d3      	adds	r3, r2, r3
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b07      	cmp	r3, #7
 8004d5c:	ddf4      	ble.n	8004d48 <DiagonalCube_Handle+0x234>
				size_layer = SMALLEST;
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <DiagonalCube_Handle+0x27c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004d64:	f7fb fe64 	bl	8000a30 <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <DiagonalCube_Handle+0x280>)
 8004d6c:	601a      	str	r2, [r3, #0]
			break;
 8004d6e:	e007      	b.n	8004d80 <DiagonalCube_Handle+0x26c>
			break;
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	e006      	b.n	8004d82 <DiagonalCube_Handle+0x26e>
			break;
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	e004      	b.n	8004d82 <DiagonalCube_Handle+0x26e>
			break;
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	e002      	b.n	8004d82 <DiagonalCube_Handle+0x26e>
			break;
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	e000      	b.n	8004d82 <DiagonalCube_Handle+0x26e>
			break;
 8004d80:	46c0      	nop			; (mov r8, r8)
	}
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b009      	add	sp, #36	; 0x24
 8004d88:	bcf0      	pop	{r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	b004      	add	sp, #16
 8004d8e:	4718      	bx	r3
 8004d90:	200001c0 	.word	0x200001c0
 8004d94:	200001cc 	.word	0x200001cc
 8004d98:	200001c1 	.word	0x200001c1
 8004d9c:	200001c4 	.word	0x200001c4

08004da0 <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <DiagonalCube_Set_State+0x3c>)
 8004da8:	2204      	movs	r2, #4
 8004daa:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004dac:	2300      	movs	r3, #0
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	e007      	b.n	8004dc2 <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 8004db2:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <DiagonalCube_Set_State+0x40>)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b07      	cmp	r3, #7
 8004dc6:	ddf4      	ble.n	8004db2 <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <DiagonalCube_Set_State+0x44>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <DiagonalCube_Set_State+0x48>)
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	701a      	strb	r2, [r3, #0]
}
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000010 	.word	0x20000010
 8004de0:	200001c4 	.word	0x200001c4
 8004de4:	200001c1 	.word	0x200001c1
 8004de8:	200001c0 	.word	0x200001c0

08004dec <DisplayLed>:
uint8_t ICcolumn[8], IClayer;
int WhichByte, WhichBit, WhichColumn;
uint8_t dataOut[9];

void DisplayLed(int x, int y, int  z, SPI_HandleTypeDef hspi1, int display)
{
 8004dec:	b082      	sub	sp, #8
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	2120      	movs	r1, #32
 8004dfe:	1852      	adds	r2, r2, r1
 8004e00:	19d2      	adds	r2, r2, r7
 8004e02:	6013      	str	r3, [r2, #0]

	WhichByte = (((z << 6)+(y << 3) + x) >> 3);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	019a      	lsls	r2, r3, #6
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	18d2      	adds	r2, r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	18d3      	adds	r3, r2, r3
 8004e12:	10da      	asrs	r2, r3, #3
 8004e14:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <DisplayLed+0xf4>)
 8004e16:	601a      	str	r2, [r3, #0]
	WhichBit = ((z << 6) + (y << 3) + x) - (WhichByte << 3);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	019a      	lsls	r2, r3, #6
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	18d2      	adds	r2, r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	18d2      	adds	r2, r2, r3
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <DisplayLed+0xf4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	1ad2      	subs	r2, r2, r3
 8004e2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ee4 <DisplayLed+0xf8>)
 8004e30:	601a      	str	r2, [r3, #0]
	WhichColumn = WhichByte - (z*8);
 8004e32:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <DisplayLed+0xf4>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	1ad2      	subs	r2, r2, r3
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ee8 <DisplayLed+0xfc>)
 8004e3e:	601a      	str	r2, [r3, #0]
	IClayer = 0x01 <<  z;
 8004e40:	2201      	movs	r2, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	409a      	lsls	r2, r3
 8004e46:	0013      	movs	r3, r2
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <DisplayLed+0x100>)
 8004e4c:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0x01 << WhichBit;
 8004e4e:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <DisplayLed+0xf8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	409a      	lsls	r2, r3
 8004e56:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <DisplayLed+0xfc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b2d1      	uxtb	r1, r2
 8004e5c:	4a24      	ldr	r2, [pc, #144]	; (8004ef0 <DisplayLed+0x104>)
 8004e5e:	54d1      	strb	r1, [r2, r3]
	dataOut[0] = IClayer;
 8004e60:	4b22      	ldr	r3, [pc, #136]	; (8004eec <DisplayLed+0x100>)
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	4b23      	ldr	r3, [pc, #140]	; (8004ef4 <DisplayLed+0x108>)
 8004e66:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8004e68:	2301      	movs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e00b      	b.n	8004e86 <DisplayLed+0x9a>
	{
		dataOut[i] = ICcolumn[i-1];
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <DisplayLed+0x104>)
 8004e74:	5cd1      	ldrb	r1, [r2, r3]
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <DisplayLed+0x108>)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	18d3      	adds	r3, r2, r3
 8004e7c:	1c0a      	adds	r2, r1, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3301      	adds	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	ddf0      	ble.n	8004e6e <DisplayLed+0x82>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8004e8c:	2390      	movs	r3, #144	; 0x90
 8004e8e:	05db      	lsls	r3, r3, #23
 8004e90:	2200      	movs	r2, #0
 8004e92:	2140      	movs	r1, #64	; 0x40
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7fc f8b6 	bl	8001006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8004e9a:	4916      	ldr	r1, [pc, #88]	; (8004ef4 <DisplayLed+0x108>)
 8004e9c:	2324      	movs	r3, #36	; 0x24
 8004e9e:	18f8      	adds	r0, r7, r3
 8004ea0:	2364      	movs	r3, #100	; 0x64
 8004ea2:	2209      	movs	r2, #9
 8004ea4:	f7fc ff72 	bl	8001d8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8004ea8:	2390      	movs	r3, #144	; 0x90
 8004eaa:	05db      	lsls	r3, r3, #23
 8004eac:	2201      	movs	r2, #1
 8004eae:	2140      	movs	r1, #64	; 0x40
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7fc f8a8 	bl	8001006 <HAL_GPIO_WritePin>
	if (!display)
 8004eb6:	2388      	movs	r3, #136	; 0x88
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <DisplayLed+0xe4>
	{
		IClayer = 0;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <DisplayLed+0x100>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
		ICcolumn[WhichColumn] = 0;
 8004ec6:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <DisplayLed+0xfc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <DisplayLed+0x104>)
 8004ecc:	2100      	movs	r1, #0
 8004ece:	54d1      	strb	r1, [r2, r3]
	}
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b006      	add	sp, #24
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	bc08      	pop	{r3}
 8004eda:	b002      	add	sp, #8
 8004edc:	4718      	bx	r3
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	200001dc 	.word	0x200001dc
 8004ee4:	200001e0 	.word	0x200001e0
 8004ee8:	200001e4 	.word	0x200001e4
 8004eec:	200001d8 	.word	0x200001d8
 8004ef0:	200001d0 	.word	0x200001d0
 8004ef4:	200001e8 	.word	0x200001e8

08004ef8 <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle(SPI_HandleTypeDef hspi1) //ok
{
 8004ef8:	b084      	sub	sp, #16
 8004efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efc:	b09f      	sub	sp, #124	; 0x7c
 8004efe:	af18      	add	r7, sp, #96	; 0x60
 8004f00:	2430      	movs	r4, #48	; 0x30
 8004f02:	193c      	adds	r4, r7, r4
 8004f04:	6020      	str	r0, [r4, #0]
 8004f06:	6061      	str	r1, [r4, #4]
 8004f08:	60a2      	str	r2, [r4, #8]
 8004f0a:	60e3      	str	r3, [r4, #12]
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 8004f0c:	4bac      	ldr	r3, [pc, #688]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f0e:	22ff      	movs	r2, #255	; 0xff
 8004f10:	71da      	strb	r2, [r3, #7]
 8004f12:	4bab      	ldr	r3, [pc, #684]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f14:	79da      	ldrb	r2, [r3, #7]
 8004f16:	4baa      	ldr	r3, [pc, #680]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f18:	719a      	strb	r2, [r3, #6]
 8004f1a:	4ba9      	ldr	r3, [pc, #676]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f1c:	799a      	ldrb	r2, [r3, #6]
 8004f1e:	4ba8      	ldr	r3, [pc, #672]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f20:	715a      	strb	r2, [r3, #5]
 8004f22:	4ba7      	ldr	r3, [pc, #668]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f24:	795a      	ldrb	r2, [r3, #5]
 8004f26:	4ba6      	ldr	r3, [pc, #664]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f28:	711a      	strb	r2, [r3, #4]
 8004f2a:	4ba5      	ldr	r3, [pc, #660]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f2c:	791a      	ldrb	r2, [r3, #4]
 8004f2e:	4ba4      	ldr	r3, [pc, #656]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f30:	70da      	strb	r2, [r3, #3]
 8004f32:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f34:	78da      	ldrb	r2, [r3, #3]
 8004f36:	4ba2      	ldr	r3, [pc, #648]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f38:	709a      	strb	r2, [r3, #2]
 8004f3a:	4ba1      	ldr	r3, [pc, #644]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f3c:	789a      	ldrb	r2, [r3, #2]
 8004f3e:	4ba0      	ldr	r3, [pc, #640]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f40:	705a      	strb	r2, [r3, #1]
 8004f42:	4b9f      	ldr	r3, [pc, #636]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f44:	785a      	ldrb	r2, [r3, #1]
 8004f46:	4b9e      	ldr	r3, [pc, #632]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f48:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 8004f4a:	4b9d      	ldr	r3, [pc, #628]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f4c:	227e      	movs	r2, #126	; 0x7e
 8004f4e:	739a      	strb	r2, [r3, #14]
 8004f50:	4b9b      	ldr	r3, [pc, #620]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f52:	7b9a      	ldrb	r2, [r3, #14]
 8004f54:	4b9a      	ldr	r3, [pc, #616]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f56:	735a      	strb	r2, [r3, #13]
 8004f58:	4b99      	ldr	r3, [pc, #612]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f5a:	7b5a      	ldrb	r2, [r3, #13]
 8004f5c:	4b98      	ldr	r3, [pc, #608]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f5e:	731a      	strb	r2, [r3, #12]
 8004f60:	4b97      	ldr	r3, [pc, #604]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f62:	7b1a      	ldrb	r2, [r3, #12]
 8004f64:	4b96      	ldr	r3, [pc, #600]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f66:	72da      	strb	r2, [r3, #11]
 8004f68:	4b95      	ldr	r3, [pc, #596]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f6a:	7ada      	ldrb	r2, [r3, #11]
 8004f6c:	4b94      	ldr	r3, [pc, #592]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f6e:	729a      	strb	r2, [r3, #10]
 8004f70:	4b93      	ldr	r3, [pc, #588]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f72:	7a9a      	ldrb	r2, [r3, #10]
 8004f74:	4b92      	ldr	r3, [pc, #584]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f76:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 8004f78:	4b91      	ldr	r3, [pc, #580]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f7a:	223c      	movs	r2, #60	; 0x3c
 8004f7c:	755a      	strb	r2, [r3, #21]
 8004f7e:	4b90      	ldr	r3, [pc, #576]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f80:	7d5a      	ldrb	r2, [r3, #21]
 8004f82:	4b8f      	ldr	r3, [pc, #572]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f84:	751a      	strb	r2, [r3, #20]
 8004f86:	4b8e      	ldr	r3, [pc, #568]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f88:	7d1a      	ldrb	r2, [r3, #20]
 8004f8a:	4b8d      	ldr	r3, [pc, #564]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f8c:	74da      	strb	r2, [r3, #19]
 8004f8e:	4b8c      	ldr	r3, [pc, #560]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f90:	7cda      	ldrb	r2, [r3, #19]
 8004f92:	4b8b      	ldr	r3, [pc, #556]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f94:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 8004f96:	4b8a      	ldr	r3, [pc, #552]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f98:	2218      	movs	r2, #24
 8004f9a:	771a      	strb	r2, [r3, #28]
 8004f9c:	4b88      	ldr	r3, [pc, #544]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004f9e:	7f1a      	ldrb	r2, [r3, #28]
 8004fa0:	4b87      	ldr	r3, [pc, #540]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004fa2:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 8004fa4:	4b87      	ldr	r3, [pc, #540]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 8004fa6:	22ff      	movs	r2, #255	; 0xff
 8004fa8:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 8004faa:	4b86      	ldr	r3, [pc, #536]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 8004fac:	227e      	movs	r2, #126	; 0x7e
 8004fae:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 8004fb0:	4b84      	ldr	r3, [pc, #528]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 8004fb2:	223c      	movs	r2, #60	; 0x3c
 8004fb4:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 8004fb6:	4b83      	ldr	r3, [pc, #524]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 8004fb8:	2218      	movs	r2, #24
 8004fba:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 8004fbc:	4b82      	ldr	r3, [pc, #520]	; (80051c8 <GrowShrinkCube_Handle+0x2d0>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d100      	bne.n	8004fc6 <GrowShrinkCube_Handle+0xce>
 8004fc4:	e0b5      	b.n	8005132 <GrowShrinkCube_Handle+0x23a>
 8004fc6:	dd00      	ble.n	8004fca <GrowShrinkCube_Handle+0xd2>
 8004fc8:	e0ea      	b.n	80051a0 <GrowShrinkCube_Handle+0x2a8>
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d100      	bne.n	8004fd0 <GrowShrinkCube_Handle+0xd8>
 8004fce:	e078      	b.n	80050c2 <GrowShrinkCube_Handle+0x1ca>
 8004fd0:	dd00      	ble.n	8004fd4 <GrowShrinkCube_Handle+0xdc>
 8004fd2:	e0e5      	b.n	80051a0 <GrowShrinkCube_Handle+0x2a8>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <GrowShrinkCube_Handle+0xe6>
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d039      	beq.n	8005050 <GrowShrinkCube_Handle+0x158>
				time_start = HAL_GetTick();
				size_cube = TWO_X_TWO_CUBE;
			}
			break;
		default:
			break;
 8004fdc:	e0e0      	b.n	80051a0 <GrowShrinkCube_Handle+0x2a8>
			if (HAL_GetTick() - time_start >= time_todo2)
 8004fde:	f7fb fd27 	bl	8000a30 <HAL_GetTick>
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	4b79      	ldr	r3, [pc, #484]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	22c8      	movs	r2, #200	; 0xc8
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d200      	bcs.n	8004ff2 <GrowShrinkCube_Handle+0xfa>
 8004ff0:	e0d8      	b.n	80051a4 <GrowShrinkCube_Handle+0x2ac>
				for (int j = 0; j < 8; j++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e01f      	b.n	8005038 <GrowShrinkCube_Handle+0x140>
					temp[j] = column_growshrink[3][j];
 8004ff8:	4a71      	ldr	r2, [pc, #452]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	18d3      	adds	r3, r2, r3
 8004ffe:	3318      	adds	r3, #24
 8005000:	7819      	ldrb	r1, [r3, #0]
 8005002:	003a      	movs	r2, r7
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	18d3      	adds	r3, r2, r3
 8005008:	1c0a      	adds	r2, r1, #0
 800500a:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3], hspi1);
 800500c:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 800500e:	78de      	ldrb	r6, [r3, #3]
 8005010:	2330      	movs	r3, #48	; 0x30
 8005012:	18fc      	adds	r4, r7, r3
 8005014:	003d      	movs	r5, r7
 8005016:	466b      	mov	r3, sp
 8005018:	0018      	movs	r0, r3
 800501a:	0023      	movs	r3, r4
 800501c:	3308      	adds	r3, #8
 800501e:	225c      	movs	r2, #92	; 0x5c
 8005020:	0019      	movs	r1, r3
 8005022:	f000 fd6f 	bl	8005b04 <memcpy>
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	0031      	movs	r1, r6
 800502c:	0028      	movs	r0, r5
 800502e:	f000 fcfb 	bl	8005a28 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3301      	adds	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b07      	cmp	r3, #7
 800503c:	dddc      	ble.n	8004ff8 <GrowShrinkCube_Handle+0x100>
				time_start = HAL_GetTick();
 800503e:	f7fb fcf7 	bl	8000a30 <HAL_GetTick>
 8005042:	0002      	movs	r2, r0
 8005044:	4b61      	ldr	r3, [pc, #388]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 8005046:	601a      	str	r2, [r3, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 8005048:	4b5f      	ldr	r3, [pc, #380]	; (80051c8 <GrowShrinkCube_Handle+0x2d0>)
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
			break;
 800504e:	e0a9      	b.n	80051a4 <GrowShrinkCube_Handle+0x2ac>
			if (HAL_GetTick() - time_start >= time_todo2)
 8005050:	f7fb fcee 	bl	8000a30 <HAL_GetTick>
 8005054:	0002      	movs	r2, r0
 8005056:	4b5d      	ldr	r3, [pc, #372]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	22c8      	movs	r2, #200	; 0xc8
 800505e:	4293      	cmp	r3, r2
 8005060:	d200      	bcs.n	8005064 <GrowShrinkCube_Handle+0x16c>
 8005062:	e0a1      	b.n	80051a8 <GrowShrinkCube_Handle+0x2b0>
				for (int j = 0; j < 8; j++)
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	e01f      	b.n	80050aa <GrowShrinkCube_Handle+0x1b2>
					temp[j] = column_growshrink[2][j];
 800506a:	4a55      	ldr	r2, [pc, #340]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	18d3      	adds	r3, r2, r3
 8005070:	3310      	adds	r3, #16
 8005072:	7819      	ldrb	r1, [r3, #0]
 8005074:	003a      	movs	r2, r7
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	18d3      	adds	r3, r2, r3
 800507a:	1c0a      	adds	r2, r1, #0
 800507c:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2], hspi1);
 800507e:	4b51      	ldr	r3, [pc, #324]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 8005080:	789e      	ldrb	r6, [r3, #2]
 8005082:	2330      	movs	r3, #48	; 0x30
 8005084:	18fc      	adds	r4, r7, r3
 8005086:	003d      	movs	r5, r7
 8005088:	466b      	mov	r3, sp
 800508a:	0018      	movs	r0, r3
 800508c:	0023      	movs	r3, r4
 800508e:	3308      	adds	r3, #8
 8005090:	225c      	movs	r2, #92	; 0x5c
 8005092:	0019      	movs	r1, r3
 8005094:	f000 fd36 	bl	8005b04 <memcpy>
 8005098:	6822      	ldr	r2, [r4, #0]
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	0031      	movs	r1, r6
 800509e:	0028      	movs	r0, r5
 80050a0:	f000 fcc2 	bl	8005a28 <TransmitData>
				for (int j = 0; j < 8; j++)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	3301      	adds	r3, #1
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b07      	cmp	r3, #7
 80050ae:	dddc      	ble.n	800506a <GrowShrinkCube_Handle+0x172>
				time_start = HAL_GetTick();
 80050b0:	f7fb fcbe 	bl	8000a30 <HAL_GetTick>
 80050b4:	0002      	movs	r2, r0
 80050b6:	4b45      	ldr	r3, [pc, #276]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 80050b8:	601a      	str	r2, [r3, #0]
				size_cube = SIX_X_SIX_CUBE;
 80050ba:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <GrowShrinkCube_Handle+0x2d0>)
 80050bc:	2202      	movs	r2, #2
 80050be:	701a      	strb	r2, [r3, #0]
			break;
 80050c0:	e072      	b.n	80051a8 <GrowShrinkCube_Handle+0x2b0>
			if (HAL_GetTick() - time_start >= time_todo2)
 80050c2:	f7fb fcb5 	bl	8000a30 <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	4b40      	ldr	r3, [pc, #256]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	22c8      	movs	r2, #200	; 0xc8
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d36b      	bcc.n	80051ac <GrowShrinkCube_Handle+0x2b4>
				for (int j = 0; j < 8; j++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e01f      	b.n	800511a <GrowShrinkCube_Handle+0x222>
					temp[j] = column_growshrink[1][j];
 80050da:	4a39      	ldr	r2, [pc, #228]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	3308      	adds	r3, #8
 80050e2:	7819      	ldrb	r1, [r3, #0]
 80050e4:	003a      	movs	r2, r7
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	18d3      	adds	r3, r2, r3
 80050ea:	1c0a      	adds	r2, r1, #0
 80050ec:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1], hspi1);
 80050ee:	4b35      	ldr	r3, [pc, #212]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 80050f0:	785e      	ldrb	r6, [r3, #1]
 80050f2:	2330      	movs	r3, #48	; 0x30
 80050f4:	18fc      	adds	r4, r7, r3
 80050f6:	003d      	movs	r5, r7
 80050f8:	466b      	mov	r3, sp
 80050fa:	0018      	movs	r0, r3
 80050fc:	0023      	movs	r3, r4
 80050fe:	3308      	adds	r3, #8
 8005100:	225c      	movs	r2, #92	; 0x5c
 8005102:	0019      	movs	r1, r3
 8005104:	f000 fcfe 	bl	8005b04 <memcpy>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	6863      	ldr	r3, [r4, #4]
 800510c:	0031      	movs	r1, r6
 800510e:	0028      	movs	r0, r5
 8005110:	f000 fc8a 	bl	8005a28 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b07      	cmp	r3, #7
 800511e:	dddc      	ble.n	80050da <GrowShrinkCube_Handle+0x1e2>
				time_start = HAL_GetTick();
 8005120:	f7fb fc86 	bl	8000a30 <HAL_GetTick>
 8005124:	0002      	movs	r2, r0
 8005126:	4b29      	ldr	r3, [pc, #164]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 8005128:	601a      	str	r2, [r3, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 800512a:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <GrowShrinkCube_Handle+0x2d0>)
 800512c:	2203      	movs	r2, #3
 800512e:	701a      	strb	r2, [r3, #0]
			break;
 8005130:	e03c      	b.n	80051ac <GrowShrinkCube_Handle+0x2b4>
			if (HAL_GetTick() - time_start >= time_todo2)
 8005132:	f7fb fc7d 	bl	8000a30 <HAL_GetTick>
 8005136:	0002      	movs	r2, r0
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	22c8      	movs	r2, #200	; 0xc8
 8005140:	4293      	cmp	r3, r2
 8005142:	d335      	bcc.n	80051b0 <GrowShrinkCube_Handle+0x2b8>
				for (int j = 0; j < 8; j++)
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	e01e      	b.n	8005188 <GrowShrinkCube_Handle+0x290>
					temp[j] = column_growshrink[0][j];
 800514a:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <GrowShrinkCube_Handle+0x2c8>)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	18d3      	adds	r3, r2, r3
 8005150:	7819      	ldrb	r1, [r3, #0]
 8005152:	003a      	movs	r2, r7
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	18d3      	adds	r3, r2, r3
 8005158:	1c0a      	adds	r2, r1, #0
 800515a:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0], hspi1);
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <GrowShrinkCube_Handle+0x2cc>)
 800515e:	781e      	ldrb	r6, [r3, #0]
 8005160:	2330      	movs	r3, #48	; 0x30
 8005162:	18fc      	adds	r4, r7, r3
 8005164:	003d      	movs	r5, r7
 8005166:	466b      	mov	r3, sp
 8005168:	0018      	movs	r0, r3
 800516a:	0023      	movs	r3, r4
 800516c:	3308      	adds	r3, #8
 800516e:	225c      	movs	r2, #92	; 0x5c
 8005170:	0019      	movs	r1, r3
 8005172:	f000 fcc7 	bl	8005b04 <memcpy>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	0031      	movs	r1, r6
 800517c:	0028      	movs	r0, r5
 800517e:	f000 fc53 	bl	8005a28 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	3301      	adds	r3, #1
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b07      	cmp	r3, #7
 800518c:	dddd      	ble.n	800514a <GrowShrinkCube_Handle+0x252>
				time_start = HAL_GetTick();
 800518e:	f7fb fc4f 	bl	8000a30 <HAL_GetTick>
 8005192:	0002      	movs	r2, r0
 8005194:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <GrowShrinkCube_Handle+0x2d4>)
 8005196:	601a      	str	r2, [r3, #0]
				size_cube = TWO_X_TWO_CUBE;
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <GrowShrinkCube_Handle+0x2d0>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
			break;
 800519e:	e007      	b.n	80051b0 <GrowShrinkCube_Handle+0x2b8>
			break;
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	e006      	b.n	80051b2 <GrowShrinkCube_Handle+0x2ba>
			break;
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	e004      	b.n	80051b2 <GrowShrinkCube_Handle+0x2ba>
			break;
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	e002      	b.n	80051b2 <GrowShrinkCube_Handle+0x2ba>
			break;
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	e000      	b.n	80051b2 <GrowShrinkCube_Handle+0x2ba>
			break;
 80051b0:	46c0      	nop			; (mov r8, r8)
	}
}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b007      	add	sp, #28
 80051b8:	bcf0      	pop	{r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	b004      	add	sp, #16
 80051be:	4718      	bx	r3
 80051c0:	200001f8 	.word	0x200001f8
 80051c4:	20000218 	.word	0x20000218
 80051c8:	200001f1 	.word	0x200001f1
 80051cc:	200001f4 	.word	0x200001f4

080051d0 <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <GrowShrinkCube_Set_State+0x58>)
 80051d8:	2203      	movs	r2, #3
 80051da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	e018      	b.n	8005214 <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 80051e2:	4a12      	ldr	r2, [pc, #72]	; (800522c <GrowShrinkCube_Set_State+0x5c>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	18d3      	adds	r3, r2, r3
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	e00a      	b.n	8005208 <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 80051f2:	4a0f      	ldr	r2, [pc, #60]	; (8005230 <GrowShrinkCube_Set_State+0x60>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	18d2      	adds	r2, r2, r3
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	18d3      	adds	r3, r2, r3
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b07      	cmp	r3, #7
 800520c:	ddf1      	ble.n	80051f2 <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3301      	adds	r3, #1
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b03      	cmp	r3, #3
 8005218:	dde3      	ble.n	80051e2 <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <GrowShrinkCube_Set_State+0x64>)
 800521c:	2203      	movs	r2, #3
 800521e:	701a      	strb	r2, [r3, #0]
}
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b002      	add	sp, #8
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000010 	.word	0x20000010
 800522c:	20000218 	.word	0x20000218
 8005230:	200001f8 	.word	0x200001f8
 8005234:	200001f1 	.word	0x200001f1

08005238 <Btn_press_Callback>:
#include "led_cube_handle.h"

Cube_Status currentEffect = RANDOM_RAIN_CUBE;

void Btn_press_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	000a      	movs	r2, r1
 8005242:	1cbb      	adds	r3, r7, #2
 8005244:	801a      	strh	r2, [r3, #0]
	switch(currentEffect){
 8005246:	4b14      	ldr	r3, [pc, #80]	; (8005298 <Btn_press_Callback+0x60>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b07      	cmp	r3, #7
 800524c:	d81e      	bhi.n	800528c <Btn_press_Callback+0x54>
 800524e:	009a      	lsls	r2, r3, #2
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <Btn_press_Callback+0x64>)
 8005252:	18d3      	adds	r3, r2, r3
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	469f      	mov	pc, r3
	case TURN_OFF_ALL_LEDS:
		currentEffect = TURN_ON_ALL_LEDS;
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <Btn_press_Callback+0x60>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
		break;
 800525e:	e016      	b.n	800528e <Btn_press_Callback+0x56>
	case TURN_ON_ALL_LEDS:
		PlaneCube_Set_State();
 8005260:	f000 fb1c 	bl	800589c <PlaneCube_Set_State>
		break;
 8005264:	e013      	b.n	800528e <Btn_press_Callback+0x56>
	case SWEEP_ALL_LEDS:
		GrowShrinkCube_Set_State();
 8005266:	f7ff ffb3 	bl	80051d0 <GrowShrinkCube_Set_State>
		break;
 800526a:	e010      	b.n	800528e <Btn_press_Callback+0x56>
	case GROW_SHRINK_CUBE:
		DiagonalCube_Set_State();
 800526c:	f7ff fd98 	bl	8004da0 <DiagonalCube_Set_State>
		break;
 8005270:	e00d      	b.n	800528e <Btn_press_Callback+0x56>
	case DIAGONAL_CUBE:
		AroundEdgeCube_Set_State();
 8005272:	f7fe fa55 	bl	8003720 <AroundEdgeCube_Set_State>
		break;
 8005276:	e00a      	b.n	800528e <Btn_press_Callback+0x56>
	case AROUND_EDGE_CUBE:
		CountDownCube_Set_Sate();
 8005278:	f7fe fe92 	bl	8003fa0 <CountDownCube_Set_Sate>
		break;
 800527c:	e007      	b.n	800528e <Btn_press_Callback+0x56>
	case COUNT_DOWN_CUBE:
		RandomRainCube_Set_State();
 800527e:	f000 fbc3 	bl	8005a08 <RandomRainCube_Set_State>
		break;
 8005282:	e004      	b.n	800528e <Btn_press_Callback+0x56>
	case RANDOM_RAIN_CUBE:
		currentEffect = TURN_OFF_ALL_LEDS;
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <Btn_press_Callback+0x60>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
		break;
 800528a:	e000      	b.n	800528e <Btn_press_Callback+0x56>
	default:
		break;
 800528c:	46c0      	nop			; (mov r8, r8)
	}
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b002      	add	sp, #8
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	20000010 	.word	0x20000010
 800529c:	08006d0c 	.word	0x08006d0c

080052a0 <Led_cube_Handle>:

void Led_cube_Handle(Cube_Status cube_state,SPI_HandleTypeDef hspi1)
{
 80052a0:	b084      	sub	sp, #16
 80052a2:	b5b0      	push	{r4, r5, r7, lr}
 80052a4:	b098      	sub	sp, #96	; 0x60
 80052a6:	af16      	add	r7, sp, #88	; 0x58
 80052a8:	0004      	movs	r4, r0
 80052aa:	2004      	movs	r0, #4
 80052ac:	2518      	movs	r5, #24
 80052ae:	1940      	adds	r0, r0, r5
 80052b0:	19c0      	adds	r0, r0, r7
 80052b2:	6001      	str	r1, [r0, #0]
 80052b4:	6042      	str	r2, [r0, #4]
 80052b6:	6083      	str	r3, [r0, #8]
 80052b8:	1dfb      	adds	r3, r7, #7
 80052ba:	1c22      	adds	r2, r4, #0
 80052bc:	701a      	strb	r2, [r3, #0]
	switch (cube_state) {
 80052be:	1dfb      	adds	r3, r7, #7
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b07      	cmp	r3, #7
 80052c4:	d900      	bls.n	80052c8 <Led_cube_Handle+0x28>
 80052c6:	e09c      	b.n	8005402 <Led_cube_Handle+0x162>
 80052c8:	009a      	lsls	r2, r3, #2
 80052ca:	4b52      	ldr	r3, [pc, #328]	; (8005414 <Led_cube_Handle+0x174>)
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	469f      	mov	pc, r3
		case TURN_OFF_ALL_LEDS:
			clearCube(hspi1);
 80052d2:	2304      	movs	r3, #4
 80052d4:	2218      	movs	r2, #24
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	19dc      	adds	r4, r3, r7
 80052da:	466b      	mov	r3, sp
 80052dc:	0018      	movs	r0, r3
 80052de:	0023      	movs	r3, r4
 80052e0:	3310      	adds	r3, #16
 80052e2:	2254      	movs	r2, #84	; 0x54
 80052e4:	0019      	movs	r1, r3
 80052e6:	f000 fc0d 	bl	8005b04 <memcpy>
 80052ea:	6820      	ldr	r0, [r4, #0]
 80052ec:	6861      	ldr	r1, [r4, #4]
 80052ee:	68a2      	ldr	r2, [r4, #8]
 80052f0:	68e3      	ldr	r3, [r4, #12]
 80052f2:	f7fe faf8 	bl	80038e6 <clearCube>
			break;
 80052f6:	e085      	b.n	8005404 <Led_cube_Handle+0x164>
		case TURN_ON_ALL_LEDS:
			lightCube(hspi1);
 80052f8:	2304      	movs	r3, #4
 80052fa:	2218      	movs	r2, #24
 80052fc:	189b      	adds	r3, r3, r2
 80052fe:	19dc      	adds	r4, r3, r7
 8005300:	466b      	mov	r3, sp
 8005302:	0018      	movs	r0, r3
 8005304:	0023      	movs	r3, r4
 8005306:	3310      	adds	r3, #16
 8005308:	2254      	movs	r2, #84	; 0x54
 800530a:	0019      	movs	r1, r3
 800530c:	f000 fbfa 	bl	8005b04 <memcpy>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	6861      	ldr	r1, [r4, #4]
 8005314:	68a2      	ldr	r2, [r4, #8]
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	f000 f87e 	bl	8005418 <lightCube>
			break;
 800531c:	e072      	b.n	8005404 <Led_cube_Handle+0x164>
		case SWEEP_ALL_LEDS:
			PlaneCube_Handle(hspi1);
 800531e:	2304      	movs	r3, #4
 8005320:	2218      	movs	r2, #24
 8005322:	189b      	adds	r3, r3, r2
 8005324:	19dc      	adds	r4, r3, r7
 8005326:	466b      	mov	r3, sp
 8005328:	0018      	movs	r0, r3
 800532a:	0023      	movs	r3, r4
 800532c:	3310      	adds	r3, #16
 800532e:	2254      	movs	r2, #84	; 0x54
 8005330:	0019      	movs	r1, r3
 8005332:	f000 fbe7 	bl	8005b04 <memcpy>
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	6861      	ldr	r1, [r4, #4]
 800533a:	68a2      	ldr	r2, [r4, #8]
 800533c:	68e3      	ldr	r3, [r4, #12]
 800533e:	f000 f8ad 	bl	800549c <PlaneCube_Handle>
			break;
 8005342:	e05f      	b.n	8005404 <Led_cube_Handle+0x164>
		case GROW_SHRINK_CUBE:
			GrowShrinkCube_Handle(hspi1);
 8005344:	2304      	movs	r3, #4
 8005346:	2218      	movs	r2, #24
 8005348:	189b      	adds	r3, r3, r2
 800534a:	19dc      	adds	r4, r3, r7
 800534c:	466b      	mov	r3, sp
 800534e:	0018      	movs	r0, r3
 8005350:	0023      	movs	r3, r4
 8005352:	3310      	adds	r3, #16
 8005354:	2254      	movs	r2, #84	; 0x54
 8005356:	0019      	movs	r1, r3
 8005358:	f000 fbd4 	bl	8005b04 <memcpy>
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	6861      	ldr	r1, [r4, #4]
 8005360:	68a2      	ldr	r2, [r4, #8]
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	f7ff fdc8 	bl	8004ef8 <GrowShrinkCube_Handle>
			break;
 8005368:	e04c      	b.n	8005404 <Led_cube_Handle+0x164>
		case DIAGONAL_CUBE:
			DiagonalCube_Handle(hspi1);
 800536a:	2304      	movs	r3, #4
 800536c:	2218      	movs	r2, #24
 800536e:	189b      	adds	r3, r3, r2
 8005370:	19dc      	adds	r4, r3, r7
 8005372:	466b      	mov	r3, sp
 8005374:	0018      	movs	r0, r3
 8005376:	0023      	movs	r3, r4
 8005378:	3310      	adds	r3, #16
 800537a:	2254      	movs	r2, #84	; 0x54
 800537c:	0019      	movs	r1, r3
 800537e:	f000 fbc1 	bl	8005b04 <memcpy>
 8005382:	6820      	ldr	r0, [r4, #0]
 8005384:	6861      	ldr	r1, [r4, #4]
 8005386:	68a2      	ldr	r2, [r4, #8]
 8005388:	68e3      	ldr	r3, [r4, #12]
 800538a:	f7ff fbc3 	bl	8004b14 <DiagonalCube_Handle>
			break;
 800538e:	e039      	b.n	8005404 <Led_cube_Handle+0x164>
		case AROUND_EDGE_CUBE:
			AroundEdgeCube_Handle(hspi1);
 8005390:	2304      	movs	r3, #4
 8005392:	2218      	movs	r2, #24
 8005394:	189b      	adds	r3, r3, r2
 8005396:	19dc      	adds	r4, r3, r7
 8005398:	466b      	mov	r3, sp
 800539a:	0018      	movs	r0, r3
 800539c:	0023      	movs	r3, r4
 800539e:	3310      	adds	r3, #16
 80053a0:	2254      	movs	r2, #84	; 0x54
 80053a2:	0019      	movs	r1, r3
 80053a4:	f000 fbae 	bl	8005b04 <memcpy>
 80053a8:	6820      	ldr	r0, [r4, #0]
 80053aa:	6861      	ldr	r1, [r4, #4]
 80053ac:	68a2      	ldr	r2, [r4, #8]
 80053ae:	68e3      	ldr	r3, [r4, #12]
 80053b0:	f7fe f928 	bl	8003604 <AroundEdgeCube_Handle>
			break;
 80053b4:	e026      	b.n	8005404 <Led_cube_Handle+0x164>
		case COUNT_DOWN_CUBE:
			CountDownCube_Handle(hspi1);
 80053b6:	2304      	movs	r3, #4
 80053b8:	2218      	movs	r2, #24
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	19dc      	adds	r4, r3, r7
 80053be:	466b      	mov	r3, sp
 80053c0:	0018      	movs	r0, r3
 80053c2:	0023      	movs	r3, r4
 80053c4:	3310      	adds	r3, #16
 80053c6:	2254      	movs	r2, #84	; 0x54
 80053c8:	0019      	movs	r1, r3
 80053ca:	f000 fb9b 	bl	8005b04 <memcpy>
 80053ce:	6820      	ldr	r0, [r4, #0]
 80053d0:	6861      	ldr	r1, [r4, #4]
 80053d2:	68a2      	ldr	r2, [r4, #8]
 80053d4:	68e3      	ldr	r3, [r4, #12]
 80053d6:	f7fe fabd 	bl	8003954 <CountDownCube_Handle>
			break;
 80053da:	e013      	b.n	8005404 <Led_cube_Handle+0x164>
		case RANDOM_RAIN_CUBE:
			RandomRainCube_Handle(4,hspi1);
 80053dc:	2304      	movs	r3, #4
 80053de:	2218      	movs	r2, #24
 80053e0:	189b      	adds	r3, r3, r2
 80053e2:	19dc      	adds	r4, r3, r7
 80053e4:	466b      	mov	r3, sp
 80053e6:	0018      	movs	r0, r3
 80053e8:	0023      	movs	r3, r4
 80053ea:	330c      	adds	r3, #12
 80053ec:	2258      	movs	r2, #88	; 0x58
 80053ee:	0019      	movs	r1, r3
 80053f0:	f000 fb88 	bl	8005b04 <memcpy>
 80053f4:	6821      	ldr	r1, [r4, #0]
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	68a3      	ldr	r3, [r4, #8]
 80053fa:	2004      	movs	r0, #4
 80053fc:	f000 fa7e 	bl	80058fc <RandomRainCube_Handle>
			break;
 8005400:	e000      	b.n	8005404 <Led_cube_Handle+0x164>
		default:
			break;
 8005402:	46c0      	nop			; (mov r8, r8)
	}
}
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46bd      	mov	sp, r7
 8005408:	b002      	add	sp, #8
 800540a:	bcb0      	pop	{r4, r5, r7}
 800540c:	bc08      	pop	{r3}
 800540e:	b004      	add	sp, #16
 8005410:	4718      	bx	r3
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	08006d2c 	.word	0x08006d2c

08005418 <lightCube>:
#include "light_cube.h"

void lightCube(SPI_HandleTypeDef hspi1)
{
 8005418:	b084      	sub	sp, #16
 800541a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541c:	b09f      	sub	sp, #124	; 0x7c
 800541e:	af18      	add	r7, sp, #96	; 0x60
 8005420:	2430      	movs	r4, #48	; 0x30
 8005422:	193c      	adds	r4, r7, r4
 8005424:	6020      	str	r0, [r4, #0]
 8005426:	6061      	str	r1, [r4, #4]
 8005428:	60a2      	str	r2, [r4, #8]
 800542a:	60e3      	str	r3, [r4, #12]
	uint8_t column[8], layer;
	for (int i = 0;  i < 8; i++)
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e029      	b.n	8005486 <lightCube+0x6e>
	{
		for (int j = 0; j < 8; j++)
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e007      	b.n	8005448 <lightCube+0x30>
		{
			column[i] = 0xff;
 8005438:	1d3a      	adds	r2, r7, #4
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	18d3      	adds	r3, r2, r3
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	3301      	adds	r3, #1
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b07      	cmp	r3, #7
 800544c:	ddf4      	ble.n	8005438 <lightCube+0x20>
		}
		layer = 0x80 >> i;
 800544e:	2280      	movs	r2, #128	; 0x80
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	411a      	asrs	r2, r3
 8005454:	210f      	movs	r1, #15
 8005456:	187b      	adds	r3, r7, r1
 8005458:	701a      	strb	r2, [r3, #0]
		TransmitData(column, layer,hspi1);
 800545a:	2330      	movs	r3, #48	; 0x30
 800545c:	18fc      	adds	r4, r7, r3
 800545e:	187b      	adds	r3, r7, r1
 8005460:	781e      	ldrb	r6, [r3, #0]
 8005462:	1d3d      	adds	r5, r7, #4
 8005464:	466b      	mov	r3, sp
 8005466:	0018      	movs	r0, r3
 8005468:	0023      	movs	r3, r4
 800546a:	3308      	adds	r3, #8
 800546c:	225c      	movs	r2, #92	; 0x5c
 800546e:	0019      	movs	r1, r3
 8005470:	f000 fb48 	bl	8005b04 <memcpy>
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	0031      	movs	r1, r6
 800547a:	0028      	movs	r0, r5
 800547c:	f000 fad4 	bl	8005a28 <TransmitData>
	for (int i = 0;  i < 8; i++)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3301      	adds	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b07      	cmp	r3, #7
 800548a:	ddd2      	ble.n	8005432 <lightCube+0x1a>
	}
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b007      	add	sp, #28
 8005494:	bcf0      	pop	{r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	b004      	add	sp, #16
 800549a:	4718      	bx	r3

0800549c <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(SPI_HandleTypeDef hspi1){
 800549c:	b084      	sub	sp, #16
 800549e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a0:	b0a1      	sub	sp, #132	; 0x84
 80054a2:	af18      	add	r7, sp, #96	; 0x60
 80054a4:	2438      	movs	r4, #56	; 0x38
 80054a6:	193c      	adds	r4, r7, r4
 80054a8:	6020      	str	r0, [r4, #0]
 80054aa:	6061      	str	r1, [r4, #4]
 80054ac:	60a2      	str	r2, [r4, #8]
 80054ae:	60e3      	str	r3, [r4, #12]
	switch(way_state){
 80054b0:	4bd8      	ldr	r3, [pc, #864]	; (8005814 <PlaneCube_Handle+0x378>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d100      	bne.n	80054ba <PlaneCube_Handle+0x1e>
 80054b8:	e13d      	b.n	8005736 <PlaneCube_Handle+0x29a>
 80054ba:	dd00      	ble.n	80054be <PlaneCube_Handle+0x22>
 80054bc:	e1d3      	b.n	8005866 <PlaneCube_Handle+0x3ca>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <PlaneCube_Handle+0x2e>
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d100      	bne.n	80054c8 <PlaneCube_Handle+0x2c>
 80054c6:	e084      	b.n	80055d2 <PlaneCube_Handle+0x136>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 80054c8:	e1cd      	b.n	8005866 <PlaneCube_Handle+0x3ca>
		layer_plane = 0xff;
 80054ca:	4bd3      	ldr	r3, [pc, #844]	; (8005818 <PlaneCube_Handle+0x37c>)
 80054cc:	22ff      	movs	r2, #255	; 0xff
 80054ce:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 80054d0:	f7fb faae 	bl	8000a30 <HAL_GetTick>
 80054d4:	0002      	movs	r2, r0
 80054d6:	4bd1      	ldr	r3, [pc, #836]	; (800581c <PlaneCube_Handle+0x380>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2264      	movs	r2, #100	; 0x64
 80054de:	4293      	cmp	r3, r2
 80054e0:	d200      	bcs.n	80054e4 <PlaneCube_Handle+0x48>
 80054e2:	e1c2      	b.n	800586a <PlaneCube_Handle+0x3ce>
			if (way)
 80054e4:	4bce      	ldr	r3, [pc, #824]	; (8005820 <PlaneCube_Handle+0x384>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d033      	beq.n	8005554 <PlaneCube_Handle+0xb8>
				column_plane[i] = 0xff;
 80054ec:	4bcd      	ldr	r3, [pc, #820]	; (8005824 <PlaneCube_Handle+0x388>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4acd      	ldr	r2, [pc, #820]	; (8005828 <PlaneCube_Handle+0x38c>)
 80054f2:	21ff      	movs	r1, #255	; 0xff
 80054f4:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane, hspi1);
 80054f6:	4bc8      	ldr	r3, [pc, #800]	; (8005818 <PlaneCube_Handle+0x37c>)
 80054f8:	781e      	ldrb	r6, [r3, #0]
 80054fa:	2338      	movs	r3, #56	; 0x38
 80054fc:	18fc      	adds	r4, r7, r3
 80054fe:	4dca      	ldr	r5, [pc, #808]	; (8005828 <PlaneCube_Handle+0x38c>)
 8005500:	466b      	mov	r3, sp
 8005502:	0018      	movs	r0, r3
 8005504:	0023      	movs	r3, r4
 8005506:	3308      	adds	r3, #8
 8005508:	225c      	movs	r2, #92	; 0x5c
 800550a:	0019      	movs	r1, r3
 800550c:	f000 fafa 	bl	8005b04 <memcpy>
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	0031      	movs	r1, r6
 8005516:	0028      	movs	r0, r5
 8005518:	f000 fa86 	bl	8005a28 <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 800551c:	4bc2      	ldr	r3, [pc, #776]	; (8005828 <PlaneCube_Handle+0x38c>)
 800551e:	79db      	ldrb	r3, [r3, #7]
 8005520:	2bff      	cmp	r3, #255	; 0xff
 8005522:	d103      	bne.n	800552c <PlaneCube_Handle+0x90>
 8005524:	4bbe      	ldr	r3, [pc, #760]	; (8005820 <PlaneCube_Handle+0x384>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e004      	b.n	8005536 <PlaneCube_Handle+0x9a>
				else i++;
 800552c:	4bbd      	ldr	r3, [pc, #756]	; (8005824 <PlaneCube_Handle+0x388>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	4bbc      	ldr	r3, [pc, #752]	; (8005824 <PlaneCube_Handle+0x388>)
 8005534:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e007      	b.n	800554c <PlaneCube_Handle+0xb0>
					column_plane[j] = 0;
 800553c:	4aba      	ldr	r2, [pc, #744]	; (8005828 <PlaneCube_Handle+0x38c>)
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	18d3      	adds	r3, r2, r3
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3301      	adds	r3, #1
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b07      	cmp	r3, #7
 8005550:	ddf4      	ble.n	800553c <PlaneCube_Handle+0xa0>
 8005552:	e038      	b.n	80055c6 <PlaneCube_Handle+0x12a>
				column_plane[i] = 0xff;
 8005554:	4bb3      	ldr	r3, [pc, #716]	; (8005824 <PlaneCube_Handle+0x388>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4ab3      	ldr	r2, [pc, #716]	; (8005828 <PlaneCube_Handle+0x38c>)
 800555a:	21ff      	movs	r1, #255	; 0xff
 800555c:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane, hspi1);
 800555e:	4bae      	ldr	r3, [pc, #696]	; (8005818 <PlaneCube_Handle+0x37c>)
 8005560:	781e      	ldrb	r6, [r3, #0]
 8005562:	2338      	movs	r3, #56	; 0x38
 8005564:	18fc      	adds	r4, r7, r3
 8005566:	4db0      	ldr	r5, [pc, #704]	; (8005828 <PlaneCube_Handle+0x38c>)
 8005568:	466b      	mov	r3, sp
 800556a:	0018      	movs	r0, r3
 800556c:	0023      	movs	r3, r4
 800556e:	3308      	adds	r3, #8
 8005570:	225c      	movs	r2, #92	; 0x5c
 8005572:	0019      	movs	r1, r3
 8005574:	f000 fac6 	bl	8005b04 <memcpy>
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	6863      	ldr	r3, [r4, #4]
 800557c:	0031      	movs	r1, r6
 800557e:	0028      	movs	r0, r5
 8005580:	f000 fa52 	bl	8005a28 <TransmitData>
				if (column_plane[0] == 0xff)
 8005584:	4ba8      	ldr	r3, [pc, #672]	; (8005828 <PlaneCube_Handle+0x38c>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2bff      	cmp	r3, #255	; 0xff
 800558a:	d109      	bne.n	80055a0 <PlaneCube_Handle+0x104>
						way = 1;
 800558c:	4ba4      	ldr	r3, [pc, #656]	; (8005820 <PlaneCube_Handle+0x384>)
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
						i = 0;
 8005592:	4ba4      	ldr	r3, [pc, #656]	; (8005824 <PlaneCube_Handle+0x388>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
						way_state = OY;
 8005598:	4b9e      	ldr	r3, [pc, #632]	; (8005814 <PlaneCube_Handle+0x378>)
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e004      	b.n	80055aa <PlaneCube_Handle+0x10e>
				else i--;
 80055a0:	4ba0      	ldr	r3, [pc, #640]	; (8005824 <PlaneCube_Handle+0x388>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	4b9f      	ldr	r3, [pc, #636]	; (8005824 <PlaneCube_Handle+0x388>)
 80055a8:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	e007      	b.n	80055c0 <PlaneCube_Handle+0x124>
					column_plane[j] = 0;
 80055b0:	4a9d      	ldr	r2, [pc, #628]	; (8005828 <PlaneCube_Handle+0x38c>)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	18d3      	adds	r3, r2, r3
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	3301      	adds	r3, #1
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b07      	cmp	r3, #7
 80055c4:	ddf4      	ble.n	80055b0 <PlaneCube_Handle+0x114>
			timer = HAL_GetTick();
 80055c6:	f7fb fa33 	bl	8000a30 <HAL_GetTick>
 80055ca:	0002      	movs	r2, r0
 80055cc:	4b93      	ldr	r3, [pc, #588]	; (800581c <PlaneCube_Handle+0x380>)
 80055ce:	601a      	str	r2, [r3, #0]
		break;
 80055d0:	e14b      	b.n	800586a <PlaneCube_Handle+0x3ce>
		layer_plane = 0xff;
 80055d2:	4b91      	ldr	r3, [pc, #580]	; (8005818 <PlaneCube_Handle+0x37c>)
 80055d4:	22ff      	movs	r2, #255	; 0xff
 80055d6:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 80055d8:	4b93      	ldr	r3, [pc, #588]	; (8005828 <PlaneCube_Handle+0x38c>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d125      	bne.n	800562c <PlaneCube_Handle+0x190>
			for (int j = 0; j < 8; j++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e007      	b.n	80055f6 <PlaneCube_Handle+0x15a>
				column_plane[j] = 1;
 80055e6:	4a90      	ldr	r2, [pc, #576]	; (8005828 <PlaneCube_Handle+0x38c>)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	18d3      	adds	r3, r2, r3
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	3301      	adds	r3, #1
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	ddf4      	ble.n	80055e6 <PlaneCube_Handle+0x14a>
			TransmitData(column_plane, layer_plane, hspi1);
 80055fc:	4b86      	ldr	r3, [pc, #536]	; (8005818 <PlaneCube_Handle+0x37c>)
 80055fe:	781e      	ldrb	r6, [r3, #0]
 8005600:	2338      	movs	r3, #56	; 0x38
 8005602:	18fc      	adds	r4, r7, r3
 8005604:	4d88      	ldr	r5, [pc, #544]	; (8005828 <PlaneCube_Handle+0x38c>)
 8005606:	466b      	mov	r3, sp
 8005608:	0018      	movs	r0, r3
 800560a:	0023      	movs	r3, r4
 800560c:	3308      	adds	r3, #8
 800560e:	225c      	movs	r2, #92	; 0x5c
 8005610:	0019      	movs	r1, r3
 8005612:	f000 fa77 	bl	8005b04 <memcpy>
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	6863      	ldr	r3, [r4, #4]
 800561a:	0031      	movs	r1, r6
 800561c:	0028      	movs	r0, r5
 800561e:	f000 fa03 	bl	8005a28 <TransmitData>
			timer = HAL_GetTick();
 8005622:	f7fb fa05 	bl	8000a30 <HAL_GetTick>
 8005626:	0002      	movs	r2, r0
 8005628:	4b7c      	ldr	r3, [pc, #496]	; (800581c <PlaneCube_Handle+0x380>)
 800562a:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 800562c:	f7fb fa00 	bl	8000a30 <HAL_GetTick>
 8005630:	0002      	movs	r2, r0
 8005632:	4b7a      	ldr	r3, [pc, #488]	; (800581c <PlaneCube_Handle+0x380>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2264      	movs	r2, #100	; 0x64
 800563a:	4293      	cmp	r3, r2
 800563c:	d200      	bcs.n	8005640 <PlaneCube_Handle+0x1a4>
 800563e:	e116      	b.n	800586e <PlaneCube_Handle+0x3d2>
			if (way)
 8005640:	4b77      	ldr	r3, [pc, #476]	; (8005820 <PlaneCube_Handle+0x384>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02e      	beq.n	80056a6 <PlaneCube_Handle+0x20a>
				for (int j = 0; j < 8; j++)
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	e00d      	b.n	800566a <PlaneCube_Handle+0x1ce>
					column_plane[j] <<= 1;
 800564e:	4a76      	ldr	r2, [pc, #472]	; (8005828 <PlaneCube_Handle+0x38c>)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	18d3      	adds	r3, r2, r3
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	18db      	adds	r3, r3, r3
 8005658:	b2d9      	uxtb	r1, r3
 800565a:	4a73      	ldr	r2, [pc, #460]	; (8005828 <PlaneCube_Handle+0x38c>)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	18d3      	adds	r3, r2, r3
 8005660:	1c0a      	adds	r2, r1, #0
 8005662:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3301      	adds	r3, #1
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b07      	cmp	r3, #7
 800566e:	ddee      	ble.n	800564e <PlaneCube_Handle+0x1b2>
				TransmitData(column_plane, layer_plane, hspi1);
 8005670:	4b69      	ldr	r3, [pc, #420]	; (8005818 <PlaneCube_Handle+0x37c>)
 8005672:	781e      	ldrb	r6, [r3, #0]
 8005674:	2338      	movs	r3, #56	; 0x38
 8005676:	18fc      	adds	r4, r7, r3
 8005678:	4d6b      	ldr	r5, [pc, #428]	; (8005828 <PlaneCube_Handle+0x38c>)
 800567a:	466b      	mov	r3, sp
 800567c:	0018      	movs	r0, r3
 800567e:	0023      	movs	r3, r4
 8005680:	3308      	adds	r3, #8
 8005682:	225c      	movs	r2, #92	; 0x5c
 8005684:	0019      	movs	r1, r3
 8005686:	f000 fa3d 	bl	8005b04 <memcpy>
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	0031      	movs	r1, r6
 8005690:	0028      	movs	r0, r5
 8005692:	f000 f9c9 	bl	8005a28 <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 8005696:	4b64      	ldr	r3, [pc, #400]	; (8005828 <PlaneCube_Handle+0x38c>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d145      	bne.n	800572a <PlaneCube_Handle+0x28e>
 800569e:	4b60      	ldr	r3, [pc, #384]	; (8005820 <PlaneCube_Handle+0x384>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e041      	b.n	800572a <PlaneCube_Handle+0x28e>
				for (int j = 0; j < 8; j++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e00d      	b.n	80056c8 <PlaneCube_Handle+0x22c>
					column_plane[j] >>= 1;
 80056ac:	4a5e      	ldr	r2, [pc, #376]	; (8005828 <PlaneCube_Handle+0x38c>)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	18d3      	adds	r3, r2, r3
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	b2d9      	uxtb	r1, r3
 80056b8:	4a5b      	ldr	r2, [pc, #364]	; (8005828 <PlaneCube_Handle+0x38c>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	18d3      	adds	r3, r2, r3
 80056be:	1c0a      	adds	r2, r1, #0
 80056c0:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b07      	cmp	r3, #7
 80056cc:	ddee      	ble.n	80056ac <PlaneCube_Handle+0x210>
				TransmitData(column_plane, layer_plane, hspi1);
 80056ce:	4b52      	ldr	r3, [pc, #328]	; (8005818 <PlaneCube_Handle+0x37c>)
 80056d0:	781e      	ldrb	r6, [r3, #0]
 80056d2:	2338      	movs	r3, #56	; 0x38
 80056d4:	18fc      	adds	r4, r7, r3
 80056d6:	4d54      	ldr	r5, [pc, #336]	; (8005828 <PlaneCube_Handle+0x38c>)
 80056d8:	466b      	mov	r3, sp
 80056da:	0018      	movs	r0, r3
 80056dc:	0023      	movs	r3, r4
 80056de:	3308      	adds	r3, #8
 80056e0:	225c      	movs	r2, #92	; 0x5c
 80056e2:	0019      	movs	r1, r3
 80056e4:	f000 fa0e 	bl	8005b04 <memcpy>
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	0031      	movs	r1, r6
 80056ee:	0028      	movs	r0, r5
 80056f0:	f000 f99a 	bl	8005a28 <TransmitData>
				if (column_plane[0] == 0x00)
 80056f4:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <PlaneCube_Handle+0x38c>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <PlaneCube_Handle+0x28e>
					for (int j = 0; j < 8; j++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	e007      	b.n	8005712 <PlaneCube_Handle+0x276>
						column_plane[j] = 0xff;
 8005702:	4a49      	ldr	r2, [pc, #292]	; (8005828 <PlaneCube_Handle+0x38c>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	18d3      	adds	r3, r2, r3
 8005708:	22ff      	movs	r2, #255	; 0xff
 800570a:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	3301      	adds	r3, #1
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b07      	cmp	r3, #7
 8005716:	ddf4      	ble.n	8005702 <PlaneCube_Handle+0x266>
					layer_plane = 0;
 8005718:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <PlaneCube_Handle+0x37c>)
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
					way = 1;
 800571e:	4b40      	ldr	r3, [pc, #256]	; (8005820 <PlaneCube_Handle+0x384>)
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8005724:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <PlaneCube_Handle+0x378>)
 8005726:	2202      	movs	r2, #2
 8005728:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 800572a:	f7fb f981 	bl	8000a30 <HAL_GetTick>
 800572e:	0002      	movs	r2, r0
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <PlaneCube_Handle+0x380>)
 8005732:	601a      	str	r2, [r3, #0]
		break;
 8005734:	e09b      	b.n	800586e <PlaneCube_Handle+0x3d2>
		if(layer_plane == 0)
 8005736:	4b38      	ldr	r3, [pc, #224]	; (8005818 <PlaneCube_Handle+0x37c>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d11a      	bne.n	8005774 <PlaneCube_Handle+0x2d8>
			layer_plane = 1;
 800573e:	4b36      	ldr	r3, [pc, #216]	; (8005818 <PlaneCube_Handle+0x37c>)
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane, hspi1);
 8005744:	4b34      	ldr	r3, [pc, #208]	; (8005818 <PlaneCube_Handle+0x37c>)
 8005746:	781e      	ldrb	r6, [r3, #0]
 8005748:	2338      	movs	r3, #56	; 0x38
 800574a:	18fc      	adds	r4, r7, r3
 800574c:	4d36      	ldr	r5, [pc, #216]	; (8005828 <PlaneCube_Handle+0x38c>)
 800574e:	466b      	mov	r3, sp
 8005750:	0018      	movs	r0, r3
 8005752:	0023      	movs	r3, r4
 8005754:	3308      	adds	r3, #8
 8005756:	225c      	movs	r2, #92	; 0x5c
 8005758:	0019      	movs	r1, r3
 800575a:	f000 f9d3 	bl	8005b04 <memcpy>
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	0031      	movs	r1, r6
 8005764:	0028      	movs	r0, r5
 8005766:	f000 f95f 	bl	8005a28 <TransmitData>
			timer = HAL_GetTick();
 800576a:	f7fb f961 	bl	8000a30 <HAL_GetTick>
 800576e:	0002      	movs	r2, r0
 8005770:	4b2a      	ldr	r3, [pc, #168]	; (800581c <PlaneCube_Handle+0x380>)
 8005772:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8005774:	f7fb f95c 	bl	8000a30 <HAL_GetTick>
 8005778:	0002      	movs	r2, r0
 800577a:	4b28      	ldr	r3, [pc, #160]	; (800581c <PlaneCube_Handle+0x380>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2264      	movs	r2, #100	; 0x64
 8005782:	4293      	cmp	r3, r2
 8005784:	d200      	bcs.n	8005788 <PlaneCube_Handle+0x2ec>
 8005786:	e074      	b.n	8005872 <PlaneCube_Handle+0x3d6>
			if(way)
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <PlaneCube_Handle+0x384>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <PlaneCube_Handle+0x336>
				layer_plane <<= 1;
 8005790:	4b21      	ldr	r3, [pc, #132]	; (8005818 <PlaneCube_Handle+0x37c>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	18db      	adds	r3, r3, r3
 8005796:	b2da      	uxtb	r2, r3
 8005798:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <PlaneCube_Handle+0x37c>)
 800579a:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane, hspi1);
 800579c:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <PlaneCube_Handle+0x37c>)
 800579e:	781e      	ldrb	r6, [r3, #0]
 80057a0:	2338      	movs	r3, #56	; 0x38
 80057a2:	18fc      	adds	r4, r7, r3
 80057a4:	4d20      	ldr	r5, [pc, #128]	; (8005828 <PlaneCube_Handle+0x38c>)
 80057a6:	466b      	mov	r3, sp
 80057a8:	0018      	movs	r0, r3
 80057aa:	0023      	movs	r3, r4
 80057ac:	3308      	adds	r3, #8
 80057ae:	225c      	movs	r2, #92	; 0x5c
 80057b0:	0019      	movs	r1, r3
 80057b2:	f000 f9a7 	bl	8005b04 <memcpy>
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	0031      	movs	r1, r6
 80057bc:	0028      	movs	r0, r5
 80057be:	f000 f933 	bl	8005a28 <TransmitData>
				if(layer_plane == 0x80) way = 0;
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <PlaneCube_Handle+0x37c>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b80      	cmp	r3, #128	; 0x80
 80057c8:	d147      	bne.n	800585a <PlaneCube_Handle+0x3be>
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <PlaneCube_Handle+0x384>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e043      	b.n	800585a <PlaneCube_Handle+0x3be>
				layer_plane >>= 1;
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <PlaneCube_Handle+0x37c>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <PlaneCube_Handle+0x37c>)
 80057dc:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane, hspi1);
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <PlaneCube_Handle+0x37c>)
 80057e0:	781e      	ldrb	r6, [r3, #0]
 80057e2:	2338      	movs	r3, #56	; 0x38
 80057e4:	18fc      	adds	r4, r7, r3
 80057e6:	4d10      	ldr	r5, [pc, #64]	; (8005828 <PlaneCube_Handle+0x38c>)
 80057e8:	466b      	mov	r3, sp
 80057ea:	0018      	movs	r0, r3
 80057ec:	0023      	movs	r3, r4
 80057ee:	3308      	adds	r3, #8
 80057f0:	225c      	movs	r2, #92	; 0x5c
 80057f2:	0019      	movs	r1, r3
 80057f4:	f000 f986 	bl	8005b04 <memcpy>
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	6863      	ldr	r3, [r4, #4]
 80057fc:	0031      	movs	r1, r6
 80057fe:	0028      	movs	r0, r5
 8005800:	f000 f912 	bl	8005a28 <TransmitData>
				if(layer_plane == 0x01)
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <PlaneCube_Handle+0x37c>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d126      	bne.n	800585a <PlaneCube_Handle+0x3be>
					for (int j = 0; j < 8; j++)
 800580c:	2300      	movs	r3, #0
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	e014      	b.n	800583c <PlaneCube_Handle+0x3a0>
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	2000021c 	.word	0x2000021c
 8005818:	20000224 	.word	0x20000224
 800581c:	20000220 	.word	0x20000220
 8005820:	2000021d 	.word	0x2000021d
 8005824:	20000230 	.word	0x20000230
 8005828:	20000228 	.word	0x20000228
						column_plane[j] = 0;
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <PlaneCube_Handle+0x3e8>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	18d3      	adds	r3, r2, r3
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3301      	adds	r3, #1
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b07      	cmp	r3, #7
 8005840:	ddf4      	ble.n	800582c <PlaneCube_Handle+0x390>
					i = 0;
 8005842:	4b11      	ldr	r3, [pc, #68]	; (8005888 <PlaneCube_Handle+0x3ec>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
					way = 1;
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <PlaneCube_Handle+0x3f0>)
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <PlaneCube_Handle+0x3f4>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <PlaneCube_Handle+0x3f8>)
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 800585a:	f7fb f8e9 	bl	8000a30 <HAL_GetTick>
 800585e:	0002      	movs	r2, r0
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <PlaneCube_Handle+0x3fc>)
 8005862:	601a      	str	r2, [r3, #0]
		break;
 8005864:	e005      	b.n	8005872 <PlaneCube_Handle+0x3d6>
		break;
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	e004      	b.n	8005874 <PlaneCube_Handle+0x3d8>
		break;
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	e002      	b.n	8005874 <PlaneCube_Handle+0x3d8>
		break;
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	e000      	b.n	8005874 <PlaneCube_Handle+0x3d8>
		break;
 8005872:	46c0      	nop			; (mov r8, r8)
	}
}
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	b009      	add	sp, #36	; 0x24
 800587a:	bcf0      	pop	{r4, r5, r6, r7}
 800587c:	bc08      	pop	{r3}
 800587e:	b004      	add	sp, #16
 8005880:	4718      	bx	r3
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	20000228 	.word	0x20000228
 8005888:	20000230 	.word	0x20000230
 800588c:	2000021d 	.word	0x2000021d
 8005890:	2000021c 	.word	0x2000021c
 8005894:	20000224 	.word	0x20000224
 8005898:	20000220 	.word	0x20000220

0800589c <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <PlaneCube_Set_State+0x48>)
 80058a4:	2202      	movs	r2, #2
 80058a6:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80058a8:	2300      	movs	r3, #0
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	e007      	b.n	80058be <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 80058ae:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <PlaneCube_Set_State+0x4c>)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	18d3      	adds	r3, r2, r3
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3301      	adds	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b07      	cmp	r3, #7
 80058c2:	ddf4      	ble.n	80058ae <PlaneCube_Set_State+0x12>
	}
	i = 0;
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <PlaneCube_Set_State+0x50>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
	way = 1;
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <PlaneCube_Set_State+0x54>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <PlaneCube_Set_State+0x58>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <PlaneCube_Set_State+0x5c>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
}
 80058dc:	46c0      	nop			; (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	b002      	add	sp, #8
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000010 	.word	0x20000010
 80058e8:	20000228 	.word	0x20000228
 80058ec:	20000230 	.word	0x20000230
 80058f0:	2000021d 	.word	0x2000021d
 80058f4:	20000224 	.word	0x20000224
 80058f8:	2000021c 	.word	0x2000021c

080058fc <RandomRainCube_Handle>:
#include "random_rain_cube.h"
static int x,y,z;
uint32_t time_rain = 0;

void RandomRainCube_Handle(int rain_times,SPI_HandleTypeDef hspi1)
{
 80058fc:	b084      	sub	sp, #16
 80058fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005900:	46c6      	mov	lr, r8
 8005902:	b500      	push	{lr}
 8005904:	b09e      	sub	sp, #120	; 0x78
 8005906:	af1a      	add	r7, sp, #104	; 0x68
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	2004      	movs	r0, #4
 800590c:	2428      	movs	r4, #40	; 0x28
 800590e:	1900      	adds	r0, r0, r4
 8005910:	19c0      	adds	r0, r0, r7
 8005912:	6001      	str	r1, [r0, #0]
 8005914:	6042      	str	r2, [r0, #4]
 8005916:	6083      	str	r3, [r0, #8]
	srand(HAL_GetTick());
 8005918:	f7fb f88a 	bl	8000a30 <HAL_GetTick>
 800591c:	0003      	movs	r3, r0
 800591e:	0018      	movs	r0, r3
 8005920:	f000 f902 	bl	8005b28 <srand>
	if (HAL_GetTick() - time_rain >= 50)
 8005924:	f7fb f884 	bl	8000a30 <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <RandomRainCube_Handle+0xf8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b31      	cmp	r3, #49	; 0x31
 8005932:	d911      	bls.n	8005958 <RandomRainCube_Handle+0x5c>
	{


			if (z == 0) z = 7;
 8005934:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <RandomRainCube_Handle+0xfc>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <RandomRainCube_Handle+0x48>
 800593c:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <RandomRainCube_Handle+0xfc>)
 800593e:	2207      	movs	r2, #7
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e004      	b.n	800594e <RandomRainCube_Handle+0x52>
			else z--;
 8005944:	4b2c      	ldr	r3, [pc, #176]	; (80059f8 <RandomRainCube_Handle+0xfc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	1e5a      	subs	r2, r3, #1
 800594a:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <RandomRainCube_Handle+0xfc>)
 800594c:	601a      	str	r2, [r3, #0]
			time_rain = HAL_GetTick();
 800594e:	f7fb f86f 	bl	8000a30 <HAL_GetTick>
 8005952:	0002      	movs	r2, r0
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <RandomRainCube_Handle+0xf8>)
 8005956:	601a      	str	r2, [r3, #0]
	}

	for (int n = 0; n < rain_times; n++)
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e03c      	b.n	80059d8 <RandomRainCube_Handle+0xdc>
	{
		if (z == 7)
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <RandomRainCube_Handle+0xfc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b07      	cmp	r3, #7
 8005964:	d11b      	bne.n	800599e <RandomRainCube_Handle+0xa2>
		{
			x = rand() % 8;
 8005966:	f000 f90f 	bl	8005b88 <rand>
 800596a:	0003      	movs	r3, r0
 800596c:	4a23      	ldr	r2, [pc, #140]	; (80059fc <RandomRainCube_Handle+0x100>)
 800596e:	4013      	ands	r3, r2
 8005970:	d504      	bpl.n	800597c <RandomRainCube_Handle+0x80>
 8005972:	3b01      	subs	r3, #1
 8005974:	2208      	movs	r2, #8
 8005976:	4252      	negs	r2, r2
 8005978:	4313      	orrs	r3, r2
 800597a:	3301      	adds	r3, #1
 800597c:	001a      	movs	r2, r3
 800597e:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <RandomRainCube_Handle+0x104>)
 8005980:	601a      	str	r2, [r3, #0]
			y = rand() % 8;
 8005982:	f000 f901 	bl	8005b88 <rand>
 8005986:	0003      	movs	r3, r0
 8005988:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <RandomRainCube_Handle+0x100>)
 800598a:	4013      	ands	r3, r2
 800598c:	d504      	bpl.n	8005998 <RandomRainCube_Handle+0x9c>
 800598e:	3b01      	subs	r3, #1
 8005990:	2208      	movs	r2, #8
 8005992:	4252      	negs	r2, r2
 8005994:	4313      	orrs	r3, r2
 8005996:	3301      	adds	r3, #1
 8005998:	001a      	movs	r2, r3
 800599a:	4b1a      	ldr	r3, [pc, #104]	; (8005a04 <RandomRainCube_Handle+0x108>)
 800599c:	601a      	str	r2, [r3, #0]
		}

		DisplayLed(x, y, z, hspi1, 0);
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <RandomRainCube_Handle+0x104>)
 80059a0:	681d      	ldr	r5, [r3, #0]
 80059a2:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <RandomRainCube_Handle+0x108>)
 80059a4:	681e      	ldr	r6, [r3, #0]
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <RandomRainCube_Handle+0xfc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4698      	mov	r8, r3
 80059ac:	2304      	movs	r3, #4
 80059ae:	2228      	movs	r2, #40	; 0x28
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	19dc      	adds	r4, r3, r7
 80059b4:	2300      	movs	r3, #0
 80059b6:	9318      	str	r3, [sp, #96]	; 0x60
 80059b8:	466b      	mov	r3, sp
 80059ba:	0018      	movs	r0, r3
 80059bc:	1d23      	adds	r3, r4, #4
 80059be:	2260      	movs	r2, #96	; 0x60
 80059c0:	0019      	movs	r1, r3
 80059c2:	f000 f89f 	bl	8005b04 <memcpy>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	4642      	mov	r2, r8
 80059ca:	0031      	movs	r1, r6
 80059cc:	0028      	movs	r0, r5
 80059ce:	f7ff fa0d 	bl	8004dec <DisplayLed>
	for (int n = 0; n < rain_times; n++)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	dbbe      	blt.n	800595e <RandomRainCube_Handle+0x62>
	}

}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b004      	add	sp, #16
 80059e8:	bc80      	pop	{r7}
 80059ea:	46b8      	mov	r8, r7
 80059ec:	bcf0      	pop	{r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	b004      	add	sp, #16
 80059f2:	4718      	bx	r3
 80059f4:	20000240 	.word	0x20000240
 80059f8:	2000023c 	.word	0x2000023c
 80059fc:	80000007 	.word	0x80000007
 8005a00:	20000234 	.word	0x20000234
 8005a04:	20000238 	.word	0x20000238

08005a08 <RandomRainCube_Set_State>:

void RandomRainCube_Set_State()
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	z = 7;
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <RandomRainCube_Set_State+0x18>)
 8005a0e:	2207      	movs	r2, #7
 8005a10:	601a      	str	r2, [r3, #0]
	currentEffect = RANDOM_RAIN_CUBE;
 8005a12:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <RandomRainCube_Set_State+0x1c>)
 8005a14:	2207      	movs	r2, #7
 8005a16:	701a      	strb	r2, [r3, #0]
}
 8005a18:	46c0      	nop			; (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	2000023c 	.word	0x2000023c
 8005a24:	20000010 	.word	0x20000010

08005a28 <TransmitData>:
#include "transmit_data.h"


void TransmitData(uint8_t column_data[], uint8_t layer_data,SPI_HandleTypeDef hspi1) //ok
{
 8005a28:	b082      	sub	sp, #8
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b086      	sub	sp, #24
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	0008      	movs	r0, r1
 8005a34:	2120      	movs	r1, #32
 8005a36:	1879      	adds	r1, r7, r1
 8005a38:	600a      	str	r2, [r1, #0]
 8005a3a:	604b      	str	r3, [r1, #4]
 8005a3c:	1cfb      	adds	r3, r7, #3
 8005a3e:	1c02      	adds	r2, r0, #0
 8005a40:	701a      	strb	r2, [r3, #0]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 8005a42:	2308      	movs	r3, #8
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	1cfa      	adds	r2, r7, #3
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	e00d      	b.n	8005a6e <TransmitData+0x46>
	{
		dataOut[i] = column_data[i-1];
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	18d3      	adds	r3, r2, r3
 8005a5a:	7819      	ldrb	r1, [r3, #0]
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	18fa      	adds	r2, r7, r3
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	18d3      	adds	r3, r2, r3
 8005a64:	1c0a      	adds	r2, r1, #0
 8005a66:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	ddee      	ble.n	8005a52 <TransmitData+0x2a>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8005a74:	2390      	movs	r3, #144	; 0x90
 8005a76:	05db      	lsls	r3, r3, #23
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2140      	movs	r1, #64	; 0x40
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7fb fac2 	bl	8001006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8005a82:	2308      	movs	r3, #8
 8005a84:	18f9      	adds	r1, r7, r3
 8005a86:	2320      	movs	r3, #32
 8005a88:	18f8      	adds	r0, r7, r3
 8005a8a:	2364      	movs	r3, #100	; 0x64
 8005a8c:	2209      	movs	r2, #9
 8005a8e:	f7fc f97d 	bl	8001d8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8005a92:	2390      	movs	r3, #144	; 0x90
 8005a94:	05db      	lsls	r3, r3, #23
 8005a96:	2201      	movs	r2, #1
 8005a98:	2140      	movs	r1, #64	; 0x40
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7fb fab3 	bl	8001006 <HAL_GPIO_WritePin>
}
 8005aa0:	46c0      	nop			; (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b006      	add	sp, #24
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	bc08      	pop	{r3}
 8005aaa:	b002      	add	sp, #8
 8005aac:	4718      	bx	r3
	...

08005ab0 <__errno>:
 8005ab0:	4b01      	ldr	r3, [pc, #4]	; (8005ab8 <__errno+0x8>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	4770      	bx	lr
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	20000014 	.word	0x20000014

08005abc <__libc_init_array>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	2600      	movs	r6, #0
 8005ac0:	4d0c      	ldr	r5, [pc, #48]	; (8005af4 <__libc_init_array+0x38>)
 8005ac2:	4c0d      	ldr	r4, [pc, #52]	; (8005af8 <__libc_init_array+0x3c>)
 8005ac4:	1b64      	subs	r4, r4, r5
 8005ac6:	10a4      	asrs	r4, r4, #2
 8005ac8:	42a6      	cmp	r6, r4
 8005aca:	d109      	bne.n	8005ae0 <__libc_init_array+0x24>
 8005acc:	2600      	movs	r6, #0
 8005ace:	f001 f8e1 	bl	8006c94 <_init>
 8005ad2:	4d0a      	ldr	r5, [pc, #40]	; (8005afc <__libc_init_array+0x40>)
 8005ad4:	4c0a      	ldr	r4, [pc, #40]	; (8005b00 <__libc_init_array+0x44>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	42a6      	cmp	r6, r4
 8005adc:	d105      	bne.n	8005aea <__libc_init_array+0x2e>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	00b3      	lsls	r3, r6, #2
 8005ae2:	58eb      	ldr	r3, [r5, r3]
 8005ae4:	4798      	blx	r3
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	e7ee      	b.n	8005ac8 <__libc_init_array+0xc>
 8005aea:	00b3      	lsls	r3, r6, #2
 8005aec:	58eb      	ldr	r3, [r5, r3]
 8005aee:	4798      	blx	r3
 8005af0:	3601      	adds	r6, #1
 8005af2:	e7f2      	b.n	8005ada <__libc_init_array+0x1e>
 8005af4:	08006e94 	.word	0x08006e94
 8005af8:	08006e94 	.word	0x08006e94
 8005afc:	08006e94 	.word	0x08006e94
 8005b00:	08006e98 	.word	0x08006e98

08005b04 <memcpy>:
 8005b04:	2300      	movs	r3, #0
 8005b06:	b510      	push	{r4, lr}
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d100      	bne.n	8005b0e <memcpy+0xa>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	5ccc      	ldrb	r4, [r1, r3]
 8005b10:	54c4      	strb	r4, [r0, r3]
 8005b12:	3301      	adds	r3, #1
 8005b14:	e7f8      	b.n	8005b08 <memcpy+0x4>

08005b16 <memset>:
 8005b16:	0003      	movs	r3, r0
 8005b18:	1882      	adds	r2, r0, r2
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d100      	bne.n	8005b20 <memset+0xa>
 8005b1e:	4770      	bx	lr
 8005b20:	7019      	strb	r1, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	e7f9      	b.n	8005b1a <memset+0x4>
	...

08005b28 <srand>:
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <srand+0x48>)
 8005b2a:	b570      	push	{r4, r5, r6, lr}
 8005b2c:	681d      	ldr	r5, [r3, #0]
 8005b2e:	0004      	movs	r4, r0
 8005b30:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <srand+0x3c>
 8005b36:	2018      	movs	r0, #24
 8005b38:	f000 f892 	bl	8005c60 <malloc>
 8005b3c:	1e02      	subs	r2, r0, #0
 8005b3e:	63a8      	str	r0, [r5, #56]	; 0x38
 8005b40:	d104      	bne.n	8005b4c <srand+0x24>
 8005b42:	2142      	movs	r1, #66	; 0x42
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <srand+0x4c>)
 8005b46:	480c      	ldr	r0, [pc, #48]	; (8005b78 <srand+0x50>)
 8005b48:	f000 f85c 	bl	8005c04 <__assert_func>
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <srand+0x54>)
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6003      	str	r3, [r0, #0]
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <srand+0x58>)
 8005b54:	6043      	str	r3, [r0, #4]
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <srand+0x5c>)
 8005b58:	6083      	str	r3, [r0, #8]
 8005b5a:	230b      	movs	r3, #11
 8005b5c:	8183      	strh	r3, [r0, #12]
 8005b5e:	2001      	movs	r0, #1
 8005b60:	6110      	str	r0, [r2, #16]
 8005b62:	6151      	str	r1, [r2, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005b68:	611c      	str	r4, [r3, #16]
 8005b6a:	615a      	str	r2, [r3, #20]
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	20000014 	.word	0x20000014
 8005b74:	08006d50 	.word	0x08006d50
 8005b78:	08006d67 	.word	0x08006d67
 8005b7c:	abcd330e 	.word	0xabcd330e
 8005b80:	e66d1234 	.word	0xe66d1234
 8005b84:	0005deec 	.word	0x0005deec

08005b88 <rand>:
 8005b88:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <rand+0x5c>)
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	681c      	ldr	r4, [r3, #0]
 8005b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d116      	bne.n	8005bc2 <rand+0x3a>
 8005b94:	2018      	movs	r0, #24
 8005b96:	f000 f863 	bl	8005c60 <malloc>
 8005b9a:	1e02      	subs	r2, r0, #0
 8005b9c:	63a0      	str	r0, [r4, #56]	; 0x38
 8005b9e:	d104      	bne.n	8005baa <rand+0x22>
 8005ba0:	214e      	movs	r1, #78	; 0x4e
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <rand+0x60>)
 8005ba4:	4811      	ldr	r0, [pc, #68]	; (8005bec <rand+0x64>)
 8005ba6:	f000 f82d 	bl	8005c04 <__assert_func>
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <rand+0x68>)
 8005bac:	2100      	movs	r1, #0
 8005bae:	6003      	str	r3, [r0, #0]
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <rand+0x6c>)
 8005bb2:	6043      	str	r3, [r0, #4]
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <rand+0x70>)
 8005bb6:	6083      	str	r3, [r0, #8]
 8005bb8:	230b      	movs	r3, #11
 8005bba:	8183      	strh	r3, [r0, #12]
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	6110      	str	r0, [r2, #16]
 8005bc0:	6151      	str	r1, [r2, #20]
 8005bc2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005bc4:	4a0d      	ldr	r2, [pc, #52]	; (8005bfc <rand+0x74>)
 8005bc6:	6920      	ldr	r0, [r4, #16]
 8005bc8:	6961      	ldr	r1, [r4, #20]
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <rand+0x78>)
 8005bcc:	f7fa fb32 	bl	8000234 <__aeabi_lmul>
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	1880      	adds	r0, r0, r2
 8005bd6:	4159      	adcs	r1, r3
 8005bd8:	6120      	str	r0, [r4, #16]
 8005bda:	6161      	str	r1, [r4, #20]
 8005bdc:	0048      	lsls	r0, r1, #1
 8005bde:	0840      	lsrs	r0, r0, #1
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	20000014 	.word	0x20000014
 8005be8:	08006d50 	.word	0x08006d50
 8005bec:	08006d67 	.word	0x08006d67
 8005bf0:	abcd330e 	.word	0xabcd330e
 8005bf4:	e66d1234 	.word	0xe66d1234
 8005bf8:	0005deec 	.word	0x0005deec
 8005bfc:	4c957f2d 	.word	0x4c957f2d
 8005c00:	5851f42d 	.word	0x5851f42d

08005c04 <__assert_func>:
 8005c04:	b530      	push	{r4, r5, lr}
 8005c06:	0014      	movs	r4, r2
 8005c08:	001a      	movs	r2, r3
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <__assert_func+0x2c>)
 8005c0c:	0005      	movs	r5, r0
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	b085      	sub	sp, #20
 8005c12:	68d8      	ldr	r0, [r3, #12]
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <__assert_func+0x30>)
 8005c16:	2c00      	cmp	r4, #0
 8005c18:	d101      	bne.n	8005c1e <__assert_func+0x1a>
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <__assert_func+0x34>)
 8005c1c:	001c      	movs	r4, r3
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	9100      	str	r1, [sp, #0]
 8005c22:	002b      	movs	r3, r5
 8005c24:	4905      	ldr	r1, [pc, #20]	; (8005c3c <__assert_func+0x38>)
 8005c26:	9402      	str	r4, [sp, #8]
 8005c28:	f000 f80a 	bl	8005c40 <fiprintf>
 8005c2c:	f000 fcc8 	bl	80065c0 <abort>
 8005c30:	20000014 	.word	0x20000014
 8005c34:	08006dc2 	.word	0x08006dc2
 8005c38:	08006dfd 	.word	0x08006dfd
 8005c3c:	08006dcf 	.word	0x08006dcf

08005c40 <fiprintf>:
 8005c40:	b40e      	push	{r1, r2, r3}
 8005c42:	b503      	push	{r0, r1, lr}
 8005c44:	0001      	movs	r1, r0
 8005c46:	ab03      	add	r3, sp, #12
 8005c48:	4804      	ldr	r0, [pc, #16]	; (8005c5c <fiprintf+0x1c>)
 8005c4a:	cb04      	ldmia	r3!, {r2}
 8005c4c:	6800      	ldr	r0, [r0, #0]
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	f000 f91a 	bl	8005e88 <_vfiprintf_r>
 8005c54:	b002      	add	sp, #8
 8005c56:	bc08      	pop	{r3}
 8005c58:	b003      	add	sp, #12
 8005c5a:	4718      	bx	r3
 8005c5c:	20000014 	.word	0x20000014

08005c60 <malloc>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <malloc+0x10>)
 8005c64:	0001      	movs	r1, r0
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	f000 f870 	bl	8005d4c <_malloc_r>
 8005c6c:	bd10      	pop	{r4, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	20000014 	.word	0x20000014

08005c74 <_free_r>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	0005      	movs	r5, r0
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	d010      	beq.n	8005c9e <_free_r+0x2a>
 8005c7c:	1f0c      	subs	r4, r1, #4
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	da00      	bge.n	8005c86 <_free_r+0x12>
 8005c84:	18e4      	adds	r4, r4, r3
 8005c86:	0028      	movs	r0, r5
 8005c88:	f000 feec 	bl	8006a64 <__malloc_lock>
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <_free_r+0x90>)
 8005c8e:	6813      	ldr	r3, [r2, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <_free_r+0x2c>
 8005c94:	6063      	str	r3, [r4, #4]
 8005c96:	6014      	str	r4, [r2, #0]
 8005c98:	0028      	movs	r0, r5
 8005c9a:	f000 feeb 	bl	8006a74 <__malloc_unlock>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	d908      	bls.n	8005cb6 <_free_r+0x42>
 8005ca4:	6821      	ldr	r1, [r4, #0]
 8005ca6:	1860      	adds	r0, r4, r1
 8005ca8:	4283      	cmp	r3, r0
 8005caa:	d1f3      	bne.n	8005c94 <_free_r+0x20>
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	1841      	adds	r1, r0, r1
 8005cb2:	6021      	str	r1, [r4, #0]
 8005cb4:	e7ee      	b.n	8005c94 <_free_r+0x20>
 8005cb6:	001a      	movs	r2, r3
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <_free_r+0x4e>
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	d9f9      	bls.n	8005cb6 <_free_r+0x42>
 8005cc2:	6811      	ldr	r1, [r2, #0]
 8005cc4:	1850      	adds	r0, r2, r1
 8005cc6:	42a0      	cmp	r0, r4
 8005cc8:	d10b      	bne.n	8005ce2 <_free_r+0x6e>
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	1809      	adds	r1, r1, r0
 8005cce:	1850      	adds	r0, r2, r1
 8005cd0:	6011      	str	r1, [r2, #0]
 8005cd2:	4283      	cmp	r3, r0
 8005cd4:	d1e0      	bne.n	8005c98 <_free_r+0x24>
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	1841      	adds	r1, r0, r1
 8005cdc:	6011      	str	r1, [r2, #0]
 8005cde:	6053      	str	r3, [r2, #4]
 8005ce0:	e7da      	b.n	8005c98 <_free_r+0x24>
 8005ce2:	42a0      	cmp	r0, r4
 8005ce4:	d902      	bls.n	8005cec <_free_r+0x78>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	602b      	str	r3, [r5, #0]
 8005cea:	e7d5      	b.n	8005c98 <_free_r+0x24>
 8005cec:	6821      	ldr	r1, [r4, #0]
 8005cee:	1860      	adds	r0, r4, r1
 8005cf0:	4283      	cmp	r3, r0
 8005cf2:	d103      	bne.n	8005cfc <_free_r+0x88>
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	1841      	adds	r1, r0, r1
 8005cfa:	6021      	str	r1, [r4, #0]
 8005cfc:	6063      	str	r3, [r4, #4]
 8005cfe:	6054      	str	r4, [r2, #4]
 8005d00:	e7ca      	b.n	8005c98 <_free_r+0x24>
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	20000244 	.word	0x20000244

08005d08 <sbrk_aligned>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	4e0f      	ldr	r6, [pc, #60]	; (8005d48 <sbrk_aligned+0x40>)
 8005d0c:	000d      	movs	r5, r1
 8005d0e:	6831      	ldr	r1, [r6, #0]
 8005d10:	0004      	movs	r4, r0
 8005d12:	2900      	cmp	r1, #0
 8005d14:	d102      	bne.n	8005d1c <sbrk_aligned+0x14>
 8005d16:	f000 fb73 	bl	8006400 <_sbrk_r>
 8005d1a:	6030      	str	r0, [r6, #0]
 8005d1c:	0029      	movs	r1, r5
 8005d1e:	0020      	movs	r0, r4
 8005d20:	f000 fb6e 	bl	8006400 <_sbrk_r>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d00a      	beq.n	8005d3e <sbrk_aligned+0x36>
 8005d28:	2303      	movs	r3, #3
 8005d2a:	1cc5      	adds	r5, r0, #3
 8005d2c:	439d      	bics	r5, r3
 8005d2e:	42a8      	cmp	r0, r5
 8005d30:	d007      	beq.n	8005d42 <sbrk_aligned+0x3a>
 8005d32:	1a29      	subs	r1, r5, r0
 8005d34:	0020      	movs	r0, r4
 8005d36:	f000 fb63 	bl	8006400 <_sbrk_r>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d101      	bne.n	8005d42 <sbrk_aligned+0x3a>
 8005d3e:	2501      	movs	r5, #1
 8005d40:	426d      	negs	r5, r5
 8005d42:	0028      	movs	r0, r5
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	20000248 	.word	0x20000248

08005d4c <_malloc_r>:
 8005d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d4e:	2203      	movs	r2, #3
 8005d50:	1ccb      	adds	r3, r1, #3
 8005d52:	4393      	bics	r3, r2
 8005d54:	3308      	adds	r3, #8
 8005d56:	0006      	movs	r6, r0
 8005d58:	001f      	movs	r7, r3
 8005d5a:	2b0c      	cmp	r3, #12
 8005d5c:	d232      	bcs.n	8005dc4 <_malloc_r+0x78>
 8005d5e:	270c      	movs	r7, #12
 8005d60:	42b9      	cmp	r1, r7
 8005d62:	d831      	bhi.n	8005dc8 <_malloc_r+0x7c>
 8005d64:	0030      	movs	r0, r6
 8005d66:	f000 fe7d 	bl	8006a64 <__malloc_lock>
 8005d6a:	4d32      	ldr	r5, [pc, #200]	; (8005e34 <_malloc_r+0xe8>)
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	001c      	movs	r4, r3
 8005d70:	2c00      	cmp	r4, #0
 8005d72:	d12e      	bne.n	8005dd2 <_malloc_r+0x86>
 8005d74:	0039      	movs	r1, r7
 8005d76:	0030      	movs	r0, r6
 8005d78:	f7ff ffc6 	bl	8005d08 <sbrk_aligned>
 8005d7c:	0004      	movs	r4, r0
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	d11e      	bne.n	8005dc0 <_malloc_r+0x74>
 8005d82:	682c      	ldr	r4, [r5, #0]
 8005d84:	0025      	movs	r5, r4
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	d14a      	bne.n	8005e20 <_malloc_r+0xd4>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	0029      	movs	r1, r5
 8005d8e:	18e3      	adds	r3, r4, r3
 8005d90:	0030      	movs	r0, r6
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	f000 fb34 	bl	8006400 <_sbrk_r>
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	4283      	cmp	r3, r0
 8005d9c:	d143      	bne.n	8005e26 <_malloc_r+0xda>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	3703      	adds	r7, #3
 8005da2:	1aff      	subs	r7, r7, r3
 8005da4:	2303      	movs	r3, #3
 8005da6:	439f      	bics	r7, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	2f0c      	cmp	r7, #12
 8005dac:	d200      	bcs.n	8005db0 <_malloc_r+0x64>
 8005dae:	270c      	movs	r7, #12
 8005db0:	0039      	movs	r1, r7
 8005db2:	0030      	movs	r0, r6
 8005db4:	f7ff ffa8 	bl	8005d08 <sbrk_aligned>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d034      	beq.n	8005e26 <_malloc_r+0xda>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	19df      	adds	r7, r3, r7
 8005dc0:	6027      	str	r7, [r4, #0]
 8005dc2:	e013      	b.n	8005dec <_malloc_r+0xa0>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	dacb      	bge.n	8005d60 <_malloc_r+0x14>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	2500      	movs	r5, #0
 8005dcc:	6033      	str	r3, [r6, #0]
 8005dce:	0028      	movs	r0, r5
 8005dd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	1bd1      	subs	r1, r2, r7
 8005dd6:	d420      	bmi.n	8005e1a <_malloc_r+0xce>
 8005dd8:	290b      	cmp	r1, #11
 8005dda:	d917      	bls.n	8005e0c <_malloc_r+0xc0>
 8005ddc:	19e2      	adds	r2, r4, r7
 8005dde:	6027      	str	r7, [r4, #0]
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d111      	bne.n	8005e08 <_malloc_r+0xbc>
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	6053      	str	r3, [r2, #4]
 8005dec:	0030      	movs	r0, r6
 8005dee:	0025      	movs	r5, r4
 8005df0:	f000 fe40 	bl	8006a74 <__malloc_unlock>
 8005df4:	2207      	movs	r2, #7
 8005df6:	350b      	adds	r5, #11
 8005df8:	1d23      	adds	r3, r4, #4
 8005dfa:	4395      	bics	r5, r2
 8005dfc:	1aea      	subs	r2, r5, r3
 8005dfe:	429d      	cmp	r5, r3
 8005e00:	d0e5      	beq.n	8005dce <_malloc_r+0x82>
 8005e02:	1b5b      	subs	r3, r3, r5
 8005e04:	50a3      	str	r3, [r4, r2]
 8005e06:	e7e2      	b.n	8005dce <_malloc_r+0x82>
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	e7ec      	b.n	8005de6 <_malloc_r+0x9a>
 8005e0c:	6862      	ldr	r2, [r4, #4]
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	d101      	bne.n	8005e16 <_malloc_r+0xca>
 8005e12:	602a      	str	r2, [r5, #0]
 8005e14:	e7ea      	b.n	8005dec <_malloc_r+0xa0>
 8005e16:	605a      	str	r2, [r3, #4]
 8005e18:	e7e8      	b.n	8005dec <_malloc_r+0xa0>
 8005e1a:	0023      	movs	r3, r4
 8005e1c:	6864      	ldr	r4, [r4, #4]
 8005e1e:	e7a7      	b.n	8005d70 <_malloc_r+0x24>
 8005e20:	002c      	movs	r4, r5
 8005e22:	686d      	ldr	r5, [r5, #4]
 8005e24:	e7af      	b.n	8005d86 <_malloc_r+0x3a>
 8005e26:	230c      	movs	r3, #12
 8005e28:	0030      	movs	r0, r6
 8005e2a:	6033      	str	r3, [r6, #0]
 8005e2c:	f000 fe22 	bl	8006a74 <__malloc_unlock>
 8005e30:	e7cd      	b.n	8005dce <_malloc_r+0x82>
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	20000244 	.word	0x20000244

08005e38 <__sfputc_r>:
 8005e38:	6893      	ldr	r3, [r2, #8]
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	6093      	str	r3, [r2, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da04      	bge.n	8005e4e <__sfputc_r+0x16>
 8005e44:	6994      	ldr	r4, [r2, #24]
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	db07      	blt.n	8005e5a <__sfputc_r+0x22>
 8005e4a:	290a      	cmp	r1, #10
 8005e4c:	d005      	beq.n	8005e5a <__sfputc_r+0x22>
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	1c58      	adds	r0, r3, #1
 8005e52:	6010      	str	r0, [r2, #0]
 8005e54:	7019      	strb	r1, [r3, #0]
 8005e56:	0008      	movs	r0, r1
 8005e58:	bd10      	pop	{r4, pc}
 8005e5a:	f000 fae3 	bl	8006424 <__swbuf_r>
 8005e5e:	0001      	movs	r1, r0
 8005e60:	e7f9      	b.n	8005e56 <__sfputc_r+0x1e>

08005e62 <__sfputs_r>:
 8005e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e64:	0006      	movs	r6, r0
 8005e66:	000f      	movs	r7, r1
 8005e68:	0014      	movs	r4, r2
 8005e6a:	18d5      	adds	r5, r2, r3
 8005e6c:	42ac      	cmp	r4, r5
 8005e6e:	d101      	bne.n	8005e74 <__sfputs_r+0x12>
 8005e70:	2000      	movs	r0, #0
 8005e72:	e007      	b.n	8005e84 <__sfputs_r+0x22>
 8005e74:	7821      	ldrb	r1, [r4, #0]
 8005e76:	003a      	movs	r2, r7
 8005e78:	0030      	movs	r0, r6
 8005e7a:	f7ff ffdd 	bl	8005e38 <__sfputc_r>
 8005e7e:	3401      	adds	r4, #1
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d1f3      	bne.n	8005e6c <__sfputs_r+0xa>
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e88 <_vfiprintf_r>:
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	b0a1      	sub	sp, #132	; 0x84
 8005e8c:	0006      	movs	r6, r0
 8005e8e:	000c      	movs	r4, r1
 8005e90:	001f      	movs	r7, r3
 8005e92:	9203      	str	r2, [sp, #12]
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d004      	beq.n	8005ea2 <_vfiprintf_r+0x1a>
 8005e98:	6983      	ldr	r3, [r0, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <_vfiprintf_r+0x1a>
 8005e9e:	f000 fcc5 	bl	800682c <__sinit>
 8005ea2:	4b8e      	ldr	r3, [pc, #568]	; (80060dc <_vfiprintf_r+0x254>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	d11c      	bne.n	8005ee2 <_vfiprintf_r+0x5a>
 8005ea8:	6874      	ldr	r4, [r6, #4]
 8005eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eac:	07db      	lsls	r3, r3, #31
 8005eae:	d405      	bmi.n	8005ebc <_vfiprintf_r+0x34>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	059b      	lsls	r3, r3, #22
 8005eb4:	d402      	bmi.n	8005ebc <_vfiprintf_r+0x34>
 8005eb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb8:	f000 fd59 	bl	800696e <__retarget_lock_acquire_recursive>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	071b      	lsls	r3, r3, #28
 8005ec0:	d502      	bpl.n	8005ec8 <_vfiprintf_r+0x40>
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11d      	bne.n	8005f04 <_vfiprintf_r+0x7c>
 8005ec8:	0021      	movs	r1, r4
 8005eca:	0030      	movs	r0, r6
 8005ecc:	f000 fb00 	bl	80064d0 <__swsetup_r>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d017      	beq.n	8005f04 <_vfiprintf_r+0x7c>
 8005ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed6:	07db      	lsls	r3, r3, #31
 8005ed8:	d50d      	bpl.n	8005ef6 <_vfiprintf_r+0x6e>
 8005eda:	2001      	movs	r0, #1
 8005edc:	4240      	negs	r0, r0
 8005ede:	b021      	add	sp, #132	; 0x84
 8005ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee2:	4b7f      	ldr	r3, [pc, #508]	; (80060e0 <_vfiprintf_r+0x258>)
 8005ee4:	429c      	cmp	r4, r3
 8005ee6:	d101      	bne.n	8005eec <_vfiprintf_r+0x64>
 8005ee8:	68b4      	ldr	r4, [r6, #8]
 8005eea:	e7de      	b.n	8005eaa <_vfiprintf_r+0x22>
 8005eec:	4b7d      	ldr	r3, [pc, #500]	; (80060e4 <_vfiprintf_r+0x25c>)
 8005eee:	429c      	cmp	r4, r3
 8005ef0:	d1db      	bne.n	8005eaa <_vfiprintf_r+0x22>
 8005ef2:	68f4      	ldr	r4, [r6, #12]
 8005ef4:	e7d9      	b.n	8005eaa <_vfiprintf_r+0x22>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	059b      	lsls	r3, r3, #22
 8005efa:	d4ee      	bmi.n	8005eda <_vfiprintf_r+0x52>
 8005efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005efe:	f000 fd37 	bl	8006970 <__retarget_lock_release_recursive>
 8005f02:	e7ea      	b.n	8005eda <_vfiprintf_r+0x52>
 8005f04:	2300      	movs	r3, #0
 8005f06:	ad08      	add	r5, sp, #32
 8005f08:	616b      	str	r3, [r5, #20]
 8005f0a:	3320      	adds	r3, #32
 8005f0c:	766b      	strb	r3, [r5, #25]
 8005f0e:	3310      	adds	r3, #16
 8005f10:	76ab      	strb	r3, [r5, #26]
 8005f12:	9707      	str	r7, [sp, #28]
 8005f14:	9f03      	ldr	r7, [sp, #12]
 8005f16:	783b      	ldrb	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <_vfiprintf_r+0x98>
 8005f1c:	2b25      	cmp	r3, #37	; 0x25
 8005f1e:	d14e      	bne.n	8005fbe <_vfiprintf_r+0x136>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	1afb      	subs	r3, r7, r3
 8005f24:	9305      	str	r3, [sp, #20]
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	429f      	cmp	r7, r3
 8005f2a:	d00d      	beq.n	8005f48 <_vfiprintf_r+0xc0>
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	0021      	movs	r1, r4
 8005f30:	0030      	movs	r0, r6
 8005f32:	9a03      	ldr	r2, [sp, #12]
 8005f34:	f7ff ff95 	bl	8005e62 <__sfputs_r>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d100      	bne.n	8005f3e <_vfiprintf_r+0xb6>
 8005f3c:	e0b5      	b.n	80060aa <_vfiprintf_r+0x222>
 8005f3e:	696a      	ldr	r2, [r5, #20]
 8005f40:	9b05      	ldr	r3, [sp, #20]
 8005f42:	4694      	mov	ip, r2
 8005f44:	4463      	add	r3, ip
 8005f46:	616b      	str	r3, [r5, #20]
 8005f48:	783b      	ldrb	r3, [r7, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d100      	bne.n	8005f50 <_vfiprintf_r+0xc8>
 8005f4e:	e0ac      	b.n	80060aa <_vfiprintf_r+0x222>
 8005f50:	2201      	movs	r2, #1
 8005f52:	1c7b      	adds	r3, r7, #1
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	2300      	movs	r3, #0
 8005f58:	4252      	negs	r2, r2
 8005f5a:	606a      	str	r2, [r5, #4]
 8005f5c:	a904      	add	r1, sp, #16
 8005f5e:	3254      	adds	r2, #84	; 0x54
 8005f60:	1852      	adds	r2, r2, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	60eb      	str	r3, [r5, #12]
 8005f66:	60ab      	str	r3, [r5, #8]
 8005f68:	7013      	strb	r3, [r2, #0]
 8005f6a:	65ab      	str	r3, [r5, #88]	; 0x58
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	2205      	movs	r2, #5
 8005f70:	7819      	ldrb	r1, [r3, #0]
 8005f72:	485d      	ldr	r0, [pc, #372]	; (80060e8 <_vfiprintf_r+0x260>)
 8005f74:	f000 fd6a 	bl	8006a4c <memchr>
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	1c5f      	adds	r7, r3, #1
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d120      	bne.n	8005fc2 <_vfiprintf_r+0x13a>
 8005f80:	682a      	ldr	r2, [r5, #0]
 8005f82:	06d3      	lsls	r3, r2, #27
 8005f84:	d504      	bpl.n	8005f90 <_vfiprintf_r+0x108>
 8005f86:	2353      	movs	r3, #83	; 0x53
 8005f88:	a904      	add	r1, sp, #16
 8005f8a:	185b      	adds	r3, r3, r1
 8005f8c:	2120      	movs	r1, #32
 8005f8e:	7019      	strb	r1, [r3, #0]
 8005f90:	0713      	lsls	r3, r2, #28
 8005f92:	d504      	bpl.n	8005f9e <_vfiprintf_r+0x116>
 8005f94:	2353      	movs	r3, #83	; 0x53
 8005f96:	a904      	add	r1, sp, #16
 8005f98:	185b      	adds	r3, r3, r1
 8005f9a:	212b      	movs	r1, #43	; 0x2b
 8005f9c:	7019      	strb	r1, [r3, #0]
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa4:	d016      	beq.n	8005fd4 <_vfiprintf_r+0x14c>
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	68eb      	ldr	r3, [r5, #12]
 8005faa:	9f03      	ldr	r7, [sp, #12]
 8005fac:	783a      	ldrb	r2, [r7, #0]
 8005fae:	1c78      	adds	r0, r7, #1
 8005fb0:	3a30      	subs	r2, #48	; 0x30
 8005fb2:	4684      	mov	ip, r0
 8005fb4:	2a09      	cmp	r2, #9
 8005fb6:	d94f      	bls.n	8006058 <_vfiprintf_r+0x1d0>
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d111      	bne.n	8005fe0 <_vfiprintf_r+0x158>
 8005fbc:	e017      	b.n	8005fee <_vfiprintf_r+0x166>
 8005fbe:	3701      	adds	r7, #1
 8005fc0:	e7a9      	b.n	8005f16 <_vfiprintf_r+0x8e>
 8005fc2:	4b49      	ldr	r3, [pc, #292]	; (80060e8 <_vfiprintf_r+0x260>)
 8005fc4:	682a      	ldr	r2, [r5, #0]
 8005fc6:	1ac0      	subs	r0, r0, r3
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4083      	lsls	r3, r0
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	9703      	str	r7, [sp, #12]
 8005fd2:	e7cb      	b.n	8005f6c <_vfiprintf_r+0xe4>
 8005fd4:	9b07      	ldr	r3, [sp, #28]
 8005fd6:	1d19      	adds	r1, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	9107      	str	r1, [sp, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db01      	blt.n	8005fe4 <_vfiprintf_r+0x15c>
 8005fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe2:	e004      	b.n	8005fee <_vfiprintf_r+0x166>
 8005fe4:	425b      	negs	r3, r3
 8005fe6:	60eb      	str	r3, [r5, #12]
 8005fe8:	2302      	movs	r3, #2
 8005fea:	4313      	orrs	r3, r2
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	783b      	ldrb	r3, [r7, #0]
 8005ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff2:	d10a      	bne.n	800600a <_vfiprintf_r+0x182>
 8005ff4:	787b      	ldrb	r3, [r7, #1]
 8005ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff8:	d137      	bne.n	800606a <_vfiprintf_r+0x1e2>
 8005ffa:	9b07      	ldr	r3, [sp, #28]
 8005ffc:	3702      	adds	r7, #2
 8005ffe:	1d1a      	adds	r2, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	9207      	str	r2, [sp, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	db2d      	blt.n	8006064 <_vfiprintf_r+0x1dc>
 8006008:	9309      	str	r3, [sp, #36]	; 0x24
 800600a:	2203      	movs	r2, #3
 800600c:	7839      	ldrb	r1, [r7, #0]
 800600e:	4837      	ldr	r0, [pc, #220]	; (80060ec <_vfiprintf_r+0x264>)
 8006010:	f000 fd1c 	bl	8006a4c <memchr>
 8006014:	2800      	cmp	r0, #0
 8006016:	d007      	beq.n	8006028 <_vfiprintf_r+0x1a0>
 8006018:	4b34      	ldr	r3, [pc, #208]	; (80060ec <_vfiprintf_r+0x264>)
 800601a:	682a      	ldr	r2, [r5, #0]
 800601c:	1ac0      	subs	r0, r0, r3
 800601e:	2340      	movs	r3, #64	; 0x40
 8006020:	4083      	lsls	r3, r0
 8006022:	4313      	orrs	r3, r2
 8006024:	3701      	adds	r7, #1
 8006026:	602b      	str	r3, [r5, #0]
 8006028:	7839      	ldrb	r1, [r7, #0]
 800602a:	1c7b      	adds	r3, r7, #1
 800602c:	2206      	movs	r2, #6
 800602e:	4830      	ldr	r0, [pc, #192]	; (80060f0 <_vfiprintf_r+0x268>)
 8006030:	9303      	str	r3, [sp, #12]
 8006032:	7629      	strb	r1, [r5, #24]
 8006034:	f000 fd0a 	bl	8006a4c <memchr>
 8006038:	2800      	cmp	r0, #0
 800603a:	d045      	beq.n	80060c8 <_vfiprintf_r+0x240>
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <_vfiprintf_r+0x26c>)
 800603e:	2b00      	cmp	r3, #0
 8006040:	d127      	bne.n	8006092 <_vfiprintf_r+0x20a>
 8006042:	2207      	movs	r2, #7
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	3307      	adds	r3, #7
 8006048:	4393      	bics	r3, r2
 800604a:	3308      	adds	r3, #8
 800604c:	9307      	str	r3, [sp, #28]
 800604e:	696b      	ldr	r3, [r5, #20]
 8006050:	9a04      	ldr	r2, [sp, #16]
 8006052:	189b      	adds	r3, r3, r2
 8006054:	616b      	str	r3, [r5, #20]
 8006056:	e75d      	b.n	8005f14 <_vfiprintf_r+0x8c>
 8006058:	210a      	movs	r1, #10
 800605a:	434b      	muls	r3, r1
 800605c:	4667      	mov	r7, ip
 800605e:	189b      	adds	r3, r3, r2
 8006060:	3909      	subs	r1, #9
 8006062:	e7a3      	b.n	8005fac <_vfiprintf_r+0x124>
 8006064:	2301      	movs	r3, #1
 8006066:	425b      	negs	r3, r3
 8006068:	e7ce      	b.n	8006008 <_vfiprintf_r+0x180>
 800606a:	2300      	movs	r3, #0
 800606c:	001a      	movs	r2, r3
 800606e:	3701      	adds	r7, #1
 8006070:	606b      	str	r3, [r5, #4]
 8006072:	7839      	ldrb	r1, [r7, #0]
 8006074:	1c78      	adds	r0, r7, #1
 8006076:	3930      	subs	r1, #48	; 0x30
 8006078:	4684      	mov	ip, r0
 800607a:	2909      	cmp	r1, #9
 800607c:	d903      	bls.n	8006086 <_vfiprintf_r+0x1fe>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0c3      	beq.n	800600a <_vfiprintf_r+0x182>
 8006082:	9209      	str	r2, [sp, #36]	; 0x24
 8006084:	e7c1      	b.n	800600a <_vfiprintf_r+0x182>
 8006086:	230a      	movs	r3, #10
 8006088:	435a      	muls	r2, r3
 800608a:	4667      	mov	r7, ip
 800608c:	1852      	adds	r2, r2, r1
 800608e:	3b09      	subs	r3, #9
 8006090:	e7ef      	b.n	8006072 <_vfiprintf_r+0x1ea>
 8006092:	ab07      	add	r3, sp, #28
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	0022      	movs	r2, r4
 8006098:	0029      	movs	r1, r5
 800609a:	0030      	movs	r0, r6
 800609c:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <_vfiprintf_r+0x270>)
 800609e:	e000      	b.n	80060a2 <_vfiprintf_r+0x21a>
 80060a0:	bf00      	nop
 80060a2:	9004      	str	r0, [sp, #16]
 80060a4:	9b04      	ldr	r3, [sp, #16]
 80060a6:	3301      	adds	r3, #1
 80060a8:	d1d1      	bne.n	800604e <_vfiprintf_r+0x1c6>
 80060aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ac:	07db      	lsls	r3, r3, #31
 80060ae:	d405      	bmi.n	80060bc <_vfiprintf_r+0x234>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	059b      	lsls	r3, r3, #22
 80060b4:	d402      	bmi.n	80060bc <_vfiprintf_r+0x234>
 80060b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b8:	f000 fc5a 	bl	8006970 <__retarget_lock_release_recursive>
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	065b      	lsls	r3, r3, #25
 80060c0:	d500      	bpl.n	80060c4 <_vfiprintf_r+0x23c>
 80060c2:	e70a      	b.n	8005eda <_vfiprintf_r+0x52>
 80060c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80060c6:	e70a      	b.n	8005ede <_vfiprintf_r+0x56>
 80060c8:	ab07      	add	r3, sp, #28
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	0022      	movs	r2, r4
 80060ce:	0029      	movs	r1, r5
 80060d0:	0030      	movs	r0, r6
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <_vfiprintf_r+0x270>)
 80060d4:	f000 f882 	bl	80061dc <_printf_i>
 80060d8:	e7e3      	b.n	80060a2 <_vfiprintf_r+0x21a>
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	08006e54 	.word	0x08006e54
 80060e0:	08006e74 	.word	0x08006e74
 80060e4:	08006e34 	.word	0x08006e34
 80060e8:	08006dfe 	.word	0x08006dfe
 80060ec:	08006e04 	.word	0x08006e04
 80060f0:	08006e08 	.word	0x08006e08
 80060f4:	00000000 	.word	0x00000000
 80060f8:	08005e63 	.word	0x08005e63

080060fc <_printf_common>:
 80060fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060fe:	0015      	movs	r5, r2
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	688a      	ldr	r2, [r1, #8]
 8006104:	690b      	ldr	r3, [r1, #16]
 8006106:	000c      	movs	r4, r1
 8006108:	9000      	str	r0, [sp, #0]
 800610a:	4293      	cmp	r3, r2
 800610c:	da00      	bge.n	8006110 <_printf_common+0x14>
 800610e:	0013      	movs	r3, r2
 8006110:	0022      	movs	r2, r4
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	3243      	adds	r2, #67	; 0x43
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	2a00      	cmp	r2, #0
 800611a:	d001      	beq.n	8006120 <_printf_common+0x24>
 800611c:	3301      	adds	r3, #1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	069b      	lsls	r3, r3, #26
 8006124:	d502      	bpl.n	800612c <_printf_common+0x30>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	3302      	adds	r3, #2
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	2306      	movs	r3, #6
 8006130:	0017      	movs	r7, r2
 8006132:	401f      	ands	r7, r3
 8006134:	421a      	tst	r2, r3
 8006136:	d027      	beq.n	8006188 <_printf_common+0x8c>
 8006138:	0023      	movs	r3, r4
 800613a:	3343      	adds	r3, #67	; 0x43
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	1e5a      	subs	r2, r3, #1
 8006140:	4193      	sbcs	r3, r2
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	0692      	lsls	r2, r2, #26
 8006146:	d430      	bmi.n	80061aa <_printf_common+0xae>
 8006148:	0022      	movs	r2, r4
 800614a:	9901      	ldr	r1, [sp, #4]
 800614c:	9800      	ldr	r0, [sp, #0]
 800614e:	9e08      	ldr	r6, [sp, #32]
 8006150:	3243      	adds	r2, #67	; 0x43
 8006152:	47b0      	blx	r6
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d025      	beq.n	80061a4 <_printf_common+0xa8>
 8006158:	2306      	movs	r3, #6
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	682a      	ldr	r2, [r5, #0]
 800615e:	68e1      	ldr	r1, [r4, #12]
 8006160:	2500      	movs	r5, #0
 8006162:	4003      	ands	r3, r0
 8006164:	2b04      	cmp	r3, #4
 8006166:	d103      	bne.n	8006170 <_printf_common+0x74>
 8006168:	1a8d      	subs	r5, r1, r2
 800616a:	43eb      	mvns	r3, r5
 800616c:	17db      	asrs	r3, r3, #31
 800616e:	401d      	ands	r5, r3
 8006170:	68a3      	ldr	r3, [r4, #8]
 8006172:	6922      	ldr	r2, [r4, #16]
 8006174:	4293      	cmp	r3, r2
 8006176:	dd01      	ble.n	800617c <_printf_common+0x80>
 8006178:	1a9b      	subs	r3, r3, r2
 800617a:	18ed      	adds	r5, r5, r3
 800617c:	2700      	movs	r7, #0
 800617e:	42bd      	cmp	r5, r7
 8006180:	d120      	bne.n	80061c4 <_printf_common+0xc8>
 8006182:	2000      	movs	r0, #0
 8006184:	e010      	b.n	80061a8 <_printf_common+0xac>
 8006186:	3701      	adds	r7, #1
 8006188:	68e3      	ldr	r3, [r4, #12]
 800618a:	682a      	ldr	r2, [r5, #0]
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	42bb      	cmp	r3, r7
 8006190:	ddd2      	ble.n	8006138 <_printf_common+0x3c>
 8006192:	0022      	movs	r2, r4
 8006194:	2301      	movs	r3, #1
 8006196:	9901      	ldr	r1, [sp, #4]
 8006198:	9800      	ldr	r0, [sp, #0]
 800619a:	9e08      	ldr	r6, [sp, #32]
 800619c:	3219      	adds	r2, #25
 800619e:	47b0      	blx	r6
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d1f0      	bne.n	8006186 <_printf_common+0x8a>
 80061a4:	2001      	movs	r0, #1
 80061a6:	4240      	negs	r0, r0
 80061a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061aa:	2030      	movs	r0, #48	; 0x30
 80061ac:	18e1      	adds	r1, r4, r3
 80061ae:	3143      	adds	r1, #67	; 0x43
 80061b0:	7008      	strb	r0, [r1, #0]
 80061b2:	0021      	movs	r1, r4
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	3145      	adds	r1, #69	; 0x45
 80061b8:	7809      	ldrb	r1, [r1, #0]
 80061ba:	18a2      	adds	r2, r4, r2
 80061bc:	3243      	adds	r2, #67	; 0x43
 80061be:	3302      	adds	r3, #2
 80061c0:	7011      	strb	r1, [r2, #0]
 80061c2:	e7c1      	b.n	8006148 <_printf_common+0x4c>
 80061c4:	0022      	movs	r2, r4
 80061c6:	2301      	movs	r3, #1
 80061c8:	9901      	ldr	r1, [sp, #4]
 80061ca:	9800      	ldr	r0, [sp, #0]
 80061cc:	9e08      	ldr	r6, [sp, #32]
 80061ce:	321a      	adds	r2, #26
 80061d0:	47b0      	blx	r6
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	d0e6      	beq.n	80061a4 <_printf_common+0xa8>
 80061d6:	3701      	adds	r7, #1
 80061d8:	e7d1      	b.n	800617e <_printf_common+0x82>
	...

080061dc <_printf_i>:
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	b08b      	sub	sp, #44	; 0x2c
 80061e0:	9206      	str	r2, [sp, #24]
 80061e2:	000a      	movs	r2, r1
 80061e4:	3243      	adds	r2, #67	; 0x43
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	9005      	str	r0, [sp, #20]
 80061ea:	9204      	str	r2, [sp, #16]
 80061ec:	7e0a      	ldrb	r2, [r1, #24]
 80061ee:	000c      	movs	r4, r1
 80061f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061f2:	2a78      	cmp	r2, #120	; 0x78
 80061f4:	d807      	bhi.n	8006206 <_printf_i+0x2a>
 80061f6:	2a62      	cmp	r2, #98	; 0x62
 80061f8:	d809      	bhi.n	800620e <_printf_i+0x32>
 80061fa:	2a00      	cmp	r2, #0
 80061fc:	d100      	bne.n	8006200 <_printf_i+0x24>
 80061fe:	e0c1      	b.n	8006384 <_printf_i+0x1a8>
 8006200:	2a58      	cmp	r2, #88	; 0x58
 8006202:	d100      	bne.n	8006206 <_printf_i+0x2a>
 8006204:	e08c      	b.n	8006320 <_printf_i+0x144>
 8006206:	0026      	movs	r6, r4
 8006208:	3642      	adds	r6, #66	; 0x42
 800620a:	7032      	strb	r2, [r6, #0]
 800620c:	e022      	b.n	8006254 <_printf_i+0x78>
 800620e:	0010      	movs	r0, r2
 8006210:	3863      	subs	r0, #99	; 0x63
 8006212:	2815      	cmp	r0, #21
 8006214:	d8f7      	bhi.n	8006206 <_printf_i+0x2a>
 8006216:	f7f9 ff77 	bl	8000108 <__gnu_thumb1_case_shi>
 800621a:	0016      	.short	0x0016
 800621c:	fff6001f 	.word	0xfff6001f
 8006220:	fff6fff6 	.word	0xfff6fff6
 8006224:	001ffff6 	.word	0x001ffff6
 8006228:	fff6fff6 	.word	0xfff6fff6
 800622c:	fff6fff6 	.word	0xfff6fff6
 8006230:	003600a8 	.word	0x003600a8
 8006234:	fff6009a 	.word	0xfff6009a
 8006238:	00b9fff6 	.word	0x00b9fff6
 800623c:	0036fff6 	.word	0x0036fff6
 8006240:	fff6fff6 	.word	0xfff6fff6
 8006244:	009e      	.short	0x009e
 8006246:	0026      	movs	r6, r4
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	3642      	adds	r6, #66	; 0x42
 800624c:	1d11      	adds	r1, r2, #4
 800624e:	6019      	str	r1, [r3, #0]
 8006250:	6813      	ldr	r3, [r2, #0]
 8006252:	7033      	strb	r3, [r6, #0]
 8006254:	2301      	movs	r3, #1
 8006256:	e0a7      	b.n	80063a8 <_printf_i+0x1cc>
 8006258:	6808      	ldr	r0, [r1, #0]
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	1d0a      	adds	r2, r1, #4
 800625e:	0605      	lsls	r5, r0, #24
 8006260:	d50b      	bpl.n	800627a <_printf_i+0x9e>
 8006262:	680d      	ldr	r5, [r1, #0]
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	2d00      	cmp	r5, #0
 8006268:	da03      	bge.n	8006272 <_printf_i+0x96>
 800626a:	232d      	movs	r3, #45	; 0x2d
 800626c:	9a04      	ldr	r2, [sp, #16]
 800626e:	426d      	negs	r5, r5
 8006270:	7013      	strb	r3, [r2, #0]
 8006272:	4b61      	ldr	r3, [pc, #388]	; (80063f8 <_printf_i+0x21c>)
 8006274:	270a      	movs	r7, #10
 8006276:	9303      	str	r3, [sp, #12]
 8006278:	e01b      	b.n	80062b2 <_printf_i+0xd6>
 800627a:	680d      	ldr	r5, [r1, #0]
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	0641      	lsls	r1, r0, #25
 8006280:	d5f1      	bpl.n	8006266 <_printf_i+0x8a>
 8006282:	b22d      	sxth	r5, r5
 8006284:	e7ef      	b.n	8006266 <_printf_i+0x8a>
 8006286:	680d      	ldr	r5, [r1, #0]
 8006288:	6819      	ldr	r1, [r3, #0]
 800628a:	1d08      	adds	r0, r1, #4
 800628c:	6018      	str	r0, [r3, #0]
 800628e:	062e      	lsls	r6, r5, #24
 8006290:	d501      	bpl.n	8006296 <_printf_i+0xba>
 8006292:	680d      	ldr	r5, [r1, #0]
 8006294:	e003      	b.n	800629e <_printf_i+0xc2>
 8006296:	066d      	lsls	r5, r5, #25
 8006298:	d5fb      	bpl.n	8006292 <_printf_i+0xb6>
 800629a:	680d      	ldr	r5, [r1, #0]
 800629c:	b2ad      	uxth	r5, r5
 800629e:	4b56      	ldr	r3, [pc, #344]	; (80063f8 <_printf_i+0x21c>)
 80062a0:	2708      	movs	r7, #8
 80062a2:	9303      	str	r3, [sp, #12]
 80062a4:	2a6f      	cmp	r2, #111	; 0x6f
 80062a6:	d000      	beq.n	80062aa <_printf_i+0xce>
 80062a8:	3702      	adds	r7, #2
 80062aa:	0023      	movs	r3, r4
 80062ac:	2200      	movs	r2, #0
 80062ae:	3343      	adds	r3, #67	; 0x43
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	6863      	ldr	r3, [r4, #4]
 80062b4:	60a3      	str	r3, [r4, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	db03      	blt.n	80062c2 <_printf_i+0xe6>
 80062ba:	2204      	movs	r2, #4
 80062bc:	6821      	ldr	r1, [r4, #0]
 80062be:	4391      	bics	r1, r2
 80062c0:	6021      	str	r1, [r4, #0]
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	d102      	bne.n	80062cc <_printf_i+0xf0>
 80062c6:	9e04      	ldr	r6, [sp, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00c      	beq.n	80062e6 <_printf_i+0x10a>
 80062cc:	9e04      	ldr	r6, [sp, #16]
 80062ce:	0028      	movs	r0, r5
 80062d0:	0039      	movs	r1, r7
 80062d2:	f7f9 ffa9 	bl	8000228 <__aeabi_uidivmod>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	3e01      	subs	r6, #1
 80062da:	5c5b      	ldrb	r3, [r3, r1]
 80062dc:	7033      	strb	r3, [r6, #0]
 80062de:	002b      	movs	r3, r5
 80062e0:	0005      	movs	r5, r0
 80062e2:	429f      	cmp	r7, r3
 80062e4:	d9f3      	bls.n	80062ce <_printf_i+0xf2>
 80062e6:	2f08      	cmp	r7, #8
 80062e8:	d109      	bne.n	80062fe <_printf_i+0x122>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	07db      	lsls	r3, r3, #31
 80062ee:	d506      	bpl.n	80062fe <_printf_i+0x122>
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	6922      	ldr	r2, [r4, #16]
 80062f4:	4293      	cmp	r3, r2
 80062f6:	dc02      	bgt.n	80062fe <_printf_i+0x122>
 80062f8:	2330      	movs	r3, #48	; 0x30
 80062fa:	3e01      	subs	r6, #1
 80062fc:	7033      	strb	r3, [r6, #0]
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	1b9b      	subs	r3, r3, r6
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	0021      	movs	r1, r4
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	9805      	ldr	r0, [sp, #20]
 800630c:	9b06      	ldr	r3, [sp, #24]
 800630e:	aa09      	add	r2, sp, #36	; 0x24
 8006310:	f7ff fef4 	bl	80060fc <_printf_common>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d14c      	bne.n	80063b2 <_printf_i+0x1d6>
 8006318:	2001      	movs	r0, #1
 800631a:	4240      	negs	r0, r0
 800631c:	b00b      	add	sp, #44	; 0x2c
 800631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006320:	3145      	adds	r1, #69	; 0x45
 8006322:	700a      	strb	r2, [r1, #0]
 8006324:	4a34      	ldr	r2, [pc, #208]	; (80063f8 <_printf_i+0x21c>)
 8006326:	9203      	str	r2, [sp, #12]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	6821      	ldr	r1, [r4, #0]
 800632c:	ca20      	ldmia	r2!, {r5}
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	0608      	lsls	r0, r1, #24
 8006332:	d516      	bpl.n	8006362 <_printf_i+0x186>
 8006334:	07cb      	lsls	r3, r1, #31
 8006336:	d502      	bpl.n	800633e <_printf_i+0x162>
 8006338:	2320      	movs	r3, #32
 800633a:	4319      	orrs	r1, r3
 800633c:	6021      	str	r1, [r4, #0]
 800633e:	2710      	movs	r7, #16
 8006340:	2d00      	cmp	r5, #0
 8006342:	d1b2      	bne.n	80062aa <_printf_i+0xce>
 8006344:	2320      	movs	r3, #32
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	439a      	bics	r2, r3
 800634a:	6022      	str	r2, [r4, #0]
 800634c:	e7ad      	b.n	80062aa <_printf_i+0xce>
 800634e:	2220      	movs	r2, #32
 8006350:	6809      	ldr	r1, [r1, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	0022      	movs	r2, r4
 8006358:	2178      	movs	r1, #120	; 0x78
 800635a:	3245      	adds	r2, #69	; 0x45
 800635c:	7011      	strb	r1, [r2, #0]
 800635e:	4a27      	ldr	r2, [pc, #156]	; (80063fc <_printf_i+0x220>)
 8006360:	e7e1      	b.n	8006326 <_printf_i+0x14a>
 8006362:	0648      	lsls	r0, r1, #25
 8006364:	d5e6      	bpl.n	8006334 <_printf_i+0x158>
 8006366:	b2ad      	uxth	r5, r5
 8006368:	e7e4      	b.n	8006334 <_printf_i+0x158>
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	680d      	ldr	r5, [r1, #0]
 800636e:	1d10      	adds	r0, r2, #4
 8006370:	6949      	ldr	r1, [r1, #20]
 8006372:	6018      	str	r0, [r3, #0]
 8006374:	6813      	ldr	r3, [r2, #0]
 8006376:	062e      	lsls	r6, r5, #24
 8006378:	d501      	bpl.n	800637e <_printf_i+0x1a2>
 800637a:	6019      	str	r1, [r3, #0]
 800637c:	e002      	b.n	8006384 <_printf_i+0x1a8>
 800637e:	066d      	lsls	r5, r5, #25
 8006380:	d5fb      	bpl.n	800637a <_printf_i+0x19e>
 8006382:	8019      	strh	r1, [r3, #0]
 8006384:	2300      	movs	r3, #0
 8006386:	9e04      	ldr	r6, [sp, #16]
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	e7bb      	b.n	8006304 <_printf_i+0x128>
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	1d11      	adds	r1, r2, #4
 8006390:	6019      	str	r1, [r3, #0]
 8006392:	6816      	ldr	r6, [r2, #0]
 8006394:	2100      	movs	r1, #0
 8006396:	0030      	movs	r0, r6
 8006398:	6862      	ldr	r2, [r4, #4]
 800639a:	f000 fb57 	bl	8006a4c <memchr>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d001      	beq.n	80063a6 <_printf_i+0x1ca>
 80063a2:	1b80      	subs	r0, r0, r6
 80063a4:	6060      	str	r0, [r4, #4]
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	2300      	movs	r3, #0
 80063ac:	9a04      	ldr	r2, [sp, #16]
 80063ae:	7013      	strb	r3, [r2, #0]
 80063b0:	e7a8      	b.n	8006304 <_printf_i+0x128>
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	0032      	movs	r2, r6
 80063b6:	9906      	ldr	r1, [sp, #24]
 80063b8:	9805      	ldr	r0, [sp, #20]
 80063ba:	9d07      	ldr	r5, [sp, #28]
 80063bc:	47a8      	blx	r5
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d0aa      	beq.n	8006318 <_printf_i+0x13c>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	079b      	lsls	r3, r3, #30
 80063c6:	d415      	bmi.n	80063f4 <_printf_i+0x218>
 80063c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ca:	68e0      	ldr	r0, [r4, #12]
 80063cc:	4298      	cmp	r0, r3
 80063ce:	daa5      	bge.n	800631c <_printf_i+0x140>
 80063d0:	0018      	movs	r0, r3
 80063d2:	e7a3      	b.n	800631c <_printf_i+0x140>
 80063d4:	0022      	movs	r2, r4
 80063d6:	2301      	movs	r3, #1
 80063d8:	9906      	ldr	r1, [sp, #24]
 80063da:	9805      	ldr	r0, [sp, #20]
 80063dc:	9e07      	ldr	r6, [sp, #28]
 80063de:	3219      	adds	r2, #25
 80063e0:	47b0      	blx	r6
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	d098      	beq.n	8006318 <_printf_i+0x13c>
 80063e6:	3501      	adds	r5, #1
 80063e8:	68e3      	ldr	r3, [r4, #12]
 80063ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	42ab      	cmp	r3, r5
 80063f0:	dcf0      	bgt.n	80063d4 <_printf_i+0x1f8>
 80063f2:	e7e9      	b.n	80063c8 <_printf_i+0x1ec>
 80063f4:	2500      	movs	r5, #0
 80063f6:	e7f7      	b.n	80063e8 <_printf_i+0x20c>
 80063f8:	08006e0f 	.word	0x08006e0f
 80063fc:	08006e20 	.word	0x08006e20

08006400 <_sbrk_r>:
 8006400:	2300      	movs	r3, #0
 8006402:	b570      	push	{r4, r5, r6, lr}
 8006404:	4d06      	ldr	r5, [pc, #24]	; (8006420 <_sbrk_r+0x20>)
 8006406:	0004      	movs	r4, r0
 8006408:	0008      	movs	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fa fa38 	bl	8000880 <_sbrk>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d103      	bne.n	800641c <_sbrk_r+0x1c>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d000      	beq.n	800641c <_sbrk_r+0x1c>
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	20000250 	.word	0x20000250

08006424 <__swbuf_r>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	0005      	movs	r5, r0
 8006428:	000e      	movs	r6, r1
 800642a:	0014      	movs	r4, r2
 800642c:	2800      	cmp	r0, #0
 800642e:	d004      	beq.n	800643a <__swbuf_r+0x16>
 8006430:	6983      	ldr	r3, [r0, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <__swbuf_r+0x16>
 8006436:	f000 f9f9 	bl	800682c <__sinit>
 800643a:	4b22      	ldr	r3, [pc, #136]	; (80064c4 <__swbuf_r+0xa0>)
 800643c:	429c      	cmp	r4, r3
 800643e:	d12e      	bne.n	800649e <__swbuf_r+0x7a>
 8006440:	686c      	ldr	r4, [r5, #4]
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	071b      	lsls	r3, r3, #28
 800644a:	d532      	bpl.n	80064b2 <__swbuf_r+0x8e>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02f      	beq.n	80064b2 <__swbuf_r+0x8e>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	6922      	ldr	r2, [r4, #16]
 8006456:	b2f7      	uxtb	r7, r6
 8006458:	1a98      	subs	r0, r3, r2
 800645a:	6963      	ldr	r3, [r4, #20]
 800645c:	b2f6      	uxtb	r6, r6
 800645e:	4283      	cmp	r3, r0
 8006460:	dc05      	bgt.n	800646e <__swbuf_r+0x4a>
 8006462:	0021      	movs	r1, r4
 8006464:	0028      	movs	r0, r5
 8006466:	f000 f93f 	bl	80066e8 <_fflush_r>
 800646a:	2800      	cmp	r0, #0
 800646c:	d127      	bne.n	80064be <__swbuf_r+0x9a>
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	3001      	adds	r0, #1
 8006472:	3b01      	subs	r3, #1
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	701f      	strb	r7, [r3, #0]
 800647e:	6963      	ldr	r3, [r4, #20]
 8006480:	4283      	cmp	r3, r0
 8006482:	d004      	beq.n	800648e <__swbuf_r+0x6a>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	07db      	lsls	r3, r3, #31
 8006488:	d507      	bpl.n	800649a <__swbuf_r+0x76>
 800648a:	2e0a      	cmp	r6, #10
 800648c:	d105      	bne.n	800649a <__swbuf_r+0x76>
 800648e:	0021      	movs	r1, r4
 8006490:	0028      	movs	r0, r5
 8006492:	f000 f929 	bl	80066e8 <_fflush_r>
 8006496:	2800      	cmp	r0, #0
 8006498:	d111      	bne.n	80064be <__swbuf_r+0x9a>
 800649a:	0030      	movs	r0, r6
 800649c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <__swbuf_r+0xa4>)
 80064a0:	429c      	cmp	r4, r3
 80064a2:	d101      	bne.n	80064a8 <__swbuf_r+0x84>
 80064a4:	68ac      	ldr	r4, [r5, #8]
 80064a6:	e7cc      	b.n	8006442 <__swbuf_r+0x1e>
 80064a8:	4b08      	ldr	r3, [pc, #32]	; (80064cc <__swbuf_r+0xa8>)
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d1c9      	bne.n	8006442 <__swbuf_r+0x1e>
 80064ae:	68ec      	ldr	r4, [r5, #12]
 80064b0:	e7c7      	b.n	8006442 <__swbuf_r+0x1e>
 80064b2:	0021      	movs	r1, r4
 80064b4:	0028      	movs	r0, r5
 80064b6:	f000 f80b 	bl	80064d0 <__swsetup_r>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d0c9      	beq.n	8006452 <__swbuf_r+0x2e>
 80064be:	2601      	movs	r6, #1
 80064c0:	4276      	negs	r6, r6
 80064c2:	e7ea      	b.n	800649a <__swbuf_r+0x76>
 80064c4:	08006e54 	.word	0x08006e54
 80064c8:	08006e74 	.word	0x08006e74
 80064cc:	08006e34 	.word	0x08006e34

080064d0 <__swsetup_r>:
 80064d0:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <__swsetup_r+0xe0>)
 80064d2:	b570      	push	{r4, r5, r6, lr}
 80064d4:	681d      	ldr	r5, [r3, #0]
 80064d6:	0006      	movs	r6, r0
 80064d8:	000c      	movs	r4, r1
 80064da:	2d00      	cmp	r5, #0
 80064dc:	d005      	beq.n	80064ea <__swsetup_r+0x1a>
 80064de:	69ab      	ldr	r3, [r5, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d102      	bne.n	80064ea <__swsetup_r+0x1a>
 80064e4:	0028      	movs	r0, r5
 80064e6:	f000 f9a1 	bl	800682c <__sinit>
 80064ea:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <__swsetup_r+0xe4>)
 80064ec:	429c      	cmp	r4, r3
 80064ee:	d10f      	bne.n	8006510 <__swsetup_r+0x40>
 80064f0:	686c      	ldr	r4, [r5, #4]
 80064f2:	230c      	movs	r3, #12
 80064f4:	5ee2      	ldrsh	r2, [r4, r3]
 80064f6:	b293      	uxth	r3, r2
 80064f8:	0711      	lsls	r1, r2, #28
 80064fa:	d42d      	bmi.n	8006558 <__swsetup_r+0x88>
 80064fc:	06d9      	lsls	r1, r3, #27
 80064fe:	d411      	bmi.n	8006524 <__swsetup_r+0x54>
 8006500:	2309      	movs	r3, #9
 8006502:	2001      	movs	r0, #1
 8006504:	6033      	str	r3, [r6, #0]
 8006506:	3337      	adds	r3, #55	; 0x37
 8006508:	4313      	orrs	r3, r2
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	4240      	negs	r0, r0
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <__swsetup_r+0xe8>)
 8006512:	429c      	cmp	r4, r3
 8006514:	d101      	bne.n	800651a <__swsetup_r+0x4a>
 8006516:	68ac      	ldr	r4, [r5, #8]
 8006518:	e7eb      	b.n	80064f2 <__swsetup_r+0x22>
 800651a:	4b28      	ldr	r3, [pc, #160]	; (80065bc <__swsetup_r+0xec>)
 800651c:	429c      	cmp	r4, r3
 800651e:	d1e8      	bne.n	80064f2 <__swsetup_r+0x22>
 8006520:	68ec      	ldr	r4, [r5, #12]
 8006522:	e7e6      	b.n	80064f2 <__swsetup_r+0x22>
 8006524:	075b      	lsls	r3, r3, #29
 8006526:	d513      	bpl.n	8006550 <__swsetup_r+0x80>
 8006528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652a:	2900      	cmp	r1, #0
 800652c:	d008      	beq.n	8006540 <__swsetup_r+0x70>
 800652e:	0023      	movs	r3, r4
 8006530:	3344      	adds	r3, #68	; 0x44
 8006532:	4299      	cmp	r1, r3
 8006534:	d002      	beq.n	800653c <__swsetup_r+0x6c>
 8006536:	0030      	movs	r0, r6
 8006538:	f7ff fb9c 	bl	8005c74 <_free_r>
 800653c:	2300      	movs	r3, #0
 800653e:	6363      	str	r3, [r4, #52]	; 0x34
 8006540:	2224      	movs	r2, #36	; 0x24
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	4393      	bics	r3, r2
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	2300      	movs	r3, #0
 800654a:	6063      	str	r3, [r4, #4]
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	2308      	movs	r3, #8
 8006552:	89a2      	ldrh	r2, [r4, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <__swsetup_r+0xa6>
 800655e:	21a0      	movs	r1, #160	; 0xa0
 8006560:	2280      	movs	r2, #128	; 0x80
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	0089      	lsls	r1, r1, #2
 8006566:	0092      	lsls	r2, r2, #2
 8006568:	400b      	ands	r3, r1
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <__swsetup_r+0xa6>
 800656e:	0021      	movs	r1, r4
 8006570:	0030      	movs	r0, r6
 8006572:	f000 fa27 	bl	80069c4 <__smakebuf_r>
 8006576:	220c      	movs	r2, #12
 8006578:	5ea3      	ldrsh	r3, [r4, r2]
 800657a:	2001      	movs	r0, #1
 800657c:	001a      	movs	r2, r3
 800657e:	b299      	uxth	r1, r3
 8006580:	4002      	ands	r2, r0
 8006582:	4203      	tst	r3, r0
 8006584:	d00f      	beq.n	80065a6 <__swsetup_r+0xd6>
 8006586:	2200      	movs	r2, #0
 8006588:	60a2      	str	r2, [r4, #8]
 800658a:	6962      	ldr	r2, [r4, #20]
 800658c:	4252      	negs	r2, r2
 800658e:	61a2      	str	r2, [r4, #24]
 8006590:	2000      	movs	r0, #0
 8006592:	6922      	ldr	r2, [r4, #16]
 8006594:	4282      	cmp	r2, r0
 8006596:	d1ba      	bne.n	800650e <__swsetup_r+0x3e>
 8006598:	060a      	lsls	r2, r1, #24
 800659a:	d5b8      	bpl.n	800650e <__swsetup_r+0x3e>
 800659c:	2240      	movs	r2, #64	; 0x40
 800659e:	4313      	orrs	r3, r2
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	3801      	subs	r0, #1
 80065a4:	e7b3      	b.n	800650e <__swsetup_r+0x3e>
 80065a6:	0788      	lsls	r0, r1, #30
 80065a8:	d400      	bmi.n	80065ac <__swsetup_r+0xdc>
 80065aa:	6962      	ldr	r2, [r4, #20]
 80065ac:	60a2      	str	r2, [r4, #8]
 80065ae:	e7ef      	b.n	8006590 <__swsetup_r+0xc0>
 80065b0:	20000014 	.word	0x20000014
 80065b4:	08006e54 	.word	0x08006e54
 80065b8:	08006e74 	.word	0x08006e74
 80065bc:	08006e34 	.word	0x08006e34

080065c0 <abort>:
 80065c0:	2006      	movs	r0, #6
 80065c2:	b510      	push	{r4, lr}
 80065c4:	f000 fa88 	bl	8006ad8 <raise>
 80065c8:	2001      	movs	r0, #1
 80065ca:	f7fa f8e7 	bl	800079c <_exit>
	...

080065d0 <__sflush_r>:
 80065d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d2:	898b      	ldrh	r3, [r1, #12]
 80065d4:	0005      	movs	r5, r0
 80065d6:	000c      	movs	r4, r1
 80065d8:	071a      	lsls	r2, r3, #28
 80065da:	d45f      	bmi.n	800669c <__sflush_r+0xcc>
 80065dc:	684a      	ldr	r2, [r1, #4]
 80065de:	2a00      	cmp	r2, #0
 80065e0:	dc04      	bgt.n	80065ec <__sflush_r+0x1c>
 80065e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	dc01      	bgt.n	80065ec <__sflush_r+0x1c>
 80065e8:	2000      	movs	r0, #0
 80065ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80065ee:	2f00      	cmp	r7, #0
 80065f0:	d0fa      	beq.n	80065e8 <__sflush_r+0x18>
 80065f2:	2200      	movs	r2, #0
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	682e      	ldr	r6, [r5, #0]
 80065f8:	602a      	str	r2, [r5, #0]
 80065fa:	001a      	movs	r2, r3
 80065fc:	0149      	lsls	r1, r1, #5
 80065fe:	400a      	ands	r2, r1
 8006600:	420b      	tst	r3, r1
 8006602:	d034      	beq.n	800666e <__sflush_r+0x9e>
 8006604:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	075b      	lsls	r3, r3, #29
 800660a:	d506      	bpl.n	800661a <__sflush_r+0x4a>
 800660c:	6863      	ldr	r3, [r4, #4]
 800660e:	1ac0      	subs	r0, r0, r3
 8006610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <__sflush_r+0x4a>
 8006616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006618:	1ac0      	subs	r0, r0, r3
 800661a:	0002      	movs	r2, r0
 800661c:	6a21      	ldr	r1, [r4, #32]
 800661e:	2300      	movs	r3, #0
 8006620:	0028      	movs	r0, r5
 8006622:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006624:	47b8      	blx	r7
 8006626:	89a1      	ldrh	r1, [r4, #12]
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d106      	bne.n	800663a <__sflush_r+0x6a>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	2b1d      	cmp	r3, #29
 8006630:	d831      	bhi.n	8006696 <__sflush_r+0xc6>
 8006632:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <__sflush_r+0x114>)
 8006634:	40da      	lsrs	r2, r3
 8006636:	07d3      	lsls	r3, r2, #31
 8006638:	d52d      	bpl.n	8006696 <__sflush_r+0xc6>
 800663a:	2300      	movs	r3, #0
 800663c:	6063      	str	r3, [r4, #4]
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	04cb      	lsls	r3, r1, #19
 8006644:	d505      	bpl.n	8006652 <__sflush_r+0x82>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	d102      	bne.n	8006650 <__sflush_r+0x80>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d100      	bne.n	8006652 <__sflush_r+0x82>
 8006650:	6560      	str	r0, [r4, #84]	; 0x54
 8006652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006654:	602e      	str	r6, [r5, #0]
 8006656:	2900      	cmp	r1, #0
 8006658:	d0c6      	beq.n	80065e8 <__sflush_r+0x18>
 800665a:	0023      	movs	r3, r4
 800665c:	3344      	adds	r3, #68	; 0x44
 800665e:	4299      	cmp	r1, r3
 8006660:	d002      	beq.n	8006668 <__sflush_r+0x98>
 8006662:	0028      	movs	r0, r5
 8006664:	f7ff fb06 	bl	8005c74 <_free_r>
 8006668:	2000      	movs	r0, #0
 800666a:	6360      	str	r0, [r4, #52]	; 0x34
 800666c:	e7bd      	b.n	80065ea <__sflush_r+0x1a>
 800666e:	2301      	movs	r3, #1
 8006670:	0028      	movs	r0, r5
 8006672:	6a21      	ldr	r1, [r4, #32]
 8006674:	47b8      	blx	r7
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d1c5      	bne.n	8006606 <__sflush_r+0x36>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0c2      	beq.n	8006606 <__sflush_r+0x36>
 8006680:	2b1d      	cmp	r3, #29
 8006682:	d001      	beq.n	8006688 <__sflush_r+0xb8>
 8006684:	2b16      	cmp	r3, #22
 8006686:	d101      	bne.n	800668c <__sflush_r+0xbc>
 8006688:	602e      	str	r6, [r5, #0]
 800668a:	e7ad      	b.n	80065e8 <__sflush_r+0x18>
 800668c:	2340      	movs	r3, #64	; 0x40
 800668e:	89a2      	ldrh	r2, [r4, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	e7a9      	b.n	80065ea <__sflush_r+0x1a>
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	430b      	orrs	r3, r1
 800669a:	e7fa      	b.n	8006692 <__sflush_r+0xc2>
 800669c:	690f      	ldr	r7, [r1, #16]
 800669e:	2f00      	cmp	r7, #0
 80066a0:	d0a2      	beq.n	80065e8 <__sflush_r+0x18>
 80066a2:	680a      	ldr	r2, [r1, #0]
 80066a4:	600f      	str	r7, [r1, #0]
 80066a6:	1bd2      	subs	r2, r2, r7
 80066a8:	9201      	str	r2, [sp, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	079b      	lsls	r3, r3, #30
 80066ae:	d100      	bne.n	80066b2 <__sflush_r+0xe2>
 80066b0:	694a      	ldr	r2, [r1, #20]
 80066b2:	60a2      	str	r2, [r4, #8]
 80066b4:	9b01      	ldr	r3, [sp, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	dc00      	bgt.n	80066bc <__sflush_r+0xec>
 80066ba:	e795      	b.n	80065e8 <__sflush_r+0x18>
 80066bc:	003a      	movs	r2, r7
 80066be:	0028      	movs	r0, r5
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	6a21      	ldr	r1, [r4, #32]
 80066c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066c6:	47b0      	blx	r6
 80066c8:	2800      	cmp	r0, #0
 80066ca:	dc06      	bgt.n	80066da <__sflush_r+0x10a>
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	2001      	movs	r0, #1
 80066d0:	89a2      	ldrh	r2, [r4, #12]
 80066d2:	4240      	negs	r0, r0
 80066d4:	4313      	orrs	r3, r2
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	e787      	b.n	80065ea <__sflush_r+0x1a>
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	183f      	adds	r7, r7, r0
 80066de:	1a1b      	subs	r3, r3, r0
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	e7e7      	b.n	80066b4 <__sflush_r+0xe4>
 80066e4:	20400001 	.word	0x20400001

080066e8 <_fflush_r>:
 80066e8:	690b      	ldr	r3, [r1, #16]
 80066ea:	b570      	push	{r4, r5, r6, lr}
 80066ec:	0005      	movs	r5, r0
 80066ee:	000c      	movs	r4, r1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <_fflush_r+0x12>
 80066f4:	2500      	movs	r5, #0
 80066f6:	0028      	movs	r0, r5
 80066f8:	bd70      	pop	{r4, r5, r6, pc}
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d004      	beq.n	8006708 <_fflush_r+0x20>
 80066fe:	6983      	ldr	r3, [r0, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <_fflush_r+0x20>
 8006704:	f000 f892 	bl	800682c <__sinit>
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <_fflush_r+0x74>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d11b      	bne.n	8006746 <_fflush_r+0x5e>
 800670e:	686c      	ldr	r4, [r5, #4]
 8006710:	220c      	movs	r2, #12
 8006712:	5ea3      	ldrsh	r3, [r4, r2]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0ed      	beq.n	80066f4 <_fflush_r+0xc>
 8006718:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800671a:	07d2      	lsls	r2, r2, #31
 800671c:	d404      	bmi.n	8006728 <_fflush_r+0x40>
 800671e:	059b      	lsls	r3, r3, #22
 8006720:	d402      	bmi.n	8006728 <_fflush_r+0x40>
 8006722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006724:	f000 f923 	bl	800696e <__retarget_lock_acquire_recursive>
 8006728:	0028      	movs	r0, r5
 800672a:	0021      	movs	r1, r4
 800672c:	f7ff ff50 	bl	80065d0 <__sflush_r>
 8006730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006732:	0005      	movs	r5, r0
 8006734:	07db      	lsls	r3, r3, #31
 8006736:	d4de      	bmi.n	80066f6 <_fflush_r+0xe>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	059b      	lsls	r3, r3, #22
 800673c:	d4db      	bmi.n	80066f6 <_fflush_r+0xe>
 800673e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006740:	f000 f916 	bl	8006970 <__retarget_lock_release_recursive>
 8006744:	e7d7      	b.n	80066f6 <_fflush_r+0xe>
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <_fflush_r+0x78>)
 8006748:	429c      	cmp	r4, r3
 800674a:	d101      	bne.n	8006750 <_fflush_r+0x68>
 800674c:	68ac      	ldr	r4, [r5, #8]
 800674e:	e7df      	b.n	8006710 <_fflush_r+0x28>
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <_fflush_r+0x7c>)
 8006752:	429c      	cmp	r4, r3
 8006754:	d1dc      	bne.n	8006710 <_fflush_r+0x28>
 8006756:	68ec      	ldr	r4, [r5, #12]
 8006758:	e7da      	b.n	8006710 <_fflush_r+0x28>
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	08006e54 	.word	0x08006e54
 8006760:	08006e74 	.word	0x08006e74
 8006764:	08006e34 	.word	0x08006e34

08006768 <std>:
 8006768:	2300      	movs	r3, #0
 800676a:	b510      	push	{r4, lr}
 800676c:	0004      	movs	r4, r0
 800676e:	6003      	str	r3, [r0, #0]
 8006770:	6043      	str	r3, [r0, #4]
 8006772:	6083      	str	r3, [r0, #8]
 8006774:	8181      	strh	r1, [r0, #12]
 8006776:	6643      	str	r3, [r0, #100]	; 0x64
 8006778:	0019      	movs	r1, r3
 800677a:	81c2      	strh	r2, [r0, #14]
 800677c:	6103      	str	r3, [r0, #16]
 800677e:	6143      	str	r3, [r0, #20]
 8006780:	6183      	str	r3, [r0, #24]
 8006782:	2208      	movs	r2, #8
 8006784:	305c      	adds	r0, #92	; 0x5c
 8006786:	f7ff f9c6 	bl	8005b16 <memset>
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <std+0x38>)
 800678c:	6224      	str	r4, [r4, #32]
 800678e:	6263      	str	r3, [r4, #36]	; 0x24
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <std+0x3c>)
 8006792:	62a3      	str	r3, [r4, #40]	; 0x28
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <std+0x40>)
 8006796:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <std+0x44>)
 800679a:	6323      	str	r3, [r4, #48]	; 0x30
 800679c:	bd10      	pop	{r4, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	08006b19 	.word	0x08006b19
 80067a4:	08006b41 	.word	0x08006b41
 80067a8:	08006b79 	.word	0x08006b79
 80067ac:	08006ba5 	.word	0x08006ba5

080067b0 <_cleanup_r>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	4902      	ldr	r1, [pc, #8]	; (80067bc <_cleanup_r+0xc>)
 80067b4:	f000 f8ba 	bl	800692c <_fwalk_reent>
 80067b8:	bd10      	pop	{r4, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	080066e9 	.word	0x080066e9

080067c0 <__sfmoreglue>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	2568      	movs	r5, #104	; 0x68
 80067c4:	1e4a      	subs	r2, r1, #1
 80067c6:	4355      	muls	r5, r2
 80067c8:	000e      	movs	r6, r1
 80067ca:	0029      	movs	r1, r5
 80067cc:	3174      	adds	r1, #116	; 0x74
 80067ce:	f7ff fabd 	bl	8005d4c <_malloc_r>
 80067d2:	1e04      	subs	r4, r0, #0
 80067d4:	d008      	beq.n	80067e8 <__sfmoreglue+0x28>
 80067d6:	2100      	movs	r1, #0
 80067d8:	002a      	movs	r2, r5
 80067da:	6001      	str	r1, [r0, #0]
 80067dc:	6046      	str	r6, [r0, #4]
 80067de:	300c      	adds	r0, #12
 80067e0:	60a0      	str	r0, [r4, #8]
 80067e2:	3268      	adds	r2, #104	; 0x68
 80067e4:	f7ff f997 	bl	8005b16 <memset>
 80067e8:	0020      	movs	r0, r4
 80067ea:	bd70      	pop	{r4, r5, r6, pc}

080067ec <__sfp_lock_acquire>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	4802      	ldr	r0, [pc, #8]	; (80067f8 <__sfp_lock_acquire+0xc>)
 80067f0:	f000 f8bd 	bl	800696e <__retarget_lock_acquire_recursive>
 80067f4:	bd10      	pop	{r4, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	2000024d 	.word	0x2000024d

080067fc <__sfp_lock_release>:
 80067fc:	b510      	push	{r4, lr}
 80067fe:	4802      	ldr	r0, [pc, #8]	; (8006808 <__sfp_lock_release+0xc>)
 8006800:	f000 f8b6 	bl	8006970 <__retarget_lock_release_recursive>
 8006804:	bd10      	pop	{r4, pc}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	2000024d 	.word	0x2000024d

0800680c <__sinit_lock_acquire>:
 800680c:	b510      	push	{r4, lr}
 800680e:	4802      	ldr	r0, [pc, #8]	; (8006818 <__sinit_lock_acquire+0xc>)
 8006810:	f000 f8ad 	bl	800696e <__retarget_lock_acquire_recursive>
 8006814:	bd10      	pop	{r4, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	2000024e 	.word	0x2000024e

0800681c <__sinit_lock_release>:
 800681c:	b510      	push	{r4, lr}
 800681e:	4802      	ldr	r0, [pc, #8]	; (8006828 <__sinit_lock_release+0xc>)
 8006820:	f000 f8a6 	bl	8006970 <__retarget_lock_release_recursive>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	2000024e 	.word	0x2000024e

0800682c <__sinit>:
 800682c:	b513      	push	{r0, r1, r4, lr}
 800682e:	0004      	movs	r4, r0
 8006830:	f7ff ffec 	bl	800680c <__sinit_lock_acquire>
 8006834:	69a3      	ldr	r3, [r4, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <__sinit+0x14>
 800683a:	f7ff ffef 	bl	800681c <__sinit_lock_release>
 800683e:	bd13      	pop	{r0, r1, r4, pc}
 8006840:	64a3      	str	r3, [r4, #72]	; 0x48
 8006842:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006844:	6523      	str	r3, [r4, #80]	; 0x50
 8006846:	4b13      	ldr	r3, [pc, #76]	; (8006894 <__sinit+0x68>)
 8006848:	4a13      	ldr	r2, [pc, #76]	; (8006898 <__sinit+0x6c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	62a2      	str	r2, [r4, #40]	; 0x28
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	42a3      	cmp	r3, r4
 8006852:	d101      	bne.n	8006858 <__sinit+0x2c>
 8006854:	2301      	movs	r3, #1
 8006856:	61a3      	str	r3, [r4, #24]
 8006858:	0020      	movs	r0, r4
 800685a:	f000 f81f 	bl	800689c <__sfp>
 800685e:	6060      	str	r0, [r4, #4]
 8006860:	0020      	movs	r0, r4
 8006862:	f000 f81b 	bl	800689c <__sfp>
 8006866:	60a0      	str	r0, [r4, #8]
 8006868:	0020      	movs	r0, r4
 800686a:	f000 f817 	bl	800689c <__sfp>
 800686e:	2200      	movs	r2, #0
 8006870:	2104      	movs	r1, #4
 8006872:	60e0      	str	r0, [r4, #12]
 8006874:	6860      	ldr	r0, [r4, #4]
 8006876:	f7ff ff77 	bl	8006768 <std>
 800687a:	2201      	movs	r2, #1
 800687c:	2109      	movs	r1, #9
 800687e:	68a0      	ldr	r0, [r4, #8]
 8006880:	f7ff ff72 	bl	8006768 <std>
 8006884:	2202      	movs	r2, #2
 8006886:	2112      	movs	r1, #18
 8006888:	68e0      	ldr	r0, [r4, #12]
 800688a:	f7ff ff6d 	bl	8006768 <std>
 800688e:	2301      	movs	r3, #1
 8006890:	61a3      	str	r3, [r4, #24]
 8006892:	e7d2      	b.n	800683a <__sinit+0xe>
 8006894:	08006d4c 	.word	0x08006d4c
 8006898:	080067b1 	.word	0x080067b1

0800689c <__sfp>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	0007      	movs	r7, r0
 80068a0:	f7ff ffa4 	bl	80067ec <__sfp_lock_acquire>
 80068a4:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <__sfp+0x88>)
 80068a6:	681e      	ldr	r6, [r3, #0]
 80068a8:	69b3      	ldr	r3, [r6, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d102      	bne.n	80068b4 <__sfp+0x18>
 80068ae:	0030      	movs	r0, r6
 80068b0:	f7ff ffbc 	bl	800682c <__sinit>
 80068b4:	3648      	adds	r6, #72	; 0x48
 80068b6:	68b4      	ldr	r4, [r6, #8]
 80068b8:	6873      	ldr	r3, [r6, #4]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	d504      	bpl.n	80068c8 <__sfp+0x2c>
 80068be:	6833      	ldr	r3, [r6, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d022      	beq.n	800690a <__sfp+0x6e>
 80068c4:	6836      	ldr	r6, [r6, #0]
 80068c6:	e7f6      	b.n	80068b6 <__sfp+0x1a>
 80068c8:	220c      	movs	r2, #12
 80068ca:	5ea5      	ldrsh	r5, [r4, r2]
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	d11a      	bne.n	8006906 <__sfp+0x6a>
 80068d0:	0020      	movs	r0, r4
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <__sfp+0x8c>)
 80068d4:	3058      	adds	r0, #88	; 0x58
 80068d6:	60e3      	str	r3, [r4, #12]
 80068d8:	6665      	str	r5, [r4, #100]	; 0x64
 80068da:	f000 f847 	bl	800696c <__retarget_lock_init_recursive>
 80068de:	f7ff ff8d 	bl	80067fc <__sfp_lock_release>
 80068e2:	0020      	movs	r0, r4
 80068e4:	2208      	movs	r2, #8
 80068e6:	0029      	movs	r1, r5
 80068e8:	6025      	str	r5, [r4, #0]
 80068ea:	60a5      	str	r5, [r4, #8]
 80068ec:	6065      	str	r5, [r4, #4]
 80068ee:	6125      	str	r5, [r4, #16]
 80068f0:	6165      	str	r5, [r4, #20]
 80068f2:	61a5      	str	r5, [r4, #24]
 80068f4:	305c      	adds	r0, #92	; 0x5c
 80068f6:	f7ff f90e 	bl	8005b16 <memset>
 80068fa:	6365      	str	r5, [r4, #52]	; 0x34
 80068fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80068fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8006900:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006902:	0020      	movs	r0, r4
 8006904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006906:	3468      	adds	r4, #104	; 0x68
 8006908:	e7d7      	b.n	80068ba <__sfp+0x1e>
 800690a:	2104      	movs	r1, #4
 800690c:	0038      	movs	r0, r7
 800690e:	f7ff ff57 	bl	80067c0 <__sfmoreglue>
 8006912:	1e04      	subs	r4, r0, #0
 8006914:	6030      	str	r0, [r6, #0]
 8006916:	d1d5      	bne.n	80068c4 <__sfp+0x28>
 8006918:	f7ff ff70 	bl	80067fc <__sfp_lock_release>
 800691c:	230c      	movs	r3, #12
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	e7ef      	b.n	8006902 <__sfp+0x66>
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	08006d4c 	.word	0x08006d4c
 8006928:	ffff0001 	.word	0xffff0001

0800692c <_fwalk_reent>:
 800692c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800692e:	0004      	movs	r4, r0
 8006930:	0006      	movs	r6, r0
 8006932:	2700      	movs	r7, #0
 8006934:	9101      	str	r1, [sp, #4]
 8006936:	3448      	adds	r4, #72	; 0x48
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	68a5      	ldr	r5, [r4, #8]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	3b01      	subs	r3, #1
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	d504      	bpl.n	8006950 <_fwalk_reent+0x24>
 8006946:	6824      	ldr	r4, [r4, #0]
 8006948:	2c00      	cmp	r4, #0
 800694a:	d1f5      	bne.n	8006938 <_fwalk_reent+0xc>
 800694c:	0038      	movs	r0, r7
 800694e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006950:	89ab      	ldrh	r3, [r5, #12]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d908      	bls.n	8006968 <_fwalk_reent+0x3c>
 8006956:	220e      	movs	r2, #14
 8006958:	5eab      	ldrsh	r3, [r5, r2]
 800695a:	3301      	adds	r3, #1
 800695c:	d004      	beq.n	8006968 <_fwalk_reent+0x3c>
 800695e:	0029      	movs	r1, r5
 8006960:	0030      	movs	r0, r6
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	4798      	blx	r3
 8006966:	4307      	orrs	r7, r0
 8006968:	3568      	adds	r5, #104	; 0x68
 800696a:	e7e8      	b.n	800693e <_fwalk_reent+0x12>

0800696c <__retarget_lock_init_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_acquire_recursive>:
 800696e:	4770      	bx	lr

08006970 <__retarget_lock_release_recursive>:
 8006970:	4770      	bx	lr
	...

08006974 <__swhatbuf_r>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	000e      	movs	r6, r1
 8006978:	001d      	movs	r5, r3
 800697a:	230e      	movs	r3, #14
 800697c:	5ec9      	ldrsh	r1, [r1, r3]
 800697e:	0014      	movs	r4, r2
 8006980:	b096      	sub	sp, #88	; 0x58
 8006982:	2900      	cmp	r1, #0
 8006984:	da08      	bge.n	8006998 <__swhatbuf_r+0x24>
 8006986:	220c      	movs	r2, #12
 8006988:	5eb3      	ldrsh	r3, [r6, r2]
 800698a:	2200      	movs	r2, #0
 800698c:	602a      	str	r2, [r5, #0]
 800698e:	061b      	lsls	r3, r3, #24
 8006990:	d411      	bmi.n	80069b6 <__swhatbuf_r+0x42>
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	e00f      	b.n	80069b8 <__swhatbuf_r+0x44>
 8006998:	466a      	mov	r2, sp
 800699a:	f000 f92f 	bl	8006bfc <_fstat_r>
 800699e:	2800      	cmp	r0, #0
 80069a0:	dbf1      	blt.n	8006986 <__swhatbuf_r+0x12>
 80069a2:	23f0      	movs	r3, #240	; 0xf0
 80069a4:	9901      	ldr	r1, [sp, #4]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	4019      	ands	r1, r3
 80069aa:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <__swhatbuf_r+0x4c>)
 80069ac:	18c9      	adds	r1, r1, r3
 80069ae:	424b      	negs	r3, r1
 80069b0:	4159      	adcs	r1, r3
 80069b2:	6029      	str	r1, [r5, #0]
 80069b4:	e7ed      	b.n	8006992 <__swhatbuf_r+0x1e>
 80069b6:	2340      	movs	r3, #64	; 0x40
 80069b8:	2000      	movs	r0, #0
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	b016      	add	sp, #88	; 0x58
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	ffffe000 	.word	0xffffe000

080069c4 <__smakebuf_r>:
 80069c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c6:	2602      	movs	r6, #2
 80069c8:	898b      	ldrh	r3, [r1, #12]
 80069ca:	0005      	movs	r5, r0
 80069cc:	000c      	movs	r4, r1
 80069ce:	4233      	tst	r3, r6
 80069d0:	d006      	beq.n	80069e0 <__smakebuf_r+0x1c>
 80069d2:	0023      	movs	r3, r4
 80069d4:	3347      	adds	r3, #71	; 0x47
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	2301      	movs	r3, #1
 80069dc:	6163      	str	r3, [r4, #20]
 80069de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80069e0:	466a      	mov	r2, sp
 80069e2:	ab01      	add	r3, sp, #4
 80069e4:	f7ff ffc6 	bl	8006974 <__swhatbuf_r>
 80069e8:	9900      	ldr	r1, [sp, #0]
 80069ea:	0007      	movs	r7, r0
 80069ec:	0028      	movs	r0, r5
 80069ee:	f7ff f9ad 	bl	8005d4c <_malloc_r>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d108      	bne.n	8006a08 <__smakebuf_r+0x44>
 80069f6:	220c      	movs	r2, #12
 80069f8:	5ea3      	ldrsh	r3, [r4, r2]
 80069fa:	059a      	lsls	r2, r3, #22
 80069fc:	d4ef      	bmi.n	80069de <__smakebuf_r+0x1a>
 80069fe:	2203      	movs	r2, #3
 8006a00:	4393      	bics	r3, r2
 8006a02:	431e      	orrs	r6, r3
 8006a04:	81a6      	strh	r6, [r4, #12]
 8006a06:	e7e4      	b.n	80069d2 <__smakebuf_r+0xe>
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <__smakebuf_r+0x84>)
 8006a0a:	62ab      	str	r3, [r5, #40]	; 0x28
 8006a0c:	2380      	movs	r3, #128	; 0x80
 8006a0e:	89a2      	ldrh	r2, [r4, #12]
 8006a10:	6020      	str	r0, [r4, #0]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	6120      	str	r0, [r4, #16]
 8006a1a:	6163      	str	r3, [r4, #20]
 8006a1c:	9b01      	ldr	r3, [sp, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00d      	beq.n	8006a3e <__smakebuf_r+0x7a>
 8006a22:	0028      	movs	r0, r5
 8006a24:	230e      	movs	r3, #14
 8006a26:	5ee1      	ldrsh	r1, [r4, r3]
 8006a28:	f000 f8fa 	bl	8006c20 <_isatty_r>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d006      	beq.n	8006a3e <__smakebuf_r+0x7a>
 8006a30:	2203      	movs	r2, #3
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	4393      	bics	r3, r2
 8006a36:	001a      	movs	r2, r3
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	89a0      	ldrh	r0, [r4, #12]
 8006a40:	4307      	orrs	r7, r0
 8006a42:	81a7      	strh	r7, [r4, #12]
 8006a44:	e7cb      	b.n	80069de <__smakebuf_r+0x1a>
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	080067b1 	.word	0x080067b1

08006a4c <memchr>:
 8006a4c:	b2c9      	uxtb	r1, r1
 8006a4e:	1882      	adds	r2, r0, r2
 8006a50:	4290      	cmp	r0, r2
 8006a52:	d101      	bne.n	8006a58 <memchr+0xc>
 8006a54:	2000      	movs	r0, #0
 8006a56:	4770      	bx	lr
 8006a58:	7803      	ldrb	r3, [r0, #0]
 8006a5a:	428b      	cmp	r3, r1
 8006a5c:	d0fb      	beq.n	8006a56 <memchr+0xa>
 8006a5e:	3001      	adds	r0, #1
 8006a60:	e7f6      	b.n	8006a50 <memchr+0x4>
	...

08006a64 <__malloc_lock>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	4802      	ldr	r0, [pc, #8]	; (8006a70 <__malloc_lock+0xc>)
 8006a68:	f7ff ff81 	bl	800696e <__retarget_lock_acquire_recursive>
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	2000024c 	.word	0x2000024c

08006a74 <__malloc_unlock>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4802      	ldr	r0, [pc, #8]	; (8006a80 <__malloc_unlock+0xc>)
 8006a78:	f7ff ff7a 	bl	8006970 <__retarget_lock_release_recursive>
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	2000024c 	.word	0x2000024c

08006a84 <_raise_r>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	0004      	movs	r4, r0
 8006a88:	000d      	movs	r5, r1
 8006a8a:	291f      	cmp	r1, #31
 8006a8c:	d904      	bls.n	8006a98 <_raise_r+0x14>
 8006a8e:	2316      	movs	r3, #22
 8006a90:	6003      	str	r3, [r0, #0]
 8006a92:	2001      	movs	r0, #1
 8006a94:	4240      	negs	r0, r0
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
 8006a98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <_raise_r+0x24>
 8006a9e:	008a      	lsls	r2, r1, #2
 8006aa0:	189b      	adds	r3, r3, r2
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	2a00      	cmp	r2, #0
 8006aa6:	d108      	bne.n	8006aba <_raise_r+0x36>
 8006aa8:	0020      	movs	r0, r4
 8006aaa:	f000 f831 	bl	8006b10 <_getpid_r>
 8006aae:	002a      	movs	r2, r5
 8006ab0:	0001      	movs	r1, r0
 8006ab2:	0020      	movs	r0, r4
 8006ab4:	f000 f81a 	bl	8006aec <_kill_r>
 8006ab8:	e7ed      	b.n	8006a96 <_raise_r+0x12>
 8006aba:	2000      	movs	r0, #0
 8006abc:	2a01      	cmp	r2, #1
 8006abe:	d0ea      	beq.n	8006a96 <_raise_r+0x12>
 8006ac0:	1c51      	adds	r1, r2, #1
 8006ac2:	d103      	bne.n	8006acc <_raise_r+0x48>
 8006ac4:	2316      	movs	r3, #22
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	e7e4      	b.n	8006a96 <_raise_r+0x12>
 8006acc:	2400      	movs	r4, #0
 8006ace:	0028      	movs	r0, r5
 8006ad0:	601c      	str	r4, [r3, #0]
 8006ad2:	4790      	blx	r2
 8006ad4:	0020      	movs	r0, r4
 8006ad6:	e7de      	b.n	8006a96 <_raise_r+0x12>

08006ad8 <raise>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <raise+0x10>)
 8006adc:	0001      	movs	r1, r0
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	f7ff ffd0 	bl	8006a84 <_raise_r>
 8006ae4:	bd10      	pop	{r4, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	20000014 	.word	0x20000014

08006aec <_kill_r>:
 8006aec:	2300      	movs	r3, #0
 8006aee:	b570      	push	{r4, r5, r6, lr}
 8006af0:	4d06      	ldr	r5, [pc, #24]	; (8006b0c <_kill_r+0x20>)
 8006af2:	0004      	movs	r4, r0
 8006af4:	0008      	movs	r0, r1
 8006af6:	0011      	movs	r1, r2
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	f7f9 fe3f 	bl	800077c <_kill>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d103      	bne.n	8006b0a <_kill_r+0x1e>
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d000      	beq.n	8006b0a <_kill_r+0x1e>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	20000250 	.word	0x20000250

08006b10 <_getpid_r>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	f7f9 fe2d 	bl	8000770 <_getpid>
 8006b16:	bd10      	pop	{r4, pc}

08006b18 <__sread>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	000c      	movs	r4, r1
 8006b1c:	250e      	movs	r5, #14
 8006b1e:	5f49      	ldrsh	r1, [r1, r5]
 8006b20:	f000 f8a4 	bl	8006c6c <_read_r>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	db03      	blt.n	8006b30 <__sread+0x18>
 8006b28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b2a:	181b      	adds	r3, r3, r0
 8006b2c:	6563      	str	r3, [r4, #84]	; 0x54
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	4a02      	ldr	r2, [pc, #8]	; (8006b3c <__sread+0x24>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	e7f9      	b.n	8006b2e <__sread+0x16>
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	ffffefff 	.word	0xffffefff

08006b40 <__swrite>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	001f      	movs	r7, r3
 8006b44:	898b      	ldrh	r3, [r1, #12]
 8006b46:	0005      	movs	r5, r0
 8006b48:	000c      	movs	r4, r1
 8006b4a:	0016      	movs	r6, r2
 8006b4c:	05db      	lsls	r3, r3, #23
 8006b4e:	d505      	bpl.n	8006b5c <__swrite+0x1c>
 8006b50:	230e      	movs	r3, #14
 8006b52:	5ec9      	ldrsh	r1, [r1, r3]
 8006b54:	2200      	movs	r2, #0
 8006b56:	2302      	movs	r3, #2
 8006b58:	f000 f874 	bl	8006c44 <_lseek_r>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	4a05      	ldr	r2, [pc, #20]	; (8006b74 <__swrite+0x34>)
 8006b60:	0028      	movs	r0, r5
 8006b62:	4013      	ands	r3, r2
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	0032      	movs	r2, r6
 8006b68:	230e      	movs	r3, #14
 8006b6a:	5ee1      	ldrsh	r1, [r4, r3]
 8006b6c:	003b      	movs	r3, r7
 8006b6e:	f000 f81f 	bl	8006bb0 <_write_r>
 8006b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b74:	ffffefff 	.word	0xffffefff

08006b78 <__sseek>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	000c      	movs	r4, r1
 8006b7c:	250e      	movs	r5, #14
 8006b7e:	5f49      	ldrsh	r1, [r1, r5]
 8006b80:	f000 f860 	bl	8006c44 <_lseek_r>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	1c42      	adds	r2, r0, #1
 8006b88:	d103      	bne.n	8006b92 <__sseek+0x1a>
 8006b8a:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <__sseek+0x28>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	2280      	movs	r2, #128	; 0x80
 8006b94:	0152      	lsls	r2, r2, #5
 8006b96:	4313      	orrs	r3, r2
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8006b9c:	e7f8      	b.n	8006b90 <__sseek+0x18>
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	ffffefff 	.word	0xffffefff

08006ba4 <__sclose>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	230e      	movs	r3, #14
 8006ba8:	5ec9      	ldrsh	r1, [r1, r3]
 8006baa:	f000 f815 	bl	8006bd8 <_close_r>
 8006bae:	bd10      	pop	{r4, pc}

08006bb0 <_write_r>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	0004      	movs	r4, r0
 8006bb4:	0008      	movs	r0, r1
 8006bb6:	0011      	movs	r1, r2
 8006bb8:	001a      	movs	r2, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	4d05      	ldr	r5, [pc, #20]	; (8006bd4 <_write_r+0x24>)
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	f7f9 fe15 	bl	80007ee <_write>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d103      	bne.n	8006bd0 <_write_r+0x20>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d000      	beq.n	8006bd0 <_write_r+0x20>
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	20000250 	.word	0x20000250

08006bd8 <_close_r>:
 8006bd8:	2300      	movs	r3, #0
 8006bda:	b570      	push	{r4, r5, r6, lr}
 8006bdc:	4d06      	ldr	r5, [pc, #24]	; (8006bf8 <_close_r+0x20>)
 8006bde:	0004      	movs	r4, r0
 8006be0:	0008      	movs	r0, r1
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	f7f9 fe1f 	bl	8000826 <_close>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d103      	bne.n	8006bf4 <_close_r+0x1c>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d000      	beq.n	8006bf4 <_close_r+0x1c>
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	20000250 	.word	0x20000250

08006bfc <_fstat_r>:
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	b570      	push	{r4, r5, r6, lr}
 8006c00:	4d06      	ldr	r5, [pc, #24]	; (8006c1c <_fstat_r+0x20>)
 8006c02:	0004      	movs	r4, r0
 8006c04:	0008      	movs	r0, r1
 8006c06:	0011      	movs	r1, r2
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	f7f9 fe16 	bl	800083a <_fstat>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d103      	bne.n	8006c1a <_fstat_r+0x1e>
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d000      	beq.n	8006c1a <_fstat_r+0x1e>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	20000250 	.word	0x20000250

08006c20 <_isatty_r>:
 8006c20:	2300      	movs	r3, #0
 8006c22:	b570      	push	{r4, r5, r6, lr}
 8006c24:	4d06      	ldr	r5, [pc, #24]	; (8006c40 <_isatty_r+0x20>)
 8006c26:	0004      	movs	r4, r0
 8006c28:	0008      	movs	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7f9 fe13 	bl	8000856 <_isatty>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d103      	bne.n	8006c3c <_isatty_r+0x1c>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d000      	beq.n	8006c3c <_isatty_r+0x1c>
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	20000250 	.word	0x20000250

08006c44 <_lseek_r>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	0004      	movs	r4, r0
 8006c48:	0008      	movs	r0, r1
 8006c4a:	0011      	movs	r1, r2
 8006c4c:	001a      	movs	r2, r3
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4d05      	ldr	r5, [pc, #20]	; (8006c68 <_lseek_r+0x24>)
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f7f9 fe08 	bl	8000868 <_lseek>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d103      	bne.n	8006c64 <_lseek_r+0x20>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d000      	beq.n	8006c64 <_lseek_r+0x20>
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	bd70      	pop	{r4, r5, r6, pc}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	20000250 	.word	0x20000250

08006c6c <_read_r>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	0004      	movs	r4, r0
 8006c70:	0008      	movs	r0, r1
 8006c72:	0011      	movs	r1, r2
 8006c74:	001a      	movs	r2, r3
 8006c76:	2300      	movs	r3, #0
 8006c78:	4d05      	ldr	r5, [pc, #20]	; (8006c90 <_read_r+0x24>)
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	f7f9 fd9a 	bl	80007b4 <_read>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d103      	bne.n	8006c8c <_read_r+0x20>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d000      	beq.n	8006c8c <_read_r+0x20>
 8006c8a:	6023      	str	r3, [r4, #0]
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	20000250 	.word	0x20000250

08006c94 <_init>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr

08006ca0 <_fini>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca6:	bc08      	pop	{r3}
 8006ca8:	469e      	mov	lr, r3
 8006caa:	4770      	bx	lr
