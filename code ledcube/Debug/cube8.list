
cube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000591c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a84  08005a84  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005a84  08005a84  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a84  08005a84  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000014  08005aa0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08005aa0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc1e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4a  00000000  00000000  0002dc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  000306a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00031210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2ec  00000000  00000000  00031c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013279  00000000  00000000  0004befc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b167  00000000  00000000  0005f175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d0  00000000  00000000  000ea32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059c4 	.word	0x080059c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080059c4 	.word	0x080059c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <HAL_UART_RxCpltCallback+0x34>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	429a      	cmp	r2, r3
 8000232:	d10b      	bne.n	800024c <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8000234:	4908      	ldr	r1, [pc, #32]	; (8000258 <HAL_UART_RxCpltCallback+0x38>)
 8000236:	4b07      	ldr	r3, [pc, #28]	; (8000254 <HAL_UART_RxCpltCallback+0x34>)
 8000238:	2201      	movs	r2, #1
 800023a:	0018      	movs	r0, r3
 800023c:	f001 ffc4 	bl	80021c8 <HAL_UART_Receive_IT>
		currentEffect = rxData - 48;
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <HAL_UART_RxCpltCallback+0x38>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	3b30      	subs	r3, #48	; 0x30
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <HAL_UART_RxCpltCallback+0x3c>)
 800024a:	701a      	strb	r2, [r3, #0]
	}
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000094 	.word	0x20000094
 8000258:	20000118 	.word	0x20000118
 800025c:	20000010 	.word	0x20000010

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000264:	f000 fa86 	bl	8000774 <HAL_Init>

  /* USER CODE BEGIN Init */

  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 8000268:	2390      	movs	r3, #144	; 0x90
 800026a:	05d9      	lsls	r1, r3, #23
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <main+0x48>)
 800026e:	2202      	movs	r2, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f003 fa00 	bl	8003676 <Btn_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f81f 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f8eb 	bl	8000454 <MX_GPIO_Init>
  MX_SPI1_Init();
 800027e:	f000 f87b 	bl	8000378 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f8b7 	bl	80003f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData, 1);
 8000286:	4909      	ldr	r1, [pc, #36]	; (80002ac <main+0x4c>)
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <main+0x50>)
 800028a:	2201      	movs	r2, #1
 800028c:	0018      	movs	r0, r3
 800028e:	f001 ff9b 	bl	80021c8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Btn_Handle(&button1);
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <main+0x48>)
 8000294:	0018      	movs	r0, r3
 8000296:	f003 f960 	bl	800355a <Btn_Handle>
	  Led_cube_Handle(currentEffect);
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <main+0x54>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	f004 fad8 	bl	8004854 <Led_cube_Handle>
	  Btn_Handle(&button1);
 80002a4:	e7f5      	b.n	8000292 <main+0x32>
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	2000011c 	.word	0x2000011c
 80002ac:	20000118 	.word	0x20000118
 80002b0:	20000094 	.word	0x20000094
 80002b4:	20000010 	.word	0x20000010

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b099      	sub	sp, #100	; 0x64
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	242c      	movs	r4, #44	; 0x2c
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2334      	movs	r3, #52	; 0x34
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f005 fb73 	bl	80059b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	231c      	movs	r3, #28
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	0018      	movs	r0, r3
 80002d4:	2310      	movs	r3, #16
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f005 fb6b 	bl	80059b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	0018      	movs	r0, r3
 80002e2:	2318      	movs	r3, #24
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f005 fb64 	bl	80059b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2201      	movs	r2, #1
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2202      	movs	r2, #2
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2280      	movs	r2, #128	; 0x80
 8000304:	0252      	lsls	r2, r2, #9
 8000306:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2280      	movs	r2, #128	; 0x80
 800030c:	0352      	lsls	r2, r2, #13
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fd8d 	bl	8000e38 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f8ef 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	211c      	movs	r1, #28
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2207      	movs	r2, #7
 800032c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2202      	movs	r2, #2
 8000332:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2101      	movs	r1, #1
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f8fd 	bl	8001544 <HAL_RCC_ClockConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034e:	f000 f8d9 	bl	8000504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2201      	movs	r2, #1
 8000356:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fa69 	bl	8001838 <HAL_RCCEx_PeriphCLKConfig>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800036a:	f000 f8cb 	bl	8000504 <Error_Handler>
  }
}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b019      	add	sp, #100	; 0x64
 8000374:	bd90      	pop	{r4, r7, pc}
	...

08000378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_SPI1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MX_SPI1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_SPI1_Init+0x74>)
 8000384:	2282      	movs	r2, #130	; 0x82
 8000386:	0052      	lsls	r2, r2, #1
 8000388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <MX_SPI1_Init+0x74>)
 8000392:	22e0      	movs	r2, #224	; 0xe0
 8000394:	00d2      	lsls	r2, r2, #3
 8000396:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_SPI1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800039e:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_SPI1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_SPI1_Init+0x74>)
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_SPI1_Init+0x74>)
 80003ae:	2220      	movs	r2, #32
 80003b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_SPI1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_SPI1_Init+0x74>)
 80003c6:	2207      	movs	r2, #7
 80003c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_SPI1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <MX_SPI1_Init+0x74>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fb1b 	bl	8001a14 <HAL_SPI_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003e2:	f000 f88f 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000030 	.word	0x20000030
 80003f0:	40013000 	.word	0x40013000

080003f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_USART1_UART_Init+0x58>)
 80003fa:	4a15      	ldr	r2, [pc, #84]	; (8000450 <MX_USART1_UART_Init+0x5c>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_USART1_UART_Init+0x58>)
 8000400:	22e1      	movs	r2, #225	; 0xe1
 8000402:	0252      	lsls	r2, r2, #9
 8000404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_USART1_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_USART1_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_USART1_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USART1_UART_Init+0x58>)
 800041a:	2204      	movs	r2, #4
 800041c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_USART1_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USART1_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_USART1_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USART1_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <MX_USART1_UART_Init+0x58>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fe71 	bl	8002120 <HAL_UART_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f85f 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000094 	.word	0x20000094
 8000450:	40013800 	.word	0x40013800

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	; 0x24
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	240c      	movs	r4, #12
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2314      	movs	r3, #20
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f005 faa5 	bl	80059b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <MX_GPIO_Init+0xac>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <MX_GPIO_Init+0xac>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	03c9      	lsls	r1, r1, #15
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b21      	ldr	r3, [pc, #132]	; (8000500 <MX_GPIO_Init+0xac>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	03db      	lsls	r3, r3, #15
 8000480:	4013      	ands	r3, r2
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <MX_GPIO_Init+0xac>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MX_GPIO_Init+0xac>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0289      	lsls	r1, r1, #10
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_GPIO_Init+0xac>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	029b      	lsls	r3, r3, #10
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80004a2:	2390      	movs	r3, #144	; 0x90
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2200      	movs	r2, #0
 80004a8:	2140      	movs	r1, #64	; 0x40
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fca7 	bl	8000dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2202      	movs	r2, #2
 80004b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2201      	movs	r2, #1
 80004c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	2390      	movs	r3, #144	; 0x90
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fb12 	bl	8000af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 80004d0:	0021      	movs	r1, r4
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2240      	movs	r2, #64	; 0x40
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2203      	movs	r2, #3
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	2390      	movs	r3, #144	; 0x90
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fafe 	bl	8000af4 <HAL_GPIO_Init>

}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b009      	add	sp, #36	; 0x24
 80004fe:	bd90      	pop	{r4, r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x44>)
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_MspInit+0x44>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	619a      	str	r2, [r3, #24]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_MspInit+0x44>)
 8000530:	69da      	ldr	r2, [r3, #28]
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_MspInit+0x44>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0549      	lsls	r1, r1, #21
 8000538:	430a      	orrs	r2, r1
 800053a:	61da      	str	r2, [r3, #28]
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_MspInit+0x44>)
 800053e:	69da      	ldr	r2, [r3, #28]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	055b      	lsls	r3, r3, #21
 8000544:	4013      	ands	r3, r2
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b08b      	sub	sp, #44	; 0x2c
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	2414      	movs	r4, #20
 8000562:	193b      	adds	r3, r7, r4
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f005 fa22 	bl	80059b4 <memset>
  if(hspi->Instance==SPI1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <HAL_SPI_MspInit+0x90>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d132      	bne.n	80005e0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <HAL_SPI_MspInit+0x94>)
 800057c:	699a      	ldr	r2, [r3, #24]
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_SPI_MspInit+0x94>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0149      	lsls	r1, r1, #5
 8000584:	430a      	orrs	r2, r1
 8000586:	619a      	str	r2, [r3, #24]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_SPI_MspInit+0x94>)
 800058a:	699a      	ldr	r2, [r3, #24]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	015b      	lsls	r3, r3, #5
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_SPI_MspInit+0x94>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_SPI_MspInit+0x94>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0289      	lsls	r1, r1, #10
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_SPI_MspInit+0x94>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	029b      	lsls	r3, r3, #10
 80005ac:	4013      	ands	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2203      	movs	r2, #3
 80005ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	187a      	adds	r2, r7, r1
 80005d4:	2390      	movs	r3, #144	; 0x90
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fa8a 	bl	8000af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b00b      	add	sp, #44	; 0x2c
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	40013000 	.word	0x40013000
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b08b      	sub	sp, #44	; 0x2c
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	2414      	movs	r4, #20
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2314      	movs	r3, #20
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f005 f9d6 	bl	80059b4 <memset>
  if(huart->Instance==USART1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <HAL_UART_MspInit+0xa4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d13b      	bne.n	800068a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <HAL_UART_MspInit+0xa8>)
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <HAL_UART_MspInit+0xa8>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	01c9      	lsls	r1, r1, #7
 800061c:	430a      	orrs	r2, r1
 800061e:	619a      	str	r2, [r3, #24]
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <HAL_UART_MspInit+0xa8>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	01db      	lsls	r3, r3, #7
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <HAL_UART_MspInit+0xa8>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <HAL_UART_MspInit+0xa8>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0289      	lsls	r1, r1, #10
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <HAL_UART_MspInit+0xa8>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	029b      	lsls	r3, r3, #10
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	22c0      	movs	r2, #192	; 0xc0
 800064e:	00d2      	lsls	r2, r2, #3
 8000650:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2202      	movs	r2, #2
 8000658:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2203      	movs	r2, #3
 8000664:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2201      	movs	r2, #1
 800066a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	187a      	adds	r2, r7, r1
 800066e:	2390      	movs	r3, #144	; 0x90
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fa3d 	bl	8000af4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	201b      	movs	r0, #27
 8000680:	f000 f988 	bl	8000994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000684:	201b      	movs	r0, #27
 8000686:	f000 f99a 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b00b      	add	sp, #44	; 0x2c
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	40013800 	.word	0x40013800
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f8a0 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <USART1_IRQHandler+0x14>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fdda 	bl	800228c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20000094 	.word	0x20000094

080006e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	4813      	ldr	r0, [pc, #76]	; (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <LoopForever+0x6>)
    LDR R1, [R0]
 80006f6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006f8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <LoopForever+0xa>)
    CMP R1, R2
 80006fc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006fe:	d105      	bne.n	800070c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <LoopForever+0x12>)
    STR R1, [R0]
 8000704:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000708:	4913      	ldr	r1, [pc, #76]	; (8000758 <LoopForever+0x1a>)
    STR R1, [R0]
 800070a:	6001      	str	r1, [r0, #0]

0800070c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <LoopForever+0x1e>)
  ldr r1, =_edata
 800070e:	4914      	ldr	r1, [pc, #80]	; (8000760 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <LoopForever+0x26>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000724:	4c11      	ldr	r4, [pc, #68]	; (800076c <LoopForever+0x2e>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000732:	f7ff ffd7 	bl	80006e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000736:	f005 f919 	bl	800596c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff fd91 	bl	8000260 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000744:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000748:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800074c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000750:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000754:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000758:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000764:	08005a8c 	.word	0x08005a8c
  ldr r2, =_sbss
 8000768:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800076c:	200001cc 	.word	0x200001cc

08000770 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_IRQHandler>
	...

08000774 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_Init+0x24>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_Init+0x24>)
 800077e:	2110      	movs	r1, #16
 8000780:	430a      	orrs	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f809 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078a:	f7ff fec1 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_InitTick+0x5c>)
 80007a6:	681c      	ldr	r4, [r3, #0]
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_InitTick+0x60>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	23fa      	movs	r3, #250	; 0xfa
 80007b0:	0098      	lsls	r0, r3, #2
 80007b2:	f7ff fca9 	bl	8000108 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	0019      	movs	r1, r3
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fca4 	bl	8000108 <__udivsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f90b 	bl	80009de <HAL_SYSTICK_Config>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e00f      	b.n	80007f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d80b      	bhi.n	80007ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f8d8 	bl	8000994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_InitTick+0x64>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	001a      	movs	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	18d2      	adds	r2, r2, r3
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000008 	.word	0x20000008
 8000824:	20000134 	.word	0x20000134

08000828 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000134 	.word	0x20000134

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b7f      	cmp	r3, #127	; 0x7f
 800084e:	d809      	bhi.n	8000864 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	231f      	movs	r3, #31
 8000858:	401a      	ands	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_EnableIRQ+0x30>)
 800085c:	2101      	movs	r1, #1
 800085e:	4091      	lsls	r1, r2
 8000860:	000a      	movs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b7f      	cmp	r3, #127	; 0x7f
 8000884:	d828      	bhi.n	80008d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <__NVIC_SetPriority+0xd4>)
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b25b      	sxtb	r3, r3
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	33c0      	adds	r3, #192	; 0xc0
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	589b      	ldr	r3, [r3, r2]
 8000896:	1dfa      	adds	r2, r7, #7
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	0011      	movs	r1, r2
 800089c:	2203      	movs	r2, #3
 800089e:	400a      	ands	r2, r1
 80008a0:	00d2      	lsls	r2, r2, #3
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	4091      	lsls	r1, r2
 80008a6:	000a      	movs	r2, r1
 80008a8:	43d2      	mvns	r2, r2
 80008aa:	401a      	ands	r2, r3
 80008ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	401a      	ands	r2, r3
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0018      	movs	r0, r3
 80008bc:	2303      	movs	r3, #3
 80008be:	4003      	ands	r3, r0
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c4:	481f      	ldr	r0, [pc, #124]	; (8000944 <__NVIC_SetPriority+0xd4>)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	089b      	lsrs	r3, r3, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	33c0      	adds	r3, #192	; 0xc0
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d6:	e031      	b.n	800093c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0019      	movs	r1, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	400b      	ands	r3, r1
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	3306      	adds	r3, #6
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	3304      	adds	r3, #4
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1dfa      	adds	r2, r7, #7
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0011      	movs	r1, r2
 80008f8:	2203      	movs	r2, #3
 80008fa:	400a      	ands	r2, r1
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	43d2      	mvns	r2, r2
 8000906:	401a      	ands	r2, r3
 8000908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	22ff      	movs	r2, #255	; 0xff
 8000910:	401a      	ands	r2, r3
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	2303      	movs	r3, #3
 800091a:	4003      	ands	r3, r0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <__NVIC_SetPriority+0xd8>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	001c      	movs	r4, r3
 8000928:	230f      	movs	r3, #15
 800092a:	4023      	ands	r3, r4
 800092c:	3b08      	subs	r3, #8
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	430a      	orrs	r2, r1
 8000932:	3306      	adds	r3, #6
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	18c3      	adds	r3, r0, r3
 8000938:	3304      	adds	r3, #4
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b003      	add	sp, #12
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	045b      	lsls	r3, r3, #17
 800095c:	429a      	cmp	r2, r3
 800095e:	d301      	bcc.n	8000964 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000960:	2301      	movs	r3, #1
 8000962:	e010      	b.n	8000986 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <SysTick_Config+0x44>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	3a01      	subs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096c:	2301      	movs	r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	2103      	movs	r1, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff7c 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x44>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	210f      	movs	r1, #15
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	1c02      	adds	r2, r0, #0
 80009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ff5d 	bl	8000870 <__NVIC_SetPriority>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	0002      	movs	r2, r0
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ff33 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ffaf 	bl	800094c <SysTick_Config>
 80009ee:	0003      	movs	r3, r0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2221      	movs	r2, #33	; 0x21
 8000a04:	5c9b      	ldrb	r3, [r3, r2]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d008      	beq.n	8000a1e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2204      	movs	r2, #4
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e020      	b.n	8000a60 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	210e      	movs	r1, #14
 8000a2a:	438a      	bics	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	438a      	bics	r2, r1
 8000a3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a46:	2101      	movs	r1, #1
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2221      	movs	r2, #33	; 0x21
 8000a52:	2101      	movs	r1, #1
 8000a54:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2220      	movs	r2, #32
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a70:	210f      	movs	r1, #15
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2221      	movs	r2, #33	; 0x21
 8000a7c:	5c9b      	ldrb	r3, [r3, r2]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d006      	beq.n	8000a92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2204      	movs	r2, #4
 8000a88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e028      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	438a      	bics	r2, r1
 8000aa0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	438a      	bics	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aba:	2101      	movs	r1, #1
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2221      	movs	r2, #33	; 0x21
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2220      	movs	r2, #32
 8000ace:	2100      	movs	r1, #0
 8000ad0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d004      	beq.n	8000ae4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	4798      	blx	r3
    } 
  }
  return status;
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	781b      	ldrb	r3, [r3, #0]
}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	e149      	b.n	8000d98 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d100      	bne.n	8000b1c <HAL_GPIO_Init+0x28>
 8000b1a:	e13a      	b.n	8000d92 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2203      	movs	r2, #3
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d005      	beq.n	8000b34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d130      	bne.n	8000b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	43da      	mvns	r2, r3
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	091b      	lsrs	r3, r3, #4
 8000b80:	2201      	movs	r2, #1
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d017      	beq.n	8000bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d123      	bne.n	8000c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	08da      	lsrs	r2, r3, #3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3208      	adds	r2, #8
 8000be6:	0092      	lsls	r2, r2, #2
 8000be8:	58d3      	ldr	r3, [r2, r3]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	2207      	movs	r2, #7
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	220f      	movs	r2, #15
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	691a      	ldr	r2, [r3, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	2107      	movs	r1, #7
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	08da      	lsrs	r2, r3, #3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3208      	adds	r2, #8
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	6939      	ldr	r1, [r7, #16]
 8000c24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	43da      	mvns	r2, r3
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2203      	movs	r2, #3
 8000c44:	401a      	ands	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	0013      	movs	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	23c0      	movs	r3, #192	; 0xc0
 8000c60:	029b      	lsls	r3, r3, #10
 8000c62:	4013      	ands	r3, r2
 8000c64:	d100      	bne.n	8000c68 <HAL_GPIO_Init+0x174>
 8000c66:	e094      	b.n	8000d92 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c68:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <HAL_GPIO_Init+0x2bc>)
 8000c6a:	699a      	ldr	r2, [r3, #24]
 8000c6c:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <HAL_GPIO_Init+0x2bc>)
 8000c6e:	2101      	movs	r1, #1
 8000c70:	430a      	orrs	r2, r1
 8000c72:	619a      	str	r2, [r3, #24]
 8000c74:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <HAL_GPIO_Init+0x2bc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c80:	4a4c      	ldr	r2, [pc, #304]	; (8000db4 <HAL_GPIO_Init+0x2c0>)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	589b      	ldr	r3, [r3, r2]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2203      	movs	r2, #3
 8000c92:	4013      	ands	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	2390      	movs	r3, #144	; 0x90
 8000ca8:	05db      	lsls	r3, r3, #23
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d00d      	beq.n	8000cca <HAL_GPIO_Init+0x1d6>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a41      	ldr	r2, [pc, #260]	; (8000db8 <HAL_GPIO_Init+0x2c4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d007      	beq.n	8000cc6 <HAL_GPIO_Init+0x1d2>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <HAL_GPIO_Init+0x2c8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_GPIO_Init+0x1ce>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e004      	b.n	8000ccc <HAL_GPIO_Init+0x1d8>
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	e002      	b.n	8000ccc <HAL_GPIO_Init+0x1d8>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <HAL_GPIO_Init+0x1d8>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	2103      	movs	r1, #3
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	4093      	lsls	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cdc:	4935      	ldr	r1, [pc, #212]	; (8000db4 <HAL_GPIO_Init+0x2c0>)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	025b      	lsls	r3, r3, #9
 8000d02:	4013      	ands	r3, r2
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	035b      	lsls	r3, r3, #13
 8000d56:	4013      	ands	r3, r2
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43da      	mvns	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	039b      	lsls	r3, r3, #14
 8000d80:	4013      	ands	r3, r2
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	40da      	lsrs	r2, r3
 8000da0:	1e13      	subs	r3, r2, #0
 8000da2:	d000      	beq.n	8000da6 <HAL_GPIO_Init+0x2b2>
 8000da4:	e6ae      	b.n	8000b04 <HAL_GPIO_Init+0x10>
  } 
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b006      	add	sp, #24
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000
 8000db8:	48000400 	.word	0x48000400
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	000a      	movs	r2, r1
 8000dce:	1cbb      	adds	r3, r7, #2
 8000dd0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	1cba      	adds	r2, r7, #2
 8000dd8:	8812      	ldrh	r2, [r2, #0]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d004      	beq.n	8000de8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
  }
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	0008      	movs	r0, r1
 8000e08:	0011      	movs	r1, r2
 8000e0a:	1cbb      	adds	r3, r7, #2
 8000e0c:	1c02      	adds	r2, r0, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
 8000e10:	1c7b      	adds	r3, r7, #1
 8000e12:	1c0a      	adds	r2, r1, #0
 8000e14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e16:	1c7b      	adds	r3, r7, #1
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1e:	1cbb      	adds	r3, r7, #2
 8000e20:	881a      	ldrh	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e26:	e003      	b.n	8000e30 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e28:	1cbb      	adds	r3, r7, #2
 8000e2a:	881a      	ldrh	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f000 fb76 	bl	8001538 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	d100      	bne.n	8000e58 <HAL_RCC_OscConfig+0x20>
 8000e56:	e08e      	b.n	8000f76 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e58:	4bc5      	ldr	r3, [pc, #788]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d00e      	beq.n	8000e82 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e64:	4bc2      	ldr	r3, [pc, #776]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	220c      	movs	r2, #12
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d117      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x68>
 8000e70:	4bbf      	ldr	r3, [pc, #764]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	23c0      	movs	r3, #192	; 0xc0
 8000e76:	025b      	lsls	r3, r3, #9
 8000e78:	401a      	ands	r2, r3
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d10e      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	4bbb      	ldr	r3, [pc, #748]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	029b      	lsls	r3, r3, #10
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d100      	bne.n	8000e90 <HAL_RCC_OscConfig+0x58>
 8000e8e:	e071      	b.n	8000f74 <HAL_RCC_OscConfig+0x13c>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d000      	beq.n	8000e9a <HAL_RCC_OscConfig+0x62>
 8000e98:	e06c      	b.n	8000f74 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f000 fb4c 	bl	8001538 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d107      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x80>
 8000ea8:	4bb1      	ldr	r3, [pc, #708]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4bb0      	ldr	r3, [pc, #704]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	0249      	lsls	r1, r1, #9
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e02f      	b.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0xa2>
 8000ec0:	4bab      	ldr	r3, [pc, #684]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4baa      	ldr	r3, [pc, #680]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	49ab      	ldr	r1, [pc, #684]	; (8001174 <HAL_RCC_OscConfig+0x33c>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	4ba8      	ldr	r3, [pc, #672]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4ba7      	ldr	r3, [pc, #668]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	49a9      	ldr	r1, [pc, #676]	; (8001178 <HAL_RCC_OscConfig+0x340>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e01e      	b.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b05      	cmp	r3, #5
 8000ee0:	d10e      	bne.n	8000f00 <HAL_RCC_OscConfig+0xc8>
 8000ee2:	4ba3      	ldr	r3, [pc, #652]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4ba2      	ldr	r3, [pc, #648]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	02c9      	lsls	r1, r1, #11
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	4b9f      	ldr	r3, [pc, #636]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b9e      	ldr	r3, [pc, #632]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0249      	lsls	r1, r1, #9
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e00b      	b.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000f00:	4b9b      	ldr	r3, [pc, #620]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b9a      	ldr	r3, [pc, #616]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f06:	499b      	ldr	r1, [pc, #620]	; (8001174 <HAL_RCC_OscConfig+0x33c>)
 8000f08:	400a      	ands	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	4b98      	ldr	r3, [pc, #608]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b97      	ldr	r3, [pc, #604]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f12:	4999      	ldr	r1, [pc, #612]	; (8001178 <HAL_RCC_OscConfig+0x340>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d014      	beq.n	8000f4a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc82 	bl	8000828 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fc7d 	bl	8000828 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b64      	cmp	r3, #100	; 0x64
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e2fd      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3c:	4b8c      	ldr	r3, [pc, #560]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0xf2>
 8000f48:	e015      	b.n	8000f76 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fc6d 	bl	8000828 <HAL_GetTick>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fc68 	bl	8000828 <HAL_GetTick>
 8000f58:	0002      	movs	r2, r0
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e2e8      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	4b82      	ldr	r3, [pc, #520]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x11c>
 8000f72:	e000      	b.n	8000f76 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d100      	bne.n	8000f82 <HAL_RCC_OscConfig+0x14a>
 8000f80:	e06c      	b.n	800105c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f82:	4b7b      	ldr	r3, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	220c      	movs	r2, #12
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d00e      	beq.n	8000faa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f8c:	4b78      	ldr	r3, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	220c      	movs	r2, #12
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d11f      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x1a0>
 8000f98:	4b75      	ldr	r3, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	23c0      	movs	r3, #192	; 0xc0
 8000f9e:	025b      	lsls	r3, r3, #9
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d116      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	4b71      	ldr	r3, [pc, #452]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x188>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d001      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e2bb      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	22f8      	movs	r2, #248	; 0xf8
 8000fc6:	4393      	bics	r3, r2
 8000fc8:	0019      	movs	r1, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	00da      	lsls	r2, r3, #3
 8000fd0:	4b67      	ldr	r3, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	e041      	b.n	800105c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d024      	beq.n	800102a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe0:	4b63      	ldr	r3, [pc, #396]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b62      	ldr	r3, [pc, #392]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc1c 	bl	8000828 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fc17 	bl	8000828 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e297      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001008:	4b59      	ldr	r3, [pc, #356]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2202      	movs	r2, #2
 800100e:	4013      	ands	r3, r2
 8001010:	d0f1      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001012:	4b57      	ldr	r3, [pc, #348]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	22f8      	movs	r2, #248	; 0xf8
 8001018:	4393      	bics	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	00da      	lsls	r2, r3, #3
 8001022:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e018      	b.n	800105c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102a:	4b51      	ldr	r3, [pc, #324]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b50      	ldr	r3, [pc, #320]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001030:	2101      	movs	r1, #1
 8001032:	438a      	bics	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fbf7 	bl	8000828 <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001040:	f7ff fbf2 	bl	8000828 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e272      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	d1f1      	bne.n	8001040 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4013      	ands	r3, r2
 8001064:	d036      	beq.n	80010d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d019      	beq.n	80010a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106e:	4b40      	ldr	r3, [pc, #256]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fbd5 	bl	8000828 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fbd0 	bl	8000828 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e250      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001096:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x24c>
 80010a0:	e018      	b.n	80010d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	438a      	bics	r2, r1
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fbbb 	bl	8000828 <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fbb6 	bl	8000828 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e236      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d1f1      	bne.n	80010b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2204      	movs	r2, #4
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2a8>
 80010de:	e0b5      	b.n	800124c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e0:	201f      	movs	r0, #31
 80010e2:	183b      	adds	r3, r7, r0
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010ea:	69da      	ldr	r2, [r3, #28]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	055b      	lsls	r3, r3, #21
 80010f0:	4013      	ands	r3, r2
 80010f2:	d110      	bne.n	8001116 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010f6:	69da      	ldr	r2, [r3, #28]
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0549      	lsls	r1, r1, #21
 80010fe:	430a      	orrs	r2, r1
 8001100:	61da      	str	r2, [r3, #28]
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	055b      	lsls	r3, r3, #21
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001110:	183b      	adds	r3, r7, r0
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_RCC_OscConfig+0x344>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4013      	ands	r3, r2
 8001120:	d11a      	bne.n	8001158 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_RCC_OscConfig+0x344>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_RCC_OscConfig+0x344>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	0049      	lsls	r1, r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001130:	f7ff fb7a 	bl	8000828 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113a:	f7ff fb75 	bl	8000828 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b64      	cmp	r3, #100	; 0x64
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e1f5      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_OscConfig+0x344>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4013      	ands	r3, r2
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10f      	bne.n	8001180 <HAL_RCC_OscConfig+0x348>
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <HAL_RCC_OscConfig+0x338>)
 8001166:	2101      	movs	r1, #1
 8001168:	430a      	orrs	r2, r1
 800116a:	621a      	str	r2, [r3, #32]
 800116c:	e036      	b.n	80011dc <HAL_RCC_OscConfig+0x3a4>
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40021000 	.word	0x40021000
 8001174:	fffeffff 	.word	0xfffeffff
 8001178:	fffbffff 	.word	0xfffbffff
 800117c:	40007000 	.word	0x40007000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x36a>
 8001188:	4bca      	ldr	r3, [pc, #808]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	4bc9      	ldr	r3, [pc, #804]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800118e:	2101      	movs	r1, #1
 8001190:	438a      	bics	r2, r1
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	4bc7      	ldr	r3, [pc, #796]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	4bc6      	ldr	r3, [pc, #792]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800119a:	2104      	movs	r1, #4
 800119c:	438a      	bics	r2, r1
 800119e:	621a      	str	r2, [r3, #32]
 80011a0:	e01c      	b.n	80011dc <HAL_RCC_OscConfig+0x3a4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x38c>
 80011aa:	4bc2      	ldr	r3, [pc, #776]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011ac:	6a1a      	ldr	r2, [r3, #32]
 80011ae:	4bc1      	ldr	r3, [pc, #772]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011b0:	2104      	movs	r1, #4
 80011b2:	430a      	orrs	r2, r1
 80011b4:	621a      	str	r2, [r3, #32]
 80011b6:	4bbf      	ldr	r3, [pc, #764]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	4bbe      	ldr	r3, [pc, #760]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	621a      	str	r2, [r3, #32]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0x3a4>
 80011c4:	4bbb      	ldr	r3, [pc, #748]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011c6:	6a1a      	ldr	r2, [r3, #32]
 80011c8:	4bba      	ldr	r3, [pc, #744]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	438a      	bics	r2, r1
 80011ce:	621a      	str	r2, [r3, #32]
 80011d0:	4bb8      	ldr	r3, [pc, #736]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	6a1a      	ldr	r2, [r3, #32]
 80011d4:	4bb7      	ldr	r3, [pc, #732]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80011d6:	2104      	movs	r1, #4
 80011d8:	438a      	bics	r2, r1
 80011da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d014      	beq.n	800120e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fb20 	bl	8000828 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e009      	b.n	8001202 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fb1b 	bl	8000828 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	4aaf      	ldr	r2, [pc, #700]	; (80014b8 <HAL_RCC_OscConfig+0x680>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e19a      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001202:	4bac      	ldr	r3, [pc, #688]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x3b6>
 800120c:	e013      	b.n	8001236 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb0b 	bl	8000828 <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001216:	e009      	b.n	800122c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fb06 	bl	8000828 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	4aa5      	ldr	r2, [pc, #660]	; (80014b8 <HAL_RCC_OscConfig+0x680>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e185      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122c:	4ba1      	ldr	r3, [pc, #644]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001236:	231f      	movs	r3, #31
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d105      	bne.n	800124c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001240:	4b9c      	ldr	r3, [pc, #624]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001242:	69da      	ldr	r2, [r3, #28]
 8001244:	4b9b      	ldr	r3, [pc, #620]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001246:	499d      	ldr	r1, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x684>)
 8001248:	400a      	ands	r2, r1
 800124a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2210      	movs	r2, #16
 8001252:	4013      	ands	r3, r2
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d12a      	bne.n	80012b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800125e:	4b95      	ldr	r3, [pc, #596]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001262:	4b94      	ldr	r3, [pc, #592]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001264:	2104      	movs	r1, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800126a:	4b92      	ldr	r3, [pc, #584]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126e:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fad7 	bl	8000828 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001280:	f7ff fad2 	bl	8000828 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e152      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	2202      	movs	r2, #2
 8001298:	4013      	ands	r3, r2
 800129a:	d0f1      	beq.n	8001280 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800129c:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	22f8      	movs	r2, #248	; 0xf8
 80012a2:	4393      	bics	r3, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	00da      	lsls	r2, r3, #3
 80012ac:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
 80012b2:	e034      	b.n	800131e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	3305      	adds	r3, #5
 80012ba:	d111      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012bc:	4b7d      	ldr	r3, [pc, #500]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012c2:	2104      	movs	r1, #4
 80012c4:	438a      	bics	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	22f8      	movs	r2, #248	; 0xf8
 80012ce:	4393      	bics	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	00da      	lsls	r2, r3, #3
 80012d8:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
 80012de:	e01e      	b.n	800131e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012e0:	4b74      	ldr	r3, [pc, #464]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e4:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	430a      	orrs	r2, r1
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	438a      	bics	r2, r1
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fa96 	bl	8000828 <HAL_GetTick>
 80012fc:	0003      	movs	r3, r0
 80012fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001302:	f7ff fa91 	bl	8000828 <HAL_GetTick>
 8001306:	0002      	movs	r2, r0
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e111      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001314:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d1f1      	bne.n	8001302 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2220      	movs	r2, #32
 8001324:	4013      	ands	r3, r2
 8001326:	d05c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001328:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	220c      	movs	r2, #12
 800132e:	4013      	ands	r3, r2
 8001330:	2b0c      	cmp	r3, #12
 8001332:	d00e      	beq.n	8001352 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001334:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	220c      	movs	r2, #12
 800133a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800133c:	2b08      	cmp	r3, #8
 800133e:	d114      	bne.n	800136a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001340:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	401a      	ands	r2, r3
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	429a      	cmp	r2, r3
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001352:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	4013      	ands	r3, r2
 800135c:	d040      	beq.n	80013e0 <HAL_RCC_OscConfig+0x5a8>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d03c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0e6      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01b      	beq.n	80013aa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001372:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001376:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0249      	lsls	r1, r1, #9
 800137c:	430a      	orrs	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fa52 	bl	8000828 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800138a:	f7ff fa4d 	bl	8000828 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0cd      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800139c:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800139e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	025b      	lsls	r3, r3, #9
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x552>
 80013a8:	e01b      	b.n	80013e2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	4943      	ldr	r1, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x688>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fa37 	bl	8000828 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c0:	f7ff fa32 	bl	8000828 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0b2      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x588>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013e0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <HAL_RCC_OscConfig+0x5b4>
 80013ea:	e0a4      	b.n	8001536 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d100      	bne.n	80013fa <HAL_RCC_OscConfig+0x5c2>
 80013f8:	e078      	b.n	80014ec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d14c      	bne.n	800149c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001408:	492e      	ldr	r1, [pc, #184]	; (80014c4 <HAL_RCC_OscConfig+0x68c>)
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fa0b 	bl	8000828 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff fa06 	bl	8000828 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e086      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	049b      	lsls	r3, r3, #18
 8001432:	4013      	ands	r3, r2
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	220f      	movs	r2, #15
 800143c:	4393      	bics	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001446:	430a      	orrs	r2, r1
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_RCC_OscConfig+0x690>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	431a      	orrs	r2, r3
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0449      	lsls	r1, r1, #17
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff f9d9 	bl	8000828 <HAL_GetTick>
 8001476:	0003      	movs	r3, r0
 8001478:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff f9d4 	bl	8000828 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e054      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	049b      	lsls	r3, r3, #18
 8001496:	4013      	ands	r3, r2
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x644>
 800149a:	e04c      	b.n	8001536 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <HAL_RCC_OscConfig+0x68c>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff f9be 	bl	8000828 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	e015      	b.n	80014de <HAL_RCC_OscConfig+0x6a6>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40021000 	.word	0x40021000
 80014b8:	00001388 	.word	0x00001388
 80014bc:	efffffff 	.word	0xefffffff
 80014c0:	fffeffff 	.word	0xfffeffff
 80014c4:	feffffff 	.word	0xfeffffff
 80014c8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff f9ac 	bl	8000828 <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e02c      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_RCC_OscConfig+0x708>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	049b      	lsls	r3, r3, #18
 80014e6:	4013      	ands	r3, r2
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x694>
 80014ea:	e024      	b.n	8001536 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e01f      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_RCC_OscConfig+0x708>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_RCC_OscConfig+0x708>)
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	429a      	cmp	r2, r3
 8001512:	d10e      	bne.n	8001532 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	220f      	movs	r2, #15
 8001518:	401a      	ands	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d107      	bne.n	8001532 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	23f0      	movs	r3, #240	; 0xf0
 8001526:	039b      	lsls	r3, r3, #14
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b008      	add	sp, #32
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0bf      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d911      	bls.n	800158a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b5e      	ldr	r3, [pc, #376]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	4393      	bics	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	4013      	ands	r3, r2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0a6      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d015      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d006      	beq.n	80015ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015a4:	21e0      	movs	r1, #224	; 0xe0
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	22f0      	movs	r2, #240	; 0xf0
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d04c      	beq.n	8001664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d120      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07a      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	049b      	lsls	r3, r3, #18
 80015f2:	4013      	ands	r3, r2
 80015f4:	d114      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06e      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	4013      	ands	r3, r2
 800160c:	d108      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e062      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e05b      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2203      	movs	r2, #3
 8001626:	4393      	bics	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff f8f8 	bl	8000828 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163c:	e009      	b.n	8001652 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163e:	f7ff f8f3 	bl	8000828 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_RCC_ClockConfig+0x1a4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e042      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	220c      	movs	r2, #12
 8001658:	401a      	ands	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1ec      	bne.n	800163e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	4013      	ands	r3, r2
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d211      	bcs.n	8001696 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4393      	bics	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_RCC_ClockConfig+0x19c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d001      	beq.n	8001696 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e020      	b.n	80016d8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2204      	movs	r2, #4
 800169c:	4013      	ands	r3, r2
 800169e:	d009      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_RCC_ClockConfig+0x1a8>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016b4:	f000 f820 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80016b8:	0001      	movs	r1, r0
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_ClockConfig+0x1a0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	220f      	movs	r2, #15
 80016c2:	4013      	ands	r3, r2
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_RCC_ClockConfig+0x1ac>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	000a      	movs	r2, r1
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1b0>)
 80016ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff f863 	bl	800079c <HAL_InitTick>
  
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40022000 	.word	0x40022000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	00001388 	.word	0x00001388
 80016ec:	fffff8ff 	.word	0xfffff8ff
 80016f0:	080059fc 	.word	0x080059fc
 80016f4:	20000000 	.word	0x20000000

080016f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b08f      	sub	sp, #60	; 0x3c
 80016fc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016fe:	2314      	movs	r3, #20
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001704:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001706:	c313      	stmia	r3!, {r0, r1, r4}
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4a36      	ldr	r2, [pc, #216]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001712:	c313      	stmia	r3!, {r0, r1, r4}
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <HAL_RCC_GetSysClockFreq+0xf4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	220c      	movs	r2, #12
 8001736:	4013      	ands	r3, r2
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d047      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0xd4>
 800173c:	d849      	bhi.n	80017d2 <HAL_RCC_GetSysClockFreq+0xda>
 800173e:	2b04      	cmp	r3, #4
 8001740:	d002      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x50>
 8001742:	2b08      	cmp	r3, #8
 8001744:	d003      	beq.n	800174e <HAL_RCC_GetSysClockFreq+0x56>
 8001746:	e044      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800174c:	e044      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	220f      	movs	r2, #15
 8001754:	4013      	ands	r3, r2
 8001756:	2214      	movs	r2, #20
 8001758:	18ba      	adds	r2, r7, r2
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_RCC_GetSysClockFreq+0xf4>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	220f      	movs	r2, #15
 8001764:	4013      	ands	r3, r2
 8001766:	1d3a      	adds	r2, r7, #4
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800176c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	401a      	ands	r2, r3
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	429a      	cmp	r2, r3
 800177a:	d109      	bne.n	8001790 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800177c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800177e:	481c      	ldr	r0, [pc, #112]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001780:	f7fe fcc2 	bl	8000108 <__udivsi3>
 8001784:	0003      	movs	r3, r0
 8001786:	001a      	movs	r2, r3
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	4353      	muls	r3, r2
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
 800178e:	e01a      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	025b      	lsls	r3, r3, #9
 8001796:	401a      	ands	r2, r3
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	429a      	cmp	r2, r3
 800179e:	d109      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017a4:	f7fe fcb0 	bl	8000108 <__udivsi3>
 80017a8:	0003      	movs	r3, r0
 80017aa:	001a      	movs	r2, r3
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	4353      	muls	r3, r2
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017b6:	480e      	ldr	r0, [pc, #56]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b8:	f7fe fca6 	bl	8000108 <__udivsi3>
 80017bc:	0003      	movs	r3, r0
 80017be:	001a      	movs	r2, r3
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	4353      	muls	r3, r2
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ca:	e005      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017d0:	e002      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b00f      	add	sp, #60	; 0x3c
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	080059dc 	.word	0x080059dc
 80017e8:	080059ec 	.word	0x080059ec
 80017ec:	40021000 	.word	0x40021000
 80017f0:	007a1200 	.word	0x007a1200
 80017f4:	02dc6c00 	.word	0x02dc6c00

080017f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001810:	f7ff fff2 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001814:	0001      	movs	r1, r0
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	2207      	movs	r2, #7
 800181e:	4013      	ands	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	40d9      	lsrs	r1, r3
 8001826:	000b      	movs	r3, r1
}    
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40021000 	.word	0x40021000
 8001834:	08005a0c 	.word	0x08005a0c

08001838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	4013      	ands	r3, r2
 8001852:	d100      	bne.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001854:	e08e      	b.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2017      	movs	r0, #23
 8001858:	183b      	adds	r3, r7, r0
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	055b      	lsls	r3, r3, #21
 8001866:	4013      	ands	r3, r2
 8001868:	d110      	bne.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0549      	lsls	r1, r1, #21
 8001874:	430a      	orrs	r2, r1
 8001876:	61da      	str	r2, [r3, #28]
 8001878:	4b60      	ldr	r3, [pc, #384]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800187a:	69da      	ldr	r2, [r3, #28]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	055b      	lsls	r3, r3, #21
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	183b      	adds	r3, r7, r0
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	4b5c      	ldr	r3, [pc, #368]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4013      	ands	r3, r2
 8001896:	d11a      	bne.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001898:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	0049      	lsls	r1, r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7fe ffbf 	bl	8000828 <HAL_GetTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	e008      	b.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b0:	f7fe ffba 	bl	8000828 <HAL_GetTick>
 80018b4:	0002      	movs	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e097      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	23c0      	movs	r3, #192	; 0xc0
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d034      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	23c0      	movs	r3, #192	; 0xc0
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d02c      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a43      	ldr	r2, [pc, #268]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018fa:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0249      	lsls	r1, r1, #9
 8001904:	430a      	orrs	r2, r1
 8001906:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800190e:	493e      	ldr	r1, [pc, #248]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001910:	400a      	ands	r2, r1
 8001912:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	4013      	ands	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7fe ff81 	bl	8000828 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	e009      	b.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7fe ff7c 	bl	8000828 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e058      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d0f0      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001950:	4013      	ands	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800195a:	430a      	orrs	r2, r1
 800195c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195e:	2317      	movs	r3, #23
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800196e:	4928      	ldr	r1, [pc, #160]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001970:	400a      	ands	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	d009      	beq.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	2203      	movs	r2, #3
 8001984:	4393      	bics	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800198e:	430a      	orrs	r2, r1
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2220      	movs	r2, #32
 8001998:	4013      	ands	r3, r2
 800199a:	d009      	beq.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	2210      	movs	r2, #16
 80019a2:	4393      	bics	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019ac:	430a      	orrs	r2, r1
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	4013      	ands	r3, r2
 80019ba:	d009      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	4393      	bics	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4013      	ands	r3, r2
 80019da:	d009      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	2240      	movs	r2, #64	; 0x40
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b006      	add	sp, #24
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	fffffcff 	.word	0xfffffcff
 8001a08:	fffeffff 	.word	0xfffeffff
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	efffffff 	.word	0xefffffff

08001a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0a8      	b.n	8001b78 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	2382      	movs	r3, #130	; 0x82
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d009      	beq.n	8001a4e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61da      	str	r2, [r3, #28]
 8001a40:	e005      	b.n	8001a4e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	225d      	movs	r2, #93	; 0x5d
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d107      	bne.n	8001a70 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	225c      	movs	r2, #92	; 0x5c
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7fe fd74 	bl	8000558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	225d      	movs	r2, #93	; 0x5d
 8001a74:	2102      	movs	r1, #2
 8001a76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2140      	movs	r1, #64	; 0x40
 8001a84:	438a      	bics	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	23e0      	movs	r3, #224	; 0xe0
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d902      	bls.n	8001a9a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e002      	b.n	8001aa0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	23f0      	movs	r3, #240	; 0xf0
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d008      	beq.n	8001abe <HAL_SPI_Init+0xaa>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	23e0      	movs	r3, #224	; 0xe0
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d002      	beq.n	8001abe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	2382      	movs	r3, #130	; 0x82
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6899      	ldr	r1, [r3, #8]
 8001acc:	2384      	movs	r3, #132	; 0x84
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2102      	movs	r1, #2
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6999      	ldr	r1, [r3, #24]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	400b      	ands	r3, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2138      	movs	r1, #56	; 0x38
 8001afa:	400b      	ands	r3, r1
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	2180      	movs	r1, #128	; 0x80
 8001b04:	400b      	ands	r3, r1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	0011      	movs	r1, r2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	2204      	movs	r2, #4
 8001b24:	401a      	ands	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	2108      	movs	r1, #8
 8001b36:	400b      	ands	r3, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	23f0      	movs	r3, #240	; 0xf0
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	400b      	ands	r3, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	0011      	movs	r1, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	015b      	lsls	r3, r3, #5
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4907      	ldr	r1, [pc, #28]	; (8001b80 <HAL_SPI_Init+0x16c>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	225d      	movs	r2, #93	; 0x5d
 8001b72:	2101      	movs	r1, #1
 8001b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b004      	add	sp, #16
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	fffff7ff 	.word	0xfffff7ff

08001b84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	1dbb      	adds	r3, r7, #6
 8001b92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b94:	231f      	movs	r3, #31
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	225c      	movs	r2, #92	; 0x5c
 8001ba0:	5c9b      	ldrb	r3, [r3, r2]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_SPI_Transmit+0x26>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e140      	b.n	8001e2c <HAL_SPI_Transmit+0x2a8>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	225c      	movs	r2, #92	; 0x5c
 8001bae:	2101      	movs	r1, #1
 8001bb0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bb2:	f7fe fe39 	bl	8000828 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001bba:	2316      	movs	r3, #22
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	1dba      	adds	r2, r7, #6
 8001bc0:	8812      	ldrh	r2, [r2, #0]
 8001bc2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	225d      	movs	r2, #93	; 0x5d
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d004      	beq.n	8001bda <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001bd0:	231f      	movs	r3, #31
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bd8:	e11d      	b.n	8001e16 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_SPI_Transmit+0x64>
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d104      	bne.n	8001bf2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001be8:	231f      	movs	r3, #31
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bf0:	e111      	b.n	8001e16 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	225d      	movs	r2, #93	; 0x5d
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1dba      	adds	r2, r7, #6
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1dba      	adds	r2, r7, #6
 8001c12:	8812      	ldrh	r2, [r2, #0]
 8001c14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2244      	movs	r2, #68	; 0x44
 8001c20:	2100      	movs	r1, #0
 8001c22:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2246      	movs	r2, #70	; 0x46
 8001c28:	2100      	movs	r1, #0
 8001c2a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d110      	bne.n	8001c66 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2140      	movs	r1, #64	; 0x40
 8001c50:	438a      	bics	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	01c9      	lsls	r1, r1, #7
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b40      	cmp	r3, #64	; 0x40
 8001c72:	d007      	beq.n	8001c84 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	23e0      	movs	r3, #224	; 0xe0
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d94e      	bls.n	8001d2e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_SPI_Transmit+0x11e>
 8001c98:	2316      	movs	r3, #22
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d13f      	bne.n	8001d22 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	881a      	ldrh	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb2:	1c9a      	adds	r2, r3, #2
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cc6:	e02c      	b.n	8001d22 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d112      	bne.n	8001cfc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	1c9a      	adds	r2, r3, #2
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cfa:	e012      	b.n	8001d22 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfc:	f7fe fd94 	bl	8000828 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d802      	bhi.n	8001d12 <HAL_SPI_Transmit+0x18e>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	d102      	bne.n	8001d18 <HAL_SPI_Transmit+0x194>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d104      	bne.n	8001d22 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	701a      	strb	r2, [r3, #0]
          goto error;
 8001d20:	e079      	b.n	8001e16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1cd      	bne.n	8001cc8 <HAL_SPI_Transmit+0x144>
 8001d2c:	e04f      	b.n	8001dce <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <HAL_SPI_Transmit+0x1bc>
 8001d36:	2316      	movs	r3, #22
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d141      	bne.n	8001dc4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001d66:	e02d      	b.n	8001dc4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d113      	bne.n	8001d9e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d9c:	e012      	b.n	8001dc4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d9e:	f7fe fd43 	bl	8000828 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d802      	bhi.n	8001db4 <HAL_SPI_Transmit+0x230>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_SPI_Transmit+0x236>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d104      	bne.n	8001dc4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001dba:	231f      	movs	r3, #31
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
          goto error;
 8001dc2:	e028      	b.n	8001e16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1cc      	bne.n	8001d68 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 f95d 	bl	8002094 <SPI_EndRxTxTransaction>
 8001dda:	1e03      	subs	r3, r0, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001e0a:	231f      	movs	r3, #31
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	e000      	b.n	8001e16 <HAL_SPI_Transmit+0x292>
  }

error:
 8001e14:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	225d      	movs	r2, #93	; 0x5d
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	225c      	movs	r2, #92	; 0x5c
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e26:	231f      	movs	r3, #31
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b008      	add	sp, #32
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e44:	f7fe fcf0 	bl	8000828 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e54:	f7fe fce8 	bl	8000828 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	0d1b      	lsrs	r3, r3, #20
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	4353      	muls	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e6a:	e058      	b.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	d055      	beq.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e72:	f7fe fcd9 	bl	8000828 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d902      	bls.n	8001e88 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d142      	bne.n	8001f0e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	21e0      	movs	r1, #224	; 0xe0
 8001e94:	438a      	bics	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	2382      	movs	r3, #130	; 0x82
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d113      	bne.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0x98>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d005      	beq.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d107      	bne.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2140      	movs	r1, #64	; 0x40
 8001ec8:	438a      	bics	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	019b      	lsls	r3, r3, #6
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d110      	bne.n	8001efa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	491a      	ldr	r1, [pc, #104]	; (8001f4c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0189      	lsls	r1, r1, #6
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	225d      	movs	r2, #93	; 0x5d
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	225c      	movs	r2, #92	; 0x5c
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e017      	b.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	4013      	ands	r3, r2
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	425a      	negs	r2, r3
 8001f2e:	4153      	adcs	r3, r2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	001a      	movs	r2, r3
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d197      	bne.n	8001e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b008      	add	sp, #32
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	ffffdfff 	.word	0xffffdfff

08001f50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f5e:	2317      	movs	r3, #23
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f66:	f7fe fc5f 	bl	8000828 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	18d3      	adds	r3, r2, r3
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001f76:	f7fe fc57 	bl	8000828 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	189b      	adds	r3, r3, r2
 8001f90:	00da      	lsls	r2, r3, #3
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	0d1b      	lsrs	r3, r3, #20
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	4353      	muls	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f9c:	e068      	b.n	8002070 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	23c0      	movs	r3, #192	; 0xc0
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10a      	bne.n	8001fbe <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d107      	bne.n	8001fbe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	2117      	movs	r1, #23
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	d055      	beq.n	8002070 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fc4:	f7fe fc30 	bl	8000828 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d902      	bls.n	8001fda <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d142      	bne.n	8002060 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	21e0      	movs	r1, #224	; 0xe0
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	2382      	movs	r3, #130	; 0x82
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d113      	bne.n	800201e <SPI_WaitFifoStateUntilTimeout+0xce>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d005      	beq.n	800200e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	429a      	cmp	r2, r3
 800200c:	d107      	bne.n	800201e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2140      	movs	r1, #64	; 0x40
 800201a:	438a      	bics	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	019b      	lsls	r3, r3, #6
 8002026:	429a      	cmp	r2, r3
 8002028:	d110      	bne.n	800204c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4916      	ldr	r1, [pc, #88]	; (8002090 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002036:	400a      	ands	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0189      	lsls	r1, r1, #6
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	225d      	movs	r2, #93	; 0x5d
 8002050:	2101      	movs	r1, #1
 8002052:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	225c      	movs	r2, #92	; 0x5c
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e010      	b.n	8002082 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	3b01      	subs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d18e      	bne.n	8001f9e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b00a      	add	sp, #40	; 0x28
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	20000000 	.word	0x20000000
 8002090:	ffffdfff 	.word	0xffffdfff

08002094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	0159      	lsls	r1, r3, #5
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	0013      	movs	r3, r2
 80020ae:	2200      	movs	r2, #0
 80020b0:	f7ff ff4e 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d007      	beq.n	80020c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	2220      	movs	r2, #32
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e027      	b.n	8002118 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	0013      	movs	r3, r2
 80020d2:	2200      	movs	r2, #0
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	f7ff fead 	bl	8001e34 <SPI_WaitFlagStateUntilTimeout>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d007      	beq.n	80020ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	2220      	movs	r2, #32
 80020e4:	431a      	orrs	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e014      	b.n	8002118 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	23c0      	movs	r3, #192	; 0xc0
 80020f2:	00d9      	lsls	r1, r3, #3
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	0013      	movs	r3, r2
 80020fc:	2200      	movs	r2, #0
 80020fe:	f7ff ff27 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d007      	beq.n	8002116 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	2220      	movs	r2, #32
 800210c:	431a      	orrs	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e000      	b.n	8002118 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b004      	add	sp, #16
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e044      	b.n	80021bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2274      	movs	r2, #116	; 0x74
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe fa53 	bl	80005f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2224      	movs	r2, #36	; 0x24
 800214e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 fb86 	bl	8002874 <UART_SetConfig>
 8002168:	0003      	movs	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e024      	b.n	80021bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fcb9 	bl	8002af4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	490d      	ldr	r1, [pc, #52]	; (80021c4 <HAL_UART_Init+0xa4>)
 800218e:	400a      	ands	r2, r1
 8002190:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	212a      	movs	r1, #42	; 0x2a
 800219e:	438a      	bics	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 fd51 	bl	8002c5c <UART_CheckIdleState>
 80021ba:	0003      	movs	r3, r0
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	ffffb7ff 	.word	0xffffb7ff

080021c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	1dbb      	adds	r3, r7, #6
 80021d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d150      	bne.n	8002280 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_UART_Receive_IT+0x24>
 80021e4:	1dbb      	adds	r3, r7, #6
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e048      	b.n	8002282 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d109      	bne.n	8002210 <HAL_UART_Receive_IT+0x48>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2201      	movs	r2, #1
 8002208:	4013      	ands	r3, r2
 800220a:	d001      	beq.n	8002210 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e038      	b.n	8002282 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2274      	movs	r2, #116	; 0x74
 8002214:	5c9b      	ldrb	r3, [r3, r2]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_UART_Receive_IT+0x56>
 800221a:	2302      	movs	r3, #2
 800221c:	e031      	b.n	8002282 <HAL_UART_Receive_IT+0xba>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2274      	movs	r2, #116	; 0x74
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	4013      	ands	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800223a:	f3ef 8310 	mrs	r3, PRIMASK
 800223e:	613b      	str	r3, [r7, #16]
  return(result);
 8002240:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	2301      	movs	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f383 8810 	msr	PRIMASK, r3
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	04c9      	lsls	r1, r1, #19
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f383 8810 	msr	PRIMASK, r3
}
 800226c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800226e:	1dbb      	adds	r3, r7, #6
 8002270:	881a      	ldrh	r2, [r3, #0]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	0018      	movs	r0, r3
 8002278:	f000 fdfc 	bl	8002e74 <UART_Start_Receive_IT>
 800227c:	0003      	movs	r3, r0
 800227e:	e000      	b.n	8002282 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b008      	add	sp, #32
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b0ab      	sub	sp, #172	; 0xac
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	22a4      	movs	r2, #164	; 0xa4
 800229c:	18b9      	adds	r1, r7, r2
 800229e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	20a0      	movs	r0, #160	; 0xa0
 80022a8:	1839      	adds	r1, r7, r0
 80022aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	219c      	movs	r1, #156	; 0x9c
 80022b4:	1879      	adds	r1, r7, r1
 80022b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022b8:	0011      	movs	r1, r2
 80022ba:	18bb      	adds	r3, r7, r2
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a99      	ldr	r2, [pc, #612]	; (8002524 <HAL_UART_IRQHandler+0x298>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	2298      	movs	r2, #152	; 0x98
 80022c4:	18bc      	adds	r4, r7, r2
 80022c6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80022c8:	18bb      	adds	r3, r7, r2
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d114      	bne.n	80022fa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2220      	movs	r2, #32
 80022d6:	4013      	ands	r3, r2
 80022d8:	d00f      	beq.n	80022fa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022da:	183b      	adds	r3, r7, r0
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2220      	movs	r2, #32
 80022e0:	4013      	ands	r3, r2
 80022e2:	d00a      	beq.n	80022fa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <HAL_UART_IRQHandler+0x62>
 80022ec:	e296      	b.n	800281c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	0010      	movs	r0, r2
 80022f6:	4798      	blx	r3
      }
      return;
 80022f8:	e290      	b.n	800281c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022fa:	2398      	movs	r3, #152	; 0x98
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d100      	bne.n	8002306 <HAL_UART_IRQHandler+0x7a>
 8002304:	e114      	b.n	8002530 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002306:	239c      	movs	r3, #156	; 0x9c
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	d106      	bne.n	8002320 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002312:	23a0      	movs	r3, #160	; 0xa0
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a83      	ldr	r2, [pc, #524]	; (8002528 <HAL_UART_IRQHandler+0x29c>)
 800231a:	4013      	ands	r3, r2
 800231c:	d100      	bne.n	8002320 <HAL_UART_IRQHandler+0x94>
 800231e:	e107      	b.n	8002530 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002320:	23a4      	movs	r3, #164	; 0xa4
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d012      	beq.n	8002352 <HAL_UART_IRQHandler+0xc6>
 800232c:	23a0      	movs	r3, #160	; 0xa0
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d00b      	beq.n	8002352 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	589b      	ldr	r3, [r3, r2]
 8002348:	2201      	movs	r2, #1
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002352:	23a4      	movs	r3, #164	; 0xa4
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d011      	beq.n	8002382 <HAL_UART_IRQHandler+0xf6>
 800235e:	239c      	movs	r3, #156	; 0x9c
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	d00b      	beq.n	8002382 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	589b      	ldr	r3, [r3, r2]
 8002378:	2204      	movs	r2, #4
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002382:	23a4      	movs	r3, #164	; 0xa4
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2204      	movs	r2, #4
 800238a:	4013      	ands	r3, r2
 800238c:	d011      	beq.n	80023b2 <HAL_UART_IRQHandler+0x126>
 800238e:	239c      	movs	r3, #156	; 0x9c
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2201      	movs	r2, #1
 8002396:	4013      	ands	r3, r2
 8002398:	d00b      	beq.n	80023b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2204      	movs	r2, #4
 80023a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	589b      	ldr	r3, [r3, r2]
 80023a8:	2202      	movs	r2, #2
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023b2:	23a4      	movs	r3, #164	; 0xa4
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2208      	movs	r2, #8
 80023ba:	4013      	ands	r3, r2
 80023bc:	d017      	beq.n	80023ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023be:	23a0      	movs	r3, #160	; 0xa0
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2220      	movs	r2, #32
 80023c6:	4013      	ands	r3, r2
 80023c8:	d105      	bne.n	80023d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80023ca:	239c      	movs	r3, #156	; 0x9c
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023d4:	d00b      	beq.n	80023ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2208      	movs	r2, #8
 80023dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	589b      	ldr	r3, [r3, r2]
 80023e4:	2208      	movs	r2, #8
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023ee:	23a4      	movs	r3, #164	; 0xa4
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4013      	ands	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_UART_IRQHandler+0x198>
 80023fc:	23a0      	movs	r3, #160	; 0xa0
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	04db      	lsls	r3, r3, #19
 8002406:	4013      	ands	r3, r2
 8002408:	d00c      	beq.n	8002424 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	589b      	ldr	r3, [r3, r2]
 800241a:	2220      	movs	r2, #32
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	589b      	ldr	r3, [r3, r2]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d100      	bne.n	8002430 <HAL_UART_IRQHandler+0x1a4>
 800242e:	e1f7      	b.n	8002820 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002430:	23a4      	movs	r3, #164	; 0xa4
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2220      	movs	r2, #32
 8002438:	4013      	ands	r3, r2
 800243a:	d00e      	beq.n	800245a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800243c:	23a0      	movs	r3, #160	; 0xa0
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2220      	movs	r2, #32
 8002444:	4013      	ands	r3, r2
 8002446:	d008      	beq.n	800245a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	0010      	movs	r0, r2
 8002458:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	589b      	ldr	r3, [r3, r2]
 8002460:	2194      	movs	r1, #148	; 0x94
 8002462:	187a      	adds	r2, r7, r1
 8002464:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2240      	movs	r2, #64	; 0x40
 800246e:	4013      	ands	r3, r2
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d004      	beq.n	800247e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002474:	187b      	adds	r3, r7, r1
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2228      	movs	r2, #40	; 0x28
 800247a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800247c:	d047      	beq.n	800250e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 fda7 	bl	8002fd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	4013      	ands	r3, r2
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d137      	bne.n	8002504 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002494:	f3ef 8310 	mrs	r3, PRIMASK
 8002498:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800249a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800249c:	2090      	movs	r0, #144	; 0x90
 800249e:	183a      	adds	r2, r7, r0
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	2301      	movs	r3, #1
 80024a4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a8:	f383 8810 	msr	PRIMASK, r3
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	438a      	bics	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	183b      	adds	r3, r7, r0
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c6:	f383 8810 	msr	PRIMASK, r3
}
 80024ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_UART_IRQHandler+0x2a0>)
 80024da:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe fac1 	bl	8000a68 <HAL_DMA_Abort_IT>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d01a      	beq.n	8002520 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	0018      	movs	r0, r3
 80024f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f8:	e012      	b.n	8002520 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f9a5 	bl	800284c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002502:	e00d      	b.n	8002520 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f9a0 	bl	800284c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250c:	e008      	b.n	8002520 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 f99b 	bl	800284c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	2100      	movs	r1, #0
 800251c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800251e:	e17f      	b.n	8002820 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	46c0      	nop			; (mov r8, r8)
    return;
 8002522:	e17d      	b.n	8002820 <HAL_UART_IRQHandler+0x594>
 8002524:	0000080f 	.word	0x0000080f
 8002528:	04000120 	.word	0x04000120
 800252c:	08003099 	.word	0x08003099

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002534:	2b01      	cmp	r3, #1
 8002536:	d000      	beq.n	800253a <HAL_UART_IRQHandler+0x2ae>
 8002538:	e131      	b.n	800279e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800253a:	23a4      	movs	r3, #164	; 0xa4
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2210      	movs	r2, #16
 8002542:	4013      	ands	r3, r2
 8002544:	d100      	bne.n	8002548 <HAL_UART_IRQHandler+0x2bc>
 8002546:	e12a      	b.n	800279e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002548:	23a0      	movs	r3, #160	; 0xa0
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2210      	movs	r2, #16
 8002550:	4013      	ands	r3, r2
 8002552:	d100      	bne.n	8002556 <HAL_UART_IRQHandler+0x2ca>
 8002554:	e123      	b.n	800279e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2210      	movs	r2, #16
 800255c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	4013      	ands	r3, r2
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d000      	beq.n	800256e <HAL_UART_IRQHandler+0x2e2>
 800256c:	e09b      	b.n	80026a6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	217e      	movs	r1, #126	; 0x7e
 8002578:	187b      	adds	r3, r7, r1
 800257a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800257c:	187b      	adds	r3, r7, r1
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d100      	bne.n	8002586 <HAL_UART_IRQHandler+0x2fa>
 8002584:	e14e      	b.n	8002824 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2258      	movs	r2, #88	; 0x58
 800258a:	5a9b      	ldrh	r3, [r3, r2]
 800258c:	187a      	adds	r2, r7, r1
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d300      	bcc.n	8002596 <HAL_UART_IRQHandler+0x30a>
 8002594:	e146      	b.n	8002824 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	187a      	adds	r2, r7, r1
 800259a:	215a      	movs	r1, #90	; 0x5a
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d06e      	beq.n	8002688 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025aa:	f3ef 8310 	mrs	r3, PRIMASK
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80025b4:	2301      	movs	r3, #1
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	f383 8810 	msr	PRIMASK, r3
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	499a      	ldr	r1, [pc, #616]	; (8002834 <HAL_UART_IRQHandler+0x5a8>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	f383 8810 	msr	PRIMASK, r3
}
 80025da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025dc:	f3ef 8310 	mrs	r3, PRIMASK
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80025e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e4:	677b      	str	r3, [r7, #116]	; 0x74
 80025e6:	2301      	movs	r3, #1
 80025e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	438a      	bics	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002604:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002608:	f383 8810 	msr	PRIMASK, r3
}
 800260c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260e:	f3ef 8310 	mrs	r3, PRIMASK
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002614:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002616:	673b      	str	r3, [r7, #112]	; 0x70
 8002618:	2301      	movs	r3, #1
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	438a      	bics	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	f383 8810 	msr	PRIMASK, r3
}
 800263e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264c:	f3ef 8310 	mrs	r3, PRIMASK
 8002650:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002656:	2301      	movs	r3, #1
 8002658:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265c:	f383 8810 	msr	PRIMASK, r3
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2110      	movs	r1, #16
 800266e:	438a      	bics	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002674:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	0018      	movs	r0, r3
 8002684:	f7fe f9b8 	bl	80009f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2258      	movs	r2, #88	; 0x58
 800268c:	5a9a      	ldrh	r2, [r3, r2]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	215a      	movs	r1, #90	; 0x5a
 8002692:	5a5b      	ldrh	r3, [r3, r1]
 8002694:	b29b      	uxth	r3, r3
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	b29a      	uxth	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0011      	movs	r1, r2
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 f8dc 	bl	800285c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026a4:	e0be      	b.n	8002824 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2258      	movs	r2, #88	; 0x58
 80026aa:	5a99      	ldrh	r1, [r3, r2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	225a      	movs	r2, #90	; 0x5a
 80026b0:	5a9b      	ldrh	r3, [r3, r2]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	208e      	movs	r0, #142	; 0x8e
 80026b6:	183b      	adds	r3, r7, r0
 80026b8:	1a8a      	subs	r2, r1, r2
 80026ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	225a      	movs	r2, #90	; 0x5a
 80026c0:	5a9b      	ldrh	r3, [r3, r2]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d100      	bne.n	80026ca <HAL_UART_IRQHandler+0x43e>
 80026c8:	e0ae      	b.n	8002828 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80026ca:	183b      	adds	r3, r7, r0
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d100      	bne.n	80026d4 <HAL_UART_IRQHandler+0x448>
 80026d2:	e0a9      	b.n	8002828 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d4:	f3ef 8310 	mrs	r3, PRIMASK
 80026d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80026da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026dc:	2488      	movs	r4, #136	; 0x88
 80026de:	193a      	adds	r2, r7, r4
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	2301      	movs	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f383 8810 	msr	PRIMASK, r3
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	494f      	ldr	r1, [pc, #316]	; (8002838 <HAL_UART_IRQHandler+0x5ac>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f383 8810 	msr	PRIMASK, r3
}
 800270a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270c:	f3ef 8310 	mrs	r3, PRIMASK
 8002710:	61bb      	str	r3, [r7, #24]
  return(result);
 8002712:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002714:	2484      	movs	r4, #132	; 0x84
 8002716:	193a      	adds	r2, r7, r4
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f383 8810 	msr	PRIMASK, r3
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	438a      	bics	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	193b      	adds	r3, r7, r4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f383 8810 	msr	PRIMASK, r3
}
 8002742:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002756:	f3ef 8310 	mrs	r3, PRIMASK
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800275e:	2480      	movs	r4, #128	; 0x80
 8002760:	193a      	adds	r2, r7, r4
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	2301      	movs	r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	f383 8810 	msr	PRIMASK, r3
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2110      	movs	r1, #16
 800277c:	438a      	bics	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	193b      	adds	r3, r7, r4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	f383 8810 	msr	PRIMASK, r3
}
 800278c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800278e:	183b      	adds	r3, r7, r0
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f000 f860 	bl	800285c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800279c:	e044      	b.n	8002828 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800279e:	23a4      	movs	r3, #164	; 0xa4
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	035b      	lsls	r3, r3, #13
 80027a8:	4013      	ands	r3, r2
 80027aa:	d010      	beq.n	80027ce <HAL_UART_IRQHandler+0x542>
 80027ac:	239c      	movs	r3, #156	; 0x9c
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	03db      	lsls	r3, r3, #15
 80027b6:	4013      	ands	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	0352      	lsls	r2, r2, #13
 80027c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 fe10 	bl	80033ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027cc:	e02f      	b.n	800282e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80027ce:	23a4      	movs	r3, #164	; 0xa4
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	4013      	ands	r3, r2
 80027d8:	d00f      	beq.n	80027fa <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80027da:	23a0      	movs	r3, #160	; 0xa0
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	4013      	ands	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01e      	beq.n	800282c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	0010      	movs	r0, r2
 80027f6:	4798      	blx	r3
    }
    return;
 80027f8:	e018      	b.n	800282c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80027fa:	23a4      	movs	r3, #164	; 0xa4
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2240      	movs	r2, #64	; 0x40
 8002802:	4013      	ands	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_UART_IRQHandler+0x5a2>
 8002806:	23a0      	movs	r3, #160	; 0xa0
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	4013      	ands	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fc56 	bl	80030c6 <UART_EndTransmit_IT>
    return;
 800281a:	e008      	b.n	800282e <HAL_UART_IRQHandler+0x5a2>
      return;
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	e006      	b.n	800282e <HAL_UART_IRQHandler+0x5a2>
    return;
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	e004      	b.n	800282e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	e002      	b.n	800282e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	e000      	b.n	800282e <HAL_UART_IRQHandler+0x5a2>
    return;
 800282c:	46c0      	nop			; (mov r8, r8)
  }

}
 800282e:	46bd      	mov	sp, r7
 8002830:	b02b      	add	sp, #172	; 0xac
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	fffffeff 	.word	0xfffffeff
 8002838:	fffffedf 	.word	0xfffffedf

0800283c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	000a      	movs	r2, r1
 8002866:	1cbb      	adds	r3, r7, #2
 8002868:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800287c:	231e      	movs	r3, #30
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a8d      	ldr	r2, [pc, #564]	; (8002ad8 <UART_SetConfig+0x264>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a88      	ldr	r2, [pc, #544]	; (8002adc <UART_SetConfig+0x268>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a7f      	ldr	r2, [pc, #508]	; (8002ae0 <UART_SetConfig+0x26c>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a7b      	ldr	r2, [pc, #492]	; (8002ae4 <UART_SetConfig+0x270>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d127      	bne.n	800294a <UART_SetConfig+0xd6>
 80028fa:	4b7b      	ldr	r3, [pc, #492]	; (8002ae8 <UART_SetConfig+0x274>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	2203      	movs	r2, #3
 8002900:	4013      	ands	r3, r2
 8002902:	2b03      	cmp	r3, #3
 8002904:	d00d      	beq.n	8002922 <UART_SetConfig+0xae>
 8002906:	d81b      	bhi.n	8002940 <UART_SetConfig+0xcc>
 8002908:	2b02      	cmp	r3, #2
 800290a:	d014      	beq.n	8002936 <UART_SetConfig+0xc2>
 800290c:	d818      	bhi.n	8002940 <UART_SetConfig+0xcc>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <UART_SetConfig+0xa4>
 8002912:	2b01      	cmp	r3, #1
 8002914:	d00a      	beq.n	800292c <UART_SetConfig+0xb8>
 8002916:	e013      	b.n	8002940 <UART_SetConfig+0xcc>
 8002918:	231f      	movs	r3, #31
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e021      	b.n	8002966 <UART_SetConfig+0xf2>
 8002922:	231f      	movs	r3, #31
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e01c      	b.n	8002966 <UART_SetConfig+0xf2>
 800292c:	231f      	movs	r3, #31
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2204      	movs	r2, #4
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e017      	b.n	8002966 <UART_SetConfig+0xf2>
 8002936:	231f      	movs	r3, #31
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2208      	movs	r2, #8
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e012      	b.n	8002966 <UART_SetConfig+0xf2>
 8002940:	231f      	movs	r3, #31
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2210      	movs	r2, #16
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e00d      	b.n	8002966 <UART_SetConfig+0xf2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a67      	ldr	r2, [pc, #412]	; (8002aec <UART_SetConfig+0x278>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d104      	bne.n	800295e <UART_SetConfig+0xea>
 8002954:	231f      	movs	r3, #31
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e003      	b.n	8002966 <UART_SetConfig+0xf2>
 800295e:	231f      	movs	r3, #31
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2210      	movs	r2, #16
 8002964:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	429a      	cmp	r2, r3
 8002970:	d15d      	bne.n	8002a2e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002972:	231f      	movs	r3, #31
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d015      	beq.n	80029a8 <UART_SetConfig+0x134>
 800297c:	dc18      	bgt.n	80029b0 <UART_SetConfig+0x13c>
 800297e:	2b04      	cmp	r3, #4
 8002980:	d00d      	beq.n	800299e <UART_SetConfig+0x12a>
 8002982:	dc15      	bgt.n	80029b0 <UART_SetConfig+0x13c>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <UART_SetConfig+0x11a>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d005      	beq.n	8002998 <UART_SetConfig+0x124>
 800298c:	e010      	b.n	80029b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800298e:	f7fe ff3d 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8002992:	0003      	movs	r3, r0
 8002994:	61bb      	str	r3, [r7, #24]
        break;
 8002996:	e012      	b.n	80029be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <UART_SetConfig+0x27c>)
 800299a:	61bb      	str	r3, [r7, #24]
        break;
 800299c:	e00f      	b.n	80029be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800299e:	f7fe feab 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80029a2:	0003      	movs	r3, r0
 80029a4:	61bb      	str	r3, [r7, #24]
        break;
 80029a6:	e00a      	b.n	80029be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	61bb      	str	r3, [r7, #24]
        break;
 80029ae:	e006      	b.n	80029be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029b4:	231e      	movs	r3, #30
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
        break;
 80029bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d100      	bne.n	80029c6 <UART_SetConfig+0x152>
 80029c4:	e07b      	b.n	8002abe <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	005a      	lsls	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	18d2      	adds	r2, r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0019      	movs	r1, r3
 80029d8:	0010      	movs	r0, r2
 80029da:	f7fd fb95 	bl	8000108 <__udivsi3>
 80029de:	0003      	movs	r3, r0
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	d91c      	bls.n	8002a24 <UART_SetConfig+0x1b0>
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d217      	bcs.n	8002a24 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	200e      	movs	r0, #14
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	210f      	movs	r1, #15
 80029fe:	438a      	bics	r2, r1
 8002a00:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	b299      	uxth	r1, r3
 8002a0e:	183b      	adds	r3, r7, r0
 8002a10:	183a      	adds	r2, r7, r0
 8002a12:	8812      	ldrh	r2, [r2, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	183a      	adds	r2, r7, r0
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	e04c      	b.n	8002abe <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002a24:	231e      	movs	r3, #30
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e047      	b.n	8002abe <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a2e:	231f      	movs	r3, #31
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d015      	beq.n	8002a64 <UART_SetConfig+0x1f0>
 8002a38:	dc18      	bgt.n	8002a6c <UART_SetConfig+0x1f8>
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00d      	beq.n	8002a5a <UART_SetConfig+0x1e6>
 8002a3e:	dc15      	bgt.n	8002a6c <UART_SetConfig+0x1f8>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <UART_SetConfig+0x1d6>
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d005      	beq.n	8002a54 <UART_SetConfig+0x1e0>
 8002a48:	e010      	b.n	8002a6c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4a:	f7fe fedf 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	61bb      	str	r3, [r7, #24]
        break;
 8002a52:	e012      	b.n	8002a7a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <UART_SetConfig+0x27c>)
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e00f      	b.n	8002a7a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5a:	f7fe fe4d 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	61bb      	str	r3, [r7, #24]
        break;
 8002a62:	e00a      	b.n	8002a7a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	61bb      	str	r3, [r7, #24]
        break;
 8002a6a:	e006      	b.n	8002a7a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a70:	231e      	movs	r3, #30
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
        break;
 8002a78:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01e      	beq.n	8002abe <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	085a      	lsrs	r2, r3, #1
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	18d2      	adds	r2, r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f7fd fb39 	bl	8000108 <__udivsi3>
 8002a96:	0003      	movs	r3, r0
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	d909      	bls.n	8002ab6 <UART_SetConfig+0x242>
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	025b      	lsls	r3, r3, #9
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d204      	bcs.n	8002ab6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e003      	b.n	8002abe <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab6:	231e      	movs	r3, #30
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002aca:	231e      	movs	r3, #30
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	781b      	ldrb	r3, [r3, #0]
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b008      	add	sp, #32
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	efff69f3 	.word	0xefff69f3
 8002adc:	ffffcfff 	.word	0xffffcfff
 8002ae0:	fffff4ff 	.word	0xfffff4ff
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40004400 	.word	0x40004400
 8002af0:	007a1200 	.word	0x007a1200

08002af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <UART_AdvFeatureConfig+0x144>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a43      	ldr	r2, [pc, #268]	; (8002c3c <UART_AdvFeatureConfig+0x148>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2204      	movs	r2, #4
 8002b46:	4013      	ands	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a3b      	ldr	r2, [pc, #236]	; (8002c40 <UART_AdvFeatureConfig+0x14c>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2208      	movs	r2, #8
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <UART_AdvFeatureConfig+0x150>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2210      	movs	r2, #16
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a2c      	ldr	r2, [pc, #176]	; (8002c48 <UART_AdvFeatureConfig+0x154>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2220      	movs	r2, #32
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <UART_AdvFeatureConfig+0x158>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <UART_AdvFeatureConfig+0x15c>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	035b      	lsls	r3, r3, #13
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d10b      	bne.n	8002c0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <UART_AdvFeatureConfig+0x160>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	0019      	movs	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	4013      	ands	r3, r2
 8002c16:	d00b      	beq.n	8002c30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <UART_AdvFeatureConfig+0x164>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	fffdffff 	.word	0xfffdffff
 8002c3c:	fffeffff 	.word	0xfffeffff
 8002c40:	fffbffff 	.word	0xfffbffff
 8002c44:	ffff7fff 	.word	0xffff7fff
 8002c48:	ffffefff 	.word	0xffffefff
 8002c4c:	ffffdfff 	.word	0xffffdfff
 8002c50:	ffefffff 	.word	0xffefffff
 8002c54:	ff9fffff 	.word	0xff9fffff
 8002c58:	fff7ffff 	.word	0xfff7ffff

08002c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c6c:	f7fd fddc 	bl	8000828 <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d10c      	bne.n	8002c9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	0391      	lsls	r1, r2, #14
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <UART_CheckIdleState+0x8c>)
 8002c8c:	9200      	str	r2, [sp, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f000 f82c 	bl	8002cec <UART_WaitOnFlagUntilTimeout>
 8002c94:	1e03      	subs	r3, r0, #0
 8002c96:	d001      	beq.n	8002c9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e021      	b.n	8002ce0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d10c      	bne.n	8002cc4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	03d1      	lsls	r1, r2, #15
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <UART_CheckIdleState+0x8c>)
 8002cb4:	9200      	str	r2, [sp, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f000 f818 	bl	8002cec <UART_WaitOnFlagUntilTimeout>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d001      	beq.n	8002cc4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e00d      	b.n	8002ce0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2274      	movs	r2, #116	; 0x74
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	01ffffff 	.word	0x01ffffff

08002cec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b094      	sub	sp, #80	; 0x50
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfc:	e0a3      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d00:	3301      	adds	r3, #1
 8002d02:	d100      	bne.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002d04:	e09f      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d06:	f7fd fd8f 	bl	8000828 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d13d      	bne.n	8002d98 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
 8002d26:	2301      	movs	r3, #1
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	494c      	ldr	r1, [pc, #304]	; (8002e70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	f383 8810 	msr	PRIMASK, r3
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	643b      	str	r3, [r7, #64]	; 0x40
 8002d58:	2301      	movs	r3, #1
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2101      	movs	r1, #1
 8002d70:	438a      	bics	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2274      	movs	r2, #116	; 0x74
 8002d90:	2100      	movs	r1, #0
 8002d92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e067      	b.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	d050      	beq.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	401a      	ands	r2, r3
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d146      	bne.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc6:	613b      	str	r3, [r7, #16]
  return(result);
 8002dc8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dcc:	2301      	movs	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4923      	ldr	r1, [pc, #140]	; (8002e70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f383 8810 	msr	PRIMASK, r3
}
 8002df2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df4:	f3ef 8310 	mrs	r3, PRIMASK
 8002df8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dfa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dfe:	2301      	movs	r3, #1
 8002e00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f383 8810 	msr	PRIMASK, r3
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	438a      	bics	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f383 8810 	msr	PRIMASK, r3
}
 8002e24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	2120      	movs	r1, #32
 8002e38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2274      	movs	r2, #116	; 0x74
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e010      	b.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	425a      	negs	r2, r3
 8002e56:	4153      	adcs	r3, r2
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	1dfb      	adds	r3, r7, #7
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d100      	bne.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e64:	e74b      	b.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b014      	add	sp, #80	; 0x50
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	fffffe5f 	.word	0xfffffe5f

08002e74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08c      	sub	sp, #48	; 0x30
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	1dbb      	adds	r3, r7, #6
 8002e80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1dba      	adds	r2, r7, #6
 8002e8c:	2158      	movs	r1, #88	; 0x58
 8002e8e:	8812      	ldrh	r2, [r2, #0]
 8002e90:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1dba      	adds	r2, r7, #6
 8002e96:	215a      	movs	r1, #90	; 0x5a
 8002e98:	8812      	ldrh	r2, [r2, #0]
 8002e9a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	015b      	lsls	r3, r3, #5
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10d      	bne.n	8002eca <UART_Start_Receive_IT+0x56>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d104      	bne.n	8002ec0 <UART_Start_Receive_IT+0x4c>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	225c      	movs	r2, #92	; 0x5c
 8002eba:	4943      	ldr	r1, [pc, #268]	; (8002fc8 <UART_Start_Receive_IT+0x154>)
 8002ebc:	5299      	strh	r1, [r3, r2]
 8002ebe:	e02e      	b.n	8002f1e <UART_Start_Receive_IT+0xaa>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	225c      	movs	r2, #92	; 0x5c
 8002ec4:	21ff      	movs	r1, #255	; 0xff
 8002ec6:	5299      	strh	r1, [r3, r2]
 8002ec8:	e029      	b.n	8002f1e <UART_Start_Receive_IT+0xaa>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <UART_Start_Receive_IT+0x7a>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <UART_Start_Receive_IT+0x70>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	225c      	movs	r2, #92	; 0x5c
 8002ede:	21ff      	movs	r1, #255	; 0xff
 8002ee0:	5299      	strh	r1, [r3, r2]
 8002ee2:	e01c      	b.n	8002f1e <UART_Start_Receive_IT+0xaa>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	225c      	movs	r2, #92	; 0x5c
 8002ee8:	217f      	movs	r1, #127	; 0x7f
 8002eea:	5299      	strh	r1, [r3, r2]
 8002eec:	e017      	b.n	8002f1e <UART_Start_Receive_IT+0xaa>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	055b      	lsls	r3, r3, #21
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10d      	bne.n	8002f16 <UART_Start_Receive_IT+0xa2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <UART_Start_Receive_IT+0x98>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	225c      	movs	r2, #92	; 0x5c
 8002f06:	217f      	movs	r1, #127	; 0x7f
 8002f08:	5299      	strh	r1, [r3, r2]
 8002f0a:	e008      	b.n	8002f1e <UART_Start_Receive_IT+0xaa>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	225c      	movs	r2, #92	; 0x5c
 8002f10:	213f      	movs	r1, #63	; 0x3f
 8002f12:	5299      	strh	r1, [r3, r2]
 8002f14:	e003      	b.n	8002f1e <UART_Start_Receive_IT+0xaa>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	225c      	movs	r2, #92	; 0x5c
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	2100      	movs	r1, #0
 8002f24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2222      	movs	r2, #34	; 0x22
 8002f2a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f30:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f32:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f36:	2301      	movs	r3, #1
 8002f38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d107      	bne.n	8002f7a <UART_Start_Receive_IT+0x106>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <UART_Start_Receive_IT+0x158>)
 8002f76:	665a      	str	r2, [r3, #100]	; 0x64
 8002f78:	e002      	b.n	8002f80 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <UART_Start_Receive_IT+0x15c>)
 8002f7e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2274      	movs	r2, #116	; 0x74
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f88:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f8e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f92:	2301      	movs	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f383 8810 	msr	PRIMASK, r3
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2190      	movs	r1, #144	; 0x90
 8002faa:	0049      	lsls	r1, r1, #1
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f383 8810 	msr	PRIMASK, r3
}
 8002fba:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b00c      	add	sp, #48	; 0x30
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	000001ff 	.word	0x000001ff
 8002fcc:	08003285 	.word	0x08003285
 8002fd0:	0800311d 	.word	0x0800311d

08002fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08e      	sub	sp, #56	; 0x38
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8002fe2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f383 8810 	msr	PRIMASK, r3
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4925      	ldr	r1, [pc, #148]	; (8003094 <UART_EndRxTransfer+0xc0>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003004:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f383 8810 	msr	PRIMASK, r3
}
 800300c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300e:	f3ef 8310 	mrs	r3, PRIMASK
 8003012:	623b      	str	r3, [r7, #32]
  return(result);
 8003014:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
 8003018:	2301      	movs	r3, #1
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	f383 8810 	msr	PRIMASK, r3
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2101      	movs	r1, #1
 8003030:	438a      	bics	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	f383 8810 	msr	PRIMASK, r3
}
 800303e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	2b01      	cmp	r3, #1
 8003046:	d118      	bne.n	800307a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003048:	f3ef 8310 	mrs	r3, PRIMASK
 800304c:	60bb      	str	r3, [r7, #8]
  return(result);
 800304e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003052:	2301      	movs	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f383 8810 	msr	PRIMASK, r3
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2110      	movs	r1, #16
 800306a:	438a      	bics	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f383 8810 	msr	PRIMASK, r3
}
 8003078:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b00e      	add	sp, #56	; 0x38
 8003092:	bd80      	pop	{r7, pc}
 8003094:	fffffedf 	.word	0xfffffedf

08003098 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	225a      	movs	r2, #90	; 0x5a
 80030aa:	2100      	movs	r1, #0
 80030ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2252      	movs	r2, #82	; 0x52
 80030b2:	2100      	movs	r1, #0
 80030b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff fbc7 	bl	800284c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ce:	f3ef 8310 	mrs	r3, PRIMASK
 80030d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80030d4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	2301      	movs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	438a      	bics	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0018      	movs	r0, r3
 8003110:	f7ff fb94 	bl	800283c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b006      	add	sp, #24
 800311a:	bd80      	pop	{r7, pc}

0800311c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	; 0x40
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003124:	203e      	movs	r0, #62	; 0x3e
 8003126:	183b      	adds	r3, r7, r0
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	215c      	movs	r1, #92	; 0x5c
 800312c:	5a52      	ldrh	r2, [r2, r1]
 800312e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003134:	2b22      	cmp	r3, #34	; 0x22
 8003136:	d000      	beq.n	800313a <UART_RxISR_8BIT+0x1e>
 8003138:	e095      	b.n	8003266 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	213c      	movs	r1, #60	; 0x3c
 8003140:	187b      	adds	r3, r7, r1
 8003142:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003144:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003146:	187b      	adds	r3, r7, r1
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	183b      	adds	r3, r7, r0
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b2d9      	uxtb	r1, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	400a      	ands	r2, r1
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	225a      	movs	r2, #90	; 0x5a
 800316a:	5a9b      	ldrh	r3, [r3, r2]
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b299      	uxth	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	225a      	movs	r2, #90	; 0x5a
 8003176:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	225a      	movs	r2, #90	; 0x5a
 800317c:	5a9b      	ldrh	r3, [r3, r2]
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d178      	bne.n	8003276 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	61bb      	str	r3, [r7, #24]
  return(result);
 800318a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
 800318e:	2301      	movs	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4936      	ldr	r1, [pc, #216]	; (8003280 <UART_RxISR_8BIT+0x164>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	637b      	str	r3, [r7, #52]	; 0x34
 80031c0:	2301      	movs	r3, #1
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	f383 8810 	msr	PRIMASK, r3
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	438a      	bics	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	f383 8810 	msr	PRIMASK, r3
}
 80031e6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d12f      	bne.n	800325c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	60fb      	str	r3, [r7, #12]
  return(result);
 8003208:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
 800320c:	2301      	movs	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2110      	movs	r1, #16
 8003224:	438a      	bics	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	2210      	movs	r2, #16
 800323c:	4013      	ands	r3, r2
 800323e:	2b10      	cmp	r3, #16
 8003240:	d103      	bne.n	800324a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2210      	movs	r2, #16
 8003248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2258      	movs	r2, #88	; 0x58
 800324e:	5a9a      	ldrh	r2, [r3, r2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0011      	movs	r1, r2
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff fb01 	bl	800285c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800325a:	e00c      	b.n	8003276 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	0018      	movs	r0, r3
 8003260:	f7fc ffde 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8003264:	e007      	b.n	8003276 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2108      	movs	r1, #8
 8003272:	430a      	orrs	r2, r1
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b010      	add	sp, #64	; 0x40
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	fffffedf 	.word	0xfffffedf

08003284 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b090      	sub	sp, #64	; 0x40
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800328c:	203e      	movs	r0, #62	; 0x3e
 800328e:	183b      	adds	r3, r7, r0
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	215c      	movs	r1, #92	; 0x5c
 8003294:	5a52      	ldrh	r2, [r2, r1]
 8003296:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329c:	2b22      	cmp	r3, #34	; 0x22
 800329e:	d000      	beq.n	80032a2 <UART_RxISR_16BIT+0x1e>
 80032a0:	e095      	b.n	80033ce <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	213c      	movs	r1, #60	; 0x3c
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80032ac:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	183a      	adds	r2, r7, r0
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	8812      	ldrh	r2, [r2, #0]
 80032bc:	4013      	ands	r3, r2
 80032be:	b29a      	uxth	r2, r3
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	1c9a      	adds	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	225a      	movs	r2, #90	; 0x5a
 80032d2:	5a9b      	ldrh	r3, [r3, r2]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b299      	uxth	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	225a      	movs	r2, #90	; 0x5a
 80032de:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	225a      	movs	r2, #90	; 0x5a
 80032e4:	5a9b      	ldrh	r3, [r3, r2]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d178      	bne.n	80033de <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ec:	f3ef 8310 	mrs	r3, PRIMASK
 80032f0:	617b      	str	r3, [r7, #20]
  return(result);
 80032f2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
 80032f6:	2301      	movs	r3, #1
 80032f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f383 8810 	msr	PRIMASK, r3
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4936      	ldr	r1, [pc, #216]	; (80033e8 <UART_RxISR_16BIT+0x164>)
 800330e:	400a      	ands	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f383 8810 	msr	PRIMASK, r3
}
 800331c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8310 	mrs	r3, PRIMASK
 8003322:	623b      	str	r3, [r7, #32]
  return(result);
 8003324:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003326:	633b      	str	r3, [r7, #48]	; 0x30
 8003328:	2301      	movs	r3, #1
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	f383 8810 	msr	PRIMASK, r3
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	438a      	bics	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	2b01      	cmp	r3, #1
 8003362:	d12f      	bne.n	80033c4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336a:	f3ef 8310 	mrs	r3, PRIMASK
 800336e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003370:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003374:	2301      	movs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2110      	movs	r1, #16
 800338c:	438a      	bics	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	2210      	movs	r2, #16
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d103      	bne.n	80033b2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2210      	movs	r2, #16
 80033b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2258      	movs	r2, #88	; 0x58
 80033b6:	5a9a      	ldrh	r2, [r3, r2]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0011      	movs	r1, r2
 80033bc:	0018      	movs	r0, r3
 80033be:	f7ff fa4d 	bl	800285c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033c2:	e00c      	b.n	80033de <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fc ff2a 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 80033cc:	e007      	b.n	80033de <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2108      	movs	r1, #8
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b010      	add	sp, #64	; 0x40
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	fffffedf 	.word	0xfffffedf

080033ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e007      	b.n	8003418 <AroundEdgeCube_Handle+0x1c>
	{
		column_around_edge[i] = 0;
 8003408:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b07      	cmp	r3, #7
 800341c:	ddf4      	ble.n	8003408 <AroundEdgeCube_Handle+0xc>
	}
	layer_around_edge = 0;
 800341e:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <AroundEdgeCube_Handle+0xd0>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <AroundEdgeCube_Handle+0xd4>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <AroundEdgeCube_Handle+0x36>
 800342c:	2b01      	cmp	r3, #1
 800342e:	d023      	beq.n	8003478 <AroundEdgeCube_Handle+0x7c>
			}
			TransmitData(column_around_edge, layer_around_edge);
			position_layer = TOP_N_BOTTOM_CUBE;
			break;
		default:
			break;
 8003430:	e045      	b.n	80034be <AroundEdgeCube_Handle+0xc2>
			layer_around_edge = 0x81;
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <AroundEdgeCube_Handle+0xd0>)
 8003434:	2281      	movs	r2, #129	; 0x81
 8003436:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 800343a:	22ff      	movs	r2, #255	; 0xff
 800343c:	71da      	strb	r2, [r3, #7]
 800343e:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 8003440:	79da      	ldrb	r2, [r3, #7]
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 8003444:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003446:	2301      	movs	r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	e007      	b.n	800345c <AroundEdgeCube_Handle+0x60>
				column_around_edge[i] = 0x81;
 800344c:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	18d3      	adds	r3, r2, r3
 8003452:	2281      	movs	r2, #129	; 0x81
 8003454:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3301      	adds	r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b06      	cmp	r3, #6
 8003460:	ddf4      	ble.n	800344c <AroundEdgeCube_Handle+0x50>
			TransmitData(column_around_edge, layer_around_edge);
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <AroundEdgeCube_Handle+0xd0>)
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 8003468:	0011      	movs	r1, r2
 800346a:	0018      	movs	r0, r3
 800346c:	f002 fa42 	bl	80058f4 <TransmitData>
			position_layer = MIDDLE_CUBE;
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <AroundEdgeCube_Handle+0xd4>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
			break;
 8003476:	e022      	b.n	80034be <AroundEdgeCube_Handle+0xc2>
			layer_around_edge = 0x7e;
 8003478:	4b14      	ldr	r3, [pc, #80]	; (80034cc <AroundEdgeCube_Handle+0xd0>)
 800347a:	227e      	movs	r2, #126	; 0x7e
 800347c:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 8003480:	2281      	movs	r2, #129	; 0x81
 8003482:	71da      	strb	r2, [r3, #7]
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 8003486:	79da      	ldrb	r2, [r3, #7]
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 800348a:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800348c:	2301      	movs	r3, #1
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	e007      	b.n	80034a2 <AroundEdgeCube_Handle+0xa6>
				column_around_edge[i] = 0;
 8003492:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3301      	adds	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	ddf4      	ble.n	8003492 <AroundEdgeCube_Handle+0x96>
			TransmitData(column_around_edge, layer_around_edge);
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <AroundEdgeCube_Handle+0xd0>)
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <AroundEdgeCube_Handle+0xcc>)
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f002 fa1f 	bl	80058f4 <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <AroundEdgeCube_Handle+0xd4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
			break;
 80034bc:	46c0      	nop			; (mov r8, r8)
	}
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b004      	add	sp, #16
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	2000013c 	.word	0x2000013c
 80034cc:	20000138 	.word	0x20000138
 80034d0:	20000144 	.word	0x20000144

080034d4 <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <AroundEdgeCube_Set_State+0x38>)
 80034dc:	2205      	movs	r2, #5
 80034de:	701a      	strb	r2, [r3, #0]
	layer_around_edge = 0;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <AroundEdgeCube_Set_State+0x3c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e007      	b.n	80034fc <AroundEdgeCube_Set_State+0x28>
	{
		column_around_edge[i] = 0;
 80034ec:	4a09      	ldr	r2, [pc, #36]	; (8003514 <AroundEdgeCube_Set_State+0x40>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3301      	adds	r3, #1
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b07      	cmp	r3, #7
 8003500:	ddf4      	ble.n	80034ec <AroundEdgeCube_Set_State+0x18>
	}
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000010 	.word	0x20000010
 8003510:	20000138 	.word	0x20000138
 8003514:	2000013c 	.word	0x2000013c

08003518 <Btn_press_short_Callback>:
{

}

__weak void Btn_press_short_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	000a      	movs	r2, r1
 8003522:	1cbb      	adds	r3, r7, #2
 8003524:	801a      	strh	r2, [r3, #0]

}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}

0800352e <Btn_release_Callback>:

__weak void Btn_release_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	000a      	movs	r2, r1
 8003538:	1cbb      	adds	r3, r7, #2
 800353a:	801a      	strh	r2, [r3, #0]

}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <Btn_press_timeout_Callback>:

__weak void Btn_press_timeout_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	000a      	movs	r2, r1
 800354e:	1cbb      	adds	r3, r7, #2
 8003550:	801a      	strh	r2, [r3, #0]

}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}

0800355a <Btn_Handle>:

void Btn_Handle(Btn_Typedef *BtnX)
{
 800355a:	b5b0      	push	{r4, r5, r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
//*****************Loc nhieu******************//
	uint8_t status = HAL_GPIO_ReadPin(BtnX->GPIOx, BtnX->GPIO_Pin);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8a9b      	ldrh	r3, [r3, #20]
 800356a:	250f      	movs	r5, #15
 800356c:	197c      	adds	r4, r7, r5
 800356e:	0019      	movs	r1, r3
 8003570:	0010      	movs	r0, r2
 8003572:	f7fd fc27 	bl	8000dc4 <HAL_GPIO_ReadPin>
 8003576:	0003      	movs	r3, r0
 8003578:	7023      	strb	r3, [r4, #0]
	if (status != BtnX->Btn_filter)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	789b      	ldrb	r3, [r3, #2]
 800357e:	197a      	adds	r2, r7, r5
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d00b      	beq.n	800359e <Btn_Handle+0x44>
	{
		BtnX->Btn_filter = status;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	197a      	adds	r2, r7, r5
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	709a      	strb	r2, [r3, #2]
		BtnX->Is_debouncing = 1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	70da      	strb	r2, [r3, #3]
		BtnX->Time_debounce = HAL_GetTick();
 8003594:	f7fd f948 	bl	8000828 <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	609a      	str	r2, [r3, #8]
	}

//*****************Xac nhan tin hieu******************//
	if (BtnX->Is_debouncing && (HAL_GetTick()-BtnX->Time_debounce >= 15))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	78db      	ldrb	r3, [r3, #3]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00e      	beq.n	80035c4 <Btn_Handle+0x6a>
 80035a6:	f7fd f93f 	bl	8000828 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b0e      	cmp	r3, #14
 80035b4:	d906      	bls.n	80035c4 <Btn_Handle+0x6a>
	{
		BtnX->Btn_current = BtnX->Btn_filter;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	789a      	ldrb	r2, [r3, #2]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	701a      	strb	r2, [r3, #0]
		BtnX->Is_debouncing = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	70da      	strb	r2, [r3, #3]
	}

//*****************Nhan nha******************//
	if (BtnX->Btn_current != BtnX->Btn_last)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d035      	beq.n	800363c <Btn_Handle+0xe2>
	{
		if (BtnX->Btn_current == 0)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d110      	bne.n	80035fa <Btn_Handle+0xa0>
		{
			BtnX->Is_press_timeout = 1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	711a      	strb	r2, [r3, #4]
			Btn_press_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8a9b      	ldrh	r3, [r3, #20]
 80035e6:	0019      	movs	r1, r3
 80035e8:	0010      	movs	r0, r2
 80035ea:	f001 f8ff 	bl	80047ec <Btn_press_Callback>
			BtnX->Time_start_press = HAL_GetTick();
 80035ee:	f7fd f91b 	bl	8000828 <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
 80035f8:	e01c      	b.n	8003634 <Btn_Handle+0xda>
		} else
		{
			if (HAL_GetTick() - BtnX->Time_start_press <= 1000)
 80035fa:	f7fd f915 	bl	8000828 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	1ad2      	subs	r2, r2, r3
 8003606:	23fa      	movs	r3, #250	; 0xfa
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	429a      	cmp	r2, r3
 800360c:	d807      	bhi.n	800361e <Btn_Handle+0xc4>
			{
				Btn_press_short_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8a9b      	ldrh	r3, [r3, #20]
 8003616:	0019      	movs	r1, r3
 8003618:	0010      	movs	r0, r2
 800361a:	f7ff ff7d 	bl	8003518 <Btn_press_short_Callback>
			}
			Btn_release_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8a9b      	ldrh	r3, [r3, #20]
 8003626:	0019      	movs	r1, r3
 8003628:	0010      	movs	r0, r2
 800362a:	f7ff ff80 	bl	800352e <Btn_release_Callback>
			BtnX->Is_press_timeout = 0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	711a      	strb	r2, [r3, #4]
		}
		BtnX->Btn_last = BtnX->Btn_current;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	705a      	strb	r2, [r3, #1]
	}
	//*****************Nhan giu******************//
	if (BtnX->Is_press_timeout && (HAL_GetTick() - BtnX->Time_start_press >= 2000))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	791b      	ldrb	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d014      	beq.n	800366e <Btn_Handle+0x114>
 8003644:	f7fd f8f0 	bl	8000828 <HAL_GetTick>
 8003648:	0002      	movs	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	1ad2      	subs	r2, r2, r3
 8003650:	23fa      	movs	r3, #250	; 0xfa
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	429a      	cmp	r2, r3
 8003656:	d30a      	bcc.n	800366e <Btn_Handle+0x114>
	{
		Btn_press_timeout_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8a9b      	ldrh	r3, [r3, #20]
 8003660:	0019      	movs	r1, r3
 8003662:	0010      	movs	r0, r2
 8003664:	f7ff ff6e 	bl	8003544 <Btn_press_timeout_Callback>
		BtnX->Is_press_timeout = 0;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	711a      	strb	r2, [r3, #4]
	}
}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bdb0      	pop	{r4, r5, r7, pc}

08003676 <Btn_Init>:

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	1dbb      	adds	r3, r7, #6
 8003682:	801a      	strh	r2, [r3, #0]
	BtnX->GPIOx = GPIOx;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1dba      	adds	r2, r7, #6
 800368e:	8812      	ldrh	r2, [r2, #0]
 8003690:	829a      	strh	r2, [r3, #20]

}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}

0800369a <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube()
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	layer = 0x00;
 80036a0:	230b      	movs	r3, #11
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e007      	b.n	80036be <clearCube+0x24>
	{
		column[i] = 0x00;
 80036ae:	003a      	movs	r2, r7
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	18d3      	adds	r3, r2, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b07      	cmp	r3, #7
 80036c2:	ddf4      	ble.n	80036ae <clearCube+0x14>
	}
	TransmitData(column, layer);
 80036c4:	230b      	movs	r3, #11
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	003b      	movs	r3, r7
 80036cc:	0011      	movs	r1, r2
 80036ce:	0018      	movs	r0, r3
 80036d0:	f002 f910 	bl	80058f4 <TransmitData>
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}

080036dc <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle()
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	switch (w_number)
 80036e0:	4bc1      	ldr	r3, [pc, #772]	; (80039e8 <CountDownCube_Handle+0x30c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d900      	bls.n	80036ea <CountDownCube_Handle+0xe>
 80036e8:	e284      	b.n	8003bf4 <CountDownCube_Handle+0x518>
 80036ea:	009a      	lsls	r2, r3, #2
 80036ec:	4bbf      	ldr	r3, [pc, #764]	; (80039ec <CountDownCube_Handle+0x310>)
 80036ee:	18d3      	adds	r3, r2, r3
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	469f      	mov	pc, r3
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80036f4:	f7fd f898 	bl	8000828 <HAL_GetTick>
 80036f8:	0002      	movs	r2, r0
 80036fa:	4bbd      	ldr	r3, [pc, #756]	; (80039f0 <CountDownCube_Handle+0x314>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2246      	movs	r2, #70	; 0x46
 8003702:	4293      	cmp	r3, r2
 8003704:	d32f      	bcc.n	8003766 <CountDownCube_Handle+0x8a>
			{
				if (direction == 1 && (i < 8))  i++;
 8003706:	4bbb      	ldr	r3, [pc, #748]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d108      	bne.n	8003720 <CountDownCube_Handle+0x44>
 800370e:	4bba      	ldr	r3, [pc, #744]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b07      	cmp	r3, #7
 8003714:	dc04      	bgt.n	8003720 <CountDownCube_Handle+0x44>
 8003716:	4bb8      	ldr	r3, [pc, #736]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	4bb6      	ldr	r3, [pc, #728]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800371e:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003720:	4bb5      	ldr	r3, [pc, #724]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b07      	cmp	r3, #7
 8003726:	dd02      	ble.n	800372e <CountDownCube_Handle+0x52>
 8003728:	4bb2      	ldr	r3, [pc, #712]	; (80039f4 <CountDownCube_Handle+0x318>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800372e:	4bb1      	ldr	r3, [pc, #708]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <CountDownCube_Handle+0x6c>
 8003736:	4bb0      	ldr	r3, [pc, #704]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	dd04      	ble.n	8003748 <CountDownCube_Handle+0x6c>
 800373e:	4bae      	ldr	r3, [pc, #696]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	4bac      	ldr	r3, [pc, #688]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003746:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003748:	4bab      	ldr	r3, [pc, #684]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <CountDownCube_Handle+0x80>
				{
					direction = 1;
 8003750:	4ba8      	ldr	r3, [pc, #672]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 8003756:	4ba4      	ldr	r3, [pc, #656]	; (80039e8 <CountDownCube_Handle+0x30c>)
 8003758:	2208      	movs	r2, #8
 800375a:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800375c:	f7fd f864 	bl	8000828 <HAL_GetTick>
 8003760:	0002      	movs	r2, r0
 8003762:	4ba3      	ldr	r3, [pc, #652]	; (80039f0 <CountDownCube_Handle+0x314>)
 8003764:	601a      	str	r2, [r3, #0]
			}

			DigitNine(i);
 8003766:	4ba4      	ldr	r3, [pc, #656]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	0018      	movs	r0, r3
 800376c:	f000 fa76 	bl	8003c5c <DigitNine>
		break;
 8003770:	e241      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003772:	f7fd f859 	bl	8000828 <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	4b9d      	ldr	r3, [pc, #628]	; (80039f0 <CountDownCube_Handle+0x314>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2246      	movs	r2, #70	; 0x46
 8003780:	4293      	cmp	r3, r2
 8003782:	d32f      	bcc.n	80037e4 <CountDownCube_Handle+0x108>
			{

				if (direction == 1 && (i < 8))  i++;
 8003784:	4b9b      	ldr	r3, [pc, #620]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d108      	bne.n	800379e <CountDownCube_Handle+0xc2>
 800378c:	4b9a      	ldr	r3, [pc, #616]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b07      	cmp	r3, #7
 8003792:	dc04      	bgt.n	800379e <CountDownCube_Handle+0xc2>
 8003794:	4b98      	ldr	r3, [pc, #608]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	4b97      	ldr	r3, [pc, #604]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800379c:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 800379e:	4b96      	ldr	r3, [pc, #600]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b07      	cmp	r3, #7
 80037a4:	dd02      	ble.n	80037ac <CountDownCube_Handle+0xd0>
 80037a6:	4b93      	ldr	r3, [pc, #588]	; (80039f4 <CountDownCube_Handle+0x318>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80037ac:	4b91      	ldr	r3, [pc, #580]	; (80039f4 <CountDownCube_Handle+0x318>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d108      	bne.n	80037c6 <CountDownCube_Handle+0xea>
 80037b4:	4b90      	ldr	r3, [pc, #576]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	dd04      	ble.n	80037c6 <CountDownCube_Handle+0xea>
 80037bc:	4b8e      	ldr	r3, [pc, #568]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80037c4:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80037c6:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <CountDownCube_Handle+0xfe>
				{
					direction = 1;
 80037ce:	4b89      	ldr	r3, [pc, #548]	; (80039f4 <CountDownCube_Handle+0x318>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 80037d4:	4b84      	ldr	r3, [pc, #528]	; (80039e8 <CountDownCube_Handle+0x30c>)
 80037d6:	2207      	movs	r2, #7
 80037d8:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80037da:	f7fd f825 	bl	8000828 <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	4b83      	ldr	r3, [pc, #524]	; (80039f0 <CountDownCube_Handle+0x314>)
 80037e2:	601a      	str	r2, [r3, #0]
			}

			DigitEight(i);
 80037e4:	4b84      	ldr	r3, [pc, #528]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 fa79 	bl	8003ce0 <DigitEight>
		break;
 80037ee:	e202      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80037f0:	f7fd f81a 	bl	8000828 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	4b7e      	ldr	r3, [pc, #504]	; (80039f0 <CountDownCube_Handle+0x314>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2246      	movs	r2, #70	; 0x46
 80037fe:	4293      	cmp	r3, r2
 8003800:	d32f      	bcc.n	8003862 <CountDownCube_Handle+0x186>
			{

				if (direction == 1 && (i < 8))  i++;
 8003802:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d108      	bne.n	800381c <CountDownCube_Handle+0x140>
 800380a:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b07      	cmp	r3, #7
 8003810:	dc04      	bgt.n	800381c <CountDownCube_Handle+0x140>
 8003812:	4b79      	ldr	r3, [pc, #484]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	4b77      	ldr	r3, [pc, #476]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800381a:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 800381c:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b07      	cmp	r3, #7
 8003822:	dd02      	ble.n	800382a <CountDownCube_Handle+0x14e>
 8003824:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800382a:	4b72      	ldr	r3, [pc, #456]	; (80039f4 <CountDownCube_Handle+0x318>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <CountDownCube_Handle+0x168>
 8003832:	4b71      	ldr	r3, [pc, #452]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	dd04      	ble.n	8003844 <CountDownCube_Handle+0x168>
 800383a:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1e5a      	subs	r2, r3, #1
 8003840:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003842:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003844:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <CountDownCube_Handle+0x17c>
				{
					direction = 1;
 800384c:	4b69      	ldr	r3, [pc, #420]	; (80039f4 <CountDownCube_Handle+0x318>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 8003852:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <CountDownCube_Handle+0x30c>)
 8003854:	2206      	movs	r2, #6
 8003856:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003858:	f7fc ffe6 	bl	8000828 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <CountDownCube_Handle+0x314>)
 8003860:	601a      	str	r2, [r3, #0]
			}

			DigitSeven(i);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fa5e 	bl	8003d28 <DigitSeven>

			break;
 800386c:	e1c3      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 800386e:	f7fc ffdb 	bl	8000828 <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <CountDownCube_Handle+0x314>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2246      	movs	r2, #70	; 0x46
 800387c:	4293      	cmp	r3, r2
 800387e:	d32f      	bcc.n	80038e0 <CountDownCube_Handle+0x204>
			{

				if (direction == 1 && (i < 8))  i++;
 8003880:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d108      	bne.n	800389a <CountDownCube_Handle+0x1be>
 8003888:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b07      	cmp	r3, #7
 800388e:	dc04      	bgt.n	800389a <CountDownCube_Handle+0x1be>
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003898:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b07      	cmp	r3, #7
 80038a0:	dd02      	ble.n	80038a8 <CountDownCube_Handle+0x1cc>
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <CountDownCube_Handle+0x318>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <CountDownCube_Handle+0x318>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <CountDownCube_Handle+0x1e6>
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dd04      	ble.n	80038c2 <CountDownCube_Handle+0x1e6>
 80038b8:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80038c0:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <CountDownCube_Handle+0x1fa>
				{
					direction = 1;
 80038ca:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <CountDownCube_Handle+0x318>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 80038d0:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <CountDownCube_Handle+0x30c>)
 80038d2:	2205      	movs	r2, #5
 80038d4:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80038d6:	f7fc ffa7 	bl	8000828 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <CountDownCube_Handle+0x314>)
 80038de:	601a      	str	r2, [r3, #0]
			}

			DigitSix(i);
 80038e0:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f000 fa55 	bl	8003d94 <DigitSix>

			break;
 80038ea:	e184      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80038ec:	f7fc ff9c 	bl	8000828 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <CountDownCube_Handle+0x314>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2246      	movs	r2, #70	; 0x46
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d32f      	bcc.n	800395e <CountDownCube_Handle+0x282>
			{

				if (direction == 1 && (i < 8))  i++;
 80038fe:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d108      	bne.n	8003918 <CountDownCube_Handle+0x23c>
 8003906:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b07      	cmp	r3, #7
 800390c:	dc04      	bgt.n	8003918 <CountDownCube_Handle+0x23c>
 800390e:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003916:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b07      	cmp	r3, #7
 800391e:	dd02      	ble.n	8003926 <CountDownCube_Handle+0x24a>
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <CountDownCube_Handle+0x318>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <CountDownCube_Handle+0x264>
 800392e:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	dd04      	ble.n	8003940 <CountDownCube_Handle+0x264>
 8003936:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1e5a      	subs	r2, r3, #1
 800393c:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800393e:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <CountDownCube_Handle+0x278>
				{
					direction = 1;
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <CountDownCube_Handle+0x318>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <CountDownCube_Handle+0x30c>)
 8003950:	2204      	movs	r2, #4
 8003952:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003954:	f7fc ff68 	bl	8000828 <HAL_GetTick>
 8003958:	0002      	movs	r2, r0
 800395a:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <CountDownCube_Handle+0x314>)
 800395c:	601a      	str	r2, [r3, #0]
			}

			DigitFive(i);
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fa62 	bl	8003e2c <DigitFive>
			break;
 8003968:	e145      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 800396a:	f7fc ff5d 	bl	8000828 <HAL_GetTick>
 800396e:	0002      	movs	r2, r0
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <CountDownCube_Handle+0x314>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2246      	movs	r2, #70	; 0x46
 8003978:	4293      	cmp	r3, r2
 800397a:	d32f      	bcc.n	80039dc <CountDownCube_Handle+0x300>
			{

				if (direction == 1 && (i < 8))  i++;
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <CountDownCube_Handle+0x318>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d108      	bne.n	8003996 <CountDownCube_Handle+0x2ba>
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b07      	cmp	r3, #7
 800398a:	dc04      	bgt.n	8003996 <CountDownCube_Handle+0x2ba>
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <CountDownCube_Handle+0x31c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003994:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <CountDownCube_Handle+0x31c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b07      	cmp	r3, #7
 800399c:	dd02      	ble.n	80039a4 <CountDownCube_Handle+0x2c8>
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <CountDownCube_Handle+0x318>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <CountDownCube_Handle+0x318>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d108      	bne.n	80039be <CountDownCube_Handle+0x2e2>
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	dd04      	ble.n	80039be <CountDownCube_Handle+0x2e2>
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	1e5a      	subs	r2, r3, #1
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80039bc:	601a      	str	r2, [r3, #0]
				if (i == 0)
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <CountDownCube_Handle+0x2f6>
				{
					direction = 1;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <CountDownCube_Handle+0x318>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <CountDownCube_Handle+0x30c>)
 80039ce:	2203      	movs	r2, #3
 80039d0:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80039d2:	f7fc ff29 	bl	8000828 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <CountDownCube_Handle+0x314>)
 80039da:	601a      	str	r2, [r3, #0]
			}

			DigitFour(i);
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <CountDownCube_Handle+0x31c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fa6f 	bl	8003ec4 <DigitFour>
			break;
 80039e6:	e106      	b.n	8003bf6 <CountDownCube_Handle+0x51a>
 80039e8:	20000009 	.word	0x20000009
 80039ec:	08005a14 	.word	0x08005a14
 80039f0:	20000150 	.word	0x20000150
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	20000154 	.word	0x20000154

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80039fc:	f7fc ff14 	bl	8000828 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	4b7e      	ldr	r3, [pc, #504]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2246      	movs	r2, #70	; 0x46
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d32f      	bcc.n	8003a6e <CountDownCube_Handle+0x392>
			{

				if (direction == 1 && (i < 8))  i++;
 8003a0e:	4b7c      	ldr	r3, [pc, #496]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d108      	bne.n	8003a28 <CountDownCube_Handle+0x34c>
 8003a16:	4b7b      	ldr	r3, [pc, #492]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b07      	cmp	r3, #7
 8003a1c:	dc04      	bgt.n	8003a28 <CountDownCube_Handle+0x34c>
 8003a1e:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	4b77      	ldr	r3, [pc, #476]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a26:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003a28:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b07      	cmp	r3, #7
 8003a2e:	dd02      	ble.n	8003a36 <CountDownCube_Handle+0x35a>
 8003a30:	4b73      	ldr	r3, [pc, #460]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003a36:	4b72      	ldr	r3, [pc, #456]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d108      	bne.n	8003a50 <CountDownCube_Handle+0x374>
 8003a3e:	4b71      	ldr	r3, [pc, #452]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dd04      	ble.n	8003a50 <CountDownCube_Handle+0x374>
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	1e5a      	subs	r2, r3, #1
 8003a4c:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a4e:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003a50:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <CountDownCube_Handle+0x388>
				{
					direction = 1;
 8003a58:	4b69      	ldr	r3, [pc, #420]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 8003a5e:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <CountDownCube_Handle+0x52c>)
 8003a60:	2202      	movs	r2, #2
 8003a62:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003a64:	f7fc fee0 	bl	8000828 <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003a6c:	601a      	str	r2, [r3, #0]
			}

			DigitThree(i);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fa6c 	bl	8003f50 <DigitThree>
			break;
 8003a78:	e0bd      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003a7a:	f7fc fed5 	bl	8000828 <HAL_GetTick>
 8003a7e:	0002      	movs	r2, r0
 8003a80:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2246      	movs	r2, #70	; 0x46
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d32f      	bcc.n	8003aec <CountDownCube_Handle+0x410>
			{

				if (direction == 1 && (i < 8))  i++;
 8003a8c:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d108      	bne.n	8003aa6 <CountDownCube_Handle+0x3ca>
 8003a94:	4b5b      	ldr	r3, [pc, #364]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b07      	cmp	r3, #7
 8003a9a:	dc04      	bgt.n	8003aa6 <CountDownCube_Handle+0x3ca>
 8003a9c:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003aa4:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003aa6:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b07      	cmp	r3, #7
 8003aac:	dd02      	ble.n	8003ab4 <CountDownCube_Handle+0x3d8>
 8003aae:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <CountDownCube_Handle+0x3f2>
 8003abc:	4b51      	ldr	r3, [pc, #324]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	dd04      	ble.n	8003ace <CountDownCube_Handle+0x3f2>
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	4b4e      	ldr	r3, [pc, #312]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003acc:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003ace:	4b4d      	ldr	r3, [pc, #308]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <CountDownCube_Handle+0x406>
				{
					direction = 1;
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <CountDownCube_Handle+0x52c>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003ae2:	f7fc fea1 	bl	8000828 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003aea:	601a      	str	r2, [r3, #0]
			}

			DigitTwo(i);
 8003aec:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 fa65 	bl	8003fc0 <DigitTwo>
			break;
 8003af6:	e07e      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003af8:	f7fc fe96 	bl	8000828 <HAL_GetTick>
 8003afc:	0002      	movs	r2, r0
 8003afe:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2246      	movs	r2, #70	; 0x46
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d32f      	bcc.n	8003b6a <CountDownCube_Handle+0x48e>
			{

				if (direction == 1 && (i < 8))  i++;
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d108      	bne.n	8003b24 <CountDownCube_Handle+0x448>
 8003b12:	4b3c      	ldr	r3, [pc, #240]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b07      	cmp	r3, #7
 8003b18:	dc04      	bgt.n	8003b24 <CountDownCube_Handle+0x448>
 8003b1a:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b22:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003b24:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	dd02      	ble.n	8003b32 <CountDownCube_Handle+0x456>
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003b32:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <CountDownCube_Handle+0x470>
 8003b3a:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	dd04      	ble.n	8003b4c <CountDownCube_Handle+0x470>
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1e5a      	subs	r2, r3, #1
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b4a:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <CountDownCube_Handle+0x484>
				{
					direction = 1;
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <CountDownCube_Handle+0x52c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003b60:	f7fc fe62 	bl	8000828 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003b68:	601a      	str	r2, [r3, #0]
			}

			DigitOne(i);
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fa7c 	bl	800406c <DigitOne>
			break;
 8003b74:	e03f      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003b76:	f7fc fe57 	bl	8000828 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2246      	movs	r2, #70	; 0x46
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d32f      	bcc.n	8003be8 <CountDownCube_Handle+0x50c>
			{

				if (direction == 1 && (i < 8))  i++;
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d108      	bne.n	8003ba2 <CountDownCube_Handle+0x4c6>
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b07      	cmp	r3, #7
 8003b96:	dc04      	bgt.n	8003ba2 <CountDownCube_Handle+0x4c6>
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003ba0:	601a      	str	r2, [r3, #0]
				if (i > 7) direction = 0;
 8003ba2:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b07      	cmp	r3, #7
 8003ba8:	dd02      	ble.n	8003bb0 <CountDownCube_Handle+0x4d4>
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d108      	bne.n	8003bca <CountDownCube_Handle+0x4ee>
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	dd04      	ble.n	8003bca <CountDownCube_Handle+0x4ee>
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	1e5a      	subs	r2, r3, #1
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003bc8:	601a      	str	r2, [r3, #0]
				if (i == 0)
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <CountDownCube_Handle+0x502>
				{
					direction = 1;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <CountDownCube_Handle+0x524>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <CountDownCube_Handle+0x52c>)
 8003bda:	2209      	movs	r2, #9
 8003bdc:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003bde:	f7fc fe23 	bl	8000828 <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <CountDownCube_Handle+0x520>)
 8003be6:	601a      	str	r2, [r3, #0]
			}

			DigitZero(i);
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <CountDownCube_Handle+0x528>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 fa89 	bl	8004104 <DigitZero>
			break;
 8003bf2:	e000      	b.n	8003bf6 <CountDownCube_Handle+0x51a>

		default:
			break;
 8003bf4:	46c0      	nop			; (mov r8, r8)
	}
}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000150 	.word	0x20000150
 8003c00:	2000000c 	.word	0x2000000c
 8003c04:	20000154 	.word	0x20000154
 8003c08:	20000009 	.word	0x20000009

08003c0c <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <CountDownCube_Set_Sate+0x40>)
 8003c14:	2206      	movs	r2, #6
 8003c16:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <CountDownCube_Set_Sate+0x44>)
 8003c1a:	2209      	movs	r2, #9
 8003c1c:	701a      	strb	r2, [r3, #0]
	direction = 1;
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <CountDownCube_Set_Sate+0x48>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	e007      	b.n	8003c3a <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 8003c2a:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <CountDownCube_Set_Sate+0x4c>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	18d3      	adds	r3, r2, r3
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b07      	cmp	r3, #7
 8003c3e:	ddf4      	ble.n	8003c2a <CountDownCube_Set_Sate+0x1e>
	}
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b002      	add	sp, #8
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	20000010 	.word	0x20000010
 8003c50:	20000009 	.word	0x20000009
 8003c54:	2000000c 	.word	0x2000000c
 8003c58:	20000148 	.word	0x20000148

08003c5c <DigitNine>:

void DigitNine(int i)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <DigitNine+0x80>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	18d3      	adds	r3, r2, r3
 8003c6a:	227e      	movs	r2, #126	; 0x7e
 8003c6c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <DigitNine+0x80>)
 8003c70:	2181      	movs	r1, #129	; 0x81
 8003c72:	0018      	movs	r0, r3
 8003c74:	f001 fe3e 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xc3;
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <DigitNine+0x80>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	18d3      	adds	r3, r2, r3
 8003c7e:	22c3      	movs	r2, #195	; 0xc3
 8003c80:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60);
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <DigitNine+0x80>)
 8003c84:	2160      	movs	r1, #96	; 0x60
 8003c86:	0018      	movs	r0, r3
 8003c88:	f001 fe34 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x03;
 8003c8c:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <DigitNine+0x80>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	18d3      	adds	r3, r2, r3
 8003c92:	2203      	movs	r2, #3
 8003c94:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <DigitNine+0x80>)
 8003c98:	210c      	movs	r1, #12
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f001 fe2a 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xff;
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <DigitNine+0x80>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	18d3      	adds	r3, r2, r3
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02);
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <DigitNine+0x80>)
 8003cac:	2102      	movs	r1, #2
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f001 fe20 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x7f;
 8003cb4:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <DigitNine+0x80>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	18d3      	adds	r3, r2, r3
 8003cba:	227f      	movs	r2, #127	; 0x7f
 8003cbc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <DigitNine+0x80>)
 8003cc0:	2110      	movs	r1, #16
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f001 fe16 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <DigitNine+0x80>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	20000148 	.word	0x20000148

08003ce0 <DigitEight>:

void DigitEight(int i)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xc3;
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <DigitEight+0x44>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	22c3      	movs	r2, #195	; 0xc3
 8003cf0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66);
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <DigitEight+0x44>)
 8003cf4:	2166      	movs	r1, #102	; 0x66
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f001 fdfc 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x7e;
 8003cfc:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <DigitEight+0x44>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	18d3      	adds	r3, r2, r3
 8003d02:	227e      	movs	r2, #126	; 0x7e
 8003d04:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99);
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <DigitEight+0x44>)
 8003d08:	2199      	movs	r1, #153	; 0x99
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f001 fdf2 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <DigitEight+0x44>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	18d3      	adds	r3, r2, r3
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	20000148 	.word	0x20000148

08003d28 <DigitSeven>:

void DigitSeven(int i)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8003d30:	4a17      	ldr	r2, [pc, #92]	; (8003d90 <DigitSeven+0x68>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	22ff      	movs	r2, #255	; 0xff
 8003d38:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0);
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <DigitSeven+0x68>)
 8003d3c:	21c0      	movs	r1, #192	; 0xc0
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f001 fdd8 	bl	80058f4 <TransmitData>

	for (int j = 0; j < 6; j++)
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e016      	b.n	8003d78 <DigitSeven+0x50>
	{
		column_countdown[i] = 0x03 << j;
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	b2d9      	uxtb	r1, r3
 8003d54:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <DigitSeven+0x68>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	18d3      	adds	r3, r2, r3
 8003d5a:	1c0a      	adds	r2, r1, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j);
 8003d5e:	2220      	movs	r2, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	411a      	asrs	r2, r3
 8003d64:	0013      	movs	r3, r2
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <DigitSeven+0x68>)
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f001 fdc1 	bl	80058f4 <TransmitData>
	for (int j = 0; j < 6; j++)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3301      	adds	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	dde5      	ble.n	8003d4a <DigitSeven+0x22>
	}

	column_countdown[i] = 0;
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <DigitSeven+0x68>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	18d3      	adds	r3, r2, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000148 	.word	0x20000148

08003d94 <DigitSix>:

void DigitSix(int i)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8003d9c:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <DigitSix+0x94>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	18d3      	adds	r3, r2, r3
 8003da2:	22ff      	movs	r2, #255	; 0xff
 8003da4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <DigitSix+0x94>)
 8003da8:	2142      	movs	r1, #66	; 0x42
 8003daa:	0018      	movs	r0, r3
 8003dac:	f001 fda2 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xc3;
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <DigitSix+0x94>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	18d3      	adds	r3, r2, r3
 8003db6:	22c3      	movs	r2, #195	; 0xc3
 8003db8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <DigitSix+0x94>)
 8003dbc:	210c      	movs	r1, #12
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f001 fd98 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x7f;
 8003dc4:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <DigitSix+0x94>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	18d3      	adds	r3, r2, r3
 8003dca:	227f      	movs	r2, #127	; 0x7f
 8003dcc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <DigitSix+0x94>)
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f001 fd8e 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xc0;
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <DigitSix+0x94>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	18d3      	adds	r3, r2, r3
 8003dde:	22c0      	movs	r2, #192	; 0xc0
 8003de0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <DigitSix+0x94>)
 8003de4:	2120      	movs	r1, #32
 8003de6:	0018      	movs	r0, r3
 8003de8:	f001 fd84 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xfe;
 8003dec:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <DigitSix+0x94>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	18d3      	adds	r3, r2, r3
 8003df2:	22fe      	movs	r2, #254	; 0xfe
 8003df4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <DigitSix+0x94>)
 8003df8:	2110      	movs	r1, #16
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f001 fd7a 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x7e;
 8003e00:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <DigitSix+0x94>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	18d3      	adds	r3, r2, r3
 8003e06:	227e      	movs	r2, #126	; 0x7e
 8003e08:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <DigitSix+0x94>)
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f001 fd70 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <DigitSix+0x94>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	18d3      	adds	r3, r2, r3
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b002      	add	sp, #8
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	20000148 	.word	0x20000148

08003e2c <DigitFive>:

void DigitFive(int i)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

	column_countdown[i] = 0xff;
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <DigitFive+0x94>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0);
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <DigitFive+0x94>)
 8003e40:	21c0      	movs	r1, #192	; 0xc0
 8003e42:	0018      	movs	r0, r3
 8003e44:	f001 fd56 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xc0;
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <DigitFive+0x94>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	18d3      	adds	r3, r2, r3
 8003e4e:	22c0      	movs	r2, #192	; 0xc0
 8003e50:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20);
 8003e52:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <DigitFive+0x94>)
 8003e54:	2120      	movs	r1, #32
 8003e56:	0018      	movs	r0, r3
 8003e58:	f001 fd4c 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xfe;
 8003e5c:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <DigitFive+0x94>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	18d3      	adds	r3, r2, r3
 8003e62:	22fe      	movs	r2, #254	; 0xfe
 8003e64:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10);
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <DigitFive+0x94>)
 8003e68:	2110      	movs	r1, #16
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f001 fd42 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x03;
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <DigitFive+0x94>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	18d3      	adds	r3, r2, r3
 8003e76:	2203      	movs	r2, #3
 8003e78:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c);
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <DigitFive+0x94>)
 8003e7c:	210c      	movs	r1, #12
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f001 fd38 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x83;
 8003e84:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <DigitFive+0x94>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	18d3      	adds	r3, r2, r3
 8003e8a:	2283      	movs	r2, #131	; 0x83
 8003e8c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02);
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <DigitFive+0x94>)
 8003e90:	2102      	movs	r1, #2
 8003e92:	0018      	movs	r0, r3
 8003e94:	f001 fd2e 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x7e;
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <DigitFive+0x94>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	227e      	movs	r2, #126	; 0x7e
 8003ea0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <DigitFive+0x94>)
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f001 fd24 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <DigitFive+0x94>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	18d3      	adds	r3, r2, r3
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b002      	add	sp, #8
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	20000148 	.word	0x20000148

08003ec4 <DigitFour>:

void DigitFour(int i)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x06;
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <DigitFour+0x84>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	18d3      	adds	r3, r2, r3
 8003ed2:	2206      	movs	r2, #6
 8003ed4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3);
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <DigitFour+0x84>)
 8003ed8:	21f3      	movs	r1, #243	; 0xf3
 8003eda:	0018      	movs	r0, r3
 8003edc:	f001 fd0a 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xff;
 8003ee0:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <DigitFour+0x84>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	18d3      	adds	r3, r2, r3
 8003ee6:	22ff      	movs	r2, #255	; 0xff
 8003ee8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <DigitFour+0x84>)
 8003eec:	210c      	movs	r1, #12
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f001 fd00 	bl	80058f4 <TransmitData>

	for (int j = 0; j < 4; j++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e01a      	b.n	8003f30 <DigitFour+0x6c>
	{
	column_countdown[i] = 0x08 << j;
 8003efa:	2208      	movs	r2, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	409a      	lsls	r2, r3
 8003f00:	0013      	movs	r3, r2
 8003f02:	b2d9      	uxtb	r1, r3
 8003f04:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <DigitFour+0x84>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	18d3      	adds	r3, r2, r3
 8003f0a:	1c0a      	adds	r2, r1, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	411a      	asrs	r2, r3
 8003f14:	0013      	movs	r3, r2
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <DigitFour+0x88>)
 8003f1a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown);
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <DigitFour+0x88>)
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <DigitFour+0x84>)
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f001 fce5 	bl	80058f4 <TransmitData>
	for (int j = 0; j < 4; j++)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	dde1      	ble.n	8003efa <DigitFour+0x36>
	}

	column_countdown[i] = 0;
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <DigitFour+0x84>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	18d3      	adds	r3, r2, r3
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b004      	add	sp, #16
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000148 	.word	0x20000148
 8003f4c:	20000145 	.word	0x20000145

08003f50 <DigitThree>:

void DigitThree(int i)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <DigitThree+0x6c>)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	18d3      	adds	r3, r2, r3
 8003f5e:	227e      	movs	r2, #126	; 0x7e
 8003f60:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <DigitThree+0x6c>)
 8003f64:	2181      	movs	r1, #129	; 0x81
 8003f66:	0018      	movs	r0, r3
 8003f68:	f001 fcc4 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xe7;
 8003f6c:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <DigitThree+0x6c>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	18d3      	adds	r3, r2, r3
 8003f72:	22e7      	movs	r2, #231	; 0xe7
 8003f74:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <DigitThree+0x6c>)
 8003f78:	2142      	movs	r1, #66	; 0x42
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f001 fcba 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xc3;
 8003f80:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <DigitThree+0x6c>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	18d3      	adds	r3, r2, r3
 8003f86:	22c3      	movs	r2, #195	; 0xc3
 8003f88:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24);
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <DigitThree+0x6c>)
 8003f8c:	2124      	movs	r1, #36	; 0x24
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f001 fcb0 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x06;
 8003f94:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <DigitThree+0x6c>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	2206      	movs	r2, #6
 8003f9c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18);
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <DigitThree+0x6c>)
 8003fa0:	2118      	movs	r1, #24
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f001 fca6 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <DigitThree+0x6c>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b002      	add	sp, #8
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	20000148 	.word	0x20000148

08003fc0 <DigitTwo>:

void DigitTwo(int i)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <DigitTwo+0xa8>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	18d3      	adds	r3, r2, r3
 8003fce:	227e      	movs	r2, #126	; 0x7e
 8003fd0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 8003fd2:	4b25      	ldr	r3, [pc, #148]	; (8004068 <DigitTwo+0xa8>)
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f001 fc8c 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xc3;
 8003fdc:	4a22      	ldr	r2, [pc, #136]	; (8004068 <DigitTwo+0xa8>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	22c3      	movs	r2, #195	; 0xc3
 8003fe4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <DigitTwo+0xa8>)
 8003fe8:	2140      	movs	r1, #64	; 0x40
 8003fea:	0018      	movs	r0, r3
 8003fec:	f001 fc82 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x83;
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <DigitTwo+0xa8>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	18d3      	adds	r3, r2, r3
 8003ff6:	2283      	movs	r2, #131	; 0x83
 8003ff8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <DigitTwo+0xa8>)
 8003ffc:	2120      	movs	r1, #32
 8003ffe:	0018      	movs	r0, r3
 8004000:	f001 fc78 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x0e;
 8004004:	4a18      	ldr	r2, [pc, #96]	; (8004068 <DigitTwo+0xa8>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	220e      	movs	r2, #14
 800400c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <DigitTwo+0xa8>)
 8004010:	2110      	movs	r1, #16
 8004012:	0018      	movs	r0, r3
 8004014:	f001 fc6e 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x1c;
 8004018:	4a13      	ldr	r2, [pc, #76]	; (8004068 <DigitTwo+0xa8>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	221c      	movs	r2, #28
 8004020:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <DigitTwo+0xa8>)
 8004024:	2108      	movs	r1, #8
 8004026:	0018      	movs	r0, r3
 8004028:	f001 fc64 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x70;
 800402c:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <DigitTwo+0xa8>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	2270      	movs	r2, #112	; 0x70
 8004034:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04);
 8004036:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <DigitTwo+0xa8>)
 8004038:	2104      	movs	r1, #4
 800403a:	0018      	movs	r0, r3
 800403c:	f001 fc5a 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xff;
 8004040:	4a09      	ldr	r2, [pc, #36]	; (8004068 <DigitTwo+0xa8>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	22ff      	movs	r2, #255	; 0xff
 8004048:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03);
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <DigitTwo+0xa8>)
 800404c:	2103      	movs	r1, #3
 800404e:	0018      	movs	r0, r3
 8004050:	f001 fc50 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <DigitTwo+0xa8>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b002      	add	sp, #8
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	20000148 	.word	0x20000148

0800406c <DigitOne>:

void DigitOne(int i)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <DigitOne+0x94>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	18d3      	adds	r3, r2, r3
 800407a:	22ff      	movs	r2, #255	; 0xff
 800407c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <DigitOne+0x94>)
 8004080:	2101      	movs	r1, #1
 8004082:	0018      	movs	r0, r3
 8004084:	f001 fc36 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x98;
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <DigitOne+0x94>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	18d3      	adds	r3, r2, r3
 800408e:	2298      	movs	r2, #152	; 0x98
 8004090:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <DigitOne+0x94>)
 8004094:	2108      	movs	r1, #8
 8004096:	0018      	movs	r0, r3
 8004098:	f001 fc2c 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xd8;
 800409c:	4a18      	ldr	r2, [pc, #96]	; (8004100 <DigitOne+0x94>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	18d3      	adds	r3, r2, r3
 80040a2:	22d8      	movs	r2, #216	; 0xd8
 80040a4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <DigitOne+0x94>)
 80040a8:	2110      	movs	r1, #16
 80040aa:	0018      	movs	r0, r3
 80040ac:	f001 fc22 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x78;
 80040b0:	4a13      	ldr	r2, [pc, #76]	; (8004100 <DigitOne+0x94>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	2278      	movs	r2, #120	; 0x78
 80040b8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <DigitOne+0x94>)
 80040bc:	2120      	movs	r1, #32
 80040be:	0018      	movs	r0, r3
 80040c0:	f001 fc18 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x38;
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <DigitOne+0x94>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	18d3      	adds	r3, r2, r3
 80040ca:	2238      	movs	r2, #56	; 0x38
 80040cc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <DigitOne+0x94>)
 80040d0:	2140      	movs	r1, #64	; 0x40
 80040d2:	0018      	movs	r0, r3
 80040d4:	f001 fc0e 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x18;
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <DigitOne+0x94>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	2218      	movs	r2, #24
 80040e0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86);
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <DigitOne+0x94>)
 80040e4:	2186      	movs	r1, #134	; 0x86
 80040e6:	0018      	movs	r0, r3
 80040e8:	f001 fc04 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <DigitOne+0x94>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	18d3      	adds	r3, r2, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b002      	add	sp, #8
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	20000148 	.word	0x20000148

08004104 <DigitZero>:

void DigitZero(int i)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x3c;
 800410c:	4a13      	ldr	r2, [pc, #76]	; (800415c <DigitZero+0x58>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	18d3      	adds	r3, r2, r3
 8004112:	223c      	movs	r2, #60	; 0x3c
 8004114:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <DigitZero+0x58>)
 8004118:	2181      	movs	r1, #129	; 0x81
 800411a:	0018      	movs	r0, r3
 800411c:	f001 fbea 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0x66;
 8004120:	4a0e      	ldr	r2, [pc, #56]	; (800415c <DigitZero+0x58>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	2266      	movs	r2, #102	; 0x66
 8004128:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 800412a:	4b0c      	ldr	r3, [pc, #48]	; (800415c <DigitZero+0x58>)
 800412c:	2142      	movs	r1, #66	; 0x42
 800412e:	0018      	movs	r0, r3
 8004130:	f001 fbe0 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0xc3;
 8004134:	4a09      	ldr	r2, [pc, #36]	; (800415c <DigitZero+0x58>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	22c3      	movs	r2, #195	; 0xc3
 800413c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c);
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <DigitZero+0x58>)
 8004140:	213c      	movs	r1, #60	; 0x3c
 8004142:	0018      	movs	r0, r3
 8004144:	f001 fbd6 	bl	80058f4 <TransmitData>

	column_countdown[i] = 0;
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <DigitZero+0x58>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	20000148 	.word	0x20000148

08004160 <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle()
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0

	switch (size_layer)
 8004166:	4b80      	ldr	r3, [pc, #512]	; (8004368 <DiagonalCube_Handle+0x208>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d100      	bne.n	8004170 <DiagonalCube_Handle+0x10>
 800416e:	e0b5      	b.n	80042dc <DiagonalCube_Handle+0x17c>
 8004170:	dd00      	ble.n	8004174 <DiagonalCube_Handle+0x14>
 8004172:	e0eb      	b.n	800434c <DiagonalCube_Handle+0x1ec>
 8004174:	2b02      	cmp	r3, #2
 8004176:	d100      	bne.n	800417a <DiagonalCube_Handle+0x1a>
 8004178:	e078      	b.n	800426c <DiagonalCube_Handle+0x10c>
 800417a:	dd00      	ble.n	800417e <DiagonalCube_Handle+0x1e>
 800417c:	e0e6      	b.n	800434c <DiagonalCube_Handle+0x1ec>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <DiagonalCube_Handle+0x28>
 8004182:	2b01      	cmp	r3, #1
 8004184:	d039      	beq.n	80041fa <DiagonalCube_Handle+0x9a>
				size_layer = SMALLEST;
				time_start = HAL_GetTick();
			}
			break;
		default:
			break;
 8004186:	e0e1      	b.n	800434c <DiagonalCube_Handle+0x1ec>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004188:	f7fc fb4e 	bl	8000828 <HAL_GetTick>
 800418c:	0002      	movs	r2, r0
 800418e:	4b77      	ldr	r3, [pc, #476]	; (800436c <DiagonalCube_Handle+0x20c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2296      	movs	r2, #150	; 0x96
 8004196:	4293      	cmp	r3, r2
 8004198:	d200      	bcs.n	800419c <DiagonalCube_Handle+0x3c>
 800419a:	e0d9      	b.n	8004350 <DiagonalCube_Handle+0x1f0>
				layer_diagonal = 0x18;
 800419c:	4b74      	ldr	r3, [pc, #464]	; (8004370 <DiagonalCube_Handle+0x210>)
 800419e:	2218      	movs	r2, #24
 80041a0:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 80041a2:	2303      	movs	r3, #3
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e007      	b.n	80041b8 <DiagonalCube_Handle+0x58>
					column_diagonal[i] = 0x18;
 80041a8:	4a72      	ldr	r2, [pc, #456]	; (8004374 <DiagonalCube_Handle+0x214>)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	18d3      	adds	r3, r2, r3
 80041ae:	2218      	movs	r2, #24
 80041b0:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3301      	adds	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	ddf4      	ble.n	80041a8 <DiagonalCube_Handle+0x48>
				TransmitData(column_diagonal, layer_diagonal);
 80041be:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <DiagonalCube_Handle+0x210>)
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <DiagonalCube_Handle+0x214>)
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f001 fb94 	bl	80058f4 <TransmitData>
				for (int i = 0; i < 8; i++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e007      	b.n	80041e2 <DiagonalCube_Handle+0x82>
					column_diagonal[i] = 0;
 80041d2:	4a68      	ldr	r2, [pc, #416]	; (8004374 <DiagonalCube_Handle+0x214>)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	18d3      	adds	r3, r2, r3
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	3301      	adds	r3, #1
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b07      	cmp	r3, #7
 80041e6:	ddf4      	ble.n	80041d2 <DiagonalCube_Handle+0x72>
				size_layer = MEDIUM;
 80041e8:	4b5f      	ldr	r3, [pc, #380]	; (8004368 <DiagonalCube_Handle+0x208>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80041ee:	f7fc fb1b 	bl	8000828 <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	4b5d      	ldr	r3, [pc, #372]	; (800436c <DiagonalCube_Handle+0x20c>)
 80041f6:	601a      	str	r2, [r3, #0]
			break;
 80041f8:	e0aa      	b.n	8004350 <DiagonalCube_Handle+0x1f0>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80041fa:	f7fc fb15 	bl	8000828 <HAL_GetTick>
 80041fe:	0002      	movs	r2, r0
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <DiagonalCube_Handle+0x20c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2296      	movs	r2, #150	; 0x96
 8004208:	4293      	cmp	r3, r2
 800420a:	d200      	bcs.n	800420e <DiagonalCube_Handle+0xae>
 800420c:	e0a2      	b.n	8004354 <DiagonalCube_Handle+0x1f4>
				layer_diagonal = 0x24;
 800420e:	4b58      	ldr	r3, [pc, #352]	; (8004370 <DiagonalCube_Handle+0x210>)
 8004210:	2224      	movs	r2, #36	; 0x24
 8004212:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004214:	2302      	movs	r3, #2
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e007      	b.n	800422a <DiagonalCube_Handle+0xca>
					column_diagonal[i] = 0x3c;
 800421a:	4a56      	ldr	r2, [pc, #344]	; (8004374 <DiagonalCube_Handle+0x214>)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	18d3      	adds	r3, r2, r3
 8004220:	223c      	movs	r2, #60	; 0x3c
 8004222:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3301      	adds	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b05      	cmp	r3, #5
 800422e:	ddf4      	ble.n	800421a <DiagonalCube_Handle+0xba>
				TransmitData(column_diagonal, layer_diagonal);
 8004230:	4b4f      	ldr	r3, [pc, #316]	; (8004370 <DiagonalCube_Handle+0x210>)
 8004232:	781a      	ldrb	r2, [r3, #0]
 8004234:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <DiagonalCube_Handle+0x214>)
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f001 fb5b 	bl	80058f4 <TransmitData>
				for (int i = 0; i < 8; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e007      	b.n	8004254 <DiagonalCube_Handle+0xf4>
					column_diagonal[i] = 0;
 8004244:	4a4b      	ldr	r2, [pc, #300]	; (8004374 <DiagonalCube_Handle+0x214>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	18d3      	adds	r3, r2, r3
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3301      	adds	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b07      	cmp	r3, #7
 8004258:	ddf4      	ble.n	8004244 <DiagonalCube_Handle+0xe4>
				size_layer = LARGE;
 800425a:	4b43      	ldr	r3, [pc, #268]	; (8004368 <DiagonalCube_Handle+0x208>)
 800425c:	2202      	movs	r2, #2
 800425e:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004260:	f7fc fae2 	bl	8000828 <HAL_GetTick>
 8004264:	0002      	movs	r2, r0
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <DiagonalCube_Handle+0x20c>)
 8004268:	601a      	str	r2, [r3, #0]
			break;
 800426a:	e073      	b.n	8004354 <DiagonalCube_Handle+0x1f4>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 800426c:	f7fc fadc 	bl	8000828 <HAL_GetTick>
 8004270:	0002      	movs	r2, r0
 8004272:	4b3e      	ldr	r3, [pc, #248]	; (800436c <DiagonalCube_Handle+0x20c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2296      	movs	r2, #150	; 0x96
 800427a:	4293      	cmp	r3, r2
 800427c:	d36c      	bcc.n	8004358 <DiagonalCube_Handle+0x1f8>
				layer_diagonal = 0x42;
 800427e:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <DiagonalCube_Handle+0x210>)
 8004280:	2242      	movs	r2, #66	; 0x42
 8004282:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004284:	2301      	movs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e007      	b.n	800429a <DiagonalCube_Handle+0x13a>
					column_diagonal[i] = 0x7e;
 800428a:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <DiagonalCube_Handle+0x214>)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	18d3      	adds	r3, r2, r3
 8004290:	227e      	movs	r2, #126	; 0x7e
 8004292:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b06      	cmp	r3, #6
 800429e:	ddf4      	ble.n	800428a <DiagonalCube_Handle+0x12a>
				TransmitData(column_diagonal, layer_diagonal);
 80042a0:	4b33      	ldr	r3, [pc, #204]	; (8004370 <DiagonalCube_Handle+0x210>)
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <DiagonalCube_Handle+0x214>)
 80042a6:	0011      	movs	r1, r2
 80042a8:	0018      	movs	r0, r3
 80042aa:	f001 fb23 	bl	80058f4 <TransmitData>
				for (int i = 0; i < 8; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	e007      	b.n	80042c4 <DiagonalCube_Handle+0x164>
					column_diagonal[i] = 0;
 80042b4:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <DiagonalCube_Handle+0x214>)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	18d3      	adds	r3, r2, r3
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3301      	adds	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	ddf4      	ble.n	80042b4 <DiagonalCube_Handle+0x154>
				size_layer = LARGEST;
 80042ca:	4b27      	ldr	r3, [pc, #156]	; (8004368 <DiagonalCube_Handle+0x208>)
 80042cc:	2203      	movs	r2, #3
 80042ce:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80042d0:	f7fc faaa 	bl	8000828 <HAL_GetTick>
 80042d4:	0002      	movs	r2, r0
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <DiagonalCube_Handle+0x20c>)
 80042d8:	601a      	str	r2, [r3, #0]
			break;
 80042da:	e03d      	b.n	8004358 <DiagonalCube_Handle+0x1f8>
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80042dc:	f7fc faa4 	bl	8000828 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <DiagonalCube_Handle+0x20c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2296      	movs	r2, #150	; 0x96
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d336      	bcc.n	800435c <DiagonalCube_Handle+0x1fc>
				layer_diagonal= 0x81;
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <DiagonalCube_Handle+0x210>)
 80042f0:	2281      	movs	r2, #129	; 0x81
 80042f2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	e007      	b.n	800430a <DiagonalCube_Handle+0x1aa>
					column_diagonal[i] = 0xff;
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <DiagonalCube_Handle+0x214>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	18d3      	adds	r3, r2, r3
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b07      	cmp	r3, #7
 800430e:	ddf4      	ble.n	80042fa <DiagonalCube_Handle+0x19a>
				TransmitData(column_diagonal, layer_diagonal);
 8004310:	4b17      	ldr	r3, [pc, #92]	; (8004370 <DiagonalCube_Handle+0x210>)
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <DiagonalCube_Handle+0x214>)
 8004316:	0011      	movs	r1, r2
 8004318:	0018      	movs	r0, r3
 800431a:	f001 faeb 	bl	80058f4 <TransmitData>
				for (int i = 0; i < 8; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	e007      	b.n	8004334 <DiagonalCube_Handle+0x1d4>
					column_diagonal[i] = 0;
 8004324:	4a13      	ldr	r2, [pc, #76]	; (8004374 <DiagonalCube_Handle+0x214>)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	18d3      	adds	r3, r2, r3
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b07      	cmp	r3, #7
 8004338:	ddf4      	ble.n	8004324 <DiagonalCube_Handle+0x1c4>
				size_layer = SMALLEST;
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <DiagonalCube_Handle+0x208>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004340:	f7fc fa72 	bl	8000828 <HAL_GetTick>
 8004344:	0002      	movs	r2, r0
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <DiagonalCube_Handle+0x20c>)
 8004348:	601a      	str	r2, [r3, #0]
			break;
 800434a:	e007      	b.n	800435c <DiagonalCube_Handle+0x1fc>
			break;
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	e006      	b.n	800435e <DiagonalCube_Handle+0x1fe>
			break;
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	e004      	b.n	800435e <DiagonalCube_Handle+0x1fe>
			break;
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	e002      	b.n	800435e <DiagonalCube_Handle+0x1fe>
			break;
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	e000      	b.n	800435e <DiagonalCube_Handle+0x1fe>
			break;
 800435c:	46c0      	nop			; (mov r8, r8)
	}
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b008      	add	sp, #32
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	20000158 	.word	0x20000158
 800436c:	20000164 	.word	0x20000164
 8004370:	20000159 	.word	0x20000159
 8004374:	2000015c 	.word	0x2000015c

08004378 <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <DiagonalCube_Set_State+0x3c>)
 8004380:	2204      	movs	r2, #4
 8004382:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004384:	2300      	movs	r3, #0
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e007      	b.n	800439a <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <DiagonalCube_Set_State+0x40>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	18d3      	adds	r3, r2, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3301      	adds	r3, #1
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b07      	cmp	r3, #7
 800439e:	ddf4      	ble.n	800438a <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <DiagonalCube_Set_State+0x44>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <DiagonalCube_Set_State+0x48>)
 80043a8:	2203      	movs	r2, #3
 80043aa:	701a      	strb	r2, [r3, #0]
}
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b002      	add	sp, #8
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000010 	.word	0x20000010
 80043b8:	2000015c 	.word	0x2000015c
 80043bc:	20000159 	.word	0x20000159
 80043c0:	20000158 	.word	0x20000158

080043c4 <DisplayLed>:
uint8_t WhichByte, WhichBit, WhichColumn;
uint8_t dataOut[9];
extern SPI_HandleTypeDef hspi1;

void DisplayLed(uint8_t x, uint8_t y, uint8_t  z, uint8_t display)
{
 80043c4:	b5b0      	push	{r4, r5, r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	0005      	movs	r5, r0
 80043cc:	000c      	movs	r4, r1
 80043ce:	0010      	movs	r0, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	1c2a      	adds	r2, r5, #0
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	1dbb      	adds	r3, r7, #6
 80043da:	1c22      	adds	r2, r4, #0
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	1d7b      	adds	r3, r7, #5
 80043e0:	1c02      	adds	r2, r0, #0
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	1c0a      	adds	r2, r1, #0
 80043e8:	701a      	strb	r2, [r3, #0]

	WhichByte = (((z << 6)+(y << 3) + x) >> 3);
 80043ea:	1d7b      	adds	r3, r7, #5
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	019a      	lsls	r2, r3, #6
 80043f0:	1dbb      	adds	r3, r7, #6
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	18d2      	adds	r2, r2, r3
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	18d3      	adds	r3, r2, r3
 80043fe:	10db      	asrs	r3, r3, #3
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4b40      	ldr	r3, [pc, #256]	; (8004504 <DisplayLed+0x140>)
 8004404:	701a      	strb	r2, [r3, #0]
	WhichBit = ((z << 6) + (y << 3) + x) - (WhichByte << 3);
 8004406:	1d7b      	adds	r3, r7, #5
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	019b      	lsls	r3, r3, #6
 800440c:	b2da      	uxtb	r2, r3
 800440e:	1dbb      	adds	r3, r7, #6
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	18d3      	adds	r3, r2, r3
 8004418:	b2da      	uxtb	r2, r3
 800441a:	1dfb      	adds	r3, r7, #7
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	18d3      	adds	r3, r2, r3
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4b38      	ldr	r3, [pc, #224]	; (8004504 <DisplayLed+0x140>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <DisplayLed+0x144>)
 8004430:	701a      	strb	r2, [r3, #0]
	WhichColumn = WhichByte - (z*8);
 8004432:	4b34      	ldr	r3, [pc, #208]	; (8004504 <DisplayLed+0x140>)
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	1d7b      	adds	r3, r7, #5
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b32      	ldr	r3, [pc, #200]	; (800450c <DisplayLed+0x148>)
 8004444:	701a      	strb	r2, [r3, #0]
	if (z == 8) IClayer = 0xff;
 8004446:	1d7b      	adds	r3, r7, #5
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b08      	cmp	r3, #8
 800444c:	d103      	bne.n	8004456 <DisplayLed+0x92>
 800444e:	4b30      	ldr	r3, [pc, #192]	; (8004510 <DisplayLed+0x14c>)
 8004450:	22ff      	movs	r2, #255	; 0xff
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e007      	b.n	8004466 <DisplayLed+0xa2>
	else IClayer = 0x01 <<  z;
 8004456:	1d7b      	adds	r3, r7, #5
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2201      	movs	r2, #1
 800445c:	409a      	lsls	r2, r3
 800445e:	0013      	movs	r3, r2
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4b2b      	ldr	r3, [pc, #172]	; (8004510 <DisplayLed+0x14c>)
 8004464:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0x01 << WhichBit;
 8004466:	4b28      	ldr	r3, [pc, #160]	; (8004508 <DisplayLed+0x144>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4093      	lsls	r3, r2
 8004470:	0019      	movs	r1, r3
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <DisplayLed+0x148>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	001a      	movs	r2, r3
 8004478:	b2c9      	uxtb	r1, r1
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <DisplayLed+0x150>)
 800447c:	5499      	strb	r1, [r3, r2]
	dataOut[0] = IClayer;
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <DisplayLed+0x14c>)
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	4b25      	ldr	r3, [pc, #148]	; (8004518 <DisplayLed+0x154>)
 8004484:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < 9; i++)
 8004486:	230f      	movs	r3, #15
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e00e      	b.n	80044ae <DisplayLed+0xea>
	{
		dataOut[i] = ICcolumn[i-1];
 8004490:	200f      	movs	r0, #15
 8004492:	183b      	adds	r3, r7, r0
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	183b      	adds	r3, r7, r0
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	491d      	ldr	r1, [pc, #116]	; (8004514 <DisplayLed+0x150>)
 800449e:	5c89      	ldrb	r1, [r1, r2]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <DisplayLed+0x154>)
 80044a2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < 9; i++)
 80044a4:	183b      	adds	r3, r7, r0
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	183b      	adds	r3, r7, r0
 80044aa:	3201      	adds	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	230f      	movs	r3, #15
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d9eb      	bls.n	8004490 <DisplayLed+0xcc>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80044b8:	2390      	movs	r3, #144	; 0x90
 80044ba:	05db      	lsls	r3, r3, #23
 80044bc:	2200      	movs	r2, #0
 80044be:	2140      	movs	r1, #64	; 0x40
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fc fc9c 	bl	8000dfe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 80044c6:	4914      	ldr	r1, [pc, #80]	; (8004518 <DisplayLed+0x154>)
 80044c8:	4814      	ldr	r0, [pc, #80]	; (800451c <DisplayLed+0x158>)
 80044ca:	2364      	movs	r3, #100	; 0x64
 80044cc:	2209      	movs	r2, #9
 80044ce:	f7fd fb59 	bl	8001b84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 80044d2:	2390      	movs	r3, #144	; 0x90
 80044d4:	05db      	lsls	r3, r3, #23
 80044d6:	2201      	movs	r2, #1
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	0018      	movs	r0, r3
 80044dc:	f7fc fc8f 	bl	8000dfe <HAL_GPIO_WritePin>
	if (!display)
 80044e0:	1d3b      	adds	r3, r7, #4
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <DisplayLed+0x136>
	{
		IClayer = 0;
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <DisplayLed+0x14c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
		ICcolumn[WhichColumn] = 0;
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <DisplayLed+0x148>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	001a      	movs	r2, r3
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <DisplayLed+0x150>)
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]
	}
}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b004      	add	sp, #16
 8004500:	bdb0      	pop	{r4, r5, r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	20000171 	.word	0x20000171
 8004508:	20000172 	.word	0x20000172
 800450c:	20000173 	.word	0x20000173
 8004510:	20000170 	.word	0x20000170
 8004514:	20000168 	.word	0x20000168
 8004518:	20000174 	.word	0x20000174
 800451c:	20000030 	.word	0x20000030

08004520 <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle() //ok
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 8004526:	4b93      	ldr	r3, [pc, #588]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004528:	22ff      	movs	r2, #255	; 0xff
 800452a:	71da      	strb	r2, [r3, #7]
 800452c:	4b91      	ldr	r3, [pc, #580]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800452e:	79da      	ldrb	r2, [r3, #7]
 8004530:	4b90      	ldr	r3, [pc, #576]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004532:	719a      	strb	r2, [r3, #6]
 8004534:	4b8f      	ldr	r3, [pc, #572]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004536:	799a      	ldrb	r2, [r3, #6]
 8004538:	4b8e      	ldr	r3, [pc, #568]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800453a:	715a      	strb	r2, [r3, #5]
 800453c:	4b8d      	ldr	r3, [pc, #564]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800453e:	795a      	ldrb	r2, [r3, #5]
 8004540:	4b8c      	ldr	r3, [pc, #560]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004542:	711a      	strb	r2, [r3, #4]
 8004544:	4b8b      	ldr	r3, [pc, #556]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004546:	791a      	ldrb	r2, [r3, #4]
 8004548:	4b8a      	ldr	r3, [pc, #552]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800454a:	70da      	strb	r2, [r3, #3]
 800454c:	4b89      	ldr	r3, [pc, #548]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800454e:	78da      	ldrb	r2, [r3, #3]
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004552:	709a      	strb	r2, [r3, #2]
 8004554:	4b87      	ldr	r3, [pc, #540]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004556:	789a      	ldrb	r2, [r3, #2]
 8004558:	4b86      	ldr	r3, [pc, #536]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800455a:	705a      	strb	r2, [r3, #1]
 800455c:	4b85      	ldr	r3, [pc, #532]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800455e:	785a      	ldrb	r2, [r3, #1]
 8004560:	4b84      	ldr	r3, [pc, #528]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004562:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 8004564:	4b83      	ldr	r3, [pc, #524]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004566:	227e      	movs	r2, #126	; 0x7e
 8004568:	739a      	strb	r2, [r3, #14]
 800456a:	4b82      	ldr	r3, [pc, #520]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800456c:	7b9a      	ldrb	r2, [r3, #14]
 800456e:	4b81      	ldr	r3, [pc, #516]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004570:	735a      	strb	r2, [r3, #13]
 8004572:	4b80      	ldr	r3, [pc, #512]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004574:	7b5a      	ldrb	r2, [r3, #13]
 8004576:	4b7f      	ldr	r3, [pc, #508]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004578:	731a      	strb	r2, [r3, #12]
 800457a:	4b7e      	ldr	r3, [pc, #504]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800457c:	7b1a      	ldrb	r2, [r3, #12]
 800457e:	4b7d      	ldr	r3, [pc, #500]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004580:	72da      	strb	r2, [r3, #11]
 8004582:	4b7c      	ldr	r3, [pc, #496]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004584:	7ada      	ldrb	r2, [r3, #11]
 8004586:	4b7b      	ldr	r3, [pc, #492]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004588:	729a      	strb	r2, [r3, #10]
 800458a:	4b7a      	ldr	r3, [pc, #488]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800458c:	7a9a      	ldrb	r2, [r3, #10]
 800458e:	4b79      	ldr	r3, [pc, #484]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004590:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 8004592:	4b78      	ldr	r3, [pc, #480]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004594:	223c      	movs	r2, #60	; 0x3c
 8004596:	755a      	strb	r2, [r3, #21]
 8004598:	4b76      	ldr	r3, [pc, #472]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800459a:	7d5a      	ldrb	r2, [r3, #21]
 800459c:	4b75      	ldr	r3, [pc, #468]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800459e:	751a      	strb	r2, [r3, #20]
 80045a0:	4b74      	ldr	r3, [pc, #464]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80045a2:	7d1a      	ldrb	r2, [r3, #20]
 80045a4:	4b73      	ldr	r3, [pc, #460]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80045a6:	74da      	strb	r2, [r3, #19]
 80045a8:	4b72      	ldr	r3, [pc, #456]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80045aa:	7cda      	ldrb	r2, [r3, #19]
 80045ac:	4b71      	ldr	r3, [pc, #452]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80045ae:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 80045b0:	4b70      	ldr	r3, [pc, #448]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80045b2:	2218      	movs	r2, #24
 80045b4:	771a      	strb	r2, [r3, #28]
 80045b6:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80045b8:	7f1a      	ldrb	r2, [r3, #28]
 80045ba:	4b6e      	ldr	r3, [pc, #440]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80045bc:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 80045c0:	22ff      	movs	r2, #255	; 0xff
 80045c2:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 80045c4:	4b6c      	ldr	r3, [pc, #432]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 80045c6:	227e      	movs	r2, #126	; 0x7e
 80045c8:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 80045ca:	4b6b      	ldr	r3, [pc, #428]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 80045cc:	223c      	movs	r2, #60	; 0x3c
 80045ce:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 80045d0:	4b69      	ldr	r3, [pc, #420]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 80045d2:	2218      	movs	r2, #24
 80045d4:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 80045d6:	4b69      	ldr	r3, [pc, #420]	; (800477c <GrowShrinkCube_Handle+0x25c>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d100      	bne.n	80045e0 <GrowShrinkCube_Handle+0xc0>
 80045de:	e090      	b.n	8004702 <GrowShrinkCube_Handle+0x1e2>
 80045e0:	dd00      	ble.n	80045e4 <GrowShrinkCube_Handle+0xc4>
 80045e2:	e0b9      	b.n	8004758 <GrowShrinkCube_Handle+0x238>
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d060      	beq.n	80046aa <GrowShrinkCube_Handle+0x18a>
 80045e8:	dd00      	ble.n	80045ec <GrowShrinkCube_Handle+0xcc>
 80045ea:	e0b5      	b.n	8004758 <GrowShrinkCube_Handle+0x238>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <GrowShrinkCube_Handle+0xd6>
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d02d      	beq.n	8004650 <GrowShrinkCube_Handle+0x130>
				time_start = HAL_GetTick();
				size_cube = TWO_X_TWO_CUBE;
			}
			break;
		default:
			break;
 80045f4:	e0b0      	b.n	8004758 <GrowShrinkCube_Handle+0x238>
			if (HAL_GetTick() - time_start >= time_todo2)
 80045f6:	f7fc f917 	bl	8000828 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	4b60      	ldr	r3, [pc, #384]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	22c8      	movs	r2, #200	; 0xc8
 8004604:	4293      	cmp	r3, r2
 8004606:	d200      	bcs.n	800460a <GrowShrinkCube_Handle+0xea>
 8004608:	e0a8      	b.n	800475c <GrowShrinkCube_Handle+0x23c>
				for (int j = 0; j < 8; j++)
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e013      	b.n	8004638 <GrowShrinkCube_Handle+0x118>
					temp[j] = column_growshrink[3][j];
 8004610:	4a58      	ldr	r2, [pc, #352]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	18d3      	adds	r3, r2, r3
 8004616:	3318      	adds	r3, #24
 8004618:	7819      	ldrb	r1, [r3, #0]
 800461a:	003a      	movs	r2, r7
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	18d3      	adds	r3, r2, r3
 8004620:	1c0a      	adds	r2, r1, #0
 8004622:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3]);
 8004624:	4b54      	ldr	r3, [pc, #336]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 8004626:	78da      	ldrb	r2, [r3, #3]
 8004628:	003b      	movs	r3, r7
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f001 f961 	bl	80058f4 <TransmitData>
				for (int j = 0; j < 8; j++)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	3301      	adds	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b07      	cmp	r3, #7
 800463c:	dde8      	ble.n	8004610 <GrowShrinkCube_Handle+0xf0>
				time_start = HAL_GetTick();
 800463e:	f7fc f8f3 	bl	8000828 <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	4b4e      	ldr	r3, [pc, #312]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 8004646:	601a      	str	r2, [r3, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 8004648:	4b4c      	ldr	r3, [pc, #304]	; (800477c <GrowShrinkCube_Handle+0x25c>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
			break;
 800464e:	e085      	b.n	800475c <GrowShrinkCube_Handle+0x23c>
			if (HAL_GetTick() - time_start >= time_todo2)
 8004650:	f7fc f8ea 	bl	8000828 <HAL_GetTick>
 8004654:	0002      	movs	r2, r0
 8004656:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	22c8      	movs	r2, #200	; 0xc8
 800465e:	4293      	cmp	r3, r2
 8004660:	d200      	bcs.n	8004664 <GrowShrinkCube_Handle+0x144>
 8004662:	e07d      	b.n	8004760 <GrowShrinkCube_Handle+0x240>
				for (int j = 0; j < 8; j++)
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	e013      	b.n	8004692 <GrowShrinkCube_Handle+0x172>
					temp[j] = column_growshrink[2][j];
 800466a:	4a42      	ldr	r2, [pc, #264]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	18d3      	adds	r3, r2, r3
 8004670:	3310      	adds	r3, #16
 8004672:	7819      	ldrb	r1, [r3, #0]
 8004674:	003a      	movs	r2, r7
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	18d3      	adds	r3, r2, r3
 800467a:	1c0a      	adds	r2, r1, #0
 800467c:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2]);
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 8004680:	789a      	ldrb	r2, [r3, #2]
 8004682:	003b      	movs	r3, r7
 8004684:	0011      	movs	r1, r2
 8004686:	0018      	movs	r0, r3
 8004688:	f001 f934 	bl	80058f4 <TransmitData>
				for (int j = 0; j < 8; j++)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3301      	adds	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b07      	cmp	r3, #7
 8004696:	dde8      	ble.n	800466a <GrowShrinkCube_Handle+0x14a>
				time_start = HAL_GetTick();
 8004698:	f7fc f8c6 	bl	8000828 <HAL_GetTick>
 800469c:	0002      	movs	r2, r0
 800469e:	4b38      	ldr	r3, [pc, #224]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 80046a0:	601a      	str	r2, [r3, #0]
				size_cube = SIX_X_SIX_CUBE;
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <GrowShrinkCube_Handle+0x25c>)
 80046a4:	2202      	movs	r2, #2
 80046a6:	701a      	strb	r2, [r3, #0]
			break;
 80046a8:	e05a      	b.n	8004760 <GrowShrinkCube_Handle+0x240>
			if (HAL_GetTick() - time_start >= time_todo2)
 80046aa:	f7fc f8bd 	bl	8000828 <HAL_GetTick>
 80046ae:	0002      	movs	r2, r0
 80046b0:	4b33      	ldr	r3, [pc, #204]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	22c8      	movs	r2, #200	; 0xc8
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d353      	bcc.n	8004764 <GrowShrinkCube_Handle+0x244>
				for (int j = 0; j < 8; j++)
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e013      	b.n	80046ea <GrowShrinkCube_Handle+0x1ca>
					temp[j] = column_growshrink[1][j];
 80046c2:	4a2c      	ldr	r2, [pc, #176]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	3308      	adds	r3, #8
 80046ca:	7819      	ldrb	r1, [r3, #0]
 80046cc:	003a      	movs	r2, r7
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	18d3      	adds	r3, r2, r3
 80046d2:	1c0a      	adds	r2, r1, #0
 80046d4:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1]);
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 80046d8:	785a      	ldrb	r2, [r3, #1]
 80046da:	003b      	movs	r3, r7
 80046dc:	0011      	movs	r1, r2
 80046de:	0018      	movs	r0, r3
 80046e0:	f001 f908 	bl	80058f4 <TransmitData>
				for (int j = 0; j < 8; j++)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b07      	cmp	r3, #7
 80046ee:	dde8      	ble.n	80046c2 <GrowShrinkCube_Handle+0x1a2>
				time_start = HAL_GetTick();
 80046f0:	f7fc f89a 	bl	8000828 <HAL_GetTick>
 80046f4:	0002      	movs	r2, r0
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 80046f8:	601a      	str	r2, [r3, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <GrowShrinkCube_Handle+0x25c>)
 80046fc:	2203      	movs	r2, #3
 80046fe:	701a      	strb	r2, [r3, #0]
			break;
 8004700:	e030      	b.n	8004764 <GrowShrinkCube_Handle+0x244>
			if (HAL_GetTick() - time_start >= time_todo2)
 8004702:	f7fc f891 	bl	8000828 <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	22c8      	movs	r2, #200	; 0xc8
 8004710:	4293      	cmp	r3, r2
 8004712:	d329      	bcc.n	8004768 <GrowShrinkCube_Handle+0x248>
				for (int j = 0; j < 8; j++)
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	e012      	b.n	8004740 <GrowShrinkCube_Handle+0x220>
					temp[j] = column_growshrink[0][j];
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <GrowShrinkCube_Handle+0x254>)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	18d3      	adds	r3, r2, r3
 8004720:	7819      	ldrb	r1, [r3, #0]
 8004722:	003a      	movs	r2, r7
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	18d3      	adds	r3, r2, r3
 8004728:	1c0a      	adds	r2, r1, #0
 800472a:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0]);
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <GrowShrinkCube_Handle+0x258>)
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	003b      	movs	r3, r7
 8004732:	0011      	movs	r1, r2
 8004734:	0018      	movs	r0, r3
 8004736:	f001 f8dd 	bl	80058f4 <TransmitData>
				for (int j = 0; j < 8; j++)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3301      	adds	r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b07      	cmp	r3, #7
 8004744:	dde9      	ble.n	800471a <GrowShrinkCube_Handle+0x1fa>
				time_start = HAL_GetTick();
 8004746:	f7fc f86f 	bl	8000828 <HAL_GetTick>
 800474a:	0002      	movs	r2, r0
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <GrowShrinkCube_Handle+0x260>)
 800474e:	601a      	str	r2, [r3, #0]
				size_cube = TWO_X_TWO_CUBE;
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <GrowShrinkCube_Handle+0x25c>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
			break;
 8004756:	e007      	b.n	8004768 <GrowShrinkCube_Handle+0x248>
			break;
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	e006      	b.n	800476a <GrowShrinkCube_Handle+0x24a>
			break;
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	e004      	b.n	800476a <GrowShrinkCube_Handle+0x24a>
			break;
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	e002      	b.n	800476a <GrowShrinkCube_Handle+0x24a>
			break;
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	e000      	b.n	800476a <GrowShrinkCube_Handle+0x24a>
			break;
 8004768:	46c0      	nop			; (mov r8, r8)
	}
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b006      	add	sp, #24
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	20000184 	.word	0x20000184
 8004778:	200001a4 	.word	0x200001a4
 800477c:	2000017d 	.word	0x2000017d
 8004780:	20000180 	.word	0x20000180

08004784 <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <GrowShrinkCube_Set_State+0x58>)
 800478c:	2203      	movs	r2, #3
 800478e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8004790:	2300      	movs	r3, #0
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	e018      	b.n	80047c8 <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <GrowShrinkCube_Set_State+0x5c>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	18d3      	adds	r3, r2, r3
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80047a0:	2300      	movs	r3, #0
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	e00a      	b.n	80047bc <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 80047a6:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <GrowShrinkCube_Set_State+0x60>)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	18d2      	adds	r2, r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	18d3      	adds	r3, r2, r3
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b07      	cmp	r3, #7
 80047c0:	ddf1      	ble.n	80047a6 <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3301      	adds	r3, #1
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	dde3      	ble.n	8004796 <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <GrowShrinkCube_Set_State+0x64>)
 80047d0:	2203      	movs	r2, #3
 80047d2:	701a      	strb	r2, [r3, #0]
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000010 	.word	0x20000010
 80047e0:	200001a4 	.word	0x200001a4
 80047e4:	20000184 	.word	0x20000184
 80047e8:	2000017d 	.word	0x2000017d

080047ec <Btn_press_Callback>:
#include "led_cube_handle.h"

Cube_Status currentEffect = SPIRAL_CUBE;

void Btn_press_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	000a      	movs	r2, r1
 80047f6:	1cbb      	adds	r3, r7, #2
 80047f8:	801a      	strh	r2, [r3, #0]
	switch(currentEffect){
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <Btn_press_Callback+0x60>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d81e      	bhi.n	8004840 <Btn_press_Callback+0x54>
 8004802:	009a      	lsls	r2, r3, #2
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <Btn_press_Callback+0x64>)
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	469f      	mov	pc, r3
	case TURN_OFF_ALL_LEDS:
		currentEffect = TURN_ON_ALL_LEDS;
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <Btn_press_Callback+0x60>)
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
		break;
 8004812:	e016      	b.n	8004842 <Btn_press_Callback+0x56>
	case TURN_ON_ALL_LEDS:
		PlaneCube_Set_State();
 8004814:	f000 f9fe 	bl	8004c14 <PlaneCube_Set_State>
		break;
 8004818:	e013      	b.n	8004842 <Btn_press_Callback+0x56>
	case SWEEP_ALL_LEDS:
		GrowShrinkCube_Set_State();
 800481a:	f7ff ffb3 	bl	8004784 <GrowShrinkCube_Set_State>
		break;
 800481e:	e010      	b.n	8004842 <Btn_press_Callback+0x56>
	case GROW_SHRINK_CUBE:
		DiagonalCube_Set_State();
 8004820:	f7ff fdaa 	bl	8004378 <DiagonalCube_Set_State>
		break;
 8004824:	e00d      	b.n	8004842 <Btn_press_Callback+0x56>
	case DIAGONAL_CUBE:
		AroundEdgeCube_Set_State();
 8004826:	f7fe fe55 	bl	80034d4 <AroundEdgeCube_Set_State>
		break;
 800482a:	e00a      	b.n	8004842 <Btn_press_Callback+0x56>
	case AROUND_EDGE_CUBE:
		CountDownCube_Set_Sate();
 800482c:	f7ff f9ee 	bl	8003c0c <CountDownCube_Set_Sate>
		break;
 8004830:	e007      	b.n	8004842 <Btn_press_Callback+0x56>
	case COUNT_DOWN_CUBE:
		SpiralCube_Set_State();
 8004832:	f001 f845 	bl	80058c0 <SpiralCube_Set_State>
		break;
 8004836:	e004      	b.n	8004842 <Btn_press_Callback+0x56>
//	case RANDOM_RAIN_CUBE:
//		SpiralCube_Set_State();
		break;
	case SPIRAL_CUBE:
		currentEffect = TURN_OFF_ALL_LEDS;
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <Btn_press_Callback+0x60>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
		break;
 800483e:	e000      	b.n	8004842 <Btn_press_Callback+0x56>
	default:
		break;
 8004840:	46c0      	nop			; (mov r8, r8)
	}
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b002      	add	sp, #8
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	20000010 	.word	0x20000010
 8004850:	08005a3c 	.word	0x08005a3c

08004854 <Led_cube_Handle>:

void Led_cube_Handle(Cube_Status cube_state)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	0002      	movs	r2, r0
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	701a      	strb	r2, [r3, #0]
	switch (cube_state) {
 8004860:	1dfb      	adds	r3, r7, #7
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d81c      	bhi.n	80048a2 <Led_cube_Handle+0x4e>
 8004868:	009a      	lsls	r2, r3, #2
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <Led_cube_Handle+0x58>)
 800486c:	18d3      	adds	r3, r2, r3
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	469f      	mov	pc, r3
		case TURN_OFF_ALL_LEDS:
			clearCube();
 8004872:	f7fe ff12 	bl	800369a <clearCube>
			break;
 8004876:	e015      	b.n	80048a4 <Led_cube_Handle+0x50>
		case TURN_ON_ALL_LEDS:
			lightCube();
 8004878:	f000 f81a 	bl	80048b0 <lightCube>
			break;
 800487c:	e012      	b.n	80048a4 <Led_cube_Handle+0x50>
		case SWEEP_ALL_LEDS:
			PlaneCube_Handle();
 800487e:	f000 f843 	bl	8004908 <PlaneCube_Handle>
			break;
 8004882:	e00f      	b.n	80048a4 <Led_cube_Handle+0x50>
		case GROW_SHRINK_CUBE:
			GrowShrinkCube_Handle();
 8004884:	f7ff fe4c 	bl	8004520 <GrowShrinkCube_Handle>
			break;
 8004888:	e00c      	b.n	80048a4 <Led_cube_Handle+0x50>
		case DIAGONAL_CUBE:
			DiagonalCube_Handle();
 800488a:	f7ff fc69 	bl	8004160 <DiagonalCube_Handle>
			break;
 800488e:	e009      	b.n	80048a4 <Led_cube_Handle+0x50>
		case AROUND_EDGE_CUBE:
			AroundEdgeCube_Handle();
 8004890:	f7fe fdb4 	bl	80033fc <AroundEdgeCube_Handle>
			break;
 8004894:	e006      	b.n	80048a4 <Led_cube_Handle+0x50>
		case COUNT_DOWN_CUBE:
			CountDownCube_Handle();
 8004896:	f7fe ff21 	bl	80036dc <CountDownCube_Handle>
			break;
 800489a:	e003      	b.n	80048a4 <Led_cube_Handle+0x50>
//		case RANDOM_RAIN_CUBE:
//			RandomRainCube_Handle(4);
			break;
		case SPIRAL_CUBE:
			SpiralCube_Handle();
 800489c:	f000 f9ea 	bl	8004c74 <SpiralCube_Handle>
			break;
 80048a0:	e000      	b.n	80048a4 <Led_cube_Handle+0x50>
		default:
			break;
 80048a2:	46c0      	nop			; (mov r8, r8)
	}
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	08005a60 	.word	0x08005a60

080048b0 <lightCube>:
#include "light_cube.h"

void lightCube()
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	for (int i = 0;  i < 8; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e01d      	b.n	80048f8 <lightCube+0x48>
	{
		for (int j = 0; j < 8; j++)
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	e007      	b.n	80048d2 <lightCube+0x22>
		{
			column[i] = 0xff;
 80048c2:	1d3a      	adds	r2, r7, #4
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	18d3      	adds	r3, r2, r3
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3301      	adds	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b07      	cmp	r3, #7
 80048d6:	ddf4      	ble.n	80048c2 <lightCube+0x12>
		}
		layer = 0x80 >> i;
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	411a      	asrs	r2, r3
 80048de:	210f      	movs	r1, #15
 80048e0:	187b      	adds	r3, r7, r1
 80048e2:	701a      	strb	r2, [r3, #0]
		TransmitData(column, layer);
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	0011      	movs	r1, r2
 80048ec:	0018      	movs	r0, r3
 80048ee:	f001 f801 	bl	80058f4 <TransmitData>
	for (int i = 0;  i < 8; i++)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	3301      	adds	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b07      	cmp	r3, #7
 80048fc:	ddde      	ble.n	80048bc <lightCube+0xc>
	}
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b006      	add	sp, #24
 8004906:	bd80      	pop	{r7, pc}

08004908 <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(){
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
	switch(way_state){
 800490e:	4bbb      	ldr	r3, [pc, #748]	; (8004bfc <PlaneCube_Handle+0x2f4>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d100      	bne.n	8004918 <PlaneCube_Handle+0x10>
 8004916:	e100      	b.n	8004b1a <PlaneCube_Handle+0x212>
 8004918:	dd00      	ble.n	800491c <PlaneCube_Handle+0x14>
 800491a:	e164      	b.n	8004be6 <PlaneCube_Handle+0x2de>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <PlaneCube_Handle+0x1e>
 8004920:	2b01      	cmp	r3, #1
 8004922:	d06c      	beq.n	80049fe <PlaneCube_Handle+0xf6>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 8004924:	e15f      	b.n	8004be6 <PlaneCube_Handle+0x2de>
		layer_plane = 0xff;
 8004926:	4bb6      	ldr	r3, [pc, #728]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004928:	22ff      	movs	r2, #255	; 0xff
 800492a:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 800492c:	f7fb ff7c 	bl	8000828 <HAL_GetTick>
 8004930:	0002      	movs	r2, r0
 8004932:	4bb4      	ldr	r3, [pc, #720]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2264      	movs	r2, #100	; 0x64
 800493a:	4293      	cmp	r3, r2
 800493c:	d200      	bcs.n	8004940 <PlaneCube_Handle+0x38>
 800493e:	e154      	b.n	8004bea <PlaneCube_Handle+0x2e2>
			if (way)
 8004940:	4bb1      	ldr	r3, [pc, #708]	; (8004c08 <PlaneCube_Handle+0x300>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d027      	beq.n	8004998 <PlaneCube_Handle+0x90>
				column_plane[i] = 0xff;
 8004948:	4bb0      	ldr	r3, [pc, #704]	; (8004c0c <PlaneCube_Handle+0x304>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4ab0      	ldr	r2, [pc, #704]	; (8004c10 <PlaneCube_Handle+0x308>)
 800494e:	21ff      	movs	r1, #255	; 0xff
 8004950:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8004952:	4bab      	ldr	r3, [pc, #684]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	4bae      	ldr	r3, [pc, #696]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004958:	0011      	movs	r1, r2
 800495a:	0018      	movs	r0, r3
 800495c:	f000 ffca 	bl	80058f4 <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 8004960:	4bab      	ldr	r3, [pc, #684]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004962:	79db      	ldrb	r3, [r3, #7]
 8004964:	2bff      	cmp	r3, #255	; 0xff
 8004966:	d103      	bne.n	8004970 <PlaneCube_Handle+0x68>
 8004968:	4ba7      	ldr	r3, [pc, #668]	; (8004c08 <PlaneCube_Handle+0x300>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e004      	b.n	800497a <PlaneCube_Handle+0x72>
				else i++;
 8004970:	4ba6      	ldr	r3, [pc, #664]	; (8004c0c <PlaneCube_Handle+0x304>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	4ba5      	ldr	r3, [pc, #660]	; (8004c0c <PlaneCube_Handle+0x304>)
 8004978:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e007      	b.n	8004990 <PlaneCube_Handle+0x88>
					column_plane[j] = 0;
 8004980:	4aa3      	ldr	r2, [pc, #652]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	18d3      	adds	r3, r2, r3
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3301      	adds	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b07      	cmp	r3, #7
 8004994:	ddf4      	ble.n	8004980 <PlaneCube_Handle+0x78>
 8004996:	e02c      	b.n	80049f2 <PlaneCube_Handle+0xea>
				column_plane[i] = 0xff;
 8004998:	4b9c      	ldr	r3, [pc, #624]	; (8004c0c <PlaneCube_Handle+0x304>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a9c      	ldr	r2, [pc, #624]	; (8004c10 <PlaneCube_Handle+0x308>)
 800499e:	21ff      	movs	r1, #255	; 0xff
 80049a0:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 80049a2:	4b97      	ldr	r3, [pc, #604]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	4b9a      	ldr	r3, [pc, #616]	; (8004c10 <PlaneCube_Handle+0x308>)
 80049a8:	0011      	movs	r1, r2
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 ffa2 	bl	80058f4 <TransmitData>
				if (column_plane[0] == 0xff)
 80049b0:	4b97      	ldr	r3, [pc, #604]	; (8004c10 <PlaneCube_Handle+0x308>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2bff      	cmp	r3, #255	; 0xff
 80049b6:	d109      	bne.n	80049cc <PlaneCube_Handle+0xc4>
						way = 1;
 80049b8:	4b93      	ldr	r3, [pc, #588]	; (8004c08 <PlaneCube_Handle+0x300>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
						i = 0;
 80049be:	4b93      	ldr	r3, [pc, #588]	; (8004c0c <PlaneCube_Handle+0x304>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
						way_state = OY;
 80049c4:	4b8d      	ldr	r3, [pc, #564]	; (8004bfc <PlaneCube_Handle+0x2f4>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	e004      	b.n	80049d6 <PlaneCube_Handle+0xce>
				else i--;
 80049cc:	4b8f      	ldr	r3, [pc, #572]	; (8004c0c <PlaneCube_Handle+0x304>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	4b8e      	ldr	r3, [pc, #568]	; (8004c0c <PlaneCube_Handle+0x304>)
 80049d4:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e007      	b.n	80049ec <PlaneCube_Handle+0xe4>
					column_plane[j] = 0;
 80049dc:	4a8c      	ldr	r2, [pc, #560]	; (8004c10 <PlaneCube_Handle+0x308>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	18d3      	adds	r3, r2, r3
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b07      	cmp	r3, #7
 80049f0:	ddf4      	ble.n	80049dc <PlaneCube_Handle+0xd4>
			timer = HAL_GetTick();
 80049f2:	f7fb ff19 	bl	8000828 <HAL_GetTick>
 80049f6:	0002      	movs	r2, r0
 80049f8:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 80049fa:	601a      	str	r2, [r3, #0]
		break;
 80049fc:	e0f5      	b.n	8004bea <PlaneCube_Handle+0x2e2>
		layer_plane = 0xff;
 80049fe:	4b80      	ldr	r3, [pc, #512]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004a00:	22ff      	movs	r2, #255	; 0xff
 8004a02:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 8004a04:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d119      	bne.n	8004a40 <PlaneCube_Handle+0x138>
			for (int j = 0; j < 8; j++)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e007      	b.n	8004a22 <PlaneCube_Handle+0x11a>
				column_plane[j] = 1;
 8004a12:	4a7f      	ldr	r2, [pc, #508]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	18d3      	adds	r3, r2, r3
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b07      	cmp	r3, #7
 8004a26:	ddf4      	ble.n	8004a12 <PlaneCube_Handle+0x10a>
			TransmitData(column_plane, layer_plane);
 8004a28:	4b75      	ldr	r3, [pc, #468]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	4b78      	ldr	r3, [pc, #480]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 ff5f 	bl	80058f4 <TransmitData>
			timer = HAL_GetTick();
 8004a36:	f7fb fef7 	bl	8000828 <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	4b71      	ldr	r3, [pc, #452]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 8004a3e:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004a40:	f7fb fef2 	bl	8000828 <HAL_GetTick>
 8004a44:	0002      	movs	r2, r0
 8004a46:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2264      	movs	r2, #100	; 0x64
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d200      	bcs.n	8004a54 <PlaneCube_Handle+0x14c>
 8004a52:	e0cc      	b.n	8004bee <PlaneCube_Handle+0x2e6>
			if (way)
 8004a54:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <PlaneCube_Handle+0x300>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d022      	beq.n	8004aa2 <PlaneCube_Handle+0x19a>
				for (int j = 0; j < 8; j++)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e00d      	b.n	8004a7e <PlaneCube_Handle+0x176>
					column_plane[j] <<= 1;
 8004a62:	4a6b      	ldr	r2, [pc, #428]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	18d3      	adds	r3, r2, r3
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	18db      	adds	r3, r3, r3
 8004a6c:	b2d9      	uxtb	r1, r3
 8004a6e:	4a68      	ldr	r2, [pc, #416]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	18d3      	adds	r3, r2, r3
 8004a74:	1c0a      	adds	r2, r1, #0
 8004a76:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b07      	cmp	r3, #7
 8004a82:	ddee      	ble.n	8004a62 <PlaneCube_Handle+0x15a>
				TransmitData(column_plane, layer_plane);
 8004a84:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004a86:	781a      	ldrb	r2, [r3, #0]
 8004a88:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004a8a:	0011      	movs	r1, r2
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 ff31 	bl	80058f4 <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 8004a92:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d139      	bne.n	8004b0e <PlaneCube_Handle+0x206>
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	; (8004c08 <PlaneCube_Handle+0x300>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e035      	b.n	8004b0e <PlaneCube_Handle+0x206>
				for (int j = 0; j < 8; j++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e00d      	b.n	8004ac4 <PlaneCube_Handle+0x1bc>
					column_plane[j] >>= 1;
 8004aa8:	4a59      	ldr	r2, [pc, #356]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	18d3      	adds	r3, r2, r3
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	b2d9      	uxtb	r1, r3
 8004ab4:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	18d3      	adds	r3, r2, r3
 8004aba:	1c0a      	adds	r2, r1, #0
 8004abc:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b07      	cmp	r3, #7
 8004ac8:	ddee      	ble.n	8004aa8 <PlaneCube_Handle+0x1a0>
				TransmitData(column_plane, layer_plane);
 8004aca:	4b4d      	ldr	r3, [pc, #308]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 ff0e 	bl	80058f4 <TransmitData>
				if (column_plane[0] == 0x00)
 8004ad8:	4b4d      	ldr	r3, [pc, #308]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <PlaneCube_Handle+0x206>
					for (int j = 0; j < 8; j++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	e007      	b.n	8004af6 <PlaneCube_Handle+0x1ee>
						column_plane[j] = 0xff;
 8004ae6:	4a4a      	ldr	r2, [pc, #296]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	18d3      	adds	r3, r2, r3
 8004aec:	22ff      	movs	r2, #255	; 0xff
 8004aee:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b07      	cmp	r3, #7
 8004afa:	ddf4      	ble.n	8004ae6 <PlaneCube_Handle+0x1de>
					layer_plane = 0;
 8004afc:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
					way = 1;
 8004b02:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <PlaneCube_Handle+0x300>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8004b08:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <PlaneCube_Handle+0x2f4>)
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8004b0e:	f7fb fe8b 	bl	8000828 <HAL_GetTick>
 8004b12:	0002      	movs	r2, r0
 8004b14:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 8004b16:	601a      	str	r2, [r3, #0]
		break;
 8004b18:	e069      	b.n	8004bee <PlaneCube_Handle+0x2e6>
		if(layer_plane == 0)
 8004b1a:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <PlaneCube_Handle+0x238>
			layer_plane = 1;
 8004b22:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane);
 8004b28:	4b35      	ldr	r3, [pc, #212]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004b2e:	0011      	movs	r1, r2
 8004b30:	0018      	movs	r0, r3
 8004b32:	f000 fedf 	bl	80058f4 <TransmitData>
			timer = HAL_GetTick();
 8004b36:	f7fb fe77 	bl	8000828 <HAL_GetTick>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 8004b3e:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8004b40:	f7fb fe72 	bl	8000828 <HAL_GetTick>
 8004b44:	0002      	movs	r2, r0
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2264      	movs	r2, #100	; 0x64
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d34f      	bcc.n	8004bf2 <PlaneCube_Handle+0x2ea>
			if(way)
 8004b52:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <PlaneCube_Handle+0x300>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d014      	beq.n	8004b84 <PlaneCube_Handle+0x27c>
				layer_plane <<= 1;
 8004b5a:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	18db      	adds	r3, r3, r3
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b64:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004b6c:	0011      	movs	r1, r2
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 fec0 	bl	80058f4 <TransmitData>
				if(layer_plane == 0x80) way = 0;
 8004b74:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b80      	cmp	r3, #128	; 0x80
 8004b7a:	d12e      	bne.n	8004bda <PlaneCube_Handle+0x2d2>
 8004b7c:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <PlaneCube_Handle+0x300>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e02a      	b.n	8004bda <PlaneCube_Handle+0x2d2>
				layer_plane >>= 1;
 8004b84:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b8e:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004b96:	0011      	movs	r1, r2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 feab 	bl	80058f4 <TransmitData>
				if(layer_plane == 0x01)
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d119      	bne.n	8004bda <PlaneCube_Handle+0x2d2>
					for (int j = 0; j < 8; j++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	e007      	b.n	8004bbc <PlaneCube_Handle+0x2b4>
						column_plane[j] = 0;
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <PlaneCube_Handle+0x308>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	18d3      	adds	r3, r2, r3
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	ddf4      	ble.n	8004bac <PlaneCube_Handle+0x2a4>
					i = 0;
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <PlaneCube_Handle+0x304>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
					way = 1;
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <PlaneCube_Handle+0x300>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <PlaneCube_Handle+0x2f4>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <PlaneCube_Handle+0x2f8>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8004bda:	f7fb fe25 	bl	8000828 <HAL_GetTick>
 8004bde:	0002      	movs	r2, r0
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <PlaneCube_Handle+0x2fc>)
 8004be2:	601a      	str	r2, [r3, #0]
		break;
 8004be4:	e005      	b.n	8004bf2 <PlaneCube_Handle+0x2ea>
		break;
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	e004      	b.n	8004bf4 <PlaneCube_Handle+0x2ec>
		break;
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	e002      	b.n	8004bf4 <PlaneCube_Handle+0x2ec>
		break;
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	e000      	b.n	8004bf4 <PlaneCube_Handle+0x2ec>
		break;
 8004bf2:	46c0      	nop			; (mov r8, r8)
	}
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b008      	add	sp, #32
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200001a8 	.word	0x200001a8
 8004c00:	200001b0 	.word	0x200001b0
 8004c04:	200001ac 	.word	0x200001ac
 8004c08:	200001a9 	.word	0x200001a9
 8004c0c:	200001bc 	.word	0x200001bc
 8004c10:	200001b4 	.word	0x200001b4

08004c14 <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <PlaneCube_Set_State+0x48>)
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	e007      	b.n	8004c36 <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 8004c26:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <PlaneCube_Set_State+0x4c>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	18d3      	adds	r3, r2, r3
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3301      	adds	r3, #1
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b07      	cmp	r3, #7
 8004c3a:	ddf4      	ble.n	8004c26 <PlaneCube_Set_State+0x12>
	}
	i = 0;
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <PlaneCube_Set_State+0x50>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
	way = 1;
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <PlaneCube_Set_State+0x54>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 8004c48:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <PlaneCube_Set_State+0x58>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <PlaneCube_Set_State+0x5c>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000010 	.word	0x20000010
 8004c60:	200001b4 	.word	0x200001b4
 8004c64:	200001bc 	.word	0x200001bc
 8004c68:	200001a9 	.word	0x200001a9
 8004c6c:	200001b0 	.word	0x200001b0
 8004c70:	200001a8 	.word	0x200001a8

08004c74 <SpiralCube_Handle>:
const uint8_t z = 8;
const uint32_t timePerColumn = 60;
uint32_t timeStart = 0;

void SpiralCube_Handle()
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	switch (directRotate) {
 8004c78:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <SpiralCube_Handle+0x84>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01c      	beq.n	8004cba <SpiralCube_Handle+0x46>
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d135      	bne.n	8004cf0 <SpiralCube_Handle+0x7c>
		case COUNTER_CLOCKWISE:
			switch (rollSize)
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <SpiralCube_Handle+0x88>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d011      	beq.n	8004cb0 <SpiralCube_Handle+0x3c>
 8004c8c:	dc13      	bgt.n	8004cb6 <SpiralCube_Handle+0x42>
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d00b      	beq.n	8004caa <SpiralCube_Handle+0x36>
 8004c92:	dc10      	bgt.n	8004cb6 <SpiralCube_Handle+0x42>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <SpiralCube_Handle+0x2a>
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d003      	beq.n	8004ca4 <SpiralCube_Handle+0x30>
					break;
				case ROLL_SMALL:
					RollSmallCounterClockWise_Handle();
					break;
				default:
					break;
 8004c9c:	e00b      	b.n	8004cb6 <SpiralCube_Handle+0x42>
					RollBiggestCounterClockWise_Handle();
 8004c9e:	f000 f82f 	bl	8004d00 <RollBiggestCounterClockWise_Handle>
					break;
 8004ca2:	e009      	b.n	8004cb8 <SpiralCube_Handle+0x44>
					RollBiggerCounterClockWise_Handle();
 8004ca4:	f000 f8f6 	bl	8004e94 <RollBiggerCounterClockWise_Handle>
					break;
 8004ca8:	e006      	b.n	8004cb8 <SpiralCube_Handle+0x44>
					RollMediumCounterClockWise_Handle();
 8004caa:	f000 f9bd 	bl	8005028 <RollMediumCounterClockWise_Handle>
					break;
 8004cae:	e003      	b.n	8004cb8 <SpiralCube_Handle+0x44>
					RollSmallCounterClockWise_Handle();
 8004cb0:	f000 fa84 	bl	80051bc <RollSmallCounterClockWise_Handle>
					break;
 8004cb4:	e000      	b.n	8004cb8 <SpiralCube_Handle+0x44>
					break;
 8004cb6:	46c0      	nop			; (mov r8, r8)
			}
			break;
 8004cb8:	e01b      	b.n	8004cf2 <SpiralCube_Handle+0x7e>
		case CLOCKWISE:
			switch (rollSize)
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <SpiralCube_Handle+0x88>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d011      	beq.n	8004ce6 <SpiralCube_Handle+0x72>
 8004cc2:	dc13      	bgt.n	8004cec <SpiralCube_Handle+0x78>
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d00b      	beq.n	8004ce0 <SpiralCube_Handle+0x6c>
 8004cc8:	dc10      	bgt.n	8004cec <SpiralCube_Handle+0x78>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <SpiralCube_Handle+0x60>
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d003      	beq.n	8004cda <SpiralCube_Handle+0x66>
					break;
				case ROLL_SMALL:
					RollSmallClockWise_Handle();
					break;
				default:
					break;
 8004cd2:	e00b      	b.n	8004cec <SpiralCube_Handle+0x78>
					RollBiggestClockWise_Handle();
 8004cd4:	f000 fb12 	bl	80052fc <RollBiggestClockWise_Handle>
					break;
 8004cd8:	e009      	b.n	8004cee <SpiralCube_Handle+0x7a>
					RollBiggerClockWise_Handle();
 8004cda:	f000 fbcf 	bl	800547c <RollBiggerClockWise_Handle>
					break;
 8004cde:	e006      	b.n	8004cee <SpiralCube_Handle+0x7a>
					RollMediumClockWise_Handle();
 8004ce0:	f000 fc8c 	bl	80055fc <RollMediumClockWise_Handle>
					break;
 8004ce4:	e003      	b.n	8004cee <SpiralCube_Handle+0x7a>
					RollSmallClockWise_Handle();
 8004ce6:	f000 fd49 	bl	800577c <RollSmallClockWise_Handle>
					break;
 8004cea:	e000      	b.n	8004cee <SpiralCube_Handle+0x7a>
					break;
 8004cec:	46c0      	nop			; (mov r8, r8)
			}
			break;
 8004cee:	e000      	b.n	8004cf2 <SpiralCube_Handle+0x7e>
		default:
			break;
 8004cf0:	46c0      	nop			; (mov r8, r8)
	}
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	200001c2 	.word	0x200001c2
 8004cfc:	200001c0 	.word	0x200001c0

08004d00 <RollBiggestCounterClockWise_Handle>:

void RollBiggestCounterClockWise_Handle()
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
	switch (axisDirection)
 8004d04:	4b5e      	ldr	r3, [pc, #376]	; (8004e80 <RollBiggestCounterClockWise_Handle+0x180>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d100      	bne.n	8004d0e <RollBiggestCounterClockWise_Handle+0xe>
 8004d0c:	e081      	b.n	8004e12 <RollBiggestCounterClockWise_Handle+0x112>
 8004d0e:	dd00      	ble.n	8004d12 <RollBiggestCounterClockWise_Handle+0x12>
 8004d10:	e0a9      	b.n	8004e66 <RollBiggestCounterClockWise_Handle+0x166>
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d056      	beq.n	8004dc4 <RollBiggestCounterClockWise_Handle+0xc4>
 8004d16:	dd00      	ble.n	8004d1a <RollBiggestCounterClockWise_Handle+0x1a>
 8004d18:	e0a5      	b.n	8004e66 <RollBiggestCounterClockWise_Handle+0x166>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <RollBiggestCounterClockWise_Handle+0x24>
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d028      	beq.n	8004d74 <RollBiggestCounterClockWise_Handle+0x74>
				else x--;
				timeStart = HAL_GetTick();
			}
			break;
		default:
			break;
 8004d22:	e0a0      	b.n	8004e66 <RollBiggestCounterClockWise_Handle+0x166>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004d24:	f7fb fd80 	bl	8000828 <HAL_GetTick>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	223c      	movs	r2, #60	; 0x3c
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d200      	bcs.n	8004d38 <RollBiggestCounterClockWise_Handle+0x38>
 8004d36:	e098      	b.n	8004e6a <RollBiggestCounterClockWise_Handle+0x16a>
				DisplayLed(0, y, z, 1);
 8004d38:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004d3a:	7819      	ldrb	r1, [r3, #0]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	2301      	movs	r3, #1
 8004d40:	2000      	movs	r0, #0
 8004d42:	f7ff fb3f 	bl	80043c4 <DisplayLed>
				if (y == 0)
 8004d46:	4b50      	ldr	r3, [pc, #320]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <RollBiggestCounterClockWise_Handle+0x5c>
					x = 1;
 8004d4e:	4b4f      	ldr	r3, [pc, #316]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGER;
 8004d54:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <RollBiggestCounterClockWise_Handle+0x190>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e005      	b.n	8004d68 <RollBiggestCounterClockWise_Handle+0x68>
				else y--;
 8004d5c:	4b4a      	ldr	r3, [pc, #296]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	4b48      	ldr	r3, [pc, #288]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004d66:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004d68:	f7fb fd5e 	bl	8000828 <HAL_GetTick>
 8004d6c:	0002      	movs	r2, r0
 8004d6e:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004d70:	601a      	str	r2, [r3, #0]
			break;
 8004d72:	e07a      	b.n	8004e6a <RollBiggestCounterClockWise_Handle+0x16a>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004d74:	f7fb fd58 	bl	8000828 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	223c      	movs	r2, #60	; 0x3c
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d200      	bcs.n	8004d88 <RollBiggestCounterClockWise_Handle+0x88>
 8004d86:	e072      	b.n	8004e6e <RollBiggestCounterClockWise_Handle+0x16e>
				DisplayLed(x, 0, z, 1);
 8004d88:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004d8a:	7818      	ldrb	r0, [r3, #0]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	2301      	movs	r3, #1
 8004d90:	2100      	movs	r1, #0
 8004d92:	f7ff fb17 	bl	80043c4 <DisplayLed>
				if (x == 7)
 8004d96:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b07      	cmp	r3, #7
 8004d9c:	d106      	bne.n	8004dac <RollBiggestCounterClockWise_Handle+0xac>
					axisDirection = Y_AXIS_2;
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <RollBiggestCounterClockWise_Handle+0x180>)
 8004da0:	2202      	movs	r2, #2
 8004da2:	701a      	strb	r2, [r3, #0]
					y = 0;
 8004da4:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e005      	b.n	8004db8 <RollBiggestCounterClockWise_Handle+0xb8>
				else x++;
 8004dac:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	4b35      	ldr	r3, [pc, #212]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004db6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004db8:	f7fb fd36 	bl	8000828 <HAL_GetTick>
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004dc0:	601a      	str	r2, [r3, #0]
			break;
 8004dc2:	e054      	b.n	8004e6e <RollBiggestCounterClockWise_Handle+0x16e>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004dc4:	f7fb fd30 	bl	8000828 <HAL_GetTick>
 8004dc8:	0002      	movs	r2, r0
 8004dca:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	223c      	movs	r2, #60	; 0x3c
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d34d      	bcc.n	8004e72 <RollBiggestCounterClockWise_Handle+0x172>
				DisplayLed(7, y, z, 1);
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004dd8:	7819      	ldrb	r1, [r3, #0]
 8004dda:	2208      	movs	r2, #8
 8004ddc:	2301      	movs	r3, #1
 8004dde:	2007      	movs	r0, #7
 8004de0:	f7ff faf0 	bl	80043c4 <DisplayLed>
				if (y == 7)
 8004de4:	4b28      	ldr	r3, [pc, #160]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b07      	cmp	r3, #7
 8004dea:	d106      	bne.n	8004dfa <RollBiggestCounterClockWise_Handle+0xfa>
					axisDirection = X_AXIS_2;
 8004dec:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <RollBiggestCounterClockWise_Handle+0x180>)
 8004dee:	2203      	movs	r2, #3
 8004df0:	701a      	strb	r2, [r3, #0]
					x = 7;
 8004df2:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004df4:	2207      	movs	r2, #7
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e005      	b.n	8004e06 <RollBiggestCounterClockWise_Handle+0x106>
				else y++;
 8004dfa:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	4b21      	ldr	r3, [pc, #132]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004e04:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004e06:	f7fb fd0f 	bl	8000828 <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004e0e:	601a      	str	r2, [r3, #0]
			break;
 8004e10:	e02f      	b.n	8004e72 <RollBiggestCounterClockWise_Handle+0x172>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004e12:	f7fb fd09 	bl	8000828 <HAL_GetTick>
 8004e16:	0002      	movs	r2, r0
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	223c      	movs	r2, #60	; 0x3c
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d328      	bcc.n	8004e76 <RollBiggestCounterClockWise_Handle+0x176>
				DisplayLed(x, 7, z, 1);
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004e26:	7818      	ldrb	r0, [r3, #0]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2107      	movs	r1, #7
 8004e2e:	f7ff fac9 	bl	80043c4 <DisplayLed>
				if (x == 1)
 8004e32:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d109      	bne.n	8004e4e <RollBiggestCounterClockWise_Handle+0x14e>
					axisDirection = Y_AXIS_1;
 8004e3a:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <RollBiggestCounterClockWise_Handle+0x180>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGER;
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <RollBiggestCounterClockWise_Handle+0x190>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
					y = 7;
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <RollBiggestCounterClockWise_Handle+0x188>)
 8004e48:	2207      	movs	r2, #7
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	e005      	b.n	8004e5a <RollBiggestCounterClockWise_Handle+0x15a>
				else x--;
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <RollBiggestCounterClockWise_Handle+0x18c>)
 8004e58:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004e5a:	f7fb fce5 	bl	8000828 <HAL_GetTick>
 8004e5e:	0002      	movs	r2, r0
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <RollBiggestCounterClockWise_Handle+0x184>)
 8004e62:	601a      	str	r2, [r3, #0]
			break;
 8004e64:	e007      	b.n	8004e76 <RollBiggestCounterClockWise_Handle+0x176>
			break;
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	e006      	b.n	8004e78 <RollBiggestCounterClockWise_Handle+0x178>
			break;
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	e004      	b.n	8004e78 <RollBiggestCounterClockWise_Handle+0x178>
			break;
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	e002      	b.n	8004e78 <RollBiggestCounterClockWise_Handle+0x178>
			break;
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	e000      	b.n	8004e78 <RollBiggestCounterClockWise_Handle+0x178>
			break;
 8004e76:	46c0      	nop			; (mov r8, r8)
	}
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	200001c1 	.word	0x200001c1
 8004e84:	200001c8 	.word	0x200001c8
 8004e88:	200001c5 	.word	0x200001c5
 8004e8c:	200001c4 	.word	0x200001c4
 8004e90:	200001c0 	.word	0x200001c0

08004e94 <RollBiggerCounterClockWise_Handle>:

void RollBiggerCounterClockWise_Handle()
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	switch (axisDirection)
 8004e98:	4b5e      	ldr	r3, [pc, #376]	; (8005014 <RollBiggerCounterClockWise_Handle+0x180>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d100      	bne.n	8004ea2 <RollBiggerCounterClockWise_Handle+0xe>
 8004ea0:	e081      	b.n	8004fa6 <RollBiggerCounterClockWise_Handle+0x112>
 8004ea2:	dd00      	ble.n	8004ea6 <RollBiggerCounterClockWise_Handle+0x12>
 8004ea4:	e0a9      	b.n	8004ffa <RollBiggerCounterClockWise_Handle+0x166>
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d056      	beq.n	8004f58 <RollBiggerCounterClockWise_Handle+0xc4>
 8004eaa:	dd00      	ble.n	8004eae <RollBiggerCounterClockWise_Handle+0x1a>
 8004eac:	e0a5      	b.n	8004ffa <RollBiggerCounterClockWise_Handle+0x166>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <RollBiggerCounterClockWise_Handle+0x24>
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d028      	beq.n	8004f08 <RollBiggerCounterClockWise_Handle+0x74>
				else x--;
				timeStart = HAL_GetTick();
			}
			break;
		default:
			break;
 8004eb6:	e0a0      	b.n	8004ffa <RollBiggerCounterClockWise_Handle+0x166>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004eb8:	f7fb fcb6 	bl	8000828 <HAL_GetTick>
 8004ebc:	0002      	movs	r2, r0
 8004ebe:	4b56      	ldr	r3, [pc, #344]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	223c      	movs	r2, #60	; 0x3c
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d200      	bcs.n	8004ecc <RollBiggerCounterClockWise_Handle+0x38>
 8004eca:	e098      	b.n	8004ffe <RollBiggerCounterClockWise_Handle+0x16a>
				DisplayLed(1, y, z, 1);
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004ece:	7819      	ldrb	r1, [r3, #0]
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	f7ff fa75 	bl	80043c4 <DisplayLed>
				if (y  == 1)
 8004eda:	4b50      	ldr	r3, [pc, #320]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d106      	bne.n	8004ef0 <RollBiggerCounterClockWise_Handle+0x5c>
					x = 1;
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_1;
 8004ee8:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <RollBiggerCounterClockWise_Handle+0x180>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e005      	b.n	8004efc <RollBiggerCounterClockWise_Handle+0x68>
				else y--;
 8004ef0:	4b4a      	ldr	r3, [pc, #296]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	4b48      	ldr	r3, [pc, #288]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004efa:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004efc:	f7fb fc94 	bl	8000828 <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	4b45      	ldr	r3, [pc, #276]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004f04:	601a      	str	r2, [r3, #0]
			break;
 8004f06:	e07a      	b.n	8004ffe <RollBiggerCounterClockWise_Handle+0x16a>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004f08:	f7fb fc8e 	bl	8000828 <HAL_GetTick>
 8004f0c:	0002      	movs	r2, r0
 8004f0e:	4b42      	ldr	r3, [pc, #264]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	223c      	movs	r2, #60	; 0x3c
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d200      	bcs.n	8004f1c <RollBiggerCounterClockWise_Handle+0x88>
 8004f1a:	e072      	b.n	8005002 <RollBiggerCounterClockWise_Handle+0x16e>
				DisplayLed(x, 1, z, 1);
 8004f1c:	4b40      	ldr	r3, [pc, #256]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004f1e:	7818      	ldrb	r0, [r3, #0]
 8004f20:	2208      	movs	r2, #8
 8004f22:	2301      	movs	r3, #1
 8004f24:	2101      	movs	r1, #1
 8004f26:	f7ff fa4d 	bl	80043c4 <DisplayLed>
				if (x  == 1)
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d106      	bne.n	8004f40 <RollBiggerCounterClockWise_Handle+0xac>
					y = 1;
 8004f32:	4b3a      	ldr	r3, [pc, #232]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_2;
 8004f38:	4b36      	ldr	r3, [pc, #216]	; (8005014 <RollBiggerCounterClockWise_Handle+0x180>)
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e005      	b.n	8004f4c <RollBiggerCounterClockWise_Handle+0xb8>
				else x++;
 8004f40:	4b37      	ldr	r3, [pc, #220]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b35      	ldr	r3, [pc, #212]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004f4a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004f4c:	f7fb fc6c 	bl	8000828 <HAL_GetTick>
 8004f50:	0002      	movs	r2, r0
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004f54:	601a      	str	r2, [r3, #0]
			break;
 8004f56:	e054      	b.n	8005002 <RollBiggerCounterClockWise_Handle+0x16e>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004f58:	f7fb fc66 	bl	8000828 <HAL_GetTick>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	223c      	movs	r2, #60	; 0x3c
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d34d      	bcc.n	8005006 <RollBiggerCounterClockWise_Handle+0x172>
				DisplayLed(6, y, z, 1);
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004f6c:	7819      	ldrb	r1, [r3, #0]
 8004f6e:	2208      	movs	r2, #8
 8004f70:	2301      	movs	r3, #1
 8004f72:	2006      	movs	r0, #6
 8004f74:	f7ff fa26 	bl	80043c4 <DisplayLed>
				if (y  == 6)
 8004f78:	4b28      	ldr	r3, [pc, #160]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b06      	cmp	r3, #6
 8004f7e:	d106      	bne.n	8004f8e <RollBiggerCounterClockWise_Handle+0xfa>
					x = 6;
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004f82:	2206      	movs	r2, #6
 8004f84:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_2;
 8004f86:	4b23      	ldr	r3, [pc, #140]	; (8005014 <RollBiggerCounterClockWise_Handle+0x180>)
 8004f88:	2203      	movs	r2, #3
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e005      	b.n	8004f9a <RollBiggerCounterClockWise_Handle+0x106>
				else y++;
 8004f8e:	4b23      	ldr	r3, [pc, #140]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004f98:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004f9a:	f7fb fc45 	bl	8000828 <HAL_GetTick>
 8004f9e:	0002      	movs	r2, r0
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004fa2:	601a      	str	r2, [r3, #0]
			break;
 8004fa4:	e02f      	b.n	8005006 <RollBiggerCounterClockWise_Handle+0x172>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8004fa6:	f7fb fc3f 	bl	8000828 <HAL_GetTick>
 8004faa:	0002      	movs	r2, r0
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	223c      	movs	r2, #60	; 0x3c
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d328      	bcc.n	800500a <RollBiggerCounterClockWise_Handle+0x176>
				DisplayLed(x, 6, z, 1);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004fba:	7818      	ldrb	r0, [r3, #0]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	2106      	movs	r1, #6
 8004fc2:	f7ff f9ff 	bl	80043c4 <DisplayLed>
				if (x  == 2)
 8004fc6:	4b16      	ldr	r3, [pc, #88]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d109      	bne.n	8004fe2 <RollBiggerCounterClockWise_Handle+0x14e>
					y = 6;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <RollBiggerCounterClockWise_Handle+0x188>)
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <RollBiggerCounterClockWise_Handle+0x180>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <RollBiggerCounterClockWise_Handle+0x190>)
 8004fdc:	2202      	movs	r2, #2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e005      	b.n	8004fee <RollBiggerCounterClockWise_Handle+0x15a>
				else x--;
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <RollBiggerCounterClockWise_Handle+0x18c>)
 8004fec:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8004fee:	f7fb fc1b 	bl	8000828 <HAL_GetTick>
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <RollBiggerCounterClockWise_Handle+0x184>)
 8004ff6:	601a      	str	r2, [r3, #0]
			break;
 8004ff8:	e007      	b.n	800500a <RollBiggerCounterClockWise_Handle+0x176>
			break;
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	e006      	b.n	800500c <RollBiggerCounterClockWise_Handle+0x178>
			break;
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	e004      	b.n	800500c <RollBiggerCounterClockWise_Handle+0x178>
			break;
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	e002      	b.n	800500c <RollBiggerCounterClockWise_Handle+0x178>
			break;
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	e000      	b.n	800500c <RollBiggerCounterClockWise_Handle+0x178>
			break;
 800500a:	46c0      	nop			; (mov r8, r8)
	}
}
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	200001c1 	.word	0x200001c1
 8005018:	200001c8 	.word	0x200001c8
 800501c:	200001c5 	.word	0x200001c5
 8005020:	200001c4 	.word	0x200001c4
 8005024:	200001c0 	.word	0x200001c0

08005028 <RollMediumCounterClockWise_Handle>:

void RollMediumCounterClockWise_Handle()
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 800502c:	4b5e      	ldr	r3, [pc, #376]	; (80051a8 <RollMediumCounterClockWise_Handle+0x180>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d100      	bne.n	8005036 <RollMediumCounterClockWise_Handle+0xe>
 8005034:	e081      	b.n	800513a <RollMediumCounterClockWise_Handle+0x112>
 8005036:	dd00      	ble.n	800503a <RollMediumCounterClockWise_Handle+0x12>
 8005038:	e0a9      	b.n	800518e <RollMediumCounterClockWise_Handle+0x166>
 800503a:	2b02      	cmp	r3, #2
 800503c:	d056      	beq.n	80050ec <RollMediumCounterClockWise_Handle+0xc4>
 800503e:	dd00      	ble.n	8005042 <RollMediumCounterClockWise_Handle+0x1a>
 8005040:	e0a5      	b.n	800518e <RollMediumCounterClockWise_Handle+0x166>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <RollMediumCounterClockWise_Handle+0x24>
 8005046:	2b01      	cmp	r3, #1
 8005048:	d028      	beq.n	800509c <RollMediumCounterClockWise_Handle+0x74>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 800504a:	e0a0      	b.n	800518e <RollMediumCounterClockWise_Handle+0x166>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800504c:	f7fb fbec 	bl	8000828 <HAL_GetTick>
 8005050:	0002      	movs	r2, r0
 8005052:	4b56      	ldr	r3, [pc, #344]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	223c      	movs	r2, #60	; 0x3c
 800505a:	4293      	cmp	r3, r2
 800505c:	d200      	bcs.n	8005060 <RollMediumCounterClockWise_Handle+0x38>
 800505e:	e098      	b.n	8005192 <RollMediumCounterClockWise_Handle+0x16a>
				DisplayLed(2, y, z, 1);
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 8005062:	7819      	ldrb	r1, [r3, #0]
 8005064:	2208      	movs	r2, #8
 8005066:	2301      	movs	r3, #1
 8005068:	2002      	movs	r0, #2
 800506a:	f7ff f9ab 	bl	80043c4 <DisplayLed>
				if (y == 2)
 800506e:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d106      	bne.n	8005084 <RollMediumCounterClockWise_Handle+0x5c>
					x = 2;
 8005076:	4b4f      	ldr	r3, [pc, #316]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 8005078:	2202      	movs	r2, #2
 800507a:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_1;
 800507c:	4b4a      	ldr	r3, [pc, #296]	; (80051a8 <RollMediumCounterClockWise_Handle+0x180>)
 800507e:	2201      	movs	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e005      	b.n	8005090 <RollMediumCounterClockWise_Handle+0x68>
				else y--;
 8005084:	4b4a      	ldr	r3, [pc, #296]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	3b01      	subs	r3, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	4b48      	ldr	r3, [pc, #288]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 800508e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005090:	f7fb fbca 	bl	8000828 <HAL_GetTick>
 8005094:	0002      	movs	r2, r0
 8005096:	4b45      	ldr	r3, [pc, #276]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 8005098:	601a      	str	r2, [r3, #0]
			break;
 800509a:	e07a      	b.n	8005192 <RollMediumCounterClockWise_Handle+0x16a>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800509c:	f7fb fbc4 	bl	8000828 <HAL_GetTick>
 80050a0:	0002      	movs	r2, r0
 80050a2:	4b42      	ldr	r3, [pc, #264]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	223c      	movs	r2, #60	; 0x3c
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d200      	bcs.n	80050b0 <RollMediumCounterClockWise_Handle+0x88>
 80050ae:	e072      	b.n	8005196 <RollMediumCounterClockWise_Handle+0x16e>
				DisplayLed(x, 2, z, 1);
 80050b0:	4b40      	ldr	r3, [pc, #256]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 80050b2:	7818      	ldrb	r0, [r3, #0]
 80050b4:	2208      	movs	r2, #8
 80050b6:	2301      	movs	r3, #1
 80050b8:	2102      	movs	r1, #2
 80050ba:	f7ff f983 	bl	80043c4 <DisplayLed>
				if (x  == 5)
 80050be:	4b3d      	ldr	r3, [pc, #244]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d106      	bne.n	80050d4 <RollMediumCounterClockWise_Handle+0xac>
					y = 2;
 80050c6:	4b3a      	ldr	r3, [pc, #232]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 80050c8:	2202      	movs	r2, #2
 80050ca:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_2;
 80050cc:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <RollMediumCounterClockWise_Handle+0x180>)
 80050ce:	2202      	movs	r2, #2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e005      	b.n	80050e0 <RollMediumCounterClockWise_Handle+0xb8>
				else x++;
 80050d4:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	4b35      	ldr	r3, [pc, #212]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 80050de:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80050e0:	f7fb fba2 	bl	8000828 <HAL_GetTick>
 80050e4:	0002      	movs	r2, r0
 80050e6:	4b31      	ldr	r3, [pc, #196]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 80050e8:	601a      	str	r2, [r3, #0]
			break;
 80050ea:	e054      	b.n	8005196 <RollMediumCounterClockWise_Handle+0x16e>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80050ec:	f7fb fb9c 	bl	8000828 <HAL_GetTick>
 80050f0:	0002      	movs	r2, r0
 80050f2:	4b2e      	ldr	r3, [pc, #184]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	223c      	movs	r2, #60	; 0x3c
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d34d      	bcc.n	800519a <RollMediumCounterClockWise_Handle+0x172>
				DisplayLed(5, y, z, 1);
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 8005100:	7819      	ldrb	r1, [r3, #0]
 8005102:	2208      	movs	r2, #8
 8005104:	2301      	movs	r3, #1
 8005106:	2005      	movs	r0, #5
 8005108:	f7ff f95c 	bl	80043c4 <DisplayLed>
				if (y == 5)
 800510c:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b05      	cmp	r3, #5
 8005112:	d106      	bne.n	8005122 <RollMediumCounterClockWise_Handle+0xfa>
					x = 5;
 8005114:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 8005116:	2205      	movs	r2, #5
 8005118:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_2;
 800511a:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <RollMediumCounterClockWise_Handle+0x180>)
 800511c:	2203      	movs	r2, #3
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e005      	b.n	800512e <RollMediumCounterClockWise_Handle+0x106>
				else y++;
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	b2da      	uxtb	r2, r3
 800512a:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 800512c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800512e:	f7fb fb7b 	bl	8000828 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 8005136:	601a      	str	r2, [r3, #0]
			break;
 8005138:	e02f      	b.n	800519a <RollMediumCounterClockWise_Handle+0x172>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800513a:	f7fb fb75 	bl	8000828 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	223c      	movs	r2, #60	; 0x3c
 8005148:	4293      	cmp	r3, r2
 800514a:	d328      	bcc.n	800519e <RollMediumCounterClockWise_Handle+0x176>
				DisplayLed(x, 5, z, 1);
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 800514e:	7818      	ldrb	r0, [r3, #0]
 8005150:	2208      	movs	r2, #8
 8005152:	2301      	movs	r3, #1
 8005154:	2105      	movs	r1, #5
 8005156:	f7ff f935 	bl	80043c4 <DisplayLed>
				if (x  == 3)
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d109      	bne.n	8005176 <RollMediumCounterClockWise_Handle+0x14e>
					y = 5;
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <RollMediumCounterClockWise_Handle+0x188>)
 8005164:	2205      	movs	r2, #5
 8005166:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <RollMediumCounterClockWise_Handle+0x180>)
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_SMALL;
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <RollMediumCounterClockWise_Handle+0x190>)
 8005170:	2203      	movs	r2, #3
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e005      	b.n	8005182 <RollMediumCounterClockWise_Handle+0x15a>
				else x--;
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	3b01      	subs	r3, #1
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <RollMediumCounterClockWise_Handle+0x18c>)
 8005180:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005182:	f7fb fb51 	bl	8000828 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	4b08      	ldr	r3, [pc, #32]	; (80051ac <RollMediumCounterClockWise_Handle+0x184>)
 800518a:	601a      	str	r2, [r3, #0]
			break;
 800518c:	e007      	b.n	800519e <RollMediumCounterClockWise_Handle+0x176>
			break;
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	e006      	b.n	80051a0 <RollMediumCounterClockWise_Handle+0x178>
			break;
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	e004      	b.n	80051a0 <RollMediumCounterClockWise_Handle+0x178>
			break;
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	e002      	b.n	80051a0 <RollMediumCounterClockWise_Handle+0x178>
			break;
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	e000      	b.n	80051a0 <RollMediumCounterClockWise_Handle+0x178>
			break;
 800519e:	46c0      	nop			; (mov r8, r8)
	}
}
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	200001c1 	.word	0x200001c1
 80051ac:	200001c8 	.word	0x200001c8
 80051b0:	200001c5 	.word	0x200001c5
 80051b4:	200001c4 	.word	0x200001c4
 80051b8:	200001c0 	.word	0x200001c0

080051bc <RollSmallCounterClockWise_Handle>:

void RollSmallCounterClockWise_Handle()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 80051c0:	4b49      	ldr	r3, [pc, #292]	; (80052e8 <RollSmallCounterClockWise_Handle+0x12c>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d055      	beq.n	8005274 <RollSmallCounterClockWise_Handle+0xb8>
 80051c8:	dd00      	ble.n	80051cc <RollSmallCounterClockWise_Handle+0x10>
 80051ca:	e082      	b.n	80052d2 <RollSmallCounterClockWise_Handle+0x116>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <RollSmallCounterClockWise_Handle+0x1a>
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d028      	beq.n	8005226 <RollSmallCounterClockWise_Handle+0x6a>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 80051d4:	e07d      	b.n	80052d2 <RollSmallCounterClockWise_Handle+0x116>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80051d6:	f7fb fb27 	bl	8000828 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	4b43      	ldr	r3, [pc, #268]	; (80052ec <RollSmallCounterClockWise_Handle+0x130>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	223c      	movs	r2, #60	; 0x3c
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d200      	bcs.n	80051ea <RollSmallCounterClockWise_Handle+0x2e>
 80051e8:	e075      	b.n	80052d6 <RollSmallCounterClockWise_Handle+0x11a>
				DisplayLed(3, y, z, 1);
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 80051ec:	7819      	ldrb	r1, [r3, #0]
 80051ee:	2208      	movs	r2, #8
 80051f0:	2301      	movs	r3, #1
 80051f2:	2003      	movs	r0, #3
 80051f4:	f7ff f8e6 	bl	80043c4 <DisplayLed>
				if (y == 3)
 80051f8:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d106      	bne.n	800520e <RollSmallCounterClockWise_Handle+0x52>
					x = 3;
 8005200:	4b3c      	ldr	r3, [pc, #240]	; (80052f4 <RollSmallCounterClockWise_Handle+0x138>)
 8005202:	2203      	movs	r2, #3
 8005204:	701a      	strb	r2, [r3, #0]
					axisDirection = X_AXIS_1;
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <RollSmallCounterClockWise_Handle+0x12c>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e005      	b.n	800521a <RollSmallCounterClockWise_Handle+0x5e>
				else y--;
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	3b01      	subs	r3, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 8005218:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800521a:	f7fb fb05 	bl	8000828 <HAL_GetTick>
 800521e:	0002      	movs	r2, r0
 8005220:	4b32      	ldr	r3, [pc, #200]	; (80052ec <RollSmallCounterClockWise_Handle+0x130>)
 8005222:	601a      	str	r2, [r3, #0]
			break;
 8005224:	e057      	b.n	80052d6 <RollSmallCounterClockWise_Handle+0x11a>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005226:	f7fb faff 	bl	8000828 <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <RollSmallCounterClockWise_Handle+0x130>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	223c      	movs	r2, #60	; 0x3c
 8005234:	4293      	cmp	r3, r2
 8005236:	d350      	bcc.n	80052da <RollSmallCounterClockWise_Handle+0x11e>
				DisplayLed(x, 3, z, 1);
 8005238:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <RollSmallCounterClockWise_Handle+0x138>)
 800523a:	7818      	ldrb	r0, [r3, #0]
 800523c:	2208      	movs	r2, #8
 800523e:	2301      	movs	r3, #1
 8005240:	2103      	movs	r1, #3
 8005242:	f7ff f8bf 	bl	80043c4 <DisplayLed>
				if (x  == 4)
 8005246:	4b2b      	ldr	r3, [pc, #172]	; (80052f4 <RollSmallCounterClockWise_Handle+0x138>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d106      	bne.n	800525c <RollSmallCounterClockWise_Handle+0xa0>
					y = 3;
 800524e:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 8005250:	2203      	movs	r2, #3
 8005252:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_2;
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <RollSmallCounterClockWise_Handle+0x12c>)
 8005256:	2202      	movs	r2, #2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e005      	b.n	8005268 <RollSmallCounterClockWise_Handle+0xac>
				else x++;
 800525c:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <RollSmallCounterClockWise_Handle+0x138>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <RollSmallCounterClockWise_Handle+0x138>)
 8005266:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005268:	f7fb fade 	bl	8000828 <HAL_GetTick>
 800526c:	0002      	movs	r2, r0
 800526e:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <RollSmallCounterClockWise_Handle+0x130>)
 8005270:	601a      	str	r2, [r3, #0]
			break;
 8005272:	e032      	b.n	80052da <RollSmallCounterClockWise_Handle+0x11e>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005274:	f7fb fad8 	bl	8000828 <HAL_GetTick>
 8005278:	0002      	movs	r2, r0
 800527a:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <RollSmallCounterClockWise_Handle+0x130>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	223c      	movs	r2, #60	; 0x3c
 8005282:	4293      	cmp	r3, r2
 8005284:	d32b      	bcc.n	80052de <RollSmallCounterClockWise_Handle+0x122>
				DisplayLed(4, y, z, 1);
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 8005288:	7819      	ldrb	r1, [r3, #0]
 800528a:	2208      	movs	r2, #8
 800528c:	2301      	movs	r3, #1
 800528e:	2004      	movs	r0, #4
 8005290:	f7ff f898 	bl	80043c4 <DisplayLed>
				if (y == 4)
 8005294:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d10e      	bne.n	80052ba <RollSmallCounterClockWise_Handle+0xfe>
					clearCube();
 800529c:	f7fe f9fd 	bl	800369a <clearCube>
					directRotate = CLOCKWISE;
 80052a0:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <RollSmallCounterClockWise_Handle+0x13c>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <RollSmallCounterClockWise_Handle+0x12c>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
					y = 0;
 80052ac:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
					x = 7;
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <RollSmallCounterClockWise_Handle+0x138>)
 80052b4:	2207      	movs	r2, #7
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e005      	b.n	80052c6 <RollSmallCounterClockWise_Handle+0x10a>
				else y++;
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <RollSmallCounterClockWise_Handle+0x134>)
 80052c4:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80052c6:	f7fb faaf 	bl	8000828 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <RollSmallCounterClockWise_Handle+0x130>)
 80052ce:	601a      	str	r2, [r3, #0]
			break;
 80052d0:	e005      	b.n	80052de <RollSmallCounterClockWise_Handle+0x122>
			break;
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	e004      	b.n	80052e0 <RollSmallCounterClockWise_Handle+0x124>
			break;
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	e002      	b.n	80052e0 <RollSmallCounterClockWise_Handle+0x124>
			break;
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	e000      	b.n	80052e0 <RollSmallCounterClockWise_Handle+0x124>
			break;
 80052de:	46c0      	nop			; (mov r8, r8)
	}
}
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	200001c1 	.word	0x200001c1
 80052ec:	200001c8 	.word	0x200001c8
 80052f0:	200001c5 	.word	0x200001c5
 80052f4:	200001c4 	.word	0x200001c4
 80052f8:	200001c2 	.word	0x200001c2

080052fc <RollBiggestClockWise_Handle>:

void RollBiggestClockWise_Handle()
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005300:	4b59      	ldr	r3, [pc, #356]	; (8005468 <RollBiggestClockWise_Handle+0x16c>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d100      	bne.n	800530a <RollBiggestClockWise_Handle+0xe>
 8005308:	e07a      	b.n	8005400 <RollBiggestClockWise_Handle+0x104>
 800530a:	dd00      	ble.n	800530e <RollBiggestClockWise_Handle+0x12>
 800530c:	e0a0      	b.n	8005450 <RollBiggestClockWise_Handle+0x154>
 800530e:	2b02      	cmp	r3, #2
 8005310:	d051      	beq.n	80053b6 <RollBiggestClockWise_Handle+0xba>
 8005312:	dd00      	ble.n	8005316 <RollBiggestClockWise_Handle+0x1a>
 8005314:	e09c      	b.n	8005450 <RollBiggestClockWise_Handle+0x154>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <RollBiggestClockWise_Handle+0x24>
 800531a:	2b01      	cmp	r3, #1
 800531c:	d026      	beq.n	800536c <RollBiggestClockWise_Handle+0x70>
				else x++;
				timeStart = HAL_GetTick();
			}
			break;
		default:
			break;
 800531e:	e097      	b.n	8005450 <RollBiggestClockWise_Handle+0x154>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005320:	f7fb fa82 	bl	8000828 <HAL_GetTick>
 8005324:	0002      	movs	r2, r0
 8005326:	4b51      	ldr	r3, [pc, #324]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	223c      	movs	r2, #60	; 0x3c
 800532e:	4293      	cmp	r3, r2
 8005330:	d200      	bcs.n	8005334 <RollBiggestClockWise_Handle+0x38>
 8005332:	e08f      	b.n	8005454 <RollBiggestClockWise_Handle+0x158>
				DisplayLed(x, y, z, 1);
 8005334:	4b4e      	ldr	r3, [pc, #312]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 8005336:	7818      	ldrb	r0, [r3, #0]
 8005338:	4b4e      	ldr	r3, [pc, #312]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 800533a:	7819      	ldrb	r1, [r3, #0]
 800533c:	2208      	movs	r2, #8
 800533e:	2301      	movs	r3, #1
 8005340:	f7ff f840 	bl	80043c4 <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 8005344:	4b4b      	ldr	r3, [pc, #300]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b07      	cmp	r3, #7
 800534a:	d103      	bne.n	8005354 <RollBiggestClockWise_Handle+0x58>
 800534c:	4b46      	ldr	r3, [pc, #280]	; (8005468 <RollBiggestClockWise_Handle+0x16c>)
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e005      	b.n	8005360 <RollBiggestClockWise_Handle+0x64>
				else y++;
 8005354:	4b47      	ldr	r3, [pc, #284]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	b2da      	uxtb	r2, r3
 800535c:	4b45      	ldr	r3, [pc, #276]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 800535e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005360:	f7fb fa62 	bl	8000828 <HAL_GetTick>
 8005364:	0002      	movs	r2, r0
 8005366:	4b41      	ldr	r3, [pc, #260]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 8005368:	601a      	str	r2, [r3, #0]
			break;
 800536a:	e073      	b.n	8005454 <RollBiggestClockWise_Handle+0x158>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 800536c:	f7fb fa5c 	bl	8000828 <HAL_GetTick>
 8005370:	0002      	movs	r2, r0
 8005372:	4b3e      	ldr	r3, [pc, #248]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	223c      	movs	r2, #60	; 0x3c
 800537a:	4293      	cmp	r3, r2
 800537c:	d36c      	bcc.n	8005458 <RollBiggestClockWise_Handle+0x15c>
				DisplayLed(x, y, z, 1);
 800537e:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 8005380:	7818      	ldrb	r0, [r3, #0]
 8005382:	4b3c      	ldr	r3, [pc, #240]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 8005384:	7819      	ldrb	r1, [r3, #0]
 8005386:	2208      	movs	r2, #8
 8005388:	2301      	movs	r3, #1
 800538a:	f7ff f81b 	bl	80043c4 <DisplayLed>
				if (x == 0) axisDirection = Y_AXIS_2;
 800538e:	4b38      	ldr	r3, [pc, #224]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <RollBiggestClockWise_Handle+0xa2>
 8005396:	4b34      	ldr	r3, [pc, #208]	; (8005468 <RollBiggestClockWise_Handle+0x16c>)
 8005398:	2202      	movs	r2, #2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e005      	b.n	80053aa <RollBiggestClockWise_Handle+0xae>
				else x--;
 800539e:	4b34      	ldr	r3, [pc, #208]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	4b32      	ldr	r3, [pc, #200]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 80053a8:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80053aa:	f7fb fa3d 	bl	8000828 <HAL_GetTick>
 80053ae:	0002      	movs	r2, r0
 80053b0:	4b2e      	ldr	r3, [pc, #184]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 80053b2:	601a      	str	r2, [r3, #0]
			break;
 80053b4:	e050      	b.n	8005458 <RollBiggestClockWise_Handle+0x15c>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80053b6:	f7fb fa37 	bl	8000828 <HAL_GetTick>
 80053ba:	0002      	movs	r2, r0
 80053bc:	4b2b      	ldr	r3, [pc, #172]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	223c      	movs	r2, #60	; 0x3c
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d349      	bcc.n	800545c <RollBiggestClockWise_Handle+0x160>
				DisplayLed(x, y, z, 1);
 80053c8:	4b29      	ldr	r3, [pc, #164]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 80053ca:	7818      	ldrb	r0, [r3, #0]
 80053cc:	4b29      	ldr	r3, [pc, #164]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 80053ce:	7819      	ldrb	r1, [r3, #0]
 80053d0:	2208      	movs	r2, #8
 80053d2:	2301      	movs	r3, #1
 80053d4:	f7fe fff6 	bl	80043c4 <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 80053d8:	4b26      	ldr	r3, [pc, #152]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <RollBiggestClockWise_Handle+0xec>
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <RollBiggestClockWise_Handle+0x16c>)
 80053e2:	2203      	movs	r2, #3
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e005      	b.n	80053f4 <RollBiggestClockWise_Handle+0xf8>
				else y--;
 80053e8:	4b22      	ldr	r3, [pc, #136]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4b20      	ldr	r3, [pc, #128]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 80053f2:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80053f4:	f7fb fa18 	bl	8000828 <HAL_GetTick>
 80053f8:	0002      	movs	r2, r0
 80053fa:	4b1c      	ldr	r3, [pc, #112]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 80053fc:	601a      	str	r2, [r3, #0]
			break;
 80053fe:	e02d      	b.n	800545c <RollBiggestClockWise_Handle+0x160>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005400:	f7fb fa12 	bl	8000828 <HAL_GetTick>
 8005404:	0002      	movs	r2, r0
 8005406:	4b19      	ldr	r3, [pc, #100]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	223c      	movs	r2, #60	; 0x3c
 800540e:	4293      	cmp	r3, r2
 8005410:	d326      	bcc.n	8005460 <RollBiggestClockWise_Handle+0x164>
				DisplayLed(x, y, z, 1);
 8005412:	4b17      	ldr	r3, [pc, #92]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 8005414:	7818      	ldrb	r0, [r3, #0]
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <RollBiggestClockWise_Handle+0x178>)
 8005418:	7819      	ldrb	r1, [r3, #0]
 800541a:	2208      	movs	r2, #8
 800541c:	2301      	movs	r3, #1
 800541e:	f7fe ffd1 	bl	80043c4 <DisplayLed>
				if (x == 6)
 8005422:	4b13      	ldr	r3, [pc, #76]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d106      	bne.n	8005438 <RollBiggestClockWise_Handle+0x13c>
					rollSize = ROLL_BIGGER;
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <RollBiggestClockWise_Handle+0x17c>)
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005430:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <RollBiggestClockWise_Handle+0x16c>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e005      	b.n	8005444 <RollBiggestClockWise_Handle+0x148>
				else x++;
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <RollBiggestClockWise_Handle+0x174>)
 8005442:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005444:	f7fb f9f0 	bl	8000828 <HAL_GetTick>
 8005448:	0002      	movs	r2, r0
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <RollBiggestClockWise_Handle+0x170>)
 800544c:	601a      	str	r2, [r3, #0]
			break;
 800544e:	e007      	b.n	8005460 <RollBiggestClockWise_Handle+0x164>
			break;
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	e006      	b.n	8005462 <RollBiggestClockWise_Handle+0x166>
			break;
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	e004      	b.n	8005462 <RollBiggestClockWise_Handle+0x166>
			break;
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	e002      	b.n	8005462 <RollBiggestClockWise_Handle+0x166>
			break;
 800545c:	46c0      	nop			; (mov r8, r8)
 800545e:	e000      	b.n	8005462 <RollBiggestClockWise_Handle+0x166>
			break;
 8005460:	46c0      	nop			; (mov r8, r8)
	}
}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	200001c1 	.word	0x200001c1
 800546c:	200001c8 	.word	0x200001c8
 8005470:	200001c4 	.word	0x200001c4
 8005474:	200001c5 	.word	0x200001c5
 8005478:	200001c0 	.word	0x200001c0

0800547c <RollBiggerClockWise_Handle>:

void RollBiggerClockWise_Handle()
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <RollBiggerClockWise_Handle+0x16c>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d100      	bne.n	800548a <RollBiggerClockWise_Handle+0xe>
 8005488:	e07a      	b.n	8005580 <RollBiggerClockWise_Handle+0x104>
 800548a:	dd00      	ble.n	800548e <RollBiggerClockWise_Handle+0x12>
 800548c:	e0a0      	b.n	80055d0 <RollBiggerClockWise_Handle+0x154>
 800548e:	2b02      	cmp	r3, #2
 8005490:	d051      	beq.n	8005536 <RollBiggerClockWise_Handle+0xba>
 8005492:	dd00      	ble.n	8005496 <RollBiggerClockWise_Handle+0x1a>
 8005494:	e09c      	b.n	80055d0 <RollBiggerClockWise_Handle+0x154>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <RollBiggerClockWise_Handle+0x24>
 800549a:	2b01      	cmp	r3, #1
 800549c:	d026      	beq.n	80054ec <RollBiggerClockWise_Handle+0x70>
				else x++;
				timeStart = HAL_GetTick();
			}
			break;
		default:
			break;
 800549e:	e097      	b.n	80055d0 <RollBiggerClockWise_Handle+0x154>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80054a0:	f7fb f9c2 	bl	8000828 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	4b51      	ldr	r3, [pc, #324]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	223c      	movs	r2, #60	; 0x3c
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d200      	bcs.n	80054b4 <RollBiggerClockWise_Handle+0x38>
 80054b2:	e08f      	b.n	80055d4 <RollBiggerClockWise_Handle+0x158>
				DisplayLed(x, y, z, 1);
 80054b4:	4b4e      	ldr	r3, [pc, #312]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 80054b6:	7818      	ldrb	r0, [r3, #0]
 80054b8:	4b4e      	ldr	r3, [pc, #312]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 80054ba:	7819      	ldrb	r1, [r3, #0]
 80054bc:	2208      	movs	r2, #8
 80054be:	2301      	movs	r3, #1
 80054c0:	f7fe ff80 	bl	80043c4 <DisplayLed>
				if (y == 6) axisDirection = X_AXIS_1;
 80054c4:	4b4b      	ldr	r3, [pc, #300]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d103      	bne.n	80054d4 <RollBiggerClockWise_Handle+0x58>
 80054cc:	4b46      	ldr	r3, [pc, #280]	; (80055e8 <RollBiggerClockWise_Handle+0x16c>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e005      	b.n	80054e0 <RollBiggerClockWise_Handle+0x64>
				else y++;
 80054d4:	4b47      	ldr	r3, [pc, #284]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 80054de:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80054e0:	f7fb f9a2 	bl	8000828 <HAL_GetTick>
 80054e4:	0002      	movs	r2, r0
 80054e6:	4b41      	ldr	r3, [pc, #260]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 80054e8:	601a      	str	r2, [r3, #0]
			break;
 80054ea:	e073      	b.n	80055d4 <RollBiggerClockWise_Handle+0x158>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80054ec:	f7fb f99c 	bl	8000828 <HAL_GetTick>
 80054f0:	0002      	movs	r2, r0
 80054f2:	4b3e      	ldr	r3, [pc, #248]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	223c      	movs	r2, #60	; 0x3c
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d36c      	bcc.n	80055d8 <RollBiggerClockWise_Handle+0x15c>
				DisplayLed(x, y, z, 1);
 80054fe:	4b3c      	ldr	r3, [pc, #240]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 8005500:	7818      	ldrb	r0, [r3, #0]
 8005502:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 8005504:	7819      	ldrb	r1, [r3, #0]
 8005506:	2208      	movs	r2, #8
 8005508:	2301      	movs	r3, #1
 800550a:	f7fe ff5b 	bl	80043c4 <DisplayLed>
				if (x == 1) axisDirection = Y_AXIS_2;
 800550e:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d103      	bne.n	800551e <RollBiggerClockWise_Handle+0xa2>
 8005516:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <RollBiggerClockWise_Handle+0x16c>)
 8005518:	2202      	movs	r2, #2
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e005      	b.n	800552a <RollBiggerClockWise_Handle+0xae>
				else x--;
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	3b01      	subs	r3, #1
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 8005528:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800552a:	f7fb f97d 	bl	8000828 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	4b2e      	ldr	r3, [pc, #184]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 8005532:	601a      	str	r2, [r3, #0]
			break;
 8005534:	e050      	b.n	80055d8 <RollBiggerClockWise_Handle+0x15c>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005536:	f7fb f977 	bl	8000828 <HAL_GetTick>
 800553a:	0002      	movs	r2, r0
 800553c:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	223c      	movs	r2, #60	; 0x3c
 8005544:	4293      	cmp	r3, r2
 8005546:	d349      	bcc.n	80055dc <RollBiggerClockWise_Handle+0x160>
				DisplayLed(x, y, z, 1);
 8005548:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 800554a:	7818      	ldrb	r0, [r3, #0]
 800554c:	4b29      	ldr	r3, [pc, #164]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 800554e:	7819      	ldrb	r1, [r3, #0]
 8005550:	2208      	movs	r2, #8
 8005552:	2301      	movs	r3, #1
 8005554:	f7fe ff36 	bl	80043c4 <DisplayLed>
				if (y == 1) axisDirection = X_AXIS_2;
 8005558:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d103      	bne.n	8005568 <RollBiggerClockWise_Handle+0xec>
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <RollBiggerClockWise_Handle+0x16c>)
 8005562:	2203      	movs	r2, #3
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e005      	b.n	8005574 <RollBiggerClockWise_Handle+0xf8>
				else y--;
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 8005572:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005574:	f7fb f958 	bl	8000828 <HAL_GetTick>
 8005578:	0002      	movs	r2, r0
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 800557c:	601a      	str	r2, [r3, #0]
			break;
 800557e:	e02d      	b.n	80055dc <RollBiggerClockWise_Handle+0x160>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005580:	f7fb f952 	bl	8000828 <HAL_GetTick>
 8005584:	0002      	movs	r2, r0
 8005586:	4b19      	ldr	r3, [pc, #100]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	223c      	movs	r2, #60	; 0x3c
 800558e:	4293      	cmp	r3, r2
 8005590:	d326      	bcc.n	80055e0 <RollBiggerClockWise_Handle+0x164>
				DisplayLed(x, y, z, 1);
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 8005594:	7818      	ldrb	r0, [r3, #0]
 8005596:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <RollBiggerClockWise_Handle+0x178>)
 8005598:	7819      	ldrb	r1, [r3, #0]
 800559a:	2208      	movs	r2, #8
 800559c:	2301      	movs	r3, #1
 800559e:	f7fe ff11 	bl	80043c4 <DisplayLed>
				if (x == 5)
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d106      	bne.n	80055b8 <RollBiggerClockWise_Handle+0x13c>
					axisDirection = Y_AXIS_1;
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <RollBiggerClockWise_Handle+0x16c>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 80055b0:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <RollBiggerClockWise_Handle+0x17c>)
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e005      	b.n	80055c4 <RollBiggerClockWise_Handle+0x148>
				else x++;
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <RollBiggerClockWise_Handle+0x174>)
 80055c2:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80055c4:	f7fb f930 	bl	8000828 <HAL_GetTick>
 80055c8:	0002      	movs	r2, r0
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <RollBiggerClockWise_Handle+0x170>)
 80055cc:	601a      	str	r2, [r3, #0]
			break;
 80055ce:	e007      	b.n	80055e0 <RollBiggerClockWise_Handle+0x164>
			break;
 80055d0:	46c0      	nop			; (mov r8, r8)
 80055d2:	e006      	b.n	80055e2 <RollBiggerClockWise_Handle+0x166>
			break;
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	e004      	b.n	80055e2 <RollBiggerClockWise_Handle+0x166>
			break;
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	e002      	b.n	80055e2 <RollBiggerClockWise_Handle+0x166>
			break;
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	e000      	b.n	80055e2 <RollBiggerClockWise_Handle+0x166>
			break;
 80055e0:	46c0      	nop			; (mov r8, r8)
	}
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	200001c1 	.word	0x200001c1
 80055ec:	200001c8 	.word	0x200001c8
 80055f0:	200001c4 	.word	0x200001c4
 80055f4:	200001c5 	.word	0x200001c5
 80055f8:	200001c0 	.word	0x200001c0

080055fc <RollMediumClockWise_Handle>:

void RollMediumClockWise_Handle()
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <RollMediumClockWise_Handle+0x16c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d100      	bne.n	800560a <RollMediumClockWise_Handle+0xe>
 8005608:	e07a      	b.n	8005700 <RollMediumClockWise_Handle+0x104>
 800560a:	dd00      	ble.n	800560e <RollMediumClockWise_Handle+0x12>
 800560c:	e0a0      	b.n	8005750 <RollMediumClockWise_Handle+0x154>
 800560e:	2b02      	cmp	r3, #2
 8005610:	d051      	beq.n	80056b6 <RollMediumClockWise_Handle+0xba>
 8005612:	dd00      	ble.n	8005616 <RollMediumClockWise_Handle+0x1a>
 8005614:	e09c      	b.n	8005750 <RollMediumClockWise_Handle+0x154>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <RollMediumClockWise_Handle+0x24>
 800561a:	2b01      	cmp	r3, #1
 800561c:	d026      	beq.n	800566c <RollMediumClockWise_Handle+0x70>
				else x++;
				timeStart = HAL_GetTick();
			}
			break;
		default:
			break;
 800561e:	e097      	b.n	8005750 <RollMediumClockWise_Handle+0x154>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005620:	f7fb f902 	bl	8000828 <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	4b51      	ldr	r3, [pc, #324]	; (800576c <RollMediumClockWise_Handle+0x170>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	223c      	movs	r2, #60	; 0x3c
 800562e:	4293      	cmp	r3, r2
 8005630:	d200      	bcs.n	8005634 <RollMediumClockWise_Handle+0x38>
 8005632:	e08f      	b.n	8005754 <RollMediumClockWise_Handle+0x158>
				DisplayLed(x, y, z, 1);
 8005634:	4b4e      	ldr	r3, [pc, #312]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 8005636:	7818      	ldrb	r0, [r3, #0]
 8005638:	4b4e      	ldr	r3, [pc, #312]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 800563a:	7819      	ldrb	r1, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	2301      	movs	r3, #1
 8005640:	f7fe fec0 	bl	80043c4 <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 8005644:	4b4b      	ldr	r3, [pc, #300]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b05      	cmp	r3, #5
 800564a:	d103      	bne.n	8005654 <RollMediumClockWise_Handle+0x58>
 800564c:	4b46      	ldr	r3, [pc, #280]	; (8005768 <RollMediumClockWise_Handle+0x16c>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e005      	b.n	8005660 <RollMediumClockWise_Handle+0x64>
				else y++;
 8005654:	4b47      	ldr	r3, [pc, #284]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b45      	ldr	r3, [pc, #276]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 800565e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005660:	f7fb f8e2 	bl	8000828 <HAL_GetTick>
 8005664:	0002      	movs	r2, r0
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <RollMediumClockWise_Handle+0x170>)
 8005668:	601a      	str	r2, [r3, #0]
			break;
 800566a:	e073      	b.n	8005754 <RollMediumClockWise_Handle+0x158>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 800566c:	f7fb f8dc 	bl	8000828 <HAL_GetTick>
 8005670:	0002      	movs	r2, r0
 8005672:	4b3e      	ldr	r3, [pc, #248]	; (800576c <RollMediumClockWise_Handle+0x170>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	223c      	movs	r2, #60	; 0x3c
 800567a:	4293      	cmp	r3, r2
 800567c:	d36c      	bcc.n	8005758 <RollMediumClockWise_Handle+0x15c>
				DisplayLed(x, y, z, 1);
 800567e:	4b3c      	ldr	r3, [pc, #240]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 8005680:	7818      	ldrb	r0, [r3, #0]
 8005682:	4b3c      	ldr	r3, [pc, #240]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 8005684:	7819      	ldrb	r1, [r3, #0]
 8005686:	2208      	movs	r2, #8
 8005688:	2301      	movs	r3, #1
 800568a:	f7fe fe9b 	bl	80043c4 <DisplayLed>
				if (x == 2) axisDirection = Y_AXIS_2;
 800568e:	4b38      	ldr	r3, [pc, #224]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d103      	bne.n	800569e <RollMediumClockWise_Handle+0xa2>
 8005696:	4b34      	ldr	r3, [pc, #208]	; (8005768 <RollMediumClockWise_Handle+0x16c>)
 8005698:	2202      	movs	r2, #2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e005      	b.n	80056aa <RollMediumClockWise_Handle+0xae>
				else x--;
 800569e:	4b34      	ldr	r3, [pc, #208]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	4b32      	ldr	r3, [pc, #200]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 80056a8:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80056aa:	f7fb f8bd 	bl	8000828 <HAL_GetTick>
 80056ae:	0002      	movs	r2, r0
 80056b0:	4b2e      	ldr	r3, [pc, #184]	; (800576c <RollMediumClockWise_Handle+0x170>)
 80056b2:	601a      	str	r2, [r3, #0]
			break;
 80056b4:	e050      	b.n	8005758 <RollMediumClockWise_Handle+0x15c>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80056b6:	f7fb f8b7 	bl	8000828 <HAL_GetTick>
 80056ba:	0002      	movs	r2, r0
 80056bc:	4b2b      	ldr	r3, [pc, #172]	; (800576c <RollMediumClockWise_Handle+0x170>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	223c      	movs	r2, #60	; 0x3c
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d349      	bcc.n	800575c <RollMediumClockWise_Handle+0x160>
				DisplayLed(x, y, z, 1);
 80056c8:	4b29      	ldr	r3, [pc, #164]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 80056ca:	7818      	ldrb	r0, [r3, #0]
 80056cc:	4b29      	ldr	r3, [pc, #164]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 80056ce:	7819      	ldrb	r1, [r3, #0]
 80056d0:	2208      	movs	r2, #8
 80056d2:	2301      	movs	r3, #1
 80056d4:	f7fe fe76 	bl	80043c4 <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 80056d8:	4b26      	ldr	r3, [pc, #152]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d103      	bne.n	80056e8 <RollMediumClockWise_Handle+0xec>
 80056e0:	4b21      	ldr	r3, [pc, #132]	; (8005768 <RollMediumClockWise_Handle+0x16c>)
 80056e2:	2203      	movs	r2, #3
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e005      	b.n	80056f4 <RollMediumClockWise_Handle+0xf8>
				else y--;
 80056e8:	4b22      	ldr	r3, [pc, #136]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	4b20      	ldr	r3, [pc, #128]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 80056f2:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80056f4:	f7fb f898 	bl	8000828 <HAL_GetTick>
 80056f8:	0002      	movs	r2, r0
 80056fa:	4b1c      	ldr	r3, [pc, #112]	; (800576c <RollMediumClockWise_Handle+0x170>)
 80056fc:	601a      	str	r2, [r3, #0]
			break;
 80056fe:	e02d      	b.n	800575c <RollMediumClockWise_Handle+0x160>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005700:	f7fb f892 	bl	8000828 <HAL_GetTick>
 8005704:	0002      	movs	r2, r0
 8005706:	4b19      	ldr	r3, [pc, #100]	; (800576c <RollMediumClockWise_Handle+0x170>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	223c      	movs	r2, #60	; 0x3c
 800570e:	4293      	cmp	r3, r2
 8005710:	d326      	bcc.n	8005760 <RollMediumClockWise_Handle+0x164>
				DisplayLed(x, y, z, 1);
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 8005714:	7818      	ldrb	r0, [r3, #0]
 8005716:	4b17      	ldr	r3, [pc, #92]	; (8005774 <RollMediumClockWise_Handle+0x178>)
 8005718:	7819      	ldrb	r1, [r3, #0]
 800571a:	2208      	movs	r2, #8
 800571c:	2301      	movs	r3, #1
 800571e:	f7fe fe51 	bl	80043c4 <DisplayLed>
				if (x == 4)
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d106      	bne.n	8005738 <RollMediumClockWise_Handle+0x13c>
					rollSize = ROLL_SMALL;
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <RollMediumClockWise_Handle+0x17c>)
 800572c:	2203      	movs	r2, #3
 800572e:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <RollMediumClockWise_Handle+0x16c>)
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e005      	b.n	8005744 <RollMediumClockWise_Handle+0x148>
				else x++;
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	b2da      	uxtb	r2, r3
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <RollMediumClockWise_Handle+0x174>)
 8005742:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005744:	f7fb f870 	bl	8000828 <HAL_GetTick>
 8005748:	0002      	movs	r2, r0
 800574a:	4b08      	ldr	r3, [pc, #32]	; (800576c <RollMediumClockWise_Handle+0x170>)
 800574c:	601a      	str	r2, [r3, #0]
			break;
 800574e:	e007      	b.n	8005760 <RollMediumClockWise_Handle+0x164>
			break;
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	e006      	b.n	8005762 <RollMediumClockWise_Handle+0x166>
			break;
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	e004      	b.n	8005762 <RollMediumClockWise_Handle+0x166>
			break;
 8005758:	46c0      	nop			; (mov r8, r8)
 800575a:	e002      	b.n	8005762 <RollMediumClockWise_Handle+0x166>
			break;
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	e000      	b.n	8005762 <RollMediumClockWise_Handle+0x166>
			break;
 8005760:	46c0      	nop			; (mov r8, r8)
	}
}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200001c1 	.word	0x200001c1
 800576c:	200001c8 	.word	0x200001c8
 8005770:	200001c4 	.word	0x200001c4
 8005774:	200001c5 	.word	0x200001c5
 8005778:	200001c0 	.word	0x200001c0

0800577c <RollSmallClockWise_Handle>:

void RollSmallClockWise_Handle()
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005780:	4b49      	ldr	r3, [pc, #292]	; (80058a8 <RollSmallClockWise_Handle+0x12c>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d051      	beq.n	800582c <RollSmallClockWise_Handle+0xb0>
 8005788:	dd00      	ble.n	800578c <RollSmallClockWise_Handle+0x10>
 800578a:	e082      	b.n	8005892 <RollSmallClockWise_Handle+0x116>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <RollSmallClockWise_Handle+0x1a>
 8005790:	2b01      	cmp	r3, #1
 8005792:	d026      	beq.n	80057e2 <RollSmallClockWise_Handle+0x66>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 8005794:	e07d      	b.n	8005892 <RollSmallClockWise_Handle+0x116>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005796:	f7fb f847 	bl	8000828 <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	4b43      	ldr	r3, [pc, #268]	; (80058ac <RollSmallClockWise_Handle+0x130>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	223c      	movs	r2, #60	; 0x3c
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d200      	bcs.n	80057aa <RollSmallClockWise_Handle+0x2e>
 80057a8:	e075      	b.n	8005896 <RollSmallClockWise_Handle+0x11a>
				DisplayLed(x, y, z, 1);
 80057aa:	4b41      	ldr	r3, [pc, #260]	; (80058b0 <RollSmallClockWise_Handle+0x134>)
 80057ac:	7818      	ldrb	r0, [r3, #0]
 80057ae:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 80057b0:	7819      	ldrb	r1, [r3, #0]
 80057b2:	2208      	movs	r2, #8
 80057b4:	2301      	movs	r3, #1
 80057b6:	f7fe fe05 	bl	80043c4 <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 80057ba:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d103      	bne.n	80057ca <RollSmallClockWise_Handle+0x4e>
 80057c2:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <RollSmallClockWise_Handle+0x12c>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e005      	b.n	80057d6 <RollSmallClockWise_Handle+0x5a>
				else y++;
 80057ca:	4b3a      	ldr	r3, [pc, #232]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b38      	ldr	r3, [pc, #224]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 80057d4:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80057d6:	f7fb f827 	bl	8000828 <HAL_GetTick>
 80057da:	0002      	movs	r2, r0
 80057dc:	4b33      	ldr	r3, [pc, #204]	; (80058ac <RollSmallClockWise_Handle+0x130>)
 80057de:	601a      	str	r2, [r3, #0]
			break;
 80057e0:	e059      	b.n	8005896 <RollSmallClockWise_Handle+0x11a>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80057e2:	f7fb f821 	bl	8000828 <HAL_GetTick>
 80057e6:	0002      	movs	r2, r0
 80057e8:	4b30      	ldr	r3, [pc, #192]	; (80058ac <RollSmallClockWise_Handle+0x130>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	223c      	movs	r2, #60	; 0x3c
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d352      	bcc.n	800589a <RollSmallClockWise_Handle+0x11e>
				DisplayLed(x, y, z, 1);
 80057f4:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <RollSmallClockWise_Handle+0x134>)
 80057f6:	7818      	ldrb	r0, [r3, #0]
 80057f8:	4b2e      	ldr	r3, [pc, #184]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 80057fa:	7819      	ldrb	r1, [r3, #0]
 80057fc:	2208      	movs	r2, #8
 80057fe:	2301      	movs	r3, #1
 8005800:	f7fe fde0 	bl	80043c4 <DisplayLed>
				if (x == 3) axisDirection = Y_AXIS_2;
 8005804:	4b2a      	ldr	r3, [pc, #168]	; (80058b0 <RollSmallClockWise_Handle+0x134>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d103      	bne.n	8005814 <RollSmallClockWise_Handle+0x98>
 800580c:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <RollSmallClockWise_Handle+0x12c>)
 800580e:	2202      	movs	r2, #2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e005      	b.n	8005820 <RollSmallClockWise_Handle+0xa4>
				else x--;
 8005814:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <RollSmallClockWise_Handle+0x134>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <RollSmallClockWise_Handle+0x134>)
 800581e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005820:	f7fb f802 	bl	8000828 <HAL_GetTick>
 8005824:	0002      	movs	r2, r0
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <RollSmallClockWise_Handle+0x130>)
 8005828:	601a      	str	r2, [r3, #0]
			break;
 800582a:	e036      	b.n	800589a <RollSmallClockWise_Handle+0x11e>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 800582c:	f7fa fffc 	bl	8000828 <HAL_GetTick>
 8005830:	0002      	movs	r2, r0
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <RollSmallClockWise_Handle+0x130>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	223c      	movs	r2, #60	; 0x3c
 800583a:	4293      	cmp	r3, r2
 800583c:	d32f      	bcc.n	800589e <RollSmallClockWise_Handle+0x122>
				DisplayLed(x, y, z, 1);
 800583e:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <RollSmallClockWise_Handle+0x134>)
 8005840:	7818      	ldrb	r0, [r3, #0]
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 8005844:	7819      	ldrb	r1, [r3, #0]
 8005846:	2208      	movs	r2, #8
 8005848:	2301      	movs	r3, #1
 800584a:	f7fe fdbb 	bl	80043c4 <DisplayLed>
				if (y == 3)
 800584e:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d111      	bne.n	800587a <RollSmallClockWise_Handle+0xfe>
					clearCube();
 8005856:	f7fd ff20 	bl	800369a <clearCube>
					axisDirection = Y_AXIS_1;
 800585a:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <RollSmallClockWise_Handle+0x12c>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8005860:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <RollSmallClockWise_Handle+0x13c>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
					x = 0;
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <RollSmallClockWise_Handle+0x134>)
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
					y = 7;
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 800586e:	2207      	movs	r2, #7
 8005870:	701a      	strb	r2, [r3, #0]
					directRotate = COUNTER_CLOCKWISE;
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <RollSmallClockWise_Handle+0x140>)
 8005874:	2201      	movs	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e005      	b.n	8005886 <RollSmallClockWise_Handle+0x10a>
				else y--;
 800587a:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	3b01      	subs	r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <RollSmallClockWise_Handle+0x138>)
 8005884:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005886:	f7fa ffcf 	bl	8000828 <HAL_GetTick>
 800588a:	0002      	movs	r2, r0
 800588c:	4b07      	ldr	r3, [pc, #28]	; (80058ac <RollSmallClockWise_Handle+0x130>)
 800588e:	601a      	str	r2, [r3, #0]
			break;
 8005890:	e005      	b.n	800589e <RollSmallClockWise_Handle+0x122>
			break;
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	e004      	b.n	80058a0 <RollSmallClockWise_Handle+0x124>
			break;
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	e002      	b.n	80058a0 <RollSmallClockWise_Handle+0x124>
			break;
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	e000      	b.n	80058a0 <RollSmallClockWise_Handle+0x124>
			break;
 800589e:	46c0      	nop			; (mov r8, r8)
	}
}
 80058a0:	46c0      	nop			; (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	200001c1 	.word	0x200001c1
 80058ac:	200001c8 	.word	0x200001c8
 80058b0:	200001c4 	.word	0x200001c4
 80058b4:	200001c5 	.word	0x200001c5
 80058b8:	200001c0 	.word	0x200001c0
 80058bc:	200001c2 	.word	0x200001c2

080058c0 <SpiralCube_Set_State>:

void SpiralCube_Set_State()
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
	y = 7;
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <SpiralCube_Set_State+0x24>)
 80058c6:	2207      	movs	r2, #7
 80058c8:	701a      	strb	r2, [r3, #0]
	directRotate = COUNTER_CLOCKWISE;
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <SpiralCube_Set_State+0x28>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
	axisDirection = Y_AXIS_1;
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <SpiralCube_Set_State+0x2c>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
	spiralDirect = SPIRAL_IN;
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <SpiralCube_Set_State+0x30>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
}
 80058dc:	46c0      	nop			; (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	200001c5 	.word	0x200001c5
 80058e8:	200001c2 	.word	0x200001c2
 80058ec:	200001c1 	.word	0x200001c1
 80058f0:	200001c3 	.word	0x200001c3

080058f4 <TransmitData>:
#include "transmit_data.h"

extern SPI_HandleTypeDef hspi1;

void TransmitData(uint8_t column_data[], uint8_t layer_data) //ok
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	000a      	movs	r2, r1
 80058fe:	1cfb      	adds	r3, r7, #3
 8005900:	701a      	strb	r2, [r3, #0]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 8005902:	2308      	movs	r3, #8
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	1cfa      	adds	r2, r7, #3
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 800590c:	2301      	movs	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e00d      	b.n	800592e <TransmitData+0x3a>
	{
		dataOut[i] = column_data[i-1];
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	3b01      	subs	r3, #1
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	7819      	ldrb	r1, [r3, #0]
 800591c:	2308      	movs	r3, #8
 800591e:	18fa      	adds	r2, r7, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	18d3      	adds	r3, r2, r3
 8005924:	1c0a      	adds	r2, r1, #0
 8005926:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	3301      	adds	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b08      	cmp	r3, #8
 8005932:	ddee      	ble.n	8005912 <TransmitData+0x1e>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8005934:	2390      	movs	r3, #144	; 0x90
 8005936:	05db      	lsls	r3, r3, #23
 8005938:	2200      	movs	r2, #0
 800593a:	2140      	movs	r1, #64	; 0x40
 800593c:	0018      	movs	r0, r3
 800593e:	f7fb fa5e 	bl	8000dfe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8005942:	2308      	movs	r3, #8
 8005944:	18f9      	adds	r1, r7, r3
 8005946:	4808      	ldr	r0, [pc, #32]	; (8005968 <TransmitData+0x74>)
 8005948:	2364      	movs	r3, #100	; 0x64
 800594a:	2209      	movs	r2, #9
 800594c:	f7fc f91a 	bl	8001b84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8005950:	2390      	movs	r3, #144	; 0x90
 8005952:	05db      	lsls	r3, r3, #23
 8005954:	2201      	movs	r2, #1
 8005956:	2140      	movs	r1, #64	; 0x40
 8005958:	0018      	movs	r0, r3
 800595a:	f7fb fa50 	bl	8000dfe <HAL_GPIO_WritePin>
}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	46bd      	mov	sp, r7
 8005962:	b006      	add	sp, #24
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	20000030 	.word	0x20000030

0800596c <__libc_init_array>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	2600      	movs	r6, #0
 8005970:	4d0c      	ldr	r5, [pc, #48]	; (80059a4 <__libc_init_array+0x38>)
 8005972:	4c0d      	ldr	r4, [pc, #52]	; (80059a8 <__libc_init_array+0x3c>)
 8005974:	1b64      	subs	r4, r4, r5
 8005976:	10a4      	asrs	r4, r4, #2
 8005978:	42a6      	cmp	r6, r4
 800597a:	d109      	bne.n	8005990 <__libc_init_array+0x24>
 800597c:	2600      	movs	r6, #0
 800597e:	f000 f821 	bl	80059c4 <_init>
 8005982:	4d0a      	ldr	r5, [pc, #40]	; (80059ac <__libc_init_array+0x40>)
 8005984:	4c0a      	ldr	r4, [pc, #40]	; (80059b0 <__libc_init_array+0x44>)
 8005986:	1b64      	subs	r4, r4, r5
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	42a6      	cmp	r6, r4
 800598c:	d105      	bne.n	800599a <__libc_init_array+0x2e>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	00b3      	lsls	r3, r6, #2
 8005992:	58eb      	ldr	r3, [r5, r3]
 8005994:	4798      	blx	r3
 8005996:	3601      	adds	r6, #1
 8005998:	e7ee      	b.n	8005978 <__libc_init_array+0xc>
 800599a:	00b3      	lsls	r3, r6, #2
 800599c:	58eb      	ldr	r3, [r5, r3]
 800599e:	4798      	blx	r3
 80059a0:	3601      	adds	r6, #1
 80059a2:	e7f2      	b.n	800598a <__libc_init_array+0x1e>
 80059a4:	08005a84 	.word	0x08005a84
 80059a8:	08005a84 	.word	0x08005a84
 80059ac:	08005a84 	.word	0x08005a84
 80059b0:	08005a88 	.word	0x08005a88

080059b4 <memset>:
 80059b4:	0003      	movs	r3, r0
 80059b6:	1882      	adds	r2, r0, r2
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d100      	bne.n	80059be <memset+0xa>
 80059bc:	4770      	bx	lr
 80059be:	7019      	strb	r1, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	e7f9      	b.n	80059b8 <memset+0x4>

080059c4 <_init>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr

080059d0 <_fini>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr
